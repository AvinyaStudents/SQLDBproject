USE [DanpheEMR]
GO
/****** Object:  User [DanpheEMR]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE USER [DanpheEMR] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[DanpheEMR]
GO
/****** Object:  User [IIS APPPOOL\CMH_Danphe_LIVE]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE USER [IIS APPPOOL\CMH_Danphe_LIVE] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [IIS APPPOOL\CMH_Danphe_Main]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE USER [IIS APPPOOL\CMH_Danphe_Main] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [r_danphe]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE USER [r_danphe] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SERVER\Administrator]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE USER [SERVER\Administrator] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user_danphe_r]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE USER [user_danphe_r] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [DanpheEMR]
GO
ALTER ROLE [db_owner] ADD MEMBER [IIS APPPOOL\CMH_Danphe_LIVE]
GO
ALTER ROLE [db_owner] ADD MEMBER [IIS APPPOOL\CMH_Danphe_Main]
GO
ALTER ROLE [db_datareader] ADD MEMBER [r_danphe]
GO
ALTER ROLE [db_owner] ADD MEMBER [SERVER\Administrator]
GO
ALTER ROLE [db_backupoperator] ADD MEMBER [user_danphe_r]
GO
ALTER ROLE [db_datareader] ADD MEMBER [user_danphe_r]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [user_danphe_r]
GO
/****** Object:  Schema [DanpheEMR]    Script Date: 4/12/2025 9:35:45 AM ******/
CREATE SCHEMA [DanpheEMR]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ACC_FIRST_LETTER_FROM_WORD]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create the function to get the first letter of each word.
Create Function [dbo].[FN_ACC_FIRST_LETTER_FROM_WORD]
(
   @str Varchar(Max) -- Variable for string
)
RETURNS Varchar(Max)
BEGIN
DECLARE @retval NVARCHAR(2000);
    SET @str=RTRIM(LTRIM(@str));
    SET @retval=LEFT(@str,1);

    WHILE CHARINDEX(' ',@str,1)>0 BEGIN
        SET @str=LTRIM(RIGHT(@str,LEN(@str)-CHARINDEX(' ',@str,1)));
        SET @retval+=LEFT(@str,1);
    END

    RETURN @retval;
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ACC_GetIncomeLedgerId]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_ACC_GetIncomeLedgerId]
 (@ServiceDepartmentId Varchar(200),@ItemId INT, @HospitalId INT)
RETURNS Varchar(300)

AS
BEGIN	
  Declare @retLedgerId INT
  IF exists(select top 1  * from ACC_MST_Hospital where HospitalId=@HospitalId and IsActive=1 AND HospitalShortName='CHARAK')
	  Begin
		    set @retLedgerId= (select LedgerId from ACC_Ledger where HospitalId = @HospitalId AND [Name]='RR_INCOME_SERVICESINCOME_SERVICES')
	  End
  ELSE 
	  Begin   
	  set @retLedgerId=  
	  ( select  LedgerId from ACC_Bill_LedgerMapping bm   where bm.ServiceDepartmentId= @ServiceDepartmentId
				AND bm.ItemId = @ItemId 
				AND bm.HospitalId =	 @HospitalId       
	 )
 
	  END
  return @retLedgerId
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_ACC_GetIncomeLedgerName]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 =============================================
 Author:		<salakha>
 Create date: <23 Nov 2018>
 Description:	<get income ledgers>
change history:

S.No    Author/Date                              Remarks
--------------------------------------------------------------------
1.    Sud/Nagesh: 20Jun'20                   Updated for HospitalId
2.    vikas/nageshBB : 14th Jul 2020		 fixed ledgername issue for billing transfer to accounting.
 =============================================
select  dbo.[FN_ACC_GetIncomeLedgerName] ('LABORATORY','')
*/
CREATE FUNCTION [dbo].[FN_ACC_GetIncomeLedgerName]
 (@ServiceDeptName Varchar(200),@ItemName Varchar(200), @HospitalId INT)
RETURNS Varchar(300)

AS
BEGIN	
  Declare @retStringName varchar(300)
  if exists(select top 1  * from ACC_MST_Hospital where HospitalId=@HospitalId and IsActive=1 AND HospitalShortName='charak')
  Begin
       set @retStringName= (select LedgerName from ACC_Ledger
	    where HospitalId = @HospitalId AND [Name]='RR_INCOME_SERVICESINCOME_SERVICES')
  End
  else 
  Begin   
  set @retStringName=  ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
			when (@ServiceDeptName='LABORATORY' and @ItemName='Slide Consultation')  THEN ('Slide Consultation') 
			when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTO') 
			when (@ServiceDeptName='EXTERNAL LAB - 1' or @ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  THEN ('FNAC') 
			when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='CYTOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')
					
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  		THEN ('RADIOLOGY')
		  when (@ServiceDeptName='MISCELLANEOUS')
					OR (@ServiceDeptName='MISCELLENOUS CHARGES')
															then ('MISCELLANEOUS')
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
				OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )
 
  end
  return @retStringname
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ACC_GetNameByCode]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 =============================================
 Author:		<NageshBB>
 Create date: <16 July 2021>
 Description:	<get value by code>
we have table where we saved code and Names for primary group, ledgergroup, coa
This function will return value by code & type. 
Example: This table saved code like 001, 002, 009, 015 and Name column has static name of Ledger/Ledgergroup/coa/primarygroup
suppose there is one ledgergroup 'Reserve and Surplus' (user can update this ledgergroup name from ui)
we have another column Name in table. Name column value update not allowed to anyone and we are using those values in code.
This name calumn means static names. We have static names for Coa, primarygroup, ledgergroup, ledgers
So this function get code and retusn names. 
Suppose we want Ledger for code 015 then we will send 015 and this function will 

change history:

S.No    Author/Date                              Remarks
--------------------------------------------------------------------
1.    NageshBB: 16 July 2021                   function created
 =============================================
select  dbo.[FN_ACC_GetNameByCode]('001',1) 
*/
Create FUNCTION [dbo].[FN_ACC_GetNameByCode]
 (@Code Varchar(200), @HospitalId INT)
RETURNS Varchar(400)

AS
BEGIN	
  Declare @retStringName varchar(400),@Type varchar(100),@Name varchar(400)
  if exists(select top 1 * from ACC_MST_CodeDetails where HospitalId=@HospitalId and Code =@Code)
  Begin
		Set @Type=(select top 1 [Description] from ACC_MST_CodeDetails where HospitalId=@HospitalId and Code =@Code)
        Set @Name=(select top 1 [Name] from ACC_MST_CodeDetails where HospitalId=@HospitalId and Code =@Code)
        
		set @retStringName= 
		case   
		when @Type='PrimaryGroup' then (select top 1 PrimaryGroupName from acc_mst_Primarygroup where PrimaryGroupCode=@Name)
		when @Type= 'COA'
		then (select top 1 ChartOfAccountName from acc_mst_chartofaccounts where COACode=@Name)
		when @Type='LedgerGroup'
		then (select top 1 LedgerGroupName from ACC_MST_LedgerGroup where [Name]=@Name and HospitalId=@HospitalId)
		when @Type= 'LedgerName'
		then (select top 1 LedgerName from ACC_Ledger where [Name]=@Name and @HospitalId=HospitalId)		
		else ''
		end				
  End
  Else
  Begin
		Set @retStringName =''
  End

  return @retStringname
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
  when (@ServiceDeptName='LABORATORY' and @ItemName='Slide Consultation')  THEN ('Slide Consultation') 
 when ((@ServiceDeptName='EXTERNAL LAB - 1' or @ServiceDeptName='LABORATORY') and @ItemName like '%FNAC%')  THEN ('FNAC') 
   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='CYTOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES')  THEN ('LAB CHARGES')	
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  THEN ('RADIOLOGY CHARGES')

          WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' AND ( @ItemName = 'INDOOR-DOCTOR''S VISIT FEE (PER DAY)' OR @ItemName='DOCTOR ROUND CHARGES'))  THEN ('DOCTOR VISIT CHARGES') 
		  WHEN (@ServiceDeptName='Bed Charges' AND @ItemName like '%NICU%' )  THEN ('NICU BED CHARGES') 
		   WHEN (@ServiceDeptName='Bed Charges' AND @ItemName = 'ICU' )  THEN ('ICU BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName = 'SUIT' )  THEN ('SUIT BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName = 'VIP' )  THEN ('VIP BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName = 'ICCU' )  THEN ('ICCU BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName like '%Semi Private With AC%' )  THEN ('Semi Private With AC BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName = 'HCU/MICU/SICU' )  THEN ('HCU/MICU/SICU BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName like '%Cabin%' )  THEN ('CABIN BED CHARGES') 
 WHEN (@ServiceDeptName='Bed Charges' AND @ItemName = 'General' )  THEN ('GENERAL BED CHARGES') 

		  WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' AND ( @ItemName = 'BED CHARGES') )  THEN ('BED CHARGES') 
		  WHEN (@ServiceDeptName='Bed Charges' )  THEN ('BED CHARGES') 
		  WHEN (@ServiceDeptName = 'IPD' AND @ItemName='ADMISSION CHARGES (INDOOR)') THEN 'ADMISSION CHARGES'
		  WHEN (@ServiceDeptName = 'MISCELLENOUS CHARGES' AND @ItemName='Medical Record Charge') THEN 'ADMISSION CHARGES'
		  WHEN (@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS' AND @ItemName = 'BED SIDE ECHO')  THEN ('BED SIDE ECHO') 
		  WHEN(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  WHEN(@ServiceDeptName='OT') then ('OT PROCEDURE CHARGES')
		  WHEN(@ServiceDeptName='General Surgery') then ('OT PROCEDURE CHARGES')
		  WHEN(@ServiceDeptName='OT Major Procedure Charges OBGY') then ('OT PROCEDURE CHARGES')
		  WHEN(@ServiceDeptName='MISCELLENOUS CHARGES') OR (@ServiceDeptName='MISCELLANEOUS') then ('OTHER CHARGES')
		  ELSE (@ServiceDeptName) END 
		 )
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts_14th_Dec_2018]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts_14th_Dec_2018] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
  when (@ServiceDeptName='LABORATORY' and @ItemName='Slide Consultation')  THEN ('Slide Consultation') 
 when ((@ServiceDeptName='EXTERNAL LAB - 1' or @ServiceDeptName='LABORATORY') and @ItemName like '%FNAC%')  THEN ('FNAC') 
   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='CYTOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES')  THEN ('LAB Charges')	
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  THEN ('RADIOLOGY Charges')

          WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' AND ( @ItemName = 'INDOOR-DOCTOR''S VISIT FEE (PER DAY)' OR @ItemName='DOCTOR ROUND CHARGES'))  THEN ('DOCTOR VISIT CHARGES') 
		  WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' AND ( @ItemName = 'BED CHARGES'))  THEN ('BED CHARGES') 
		  WHEN (@ServiceDeptName = 'IPD' AND @ItemName='ADMISSION CHARGES (INDOOR)') THEN 'ADMISSION CHARGE'
		  WHEN (@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS' AND @ItemName = 'BED SIDE ECHO')  THEN ('BED SIDE ECHO') 
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS') OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  WHEN(@ServiceDeptName='OT') then ('OPERATION Charges')
		  WHEN(@ServiceDeptName='MISCELLENOUS CHARGES') OR (@ServiceDeptName='MISCELLANEOUS') then ('MISCELLANEOUS CHARGES')
		  ELSE (@ServiceDeptName) END 
		 )
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts_23rd_Nov_old]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts_23rd_Nov_old] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts Created: 14Sept'18 <sudarshan>
 Description: To get Correct ServiceDepartmentName used in Billing Receipts as per Input ServiceDepartmentName and itemname
 Remarks: We need different groups than that in Reporting so created this function
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Sud/14Sept'18                      Initial Draft
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
  when (@ServiceDeptName='LABORATORY' and @ItemName='Slide Consultation')  THEN ('Slide Consultation') 
 when ((@ServiceDeptName='EXTERNAL LAB - 1' or @ServiceDeptName='LABORATORY') and @ItemName like '%FNAC%')  THEN ('FNAC') 
   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='CYTOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES')  THEN ('LAB Charges')	
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  THEN ('RADIOLOGY Charges')

          WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' AND ( @ItemName = 'INDOOR-DOCTOR''S VISIT FEE (PER DAY)' OR @ItemName='DOCTOR ROUND CHARGES'))  THEN ('DOCTOR VISIT CHARGES') 
		  WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' AND ( @ItemName = 'BED CHARGES'))  THEN ('BED CHARGES') 
		  WHEN (@ServiceDeptName = 'IPD' AND @ItemName='ADMISSION CHARGES (INDOOR)') THEN 'ADMISSION CHARGE'
		  WHEN (@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS' AND @ItemName = 'BED SIDE ECHO')  THEN ('BED SIDE ECHO') 
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS') OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptReportingName]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptReportingName] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: FN_BIL_GetSrvDeptReporingName  Created: 22Aug'18 <sudarshan>
 Description: To get Correct ServiceDepartmentName used in Billing Reports as per Input ServiceDepartmentName
 Remarks: We can extend this function for ItemName as well if needed.
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Sud/22Aug'18                        Initial Draft
 2.       Dinesh/10Sept'18                    passing itemname along with srvDeptName to the function
 3.		  dinesh /14thSep'18      grouped and  merged the labcharges and miscellaneous to the respective single view header 
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
 when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTOPATHOLOGY') 
 when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%bone marrow%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%bone marrow%' ) 
  THEN ('BONE MARROW') 
   when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%slide consultation%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%slide consultation%' ) 
  THEN ('SLIDE CONSULTATION') 
   when (@ServiceDeptName='EXTERNAL LAB - 1' and @ItemName like '%FNAC%' )
    OR (@ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  
	OR (@ServiceDeptName='CYTOLOGY' and @ItemName like '%FNAC%') 
	THEN ('FNAC') 
 when (@ServiceDeptName='CYTOLOGY' )  THEN ('CYTOLOGY') 

   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')
					
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  		THEN ('RADIOLOGY')
		  when (@ServiceDeptName='MISCELLANEOUS')
					OR (@ServiceDeptName='MISCELLENOUS CHARGES')
															then ('MISCELLANEOUS')
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
				OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptReportingName_3rd_jan_2019]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptReportingName_3rd_jan_2019] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: FN_BIL_GetSrvDeptReporingName  Created: 22Aug'18 <sudarshan>
 Description: To get Correct ServiceDepartmentName used in Billing Reports as per Input ServiceDepartmentName
 Remarks: We can extend this function for ItemName as well if needed.
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Sud/22Aug'18                        Initial Draft
 2.       Dinesh/10Sept'18                    passing itemname along with srvDeptName to the function
 3.		  dinesh /14thSep'18      grouped and  merged the labcharges and miscellaneous to the respective single view header 
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
  when (@ServiceDeptName='LABORATORY' and @ItemName='Slide Consultation')  THEN ('Slide Consultation') 
 when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTO') 
 when (@ServiceDeptName='EXTERNAL LAB - 1' or @ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  THEN ('FNAC') 
   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='CYTOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')
					
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  		THEN ('RADIOLOGY')
		  when (@ServiceDeptName='MISCELLANEOUS')
					OR (@ServiceDeptName='MISCELLENOUS CHARGES')
															then ('MISCELLANEOUS')
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
				OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: FN_BIL_GetSrvDeptReporingName  Created: 22Aug'18 <sudarshan>
 Description: To get Correct ServiceDepartmentName used in Billing Reports as per Input ServiceDepartmentName
 Remarks: We can extend this function for ItemName as well if needed.
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Sud/22Aug'18                        Initial Draft
 2.       Dinesh/10Sept'18                    passing itemname along with srvDeptName to the function
 3.		  dinesh /14thSep'18                  grouped and  merged the labcharges and miscellaneous to the respective single view header 
 4.       Dinesh/30thMay'19					  Segregated the lab's FNAC, Cytology, Pap Smear etc
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( 
 CASE
       						 
When @ServiceDeptName='EMERGENCY' 
	  OR @ServiceDeptName='ROOM CHARGES'  
	  Then ('EMERGENCY')                                
When @ServiceDeptName='MEDICINE PROCEDURE' 
	  Then ('MEDICINE')                        
When @ServiceDeptName='LAPROSCOPIC SURGERY'                        
      OR @ServiceDeptName='BIRIATRIC SURGERY'                          
      OR @ServiceDeptName='SURGICAL OPERATIONS'                        
      OR @ServiceDeptName='SURGICAL PROCEDURES'                        
      OR @ServiceDeptName='CRANIAL SURGERY'                            
      OR @ServiceDeptName='SPINAL SURGERY'                             
      OR @ServiceDeptName='PLASTIC SURGERY, BODY SCULPTURE'            
      OR @ServiceDeptName='BREAST'                                     
      OR @ServiceDeptName='BURN SURGERY'                               
      OR @ServiceDeptName='EYE SURGERY'                                
      OR @ServiceDeptName='FACE LIFT'                                  
      OR @ServiceDeptName='GENERAL PLASTIC SURGERY'                    
      OR @ServiceDeptName='HAND SURGERY'                               
      OR @ServiceDeptName='RHINOPLASTY'                                
      OR @ServiceDeptName='TISSUE EXPANDERS'                           
      OR @ServiceDeptName='LIPS & PALATE'                              
      OR @ServiceDeptName='MAXILLA FRACTURES'                          
      OR @ServiceDeptName='MAXILO FACIAL'                              
      OR @ServiceDeptName='NOSE SURGERY'                               
      OR @ServiceDeptName='ARTHROPLASTY'                               
      OR @ServiceDeptName='SPINE SURGERY'                              
      OR @ServiceDeptName='SURGERY CHARGES(PAEDIATRIC)'                
      OR @ServiceDeptName='SURGERY CHARGES (PAEDIATRIC)'               
      OR @ServiceDeptName='DEVICE IMPLANTATION'                        
      OR @ServiceDeptName='General Surgery' 
	  Then ('SURGERY') 
	  When   
	  @ServiceDeptName='GYNAECOLOGY PROCEDURE(OPD ONLY)' and @ItemName='HYDROTUBATION PER CYCLE'
	 OR @ServiceDeptName='OT Minor Procedure Charges OBGY' and @ItemName='Hydrotubation (GA)'  
	 THEN ('HYDROTUBATION')        
	   When   
	  @ServiceDeptName='X-RAY' and @ItemName='HSG'
	 OR @ServiceDeptName='OT Minor Procedure Charges OBGY' and @ItemName='HSG'  
	 THEN ('HSG')   
	  
	 WHEN @ServiceDeptName='NON INVASIVE CARDIOlOGY' and @ItemName='Fetal ECHO'  
	 THEN ('FETAL ECHO')   
	             
WHEN @ServiceDeptName='OT Major Procedure Charges OBGY'            
      OR @ServiceDeptName='OT Minor Procedure Charges OBGY'            
      OR @ServiceDeptName='GENITALS'                                   
      OR @ServiceDeptName='GYNAECOLOGY'                                
      OR @ServiceDeptName='GYNAECOLOGY PROCEDURE(OPD ONLY)'            
      OR @ServiceDeptName='OT GYNAE PROCEDURE INDOOR' 
	  Then ('OBGY')
WHEN @ServiceDeptName='MANDIBULAR DEFORMITY'                       
      OR @ServiceDeptName='FIXED ORTHODONTIC TREATMENT'                
      OR @ServiceDeptName='MAMMOLOGY'                                  
      OR @ServiceDeptName='EXTERNAL FIXATOR APP'                       
      OR @ServiceDeptName='AMPUTATIONS'                                
      OR @ServiceDeptName='MANDIBLE FRACTURES'                         
      OR @ServiceDeptName='Ortho Procedures'                           
      OR @ServiceDeptName='MAMMOGRAPHY' 
	  THEN ('ORTHOPEDIC')
WHEN @ServiceDeptName='SKIN PROCEDURE'  
	  THEN ('DERMATOLOGY')
 WHEN @ServiceDeptName='PAEDIATRIC'                                 
      OR @ServiceDeptName='Warmer Charges'                             
      OR @ServiceDeptName='Delivery Attend'  
	  THEN ('PEDIATRIC')
WHEN @ServiceDeptName='FACIAL NERVE (UNILATERAL)'                  
      OR @ServiceDeptName='NEUROLOGY'
	  THEN ('NEUROLOGY')
WHEN @ServiceDeptName='CARDIOVASCULAR SURGERY'                     
      OR @ServiceDeptName='CORONARY/PERIPHERAL ANGIOGPRAPHY'           
      OR @ServiceDeptName='PROCEDURES IN CATH LAB'  
	  THEN ('CTVS')
WHEN @ServiceDeptName='OPHTHALMOLOGY'
	  THEN ('EYE')
WHEN @ServiceDeptName='ENT Surgeries under L.A.'                   
      OR @ServiceDeptName='ENT Surgeries under G.A.'                   
      OR @ServiceDeptName='EYE PROCEDURE'                              
      OR @ServiceDeptName='EARS SURGERY'                               
      OR @ServiceDeptName='ENT OPERATION'                              
      OR @ServiceDeptName='ENT PROCEDURES' 
	  THEN ('ENT')
WHEN @ServiceDeptName='UROLOGICAL OPERATION'                       
      OR @ServiceDeptName='URETHRAL STRICTURES'  
	  THEN ('UROLOGY')
WHEN @ServiceDeptName='ANASTHESIA'  
	  THEN ('ANAESTHESIA')
WHEN @ServiceDeptName='OT'                                         
      OR @ServiceDeptName='UROLOGY PACKAGE' 
	  THEN ('OT')
WHEN @ServiceDeptName='DEXA'                                       
      OR @ServiceDeptName='IMAGING'                                    
      OR @ServiceDeptName='MRI'                                        
      OR @ServiceDeptName='C.T. SCAN'                                  
      OR @ServiceDeptName='ULTRASOUND'                                 
      OR @ServiceDeptName='ULTRASOUND COLOR DOPPLER'                   
      OR @ServiceDeptName='X-RAY'                                      
      OR @ServiceDeptName='DUCT'                                       
      OR @ServiceDeptName='PERFORMANCE TEST '   
	  THEN ('RADIOLOGY')
WHEN @ServiceDeptName='PHYSIOTHERAPY'
	  THEN ('PHYSIOTHERAPY')
WHEN @ServiceDeptName='BMD-BONEDENSITOMETRY'  
	  THEN ('BONEDENSITOMETRY')
WHEN @ServiceDeptName='ELECTROPHYSIOLOGY STUDIES'
	  THEN ('ELECTROPHYSIOLOGY STUDIES') 
	  ---LAB Items 
 when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
 when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTOPATHOLOGY') 
 when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%bone marrow%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%bone marrow%' ) 
  THEN ('BONE MARROW') 
   when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%slide consultation%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%slide consultation%' ) 
  THEN ('SLIDE CONSULTATION') 
   when (@ServiceDeptName='EXTERNAL LAB - 1' and @ItemName like '%FNAC%' )
    OR (@ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  
	OR (@ServiceDeptName='CYTOLOGY' and @ItemName like '%FNAC%') 
	THEN ('FNAC') 
 when (@ServiceDeptName='CYTOLOGY' )  THEN ('CYTOLOGY') 
 when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')
WHEN @ServiceDeptName='AMBULANCE CHARGES' 
	  THEN('AMBULANCE')
WHEN @ServiceDeptName='DIETARY CHARGES' 
	  THEN('DIETARY')
WHEN @ServiceDeptName='DENTISTRY' 
	  THEN ('DENTISTRY')           
WHEN @ServiceDeptName='NEPHROLOGY'                                 
      OR @ServiceDeptName='NEPHROLOGY/ PACKAGES'  
	  THEN ('NEPHROLOGY')
WHEN @ServiceDeptName='OPD CONSULTATION'  
	  OR @ServiceDeptName='OPD'
	  THEN ('OPD')                         
WHEN @ServiceDeptName='NON INVASIVE CARDIOlOGY' 
	  THEN ('NON INVASIVE CARDIOlOGY')                         
WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' and @ItemName = 'BED CHARGES')  
	  OR (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' and @ItemName ='ICU')
	  OR (@ServiceDeptName='Bed Charges')
	  OR @ServiceDeptName='ICU'  
	  THEN ('BED CHARGES')
WHEN @ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE'
	  THEN ('DOCTOR ROUND CHARGES')
WHEN @ServiceDeptName='PULMONOLOGY '
	  THEN ('PULMONOLOGY')	 
WHEN @ServiceDeptName='GASTROENTEROLOGY'
	  THEN ('GASTROENTEROLOGY') 
WHEN @ServiceDeptName='IPD'	
	  THEN ('ADMISSIONS FEE') 
WHEN @ServiceDeptName='Procedure Charge'	
	  THEN ('PROCEDURE CHARGES')
WHEN @ServiceDeptName='THORACIC SURGICAL PROCEDURES' 
	  THEN ('THORACIC SURGICAL PROCEDURES') 	  
WHEN @ServiceDeptName='PSYCHO TEST: PAPER PENCIL TEST'             
      OR @ServiceDeptName='THERAPY CHARGES'                            
      OR @ServiceDeptName='SIMPLE EXTRACTION'                          
      OR @ServiceDeptName='TRANSPORT'                                  
      OR @ServiceDeptName='LITHOTRIPSYS'                
      OR @ServiceDeptName='THORAX'                                     
      OR @ServiceDeptName='G.I.T.'                                     
      OR @ServiceDeptName='SOFT TISSUE TUMOR SURGERY'                  
      OR @ServiceDeptName='DAY CARE OPERATION'
	  OR @ServiceDeptName='CONSUMEABLES'
	  OR @ServiceDeptName='CONSULTATION CHARGES FOR PRIVATE PATIENT' 
	  OR @ServiceDeptName='OPG-ORTHOPANTOGRAM'                         
      OR @ServiceDeptName='RECONSTRUCTIVE PROCEDURES'          
      OR @ServiceDeptName='LYMPHOEDEMA'  
	  THEN ('ADMINISTRATION')
WHEN @ServiceDeptName='MISCELLENOUS CHARGES'               
      OR @ServiceDeptName='MISCELLANEOUS' 
	  THEN ('MISCELLANEOUS')                 
WHEN @ServiceDeptName='MEDICAL RESIDENT AND NURSING'               
	  THEN ('MEDICAL RESIDENT AND NURSING')                                      

		  ELSE (@ServiceDeptName) END 
		 )

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: FN_BIL_GetSrvDeptReporingName  Created: 22Aug'18 <sudarshan>
 Description: To get Correct ServiceDepartmentName used in Billing Reports as per Input ServiceDepartmentName
 Remarks: We can extend this function for ItemName as well if needed.
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Sud/22Aug'18                        Initial Draft
 2.       Dinesh/10Sept'18                    passing itemname along with srvDeptName to the function
 3.		  dinesh /14thSep'18      grouped and  merged the labcharges and miscellaneous to the respective single view header 
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
 when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTOPATHOLOGY') 
 when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%bone marrow%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%bone marrow%' ) 
  THEN ('BONE MARROW') 
   when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%slide consultation%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%slide consultation%' ) 
  THEN ('SLIDE CONSULTATION') 
   when (@ServiceDeptName='EXTERNAL LAB - 1' and @ItemName like '%FNAC%' )
    OR (@ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  
	OR (@ServiceDeptName='CYTOLOGY' and @ItemName like '%FNAC%') 
	THEN ('FNAC') 
 when (@ServiceDeptName='CYTOLOGY' )  THEN ('CYTOLOGY') 

   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')
		When (@ServiceDeptName='X-RAY' and @ItemName = 'HSG')
		OR (@ServiceDeptName='OT Minor Procedure Charges OBGY' and @ItemName = 'HSG')
		THEN 'HSG'
	When (@ServiceDeptName='GYNAECOLOGY PROCEDURE(OPD ONLY)' and @ItemName = 'HYDROTUBATION PER CYCLE')
		THEN 'HYDROTUBATION'
	When (@ServiceDeptName='NON INVASIVE CARDIOlOGY' and @ItemName = 'Fetal ECHO')
		THEN 'FETAL ECHO'
		WHEN (@ItemName like '%LSCS') 
		OR (@ItemName like '%L.S.C.S%')
		THEN 'LSCS'
	When (@ServiceDeptName='OT Major Procedure Charges OBGY' and @ItemName like '%Myomec%')
		THEN 'MYOMECTOMY'
When (@ServiceDeptName='OT Minor Procedure Charges OBGY' and @ItemName = 'MC SUTURE')
		THEN 'MC SUTURE'
		WHEN @ItemName like '%MVA%'
		THEN 'MVA'
		WHEN @ItemName like '%POLYPECTOMY%'
		THEN 'CERVICAL BIOPSY & POLYPECTOMY'

					
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  		THEN ('RADIOLOGY')
		  when (@ServiceDeptName='MISCELLANEOUS')
					OR (@ServiceDeptName='MISCELLENOUS CHARGES')
															then ('MISCELLANEOUS')
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
				OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptReportingName_Income_Segregation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptReportingName_Income_Segregation] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: FN_BIL_GetSrvDeptReporingName  Created: 22Aug'18 <sudarshan>
 Description: To get Correct ServiceDepartmentName used in Billing Reports as per Input ServiceDepartmentName
 Remarks: We can extend this function for ItemName as well if needed.
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Sud/22Aug'18                        Initial Draft
 2.       Dinesh/10Sept'18                    passing itemname along with srvDeptName to the function
 3.		  dinesh /14thSep'18      grouped and  merged the labcharges and miscellaneous to the respective single view header 
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
   when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTOPATHOLOGY') 
 when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%bone marrow%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%bone marrow%' ) 
  THEN ('BONE MARROW') 
   when (@ServiceDeptName='CYTOLOGY' and  @ItemName like '%slide consultation%' ) 
 OR (@ServiceDeptName='LABORATORY' and  @ItemName like '%slide consultation%' ) 
  THEN ('SLIDE CONSULTATION') 
   when (@ServiceDeptName='EXTERNAL LAB - 1' and @ItemName like '%FNAC%' )
    OR (@ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  
	OR (@ServiceDeptName='CYTOLOGY' and @ItemName like '%FNAC%') 
	THEN ('FNAC') 
 when (@ServiceDeptName='CYTOLOGY' )  THEN ('CYTOLOGY') 


					 when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')



					When (@ItemName like '%OPERATION CHARGE%') Then ('OPERATION CHARGES') 

					WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' and @ItemName='BED CHARGES' or @ItemName='ICU') THEN ('BED CHARGES')
					WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' and @ItemName='INDOOR-DOCTOR''S VISIT FEE (PER DAY)' or 
					@ItemName='DOCTOR ROUND CHARGES' ) Then ('INDOOR DOCTOR VISIT FEE')
					WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' and @ItemName='ADMISSION FEE') THEN ('ADMISSION FEE')
					WHEN (@ServiceDeptName='CHARGES FOR BED DR.VISIT & ADMISSION FEE' and @ItemName='PFT DOCTOR CONSULTATION CHARGES') THEN ('PFT DOCTOR CONSULTATION CHARGES')

					WHEN (@ServiceDeptName='MRI') THEN ('MRI')
					WHEN (@ServiceDeptName='C.T. SCAN') THEN ('C.T. SCAN')
					WHEN (@ServiceDeptName='ULTRASOUND') OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER') THEN ('USG')
					WHEN (@ServiceDeptName='X-RAY') THEN ('X-RAY')
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  		THEN ('RADIOLOGY')
		  when (@ServiceDeptName='MISCELLANEOUS')
					OR (@ServiceDeptName='MISCELLENOUS CHARGES')
															then ('HOSPITAL OTHER CHARGES')
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS') then 'CARDIOLOGY'
			WHEN (@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSrvDeptReportingName_MIS_Report]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetSrvDeptReportingName_MIS_Report] (@ServiceDeptName Varchar(200),@ItemName Varchar(200))
RETURNS Varchar(200)

/*
 File: [FN_BIL_GetSrvDeptReportingName_MIS_Report]  Created: 14Dec2018
 Description: created for Daily MIS report reffered from FN_BIL_GetSrvDeptReporingName
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Ajay/14-12-2018					created the script
 ----------------------------------------------------------------------------
*/

AS
BEGIN
  RETURN ( CASE when (@ServiceDeptName='LABORATORY' and @ItemName='PAP Smear')  THEN ('PAP Smear') 
  when (@ServiceDeptName='LABORATORY' and @ItemName='Slide Consultation')  THEN ('Slide Consultation') 
 when (@ServiceDeptName='LABORATORY' and @ItemName='HISTO')  THEN ('HISTO') 
 when (@ServiceDeptName='EXTERNAL LAB - 1' or @ServiceDeptName='LABORATORY' and @ItemName like '%FNAC%')  THEN ('FNAC') 
   when (@ServiceDeptName='ATOMIC ABSORTION')
					OR(@ServiceDeptName='BIOCHEMISTRY')
					OR(@ServiceDeptName='CLNICAL PATHOLOGY')
					OR(@ServiceDeptName='CLINICAL PATHOLOGY')
					OR(@ServiceDeptName='CYTOLOGY')
					OR(@ServiceDeptName='KIDNEY BIOPSY')
					OR(@ServiceDeptName='SKIN BIOPSY')
					OR(@ServiceDeptName='CONJUNCTIVAL BIOPSY')
					OR(@ServiceDeptName='EXTERNAL LAB-3')
					OR(@ServiceDeptName='EXTERNAL LAB-1')
					OR(@ServiceDeptName='EXTERNAL LAB - 1')
					OR(@ServiceDeptName='EXTERNAL LAB - 2')
					OR(@ServiceDeptName='HISTOPATHOLOGY')
					OR(@ServiceDeptName='IMMUNOHISTROCHEMISTRY')
					OR(@ServiceDeptName='MOLECULAR DIAGNOSTICS')
					OR(@ServiceDeptName='SPECIALISED BIOPHYSICS ASSAYS')
					OR(@ServiceDeptName='SEROLOGY')
					OR(@ServiceDeptName='MICROBIOLOGY')
					OR(@ServiceDeptName='HEMATOLOGY') 
					OR(@ServiceDeptName='LABORATORY')
					OR(@ServiceDeptName='LAB CHARGES') THEN ('PATHOLOGY')
					
		   WHEN (@ServiceDeptName='DUCT')
					OR(@ServiceDeptName='MAMMOLOGY')
					OR(@ServiceDeptName='PERFORMANCE TEST') 
					OR(@ServiceDeptName='MRI')
					OR(@ServiceDeptName='C.T. SCAN')
					OR(@ServiceDeptName='ULTRASOUND')
					OR(@ServiceDeptName='ULTRASOUND COLOR DOPPLER')
					OR(@ServiceDeptName='BMD-BONEDENSITOMETRY')
					OR(@ServiceDeptName='OPG-ORTHOPANTOGRAM')
					OR(@ServiceDeptName='MAMMOGRAPHY')
					OR(@ServiceDeptName='X-RAY')
					OR(@ServiceDeptName='DEXA')
					OR(@ServiceDeptName='IMAGING')  		THEN ('RADIOLOGY')
		  WHEN (@ServiceDeptName='MISCELLANEOUS')
					OR (@ServiceDeptName='MISCELLENOUS CHARGES')
															then ('MISCELLANEOUS')
		  WHEN (@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS' AND @ItemName = 'BED SIDE ECHO')  THEN ('BED SIDE ECHO') 
		  WHEN(@ServiceDeptName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
				OR(@ServiceDeptName='CARDIOVASCULAR SURGERY') 	then ('CTVS')
		  ELSE (@ServiceDeptName) END 
		 )
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_COMMON_GetAllDatesBetweenRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 Table-Valued Function Multi-line for to Get All Dates between Start and End Date

CREATE Function [dbo].[FN_COMMON_GetAllDatesBetweenRange] 
               (   @startDate datetime,
				   @endDate datetime
				)
returns @daterange table( Dates Date) 
  AS
BEGIN
    DECLARE @currentDate Date
    declare @maxDate Date

	set @currentDate=  convert(date,@startDate)
	set @maxDate= convert(date,@endDate)

	    -declare  @daterange table(Dates Date)
        while @currentDate <= @maxDate
		BEGIN
		    insert into @daterange values (@currentDate)
			set @currentDate = DATEADD(DAY,1,@currentDate)
		END
				
    RETURN
END









GO
/****** Object:  UserDefinedFunction [dbo].[FN_COMMON_GetFormattedFiscalYearByDate]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[FN_COMMON_GetFormattedFiscalYearByDate] (@Date Datetime)
RETURNS Varchar(200)
/*
 File: FN_COMMON_GetFormattedFiscalYearByDate  Created: 22 Nov 2018 By NageshBB
 Description: This function will return formatted fiscal Year name . We can give input parameter as date
 Remarks:
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       22 Nov 2018 By NageshBB                       created function
 
 ----------------------------------------------------------------------------
*/
AS
BEGIN
  
	Declare @formattedFiscalYearName varchar(200)	
			                          
	Select @formattedFiscalYearName= (select FiscalYearFormatted from BIL_CFG_FiscalYears where @Date > StartYear and @Date <EndYear);
		 		   
     IF (@formattedFiscalYearName IS NULL)    
        SET @formattedFiscalYearName =''; 
		 
    RETURN @formattedFiscalYearName;  
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Common_GetNepStartEndDate_ByRangeName]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Common_GetNepStartEndDate_ByRangeName] (@InputEngDate Date,  @RangeType Varchar(20))
RETURNS @Daterange table( StartDate Date, EndDate Date) 
  AS
	BEGIN
	
		DECLARE @inputNepDay INT;
		DECLARE @inputNepMonth INT;
		DECLARE @inputNepYear INT;

		DECLARE @inputEngDay INT = DAY(@InputEngDate);
		DECLARE @inputEngMonth INT = MONTH(@InputEngDate);
		DECLARE @inputEngYear INT = YEAR(@InputEngDate);
		
		DECLARE @startDate DATE = @InputEngDate;
		DECLARE @endDate DATE = @InputEngDate;

		---Get the input date Day,Month and Year in Englis Format for Given Input English Date after converting it to Nepali date first----
		SELECT @inputNepDay=inputNepDate.NepDay,@inputNepMonth=inputNepDate.NepMonth,@inputNepYear=inputNepDate.NepYear 
		from (SELECT * FROM EngNepaliDateMapped WHERE EngYear=@inputEngYear AND EngMonth=@inputEngMonth AND EngDay=@inputEngDay) inputNepDate


		-If it is day, then Start Date and End Date will be same and the Same date------
		IF(LOWER(@RangeType)='day')
		BEGIN
			INSERT INTO @daterange(StartDate, EndDate)
			VALUES(@InputEngDate,@InputEngDate)
		END
		-If it is month, then First get the Nepali Year and Month of Corresponding Selected English date-----
		---Then English date of First Day of that Nepali Month of that year will be Start date and last day will be End Date-----
		ELSE IF(LOWER(@RangeType)='month')			
		BEGIN
			SET @startDate = (SELECT CONVERT(DATE,CAST(EngYear AS VARCHAR(4))+'-'+ CAST(EngMonth AS VARCHAR(2))+'-'+ CAST(EngDay AS VARCHAR(2))) FROM EngNepaliDateMapped 
								WHERE NepYear=@inputNepYear and NepMonth=@inputNepMonth and NepDay=1)
			SET @endDate = (SELECT TOP(1) CONVERT(DATE,CAST(EngYear AS VARCHAR(4))+'-'+ CAST(EngMonth AS VARCHAR(2))+'-'+ CAST(EngDay AS VARCHAR(2)))  FROM EngNepaliDateMapped 
								WHERE NepYear=@inputNepYear and NepMonth=@inputNepMonth Order by NepDay DESC)
			INSERT INTO @daterange(StartDate, EndDate)
			VALUES(@startDate,@endDate)
		END
		-If it is year, then First get the Nepali Year of Corresponding Selected English date-----
		---Then English date of First Day of that Nepali year will be Start date and last day will be End Date-----
		ELSE IF(LOWER(@RangeType)='year')
		BEGIN 
		SET @startDate = (SELECT CONVERT(DATE,CAST(EngYear AS VARCHAR(4))+'-'+ CAST(EngMonth AS VARCHAR(2))+'-'+ CAST(EngDay AS VARCHAR(2)))  FROM EngNepaliDateMapped 
							WHERE NepYear=@inputNepYear and NepMonth=1 and NepDay=1)
			SET @endDate = (SELECT TOP(1) CONVERT(DATE,CAST(EngYear AS VARCHAR(4))+'-'+ CAST(EngMonth AS VARCHAR(2))+'-'+ CAST(EngDay AS VARCHAR(2)))  FROM EngNepaliDateMapped
							WHERE NepYear=@inputNepYear and NepMonth=12 Order by NepDay DESC)
			INSERT INTO @daterange(StartDate, EndDate)
			VALUES(@startDate,@endDate)
		END
		
		RETURN
	END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_ConvertEnglishDateToNepali]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_ConvertEnglishDateToNepali]  
(  
   @EnglishDate DATETIME,
   @ShowTime bit = 0
)  
RETURNS VARCHAR(30)  
AS  
BEGIN 
RETURN (
SELECT  
CASE WHEN @ShowTime=1 
THEN CONVERT(VARCHAR(4),NepYear)+'-'+CONVERT(VARCHAR(2),NepMonth)+'-'+CONVERT(VARCHAR(2),NepDay) + ' ' + CONVERT(varchar(15),CONVERT(TIME, @EnglishDate)) 
ELSE
CONVERT(VARCHAR(4),NepYear)+'-'+CONVERT(VARCHAR(2),NepMonth)+'-'+CONVERT(VARCHAR(2),NepDay)
END 
FROM EngNepaliDateMapped WHERE EngYear=YEAR(@EnglishDate) AND EngMonth=MONTH(@EnglishDate) AND EngDay=DAY(@EnglishDate)
)  
END  

GO
/****** Object:  UserDefinedFunction [dbo].[Fn_Danphe_Audit]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  UserDefinedFunction [dbo].[Fn_Danphe_Audit]    Script Date: 23-01-2019 14:59:49 ******/


CREATE FUNCTION [dbo].[Fn_Danphe_Audit]()

RETURNS @FinalTable Table (AuditId Int, InsertedDate DateTime ,DbContext varchar(150),
		MachineUserName varchar(150),MachineName varchar(150),DomainName varchar(150),CallingMethodName varchar(350),
		ChangedByUserId varchar(100),ChangedByUserName varchar(150),Table_Database varchar(150), Table_Name varchar(200), 
		ActionName Varchar(100), PrimaryKey Varchar(200), ColumnValues Varchar(max))
As

/*
 FileName: [Fn_Danphe_Audit]
 Description: This function returns  AuditId, ActionName, PrimaryKey,ChangedByUserName, etc..
 Created: 23Feb'19 <Rajesh>
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      23Jan'19 Rajesh         created         
 -----------------------------------------------------------------------
*/
begin

		Declare @tbl Table (AuditId int, InsertedDate DateTime, DataJson Varchar(max), DatabaseName varchar(100))
		Insert into @tbl(AuditId,InsertedDate,DataJson, DatabaseName)
		select AuditId,InsertedDate,Data 
		,CAST(JSON_VALUE(Data, '$.EntityFrameworkEvent.Database') AS NVARCHAR(100)) AS [DatabaseName]

		from [DanpheAudit]


		Declare @currAuditId INT, @OuterJson Varchar(Max), @InsertedOn DateTime
		While ((Select Count(*)  from @tbl) > 0)
		BEGIN
		   Select Top (1) @currAuditId=AuditId, @InsertedOn=InsertedDate, @OuterJson=DataJson from @tbl
	
		 Insert INto @FinalTable(AuditId,InsertedDate,DbContext,MachineUserName,MachineName,DomainName,
		 CallingMethodName,ChangedByUserId,ChangedByUserName,Table_Database,Table_Name, ActionName,PrimaryKey,ColumnValues) 


		  SELECT @currAuditId, @InsertedOn,
			CAST(JSON_VALUE(@OuterJson, '$.EventType') AS NVARCHAR(255)) AS DbContext,
			CAST(JSON_VALUE(@OuterJson, '$.Environment.UserName') AS NVARCHAR(150)) AS MachineUserName,
			CAST(JSON_VALUE(@OuterJson, '$.Environment.MachineName') AS NVARCHAR(150)) AS MachineName,
			CAST(JSON_VALUE(@OuterJson, '$.Environment.DomainName') AS NVARCHAR(150)) AS DomainName,
			CAST(JSON_VALUE(@OuterJson, '$.Environment.CallingMethodName') AS NVARCHAR(150)) AS CallingMethodName,		
			CAST(JSON_VALUE(@OuterJson, '$.ChangedByUserId') AS NVARCHAR(150)) AS ChangedByUserId,
			CAST(JSON_VALUE(@OuterJson, '$.ChangedByUserName') AS NVARCHAR(150)) AS ChangedByUserName,
			CAST(JSON_VALUE(@OuterJson, '$.EntityFrameworkEvent.Database') AS NVARCHAR(100)) AS Table_Database,
		    JSON_VALUE(value, '$.Table') as TableName,
		    JSON_VALUE(value, '$.Action') as ActionName,
		    JSON_Query(value, '$.PrimaryKey') as PrimaryKey,
			JSON_Query(value, '$.ColumnValues') as ColumnValues
			

		   FROM OPENJSON(@OuterJson, '$.EntityFrameworkEvent.Entries') 
		  Delete from @tbl where AuditId=@currAuditId

    END
  

	return 

end

GO
/****** Object:  UserDefinedFunction [dbo].[FN_Ip_Billing_Bed_Quantity_Calculation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Ip_Billing_Bed_Quantity_Calculation]( @StartDate datetime, @EndDate datetime null, @AdmissionDate datetime)
RETURNS int
AS
BEGIN

   Declare the return variable here
  DECLARE @Quantity int;
  DECLARE @CheckOutTime Datetime;
  DECLARE @EndDateTime Datetime;
  DECLARE @StartDateTime DateTime;
  
  set  @CheckOutTime = CONVERT(DATETIME, CONVERT(CHAR(8), GETDATE(), 112)  + ' ' + CONVERT(CHAR(8), @AdmissionDate, 108));
  
  IF (@EndDate IS NULL)
  BEGIN
		IF(@CheckOutTime <= GETDATE())
		BEGIN 
			SET @Quantity = (select cast((select DATEDIFF(HOUR,@StartDate,@CheckOutTime)) as decimal)/24 + 1)
		END
		ELSE
		BEGIN
		SET @Quantity = (select cast((select DATEDIFF(HOUR,@StartDate,@CheckOutTime)) as decimal)/24 + 1)
		END
  END
  ELSE
   BEGIN 
	SET  @EndDateTime = CONVERT(DATETIME, CONVERT(CHAR(8), @EndDate, 112)  + ' ' + CONVERT(CHAR(8), @AdmissionDate, 108))
	if(@EndDate > @EndDateTime)
	BEGIN
		SET @Quantity =(select  cast(DATEDIFF(HOUR,@StartDate,@EndDate)as decimal)/24   ) 
	END
	ELSE
	BEGIN
		SET @StartDateTime = CONVERT(DATETIME, CONVERT(CHAR(8), @StartDate, 112)  + ' ' + CONVERT(CHAR(8), @AdmissionDate, 108))
		SET @EndDateTime = DATEADD(DAY, -1, @EndDateTime)
		IF(@StartDateTime > @StartDate)
		BEGIN
			SET @StartDateTime=DATEADD(DAY, -1, @StartDateTime)
		END
		SET @Quantity = (select cast ( cast(DATEDIFF(HOUR,@StartDateTime,@EndDateTime)as decimal)/24 as int )  )	
	END
	if(@EndDateTime >= @EndDate )
	BEGIN
	  SET @Quantity = (select cast ( cast(DATEDIFF(HOUR,@StartDate,@EndDate)as decimal)/24 as int ) + 1 )
	END
	ELSE
	BEGIN
    SET @Quantity =(select  cast(DATEDIFF(HOUR,@StartDate,@EndDate)as decimal)/24   ) 
	END
  END
  RETURN @Quantity;

END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Temp_GetLast7Months]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
table valued function to get startday of last 6 months, including current--sudarshan: 9July2017
CREATE Function [dbo].[FN_Temp_GetLast7Months] ()
returns @daterange table( Dates Date) 
  AS

  /*
  this function is created for temporary purpose, need to rename it soon: sudarshan:9July2017
  */
BEGIN
    
	declare @startMonth datetime = Dateadd(Month,-5,(DATEFROMPARTS(YEAR(getdate()),MONTH(getdate()),1)))
	declare @endMonth datetime = Dateadd(DAY,-1, DATEADD(month,1,(DATEFROMPARTS(YEAR(getdate()),MONTH(getdate()),1))))


	-declare  @daterange table(Dates Date)
        while @startMonth <= @endMonth
		BEGIN
		    insert into @daterange values (@startMonth)
			set @startMonth = DATEADD(MONTH,1,@startMonth)
		END
					
    RETURN
END










GO
/****** Object:  UserDefinedFunction [dbo].[GetDobAgeRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 to get the Name of the Age in our format: eg-- 0-9Years, 10-19Years, based on input dateTimes.
 CreatedBy: sagar
*/
CREATE FUNCTION [dbo].[GetDobAgeRange]
  ( @Dob DATETIME, 
    @comparisonDate DATETIME )
    RETURNS VARCHAR(30)
    AS
    BEGIN
    RETURN CASE WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<10 THEN '0-9 Years'
	            WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<20 THEN '10-19 Years'
			    WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)>19 AND DATEDIFF (YEAR, @Dob, @comparisonDate)<60 THEN '20-59 Years'
			    ELSE '>=60 Years'END 

    END









GO
/****** Object:  UserDefinedFunction [dbo].[GetDobAgeRangeGestationalWeek]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetDobAgeRangeGestationalWeek]
  ( @Dob DATETIME, 
    @comparisonDate DATETIME )
    RETURNS VARCHAR(30)
    AS
    BEGIN
    RETURN CASE 
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<20  THEN '<20'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<=34THEN '20-34'
				ELSE '>34'
END 
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetDobAgeRangeInpatientOutcome]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 to get the Name of the Age in a format needed in  InpateintOutcome, based on input dateTimes.
 CreatedBy: Ramavtar
*/
CREATE FUNCTION [dbo].[GetDobAgeRangeInpatientOutcome]
  ( @Dob DATETIME, 
    @comparisonDate DATETIME )
    RETURNS VARCHAR(30)
    AS
    BEGIN
    RETURN CASE WHEN DATEDIFF (DAY, @Dob, @comparisonDate)<29  THEN '0-28Days'
	            WHEN DATEDIFF (DAY, @Dob, @comparisonDate)<366 THEN '29Days-1Year'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<5  THEN '01-04Years'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<15 THEN '05-14Years'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<20 THEN	'15-19Years'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<30 THEN	'20-29Years'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<40 THEN	'30-39Years'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<50 THEN	'40-49Years'
				WHEN DATEDIFF (YEAR, @Dob, @comparisonDate)<60 THEN	'50-59Years'
				ELSE '>=60Years'
END 
END
GO
/****** Object:  UserDefinedFunction [dbo].[GetOpeningStockCount]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetOpeningStockCount](@FromDate Date, @ToDate Date, @ItemId int)  
RETURNS int   
AS   
 Returns the Opening Stock Quantity on Selected From Date Parameter.  
BEGIN  
      
	Declare @OpeningStkCount int;
	Declare @StkAvilQty int;
	Declare @PurQty int;
	Declare @SaleQty int;
    
		 
   Select @StkAvilQty = ISNULL(AvailableQuantity,0) from PHRM_Stock 
						 where ItemId = @ItemId
                        
	Select @PurQty= ISNULL(Sum(grItm.ReceivedQuantity),0)  from PHRM_GoodsReceiptItems grItm
	               where Convert(date,CreatedOn) Between   @FromDate and @ToDate and ItemId =@ItemId
				   
	         

    Select @SaleQty =  ISNULL(Sum(Quantity),0) from PHRM_TXN_InvoiceItems
	where Convert(date,CreatedOn) Between  @FromDate and @ToDate and ItemId =@ItemId

	Select @OpeningStkCount = ((@StkAvilQty - @PurQty) + @SaleQty);
	 		   
     IF (@OpeningStkCount IS NULL)    
        SET @OpeningStkCount = 0; 
		 
    RETURN @OpeningStkCount;  
END; 
GO
/****** Object:  UserDefinedFunction [dbo].[SplitString]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SplitString]
(    
      @Input NVARCHAR(MAX),
      @Character CHAR(1)
)
RETURNS @Output TABLE (
      Item NVARCHAR(1000)
)
AS
BEGIN
      DECLARE @StartIndex INT, @EndIndex INT
 
      SET @StartIndex = 1
      IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
      BEGIN
            SET @Input = @Input + @Character
      END
 
      WHILE CHARINDEX(@Character, @Input) > 0
      BEGIN
            SET @EndIndex = CHARINDEX(@Character, @Input)
           
            INSERT INTO @Output(Item)
            SELECT SUBSTRING(@Input, @StartIndex, @EndIndex - 1)
           
            SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
      END
 
      RETURN
END
GO
/****** Object:  Table [dbo].[PHRM_TXN_Invoice]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_Invoice](
	[InvoiceId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[CounterId] [int] NULL,
	[IsOutdoorPat] [bit] NULL,
	[TotalQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[PaidAmount] [decimal](16, 4) NULL,
	[BilStatus] [varchar](20) NULL,
	[CreditAmount] [decimal](16, 4) NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreateOn] [datetime] NULL,
	[Tender] [decimal](16, 4) NULL,
	[Change] [decimal](16, 4) NULL,
	[PrintCount] [int] NULL,
	[Adjustment] [decimal](10, 2) NULL,
	[InvoicePrintId] [int] NULL,
	[IsReturn] [bit] NULL,
	[IsRealtime] [bit] NULL,
	[IsRemoteSynced] [bit] NULL,
	[FiscalYearId] [int] NULL,
	[IsTransferredToACC] [bit] NULL,
	[ProviderId] [int] NULL,
	[VisitType] [varchar](20) NULL,
	[DepositDeductAmount] [decimal](16, 4) NULL,
	[PaymentMode] [varchar](50) NULL,
	[SettlementId] [int] NULL,
	[PaidDate] [datetime] NULL,
	[CreditDate] [datetime] NULL,
	[OrganizationId] [int] NULL,
	[StoreId] [int] NOT NULL,
	[ClaimCode] [bigint] NULL,
	[DiscountPer] [float] NULL,
 CONSTRAINT [PK_PHRM_TXN_Invoice] PRIMARY KEY CLUSTERED 
(
	[InvoiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_InvoiceReturn]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_InvoiceReturn](
	[InvoiceReturnId] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NULL,
	[PatientId] [int] NULL,
	[CounterId] [int] NULL,
	[CreditNoteID] [int] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[PaidAmount] [decimal](16, 4) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[Tender] [decimal](16, 4) NULL,
	[Change] [decimal](16, 4) NULL,
	[PrintCount] [int] NULL,
	[Adjustment] [decimal](10, 2) NULL,
	[IsRealtime] [bit] NULL,
	[IsRemoteSynced] [bit] NULL,
	[FiscalYearId] [int] NULL,
	[IsTransferredToACC] [bit] NULL,
	[PaymentMode] [varchar](50) NULL,
	[Remarks] [varchar](200) NULL,
	[StoreId] [int] NOT NULL,
	[ClaimCode] [bigint] NULL,
	[IsManualReturn] [bit] NULL,
	[ReferenceInvoiceNo] [varchar](50) NULL,
	[ReferenceInvoiceDate] [datetime2](3) NULL,
	[SettlementId] [int] NULL,
 CONSTRAINT [PKPHRM_TXN_InvoiceReturn] PRIMARY KEY CLUSTERED 
(
	[InvoiceReturnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_PHRM_PharmacyTxn_ByBillingType_UserCollection]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-END: Ramesh/Rohit: 12th Dec'21 -- New Function added for Summary View Inside PHRM User Collection report----

START: Ramesh/rohit: 12th Dec'21 -- Function Altered to remove the Cash Received Case for Daily Sales----

CREATE FUNCTION [dbo].[FN_PHRM_PharmacyTxn_ByBillingType_UserCollection]
(@FromDate Date, @ToDate Date, @StoreId int)
RETURNS TABLE
select * from FN_PHRM_PharmacyTxn_ByBillingType_UserCollection('2021-12-11','2021-12-12', null)
 =============================================
 Author:		Salakha
 Create date: 26/08/2019
 Description:	calculates daily sales for pharmacy
 =============================================

/* Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Dinesh/Abhishek 2nd Sept 2019          Credit logic, credit return logic optimized 
2		Vikas	10th Jan 2020				   Credit sales, and credit received query modified.
3       Shankar  23rd March 2020               depositdeduct included 
4		Shankar  20th Aug 2020				   Cash return query optimized
5       Shankar 27th Aug 2020                  Cash collection taken from Paid amount to remove decimal issue in report
6		Arpan 7th Dec 2020					   Net total is missing for credit billing, Multiple entry for the same Credit Invoice Return in User Collection Report.
7.		Sanjit/Ramesh 12 Apr, 2021				Added StoreId as a parameter to filter out the invoice details
8:      Ramesh/Rohit 12 Dec'21                  Cash Received Case removed from this Function
------------------------------------------------------

*/

AS
RETURN
(

		SELECT *
FROM
    (
				Cash Invoices (Same Day)--
				                SELECT CONVERT(Date,CreateOn) 'Date',
            'PHRM'+CONVERT(varchar(20),InvoicePrintId) 'InvoiceNo',
            Patientid,
            InvoiceId,
            'CashInvoice' AS 'TransactionType',
            SubTotal,
            DiscountAmount,
            VATAmount,
            TotalAmount,
            PaidAmount AS 'CashCollection',
            0 AS 'DepositReceived',
            0 AS 'DepositRefund',
            0 AS 'DepositDeduct',
            0 AS 'CreditReceived',
            0 AS 'CreditAmount',
            CounterId,
            StoreId,
            CreatedBy 'EmployeeId',
            Remark 'Remarks',
            1 AS DisplaySeq
        FROM PHRM_TXN_Invoice
        WHERE PaymentMode ='cash' AND CONVERT(Date,CreateOn) = CONVERT(Date,CreateOn) AND (StoreId = @StoreId OR @StoreId IS NULL)

    UNION ALL



        Credit Sales (Same Day)--
        SELECT CONVERT(Date,CreateOn) 'Date',
            'PHRM'+CONVERT(varchar(20),InvoicePrintId) 'InvoiceNo',
            Patientid,
            InvoiceId,
            'CreditInvoice' AS 'TransactionType',
            SubTotal,
            DiscountAmount,
            VATAmount,
            TotalAmount,
            0 AS 'CashCollection',
            0 AS 'DepositReceived',
            0 AS 'DepositRefund',
            0 AS 'DepositDeduct',
            0 AS 'CreditReceived',
            TotalAmount  AS 'CreditAmount',
            CounterId,
            StoreId,
            CreatedBy 'EmployeeId',
            Remark 'Remarks',
            2 AS DisplaySeq
        FROM PHRM_TXN_Invoice
        WHERE (PaymentMode = 'credit') AND (StoreId = @StoreId OR @StoreId IS NULL)
            AND(CONVERT(Date,CreateOn) = CONVERT(Date,CreateOn))
    VIKAS:10th Jan 2020

    UNION ALL

        Cash Return---
        SELECT CONVERT(Date,ret.CreatedOn) 'Date',
            'PHRM'+IsNULL(CONVERT(varchar(20),txn.InvoicePrintId),ret.ReferenceInvoiceNo + 'MR') 'InvoiceNo',
            ret.PatientId,
            ret.InvoiceId,
            'CashInvoiceReturn' AS 'TransactionType',
            (-ret.SubTotal) 'SubTotal',
            (-ret.DiscountAmount) 'DiscountAmount',
            (-ret.VATAmount) 'VATAmount',
            (-ret.TotalAmount) 'TotalAmount',
            (-ret.TotalAmount) AS 'CashCollection',
            0 AS 'DepositReceived',
            0 AS 'DepositRefund',
            0 AS 'DepositDeduct',
            0 AS 'CreditReceived',
            0 AS 'CreditAmount',
            ret.CounterId,
            ret.StoreId,
            ret.CreatedBy 'EmployeeId',
            ret.Remarks 'Remarks',
            4 AS DisplaySeq
        FROM PHRM_TXN_InvoiceReturn ret
            LEFT JOIN PHRM_TXN_Invoice txn
            ON ((ret.InvoiceId=txn.InvoiceId AND txn.PaymentMode='cash') OR (ret.InvoiceId=txn.InvoiceId AND
                txn.PaymentMode='credit' AND txn.SettlementId IS NOT NULL))
        WHERE ret.PaymentMode = 'cash' AND ((ret.StoreId = @StoreId AND txn.StoreId = @StoreId) OR @StoreId IS NULL)
    If billstatus is paid, regardless it was Credit + Settled, it should come in Cash Return--

    UNION ALL
        Credit Return---
        SELECT CONVERT(Date,ret.CreatedOn) 'Date',
            'PHRM'+IsNULL(CONVERT(varchar(20),txn.InvoicePrintId), ret.ReferenceInvoiceNo + 'MR') 'InvoiceNo',
            ISNULL(txn.PatientId, ret.PatientId) 'PatientId',
            ISNULL(ret.InvoiceId, ret.ReferenceInvoiceNo) 'InvoiceId',
            'CreditInvoiceReturn' AS 'TransactionType',
            (-ret.SubTotal) 'SubTotal',
            (-ISNULL(ret.DiscountAmount,0)) 'DiscountAmount',
            (ISNULL(-ret.VATAmount,0)) 'VATAmount',
            (-ret.TotalAmount) 'TotalAmount',
            (0) AS 'CashCollection',
            0 AS 'DepositReceived',
            0 AS 'DepositRefund',
            0 AS 'DepositDeduct',
            0 AS 'CreditReceived',
            (-ret.TotalAmount) 'CreditAmount',
            ret.CounterId,
            ret.StoreId,
            ret.CreatedBy 'EmployeeId',
            ret.Remarks 'Remarks',
            5 AS DisplaySeq
        FROM PHRM_TXN_InvoiceReturn ret
            LEFT JOIN PHRM_TXN_Invoice txn
            ON ((ret.InvoiceId=txn.InvoiceId AND txn.PaymentMode='credit') OR (ret.InvoiceId=txn.InvoiceId AND
                txn.PaymentMode='credit' AND txn.SettlementId IS NOT NULL))
        WHERE ret.PaymentMode = 'credit' AND ((ret.StoreId = @StoreId AND txn.StoreId = @StoreId) OR @StoreId IS NULL)
			) A
WHERE A.Date BETWEEN @FromDate AND @ToDate
			
) -- end of return

GO
/****** Object:  Table [dbo].[EMP_Employee]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMP_Employee](
	[EmployeeId] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [varchar](30) NOT NULL,
	[MiddleName] [varchar](30) NULL,
	[LastName] [varchar](30) NOT NULL,
	[Salutation] [varchar](10) NULL,
	[Gender] [varchar](10) NULL,
	[ContactNumber] [varchar](20) NULL,
	[DepartmentId] [int] NULL,
	[DateOfBirth] [datetime] NULL,
	[DateOfJoining] [datetime] NULL,
	[Email] [varchar](100) NULL,
	[EmployeeRoleId] [int] NULL,
	[EmployeeTypeId] [int] NULL,
	[ContactAddress] [varchar](200) NULL,
	[Extension] [smallint] NULL,
	[SpeedDial] [smallint] NULL,
	[OfficeHour] [varchar](200) NULL,
	[RoomNo] [varchar](20) NULL,
	[Signature] [nvarchar](1000) NULL,
	[LongSignature] [nvarchar](1000) NULL,
	[MedCertificationNo] [varchar](20) NULL,
	[ImageFullPath] [varchar](200) NULL,
	[ImageName] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[LabSignature] [nvarchar](500) NULL,
	[IsAppointmentApplicable] [bit] NULL,
	[DisplaySequence] [int] NULL,
	[SignatoryImageName] [varchar](100) NULL,
	[FullName] [varchar](200) NULL,
	[IsExternal] [bit] NOT NULL,
	[PANNumber] [varchar](20) NULL,
	[TDSPercent] [float] NULL,
	[IsIncentiveApplicable] [bit] NULL,
	[RadiologySignature] [nvarchar](500) NULL,
	[BloodGroup] [varchar](20) NULL,
	[DriverLicenseNo] [nvarchar](40) NULL,
	[NursingCertificationNo] [nvarchar](40) NULL,
	[HealthProfessionalCertificationNo] [nvarchar](40) NULL,
 CONSTRAINT [PK__EMP_Employee] PRIMARY KEY CLUSTERED 
(
	[EmployeeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_CFG_Counter]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_CFG_Counter](
	[CounterId] [int] IDENTITY(1,1) NOT NULL,
	[CounterName] [varchar](50) NOT NULL,
	[CounterType] [varchar](50) NOT NULL,
	[BeginningDate] [datetime] NULL,
	[ClosingDate] [datetime] NULL,
	[BranchId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_BIL_CFG_Counter] PRIMARY KEY CLUSTERED 
(
	[CounterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_BillingCounterName_Type] UNIQUE NONCLUSTERED 
(
	[CounterName] ASC,
	[CounterType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TXN_BillingTransaction]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_BillingTransaction](
	[BillingTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[InvoiceCode] [varchar](10) NULL,
	[InvoiceNo] [int] NULL,
	[PatientId] [int] NOT NULL,
	[SubTotal] [float] NULL,
	[DiscountAmount] [float] NULL,
	[TaxableAmount] [float] NULL,
	[TaxTotal] [float] NULL,
	[TotalAmount] [float] NULL,
	[TotalQuantity] [float] NULL,
	[PaymentMode] [varchar](50) NULL,
	[PaymentDetails] [varchar](1000) NULL,
	[TransactionType] [varchar](50) NULL,
	[BillStatus] [varchar](50) NULL,
	[PaidAmount] [float] NULL,
	[DiscountPercent] [float] NULL,
	[TaxId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[PaidDate] [datetime] NULL,
	[DepositAmount] [float] NULL,
	[DepositReturnAmount] [float] NULL,
	[DepositBalance] [float] NULL,
	[Remarks] [varchar](200) NULL,
	[CounterId] [int] NULL,
	[Tender] [float] NULL,
	[Change] [float] NULL,
	[PrintCount] [int] NULL,
	[SettlementId] [int] NULL,
	[ReturnStatus] [bit] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsRealtime] [bit] NULL,
	[IsRemoteSynced] [bit] NULL,
	[NonTaxableAmount] [float] NULL,
	[PaymentReceivedBy] [int] NULL,
	[PaidCounterId] [int] NULL,
	[PackageId] [int] NULL,
	[PackageName] [varchar](200) NULL,
	[IsInsuranceBilling] [bit] NULL,
	[IsInsuranceClaimed] [bit] NULL,
	[InsuranceClaimedDate] [datetime] NULL,
	[InsuranceProviderId] [int] NULL,
	[OrganizationId] [int] NULL,
	[ExchangeRate] [float] NULL,
	[InsTransactionDate] [datetime] NULL,
	[PrintedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[PartialReturnTxnId] [int] NULL,
	[AdjustmentTotalAmount] [decimal](18, 2) NULL,
	[IsCreditBillPaidSync] [bit] NULL,
	[InvoiceType] [varchar](50) NULL,
	[LabTypeName] [varchar](20) NULL,
	[ClaimCode] [bigint] NULL,
	[DepositAvailable] [float] NULL,
	[DepositUsed] [float] NULL,
 CONSTRAINT [PK_BIL_TXN_BillingTransaction] PRIMARY KEY CLUSTERED 
(
	[BillingTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TXN_BillingTransactionItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_BillingTransactionItems](
	[BillingTransactionItemId] [int] IDENTITY(1,1) NOT NULL,
	[BillingTransactionId] [int] NULL,
	[PatientId] [int] NOT NULL,
	[ServiceDepartmentId] [int] NOT NULL,
	[ServiceDepartmentName] [varchar](50) NULL,
	[ItemId] [int] NOT NULL,
	[ItemName] [varchar](100) NOT NULL,
	[Price] [float] NULL,
	[Quantity] [float] NULL,
	[SubTotal] [float] NULL,
	[DiscountAmount] [float] NULL,
	[TaxableAmount] [float] NULL,
	[Tax] [float] NULL,
	[TotalAmount] [float] NULL,
	[DiscountPercent] [float] NULL,
	[DiscountPercentAgg] [float] NULL,
	[ProviderId] [int] NULL,
	[ProviderName] [varchar](70) NULL,
	[BillStatus] [varchar](20) NULL,
	[RequisitionId] [bigint] NULL,
	[RequisitionDate] [datetime] NULL,
	[PaidDate] [datetime] NULL,
	[CounterId] [int] NULL,
	[CounterDay] [date] NULL,
	[Remarks] [varchar](100) NULL,
	[ReturnStatus] [bit] NULL,
	[ReturnQuantity] [float] NULL,
	[ReturnTax] [float] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelledBy] [int] NULL,
	[CancelRemarks] [varchar](200) NULL,
	[RequestedBy] [int] NULL,
	[PatientVisitId] [int] NULL,
	[BillingPackageId] [int] NULL,
	[TaxPercent] [float] NULL,
	[ProcedureCode] [varchar](10) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[NonTaxableAmount] [float] NULL,
	[PaymentReceivedBy] [int] NULL,
	[PaidCounterId] [int] NULL,
	[BillingType] [varchar](20) NULL,
	[RequestingDeptId] [int] NULL,
	[IsTransferredToACC] [int] NULL,
	[VisitType] [varchar](50) NULL,
	[PriceCategory] [varchar](50) NULL,
	[PatientInsurancePackageId] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ProvisionalReceiptNo] [int] NULL,
	[ProvisionalFiscalYearId] [int] NULL,
	[IsInsurance] [bit] NULL,
	[DiscountSchemeId] [int] NULL,
	[IsCashBillSync] [bit] NULL,
	[IsCreditBillSync] [bit] NULL,
	[IsCashBillReturnSync] [bit] NULL,
	[IsCreditBillReturnSync] [bit] NULL,
	[OrderStatus] [varchar](20) NULL,
	[LabTypeName] [varchar](20) NULL,
 CONSTRAINT [PK_BIL_TXN_BillingTransactionItems] PRIMARY KEY CLUSTERED 
(
	[BillingTransactionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TXN_InvoiceReturn]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_InvoiceReturn](
	[BillReturnId] [int] IDENTITY(1,1) NOT NULL,
	[CreditNoteNumber] [int] NULL,
	[FiscalYearId] [int] NULL,
	[InvoiceCode] [varchar](10) NULL,
	[RefInvoiceNum] [int] NULL,
	[PatientId] [int] NOT NULL,
	[BillingTransactionId] [int] NULL,
	[SubTotal] [float] NULL,
	[DiscountAmount] [float] NULL,
	[TaxableAmount] [float] NULL,
	[TaxTotal] [float] NULL,
	[TotalAmount] [float] NULL,
	[Remarks] [varchar](500) NULL,
	[CounterId] [int] NULL,
	[IsActive] [bit] NULL,
	[TaxID] [int] NULL,
	[FiscalYear] [varchar](20) NULL,
	[IsRemoteSynced] [bit] NULL,
	[IsRealtime] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[PaymentMode] [varchar](50) NULL,
	[IsInsuranceBilling] [bit] NULL,
	[InsuranceProviderId] [int] NULL,
	[BillStatus] [varchar](50) NULL,
	[SettlementId] [int] NULL,
 CONSTRAINT [PK_BIL_TXN_InvoiceReturn] PRIMARY KEY CLUSTERED 
(
	[BillReturnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation]  ---select * from [VW_BIL_TxnItemsInfoWithDateSeparation]
  AS
/*
 FileName    : VW_BIL_TxnItemsInfoWithDateSeparation
 Description : This view returns all transcationitems and their Paid/Unpaid/Cancelled/Returned Information grouped by date.
 Remarks     : Add new fields as per requirements
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.     14Aug'18- sud			created		To be used as common view for those billing reports where item level segregation is required
 2.		23Aug'18 - ramavtar		alter		added receipt no/invoice number in select(view table)
 3.     Sud/30Aug'18                        Revised for Provisional and BillStatus
 4.		Ramavtar/06Dec			alter		change in ProvisionalDate case statements
 5.     Dinesh/05th Feb'19		alter		added Return Quantity on views 
 6.     Sud/18Feb'19            alter       added billstatus, InvoiceCreatedDate, InvoicePaidDate
 7.     Dinesh/ 27th May'19		alter		added RequestedBy
 8.     Sud/7Aug'19             alter       added IsInsurance
 -----------------------------------------------------------------------
*/
 SELECT
	txnItm.BillingTransactionItemId,
	txnItm.PatientId,
	txnItm.ItemId,
	txnItm.ItemName, 
	txnitm.ServiceDepartmentId,
	txnItm.ServiceDepartmentName,
	txnItm.ProviderId,
	txnItm.RequestedBy, --din:27thMay'19
	txnItm.ProviderName,
	ISNULL(txnItm.BillingType,'Outpatient') AS 'BillingType',--default BillingType is Outpatient, so.. 
	txnItm.RequestingDeptId, -- sud:22Aug'18
	Convert(DATE, txnItm.CreatedOn) 'CreatedDate',
	Convert(DATE, txnItm.PaidDate) 'PaidDate',
	Convert(DATE, ret.CreatedOn)  'ReturnDate', 

	Convert(DATE, txn.CreatedOn) 'InvoiceCreatedDate', -- sud:18Feb'19
	Convert(DATE, txn.PaidDate) 'InvoicePaidDate', -- sud:18Feb'19
	-cancelled---
	CASE WHEN txnItm.BillStatus = 'Cancel' THEN Convert(DATE,txnItm.CancelledOn) ELSE NULL END AS CancelledDate,

  -provisional--
    -below are conditions for Provisional--
	---Invoice not Generated--
	1. Billstatus = Provisional
	2. BillStatus = Cancel  & CreatedOn != CancelledOn
	--Invoice Generated--
	3. billstatus = unpaid  &  ItemCreatedOn != InvoiceCreatedOn
	4. billstatus = paid  &   ItemCreatedOn != InvoiceCreatedOn   & PaymentMode != Credit   
  CASE 
	WHEN txnItm.BillStatus = 'provisional' 
		THEN Convert(DATE, txnItm.CreatedOn) 
	WHEN (txnItm.BillStatus='cancel' AND Convert(Date,txnItm.CreatedOn) != Convert(Date,txnItm.CancelledOn) )
		THEN Convert(DATE,txnItm.CreatedOn)
	WHEN (txnItm.BillingTransactionId IS NOT NULL
			AND ( 
					(txn.PaymentMode != 'credit' AND CONVERT(Date,txnItm.CreatedOn) !=  COnvert(Date,txn.CreatedOn))
				OR  (txnItm.BillStatus='unpaid' AND  CONVERT(Date,txnItm.CreatedOn) !=  COnvert(Date,txn.CreatedOn)) 
				OR  (txnItm.BillStatus='paid' and  CONVERT(Date,txnItm.CreatedOn) !=  CONVERT(Date,txnItm.PaidDate) AND txn.PaymentMode != 'credit')
				OR (txnItm.BillStatus = 'paid' AND CONVERT(date,txnItm.CreatedOn) != CONVERT(date,txn.CreatedOn) AND txn.PaymentMode = 'credit')	--ramavtar:06Dec'18	checking paymentMode!='credit'
				 )
		   ) THEN Convert(DATE, txnItm.CreatedOn) 
	ELSE NULL END AS ProvisionalDate,

CREDIT---
  CASE WHEN (txn.PaymentMode='credit' AND txn.BillStatus='unpaid' )
	   OR ( txn.BillStatus='paid' AND Convert(Date,txn.CreatedOn)  != Convert(Date,txn.PaidDate) ) 
	   THEN CONVERT(DATE,txn.CreatedOn)
	   ELSE NULL END AS 'CreditDate',

	 txnItm.Price,
	 txnItm.Quantity,
	 txnItm.SubTotal,
	 txnItm.ReturnQuantity,
	 txnItm.DiscountAmount,
	 txnitm.TotalAmount,
	 Case  WHEN ISNULL(txnItm.ReturnStatus,0)=1 THEN txnItm.TotalAmount ELSE 0 END AS  'ReturnAmount',
	 ret.TotalAmount 'ReturnAmount',---this is incorrect.. use above: sud-30aug'18
	 ret.Remarks 'ReturnRemarks',
	 txnItm.CancelRemarks as 'CancelRemarks',
	 txn.PaymentMode as 'PaymentMode',
	 txnItm.VisitType AS 'VisitType',
	 ISNULL(txn.InvoiceCode + '-' + CONVERT(VARCHAR,txn.InvoiceNo),'') 'InvoiceNumber'	-- ramavtar 23Aug'18
	 ,txnItm.BillStatus 
	 ,txnItm.IsInsurance --sud:7Aug'19
	 ,ctr.CounterName
	 ,emp.FullName 'UserName'
FROM 
	BIL_TXN_BillingTransactionItems txnItm WITH (NOLOCK)
	LEFT JOIN
	BIL_TXN_BillingTransaction txn  WITH (NOLOCK)
	ON txnItm.BillingTransactionId = txn.BillingTransactionId
	LEFT JOIN
	BIL_TXN_InvoiceReturn ret  WITH (NOLOCK)
	ON txnItm.BillingTransactionId = ret.BillingTransactionId
	join BIL_CFG_Counter ctr with (NOLOCK)
	on txnItm.CounterId = ctr.CounterId
	join EMP_Employee emp with (NOLOCK)
	on txnItm.CreatedBy = emp.EmployeeId

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
-Select * from [FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary]   ('2018-09-12','2018-09-12')
- select * from VW_BIL_TxnItemsInfoWithDateSeparation
/*
 File: [FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary] 
 Created: 15Aug'18 <sud>
 Description: This takes item's info from a view and does separation of Different Dates and Amount based on input values.
 Remarks: Needs Revision, Add more fields as per requirments
 ----------Change History------------
 S.No.   ModifiedBy/Date         Remarks
 --------------------------------------
 1.      Sud/15Aug'18           Initial Version
 2.      Sud/22Aug'18           Updated for TotalCollection  <Needs Revision>
 3.      Sud/30Aug'18           Revised for Provisional and BillStatus
 4.      Dinesh/10Sept'18		passing itemname along with srvDeptName to the function
 5.      Dinesh/14Sept'18		added Provisional amount for doctor summary report
 6.		 Ramavtar/12Nov'18		getting providerName from employee table
 7.      Pratik/13oct'19        getting ReferrerId and ReferredByDocName for Referral Reports.
 ---------------------------------------- */
AS
RETURN
( 

   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',

      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,

		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp, 
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,
				CASE WHEN ProviderId IS NOT NULL
					THEN emp.FullName
					ELSE NULL 
				END AS ProviderName,


					itmInfo.RequestedBy AS 'ReferrerId',
				CASE WHEN itmInfo.RequestedBy IS NOT NULL
					THEN refByEmp.FullName
					ELSE NULL 
				END AS ReferredDoctorName,



				BillingType, 
				RequestingDeptId,
				CASE 
					WHEN itmInfo.CreditDate IS NULL AND itmInfo.PaymentMode = 'credit' THEN 'CreditPaidSameDay'
					ELSE itmInfo.PaymentMode
				END AS 'PaymentMode',
				VisitType,
					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate
				FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation] itmInfo
					LEFT JOIN [dbo].[EMP_Employee] emp ON itmInfo.ProviderId = emp.EmployeeId
					LEFT JOIN EMP_Employee refByEmp ON itmInfo.RequestedBy = refByEmp.EmployeeId  -- extra join to get referrername.
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )
)---end of return

GO
/****** Object:  Table [dbo].[PHRM_MST_Stock]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[CostPrice] [decimal](18, 4) NOT NULL,
	[MRP] [decimal](18, 4) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[BarcodeId] [int] NULL,
 CONSTRAINT [PK_PHRM_MST_Stock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_StockTransaction]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_StockTransaction](
	[StockTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[StockId] [int] NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[InOut] [varchar](10) NULL,
	[TransactionType] [varchar](50) NOT NULL,
	[TransactionDate] [datetime2](3) NOT NULL,
	[Quantity] [float] NULL,
	[CostPrice] [decimal](18, 4) NULL,
	[MRP] [decimal](18, 4) NULL,
	[ReferenceNo] [int] NULL,
	[Remarks] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[IsTransferedToAcc] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NULL,
	[StoreId] [int] NULL,
	[StoreStockId] [int] NULL,
	[InQty] [float] NULL,
	[OutQty] [float] NULL,
 CONSTRAINT [PK_PHRM_TXN_StockTransaction] PRIMARY KEY CLUSTERED 
(
	[StockTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Store]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Store](
	[StoreId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[Address] [varchar](200) NULL,
	[ContactNo] [varchar](20) NULL,
	[Email] [nvarchar](50) NULL,
	[StoreLabel] [varchar](100) NULL,
	[StoreDescription] [varchar](200) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[ParentStoreId] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[Code] [varchar](15) NULL,
	[MaxVerificationLevel] [int] NULL,
	[PermissionId] [int] NULL,
	[Category] [varchar](50) NULL,
	[SubCategory] [varchar](50) NULL,
	[PanNo] [nvarchar](100) NULL,
	[UseSeparateInvoiceHeader] [bit] NOT NULL,
	[AvailablePaymentModesJSON] [varchar](2000) NULL,
	[DefaultPaymentMode] [varchar](500) NULL,
	[INV_GRGroupId] [int] NULL,
	[INV_POGroupId] [int] NULL,
	[INV_PRGroupId] [int] NULL,
	[INV_ReqDisGroupId] [int] NULL,
	[INV_RFQGroupId] [int] NULL,
	[INV_ReceiptDisplayName] [nvarchar](100) NULL,
	[INV_ReceiptNoCode] [varchar](20) NULL,
 CONSTRAINT [PK_PHRM_MST_Store] PRIMARY KEY CLUSTERED 
(
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_PHRM_MST_STORE_StoreName] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_RPT_PHRM_GetItemStockTxnsBetnDateRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_RPT_PHRM_GetItemStockTxnsBetnDateRange](@FromDate Date, @ToDate Date)
RETURNS TABLE
AS
/*
 FileName    : FN_RPT_PHRM_GetItemStockTxnsBetnDateRange
 Description : Gives Purchase, Purchase Return, Sales, Sales Return, Provisional, Consumption and StockManage(IN/Out) information for each item on a given date range
 Remarks     : 
 Example	 : SELECT * FROM FN_RPT_PHRM_GetItemStockTxnsBetnDateRange('2021-06-25','2021-06-25')
 Created: 03Jan'21/Sanjit
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.     03Jan'21/Sanjit          created        
 2.		30Aug'21/Sanjit			added StockId in each sub-query as batch, mrp, expirydate is changeable and not reliable for join criteria
 -----------------------------------------------------------------------
*/
RETURN
(

SELECT
    stockMaster.StockId, stockMaster.ItemId, stockMaster.BatchNo, stockMaster.ExpiryDate, stockMaster.CostPrice, stockMaster.MRP, store.StoreId, store.Name AS 'StoreName',
    SUM(Isnull(gri.GrQty,0)) - SUM(isnull(cancel.CancelQty,0))  'PurchaseQty',
	SUM(Isnull(gri.StockValue,0)) - SUM(isnull(cancel.StockValue,0))  'PurchaseValue',

	SUM(Isnull(rts.ReturnedQty,0))  'PurchaseReturnQty',
	SUM(Isnull(rts.StockValue,0))  'PurchaseReturnValue',

	SUM(Isnull(writeoff.WriteOffQty,0))  'WriteOffQty',
	SUM(Isnull(writeoff.StockValue,0))  'WriteOffValue',

	SUM(ISNULL(sales.SaleQty, 0)) 'SalesQty',
	SUM(ISNULL(sales.StockValue, 0)) 'SalesValue',

	SUM(ISNULL(salesreturn.SaleReturnQty, 0)) 'SalesReturnQty',
	SUM(ISNULL(salesreturn.StockValue, 0)) 'SalesReturnValue',

	SUM(ISNULL(provisionalSales.ProvisionalSaleQty, 0)) - SUM(ISNULL(provisionalCancel.ProvisionalCancelQty, 0)) 'ProvisionalQty',
	SUM(ISNULL(provisionalSales.StockValue, 0)) - SUM(ISNULL(provisionalCancel.StockValue, 0))  'ProvisionalValue',

	SUM(ISNULL(cons.ConsumedQty,0) ) 'ConsumptionQty',
	SUM(ISNULL(cons.StockValue,0) ) 'ConsumptionValue',

	SUM(Isnull(stmgOut.Quantity,0)  ) 'StockManageOutQty',
	SUM(Isnull(stmgOut.StockValue,0)) 'StockManageOutValue',

	SUM(Isnull(stmgIn.Quantity,0)) 'StockManageInQty',
	SUM(Isnull(stmgIn.StockValue,0)) 'StockManageInValue',

	SUM(Isnull(transferIn.TransferInQty,0)  ) 'TransferInQty',
	SUM(Isnull(transferIn.StockValue,0)) 'TransferInValue',

	SUM(Isnull(transferOut.TransferOutQty,0)  ) 'TransferOutQty',
	SUM(Isnull(transferOut.StockValue,0)) 'TransferOutValue'

-Table 1: Item Information for Left most table (anchor table)----
FROM
    PHRM_MST_Stock stockMaster
    JOIN PHRM_MST_Store store ON store.Category IN ('dispensary') OR store.SubCategory = 'pharmacy'
    LEFT JOIN
    (
    -Table 2: Purchase Values--(GoodsReceipt in MainStore)---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(InQty,0)) 'GrQty' , SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ( 'gr-item' ) AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
    and FiscalYearId=@FiscalYearId
		GROUP BY StockId, ItemId, StoreId
    ) gri
    ON stockMaster.StockId=gri.StockId AND store.StoreId = gri.StoreId

    LEFT JOIN
    (
    -Table 3: Purchase Cancelled- (GR-Cancelled) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(OutQty,0)) 'CancelQty' , SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('cancel-gr-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) cancel
    ON stockMaster.StockId=cancel.StockId AND store.StoreId = cancel.StoreId

    LEFT JOIN
    (
    -Table 4: Purchase Returned- (Return To Supplier) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(OutQty,0)) 'ReturnedQty' , SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('rts-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) rts
    ON stockMaster.StockId = rts.StockId AND store.StoreId = rts.StoreId

    LEFT JOIN
    (
    -Table 5: WriteOff- (Breakage) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(OutQty,0)) 'WriteOffQty' , SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('write-off-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
	) writeoff
    ON stockMaster.StockId = writeoff.StockId AND store.StoreId = writeoff.StoreId

    LEFT JOIN
    (
    -Table 6: Sale- (Breakage) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(OutQty,0)) 'SaleQty' , SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('sale-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
	) sales
    ON stockMaster.StockId = sales.StockId AND store.StoreId = sales.StoreId

    LEFT JOIN
    (
    -Table 7: Sale-Returned (Breakage) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(InQty,0)) 'SaleReturnQty' , SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('sale-returned-item','manual-sales-return') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) salesreturn
    ON stockMaster.StockId = salesreturn.StockId AND store.StoreId = salesreturn.StoreId

    LEFT JOIN
    (
    -Table 8: Provisional Sale- (Breakage) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(OutQty,0)) 'ProvisionalSaleQty' , SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('provisional-sale-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) provisionalSales
    ON stockMaster.StockId = provisionalSales.StockId AND store.StoreId = provisionalSales.StoreId


    LEFT JOIN
    (
    -Table 9: Provisional Cancel- (Breakage) of MainStore---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(InQty,0)) 'ProvisionalCancelQty' , SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('provisiona-cancel-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) provisionalCancel
    ON stockMaster.StockId = provisionalCancel.StockId AND store.StoreId = provisionalCancel.StoreId

    LEFT JOIN
    (
    -Table 10: StockManage-In---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(InQty,0)) 'Quantity' , SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('stockmanaged-item','fy-managed-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) stmgIn
    ON stockMaster.StockId = stmgIn.StockId AND store.StoreId = stmgIn.StoreId

    LEFT JOIN
    (
    -Table 11: StockManage-Out---
        SELECT StockId, ItemId, StoreId, SUM(Isnull(OutQty,0)) 'Quantity', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType IN ('stockmanaged-items','fy-managed-items') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    ) stmgOut
    ON stockMaster.StockId = stmgOut.StockId AND store.StoreId = stmgOut.StoreId

    LEFT JOIN
    (
  -Table 12 : Consumption From Substore---
        SELECT StockId, ItemId, StoreId, SUM(ISNULL(OutQty,0)) 'ConsumedQty', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
		FROM PHRM_TXN_StockTransaction
		WHERE TransactionType='consumption-item' AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1
		GROUP BY StockId, ItemId, StoreId
    and FiscalYearId=@FiscalYearId
    )cons
    ON stockMaster.StockId = cons.StockId AND store.StoreId = cons.StoreId

    LEFT JOIN
    (
  -Table 13 : Transfer In From Substore---
        SELECT StockId, ItemId, StoreId, SUM(ISNULL(InQty,0)) 'TransferInQty', SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
        FROM PHRM_TXN_StockTransaction
        WHERE TransactionType IN ('transfer-item','dispensary-dispatched-item','dispatched-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1 AND InQty > 0  AND OutQty= 0
		GROUP BY StockId, ItemId, StoreId
    )transferIn
    ON stockMaster.StockId = transferIn.StockId AND store.StoreId = transferIn.StoreId

    LEFT JOIN
    (
  -Table 13 : Transfer In From Substore---
        SELECT StockId, ItemId, StoreId, SUM(ISNULL(OutQty,0)) 'TransferOutQty', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
        FROM PHRM_TXN_StockTransaction
        WHERE TransactionType IN ('transfer-item','dispensary-dispatched-item','dispatched-item') AND CONVERT(Date,TransactionDate) BETWEEN @FromDate AND @ToDate AND ISNULL(IsActive,0) = 1 AND OutQty > 0  AND InQty= 0
		GROUP BY StockId, ItemId, StoreId
    )transferOut
    ON stockMaster.StockId = transferOut.StockId AND store.StoreId = transferOut.StoreId

WHERE 
 
 - take only those having at least one transaction in the system..
 ( 
	   isnull(opening.Opening_Qty,0) !=0 OR 
	 Isnull(gri.GrQty,0) != 0
    OR isnull(cancel.CancelQty,0) !=0
    OR isnull(rts.ReturnedQty , 0) != 0
    OR isnull(writeoff.WriteOffQty , 0) != 0
    OR isnull(sales.SaleQty , 0) != 0
    OR isnull(salesreturn.SaleReturnQty , 0) != 0
    OR isnull(provisionalSales.ProvisionalSaleQty , 0) != 0
    OR isnull(provisionalCancel.ProvisionalCancelQty , 0) != 0
    OR Isnull(stmgOut.Quantity,0) !=0
    OR Isnull(stmgIn.Quantity,0) !=0
    OR ISNULL(cons.ConsumedQty,0) !=0
    OR ISNULL(transferIn.TransferInQty,0) !=0
    OR ISNULL(transferOut.TransferOutQty,0) !=0
 )
 GROUP BY stockMaster.StockId, stockMaster.ItemId, stockMaster.BatchNo, stockMaster.ExpiryDate, stockMaster.CostPrice, stockMaster.MRP, store.StoreId, store.Name
)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparationForUserCashCollectionReport]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [FN_BIL_GetTxnItemsInfoWithDateSeparationForUserCashCollectionReport] 
CreatedBy/date: Aniket/17-10-2021
Description: To get the Details of User Wise Cash Collection report
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.    Aniket/17-10-2021                    created the script
--------------------------------------------------------------------------
*/
Create FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparationForUserCashCollectionReport] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
AS
RETURN
( 

   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',
	        A.PaymentReceivedBy as 'UserId',
			A.FullName as 'UserName',
			A.RetDiscount as 'ReturnDiscount',

      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,

		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp,
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,
				CASE WHEN ProviderId IS NOT NULL
					THEN ISNULL(emp.Salutation + '. ','') + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ','') + emp.LastName
					ELSE NULL 
				END AS ProviderName,
				BillingType, 
				RequestingDeptId,
				PaymentReceivedBy,
				itmInfo.FullName,
				RetDiscount,
				CASE 
					WHEN itmInfo.CreditDate IS NULL AND itmInfo.PaymentMode = 'credit' THEN 'CreditPaidSameDay'
					ELSE itmInfo.PaymentMode
				END AS 'PaymentMode',
				VisitType,
					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate
				FROM 
				(SELECT txnItm.BillingTransactionItemId, txnItm.PatientId, txnItm.ItemId, txnItm.ItemName, txnItm.ServiceDepartmentId, txnItm.ServiceDepartmentName, txnItm.ProviderId, txnItm.RequestedBy, txnItm.ProviderName, ISNULL(txnItm.BillingType, 'Outpatient') AS BillingType, 
             txnItm.RequestingDeptId, CONVERT(DATE, txnItm.CreatedOn) AS CreatedDate, CONVERT(DATE, txnItm.PaidDate) AS PaidDate, CONVERT(DATE, ret.CreatedOn) AS ReturnDate, CONVERT(DATE, txn.CreatedOn) AS InvoiceCreatedDate, CONVERT(DATE, txn.PaidDate) 
             AS InvoicePaidDate, CASE WHEN txnItm.BillStatus = 'Cancel' THEN CONVERT(DATE, txnItm.CancelledOn) ELSE NULL END AS CancelledDate, CASE WHEN txnItm.BillStatus = 'provisional' THEN CONVERT(DATE, txnItm.CreatedOn) WHEN (txnItm.BillStatus = 'cancel' AND 
             CONVERT(Date, txnItm.CreatedOn) != CONVERT(Date, txnItm.CancelledOn)) THEN CONVERT(DATE, txnItm.CreatedOn) WHEN (txnItm.BillingTransactionId IS NOT NULL AND ((txn.PaymentMode != 'credit' AND CONVERT(Date, txnItm.CreatedOn) != CONVERT(Date, txn.CreatedOn)) OR
             (txnItm.BillStatus = 'unpaid' AND CONVERT(Date, txnItm.CreatedOn) != CONVERT(Date, txn.CreatedOn)) OR
             (txnItm.BillStatus = 'paid' AND CONVERT(Date, txnItm.CreatedOn) != CONVERT(Date, txnItm.PaidDate) AND txn.PaymentMode != 'credit') OR
             (txnItm.BillStatus = 'paid' AND CONVERT(date, txnItm.CreatedOn) != CONVERT(date, txn.CreatedOn) AND txn.PaymentMode = 'credit'))) THEN CONVERT(DATE, txnItm.CreatedOn) ELSE NULL END AS ProvisionalDate, CASE WHEN (txn.PaymentMode = 'credit' AND 
             txn.BillStatus = 'unpaid') OR
             (txn.BillStatus = 'paid' AND CONVERT(Date, txn.CreatedOn) != CONVERT(Date, txn.PaidDate)) THEN CONVERT(DATE, txn.CreatedOn) ELSE NULL END AS CreditDate, txnItm.Price, txnItm.Quantity, txnItm.SubTotal, txnItm.ReturnQuantity, txnItm.DiscountAmount, txnItm.TotalAmount, 
             CASE WHEN ISNULL(txnItm.ReturnStatus, 0) = 1 THEN txnItm.TotalAmount ELSE 0 END AS ReturnAmount, ret.Remarks AS ReturnRemarks, txnItm.CancelRemarks, txn.PaymentMode, txnItm.VisitType, ISNULL(txn.InvoiceCode + '-' + CONVERT(VARCHAR, txn.InvoiceNo), '') 
             AS InvoiceNumber, txnItm.BillStatus, txnItm.IsInsurance, ctr.CounterName, emp.FullName AS UserName, txnItm.PaymentReceivedBy,emp.FullName,ret.DiscountAmount as 'RetDiscount'
             FROM   dbo.BIL_TXN_BillingTransactionItems AS txnItm WITH (NOLOCK) 
			 LEFT OUTER JOIN dbo.BIL_TXN_BillingTransaction AS txn WITH (NOLOCK) ON txnItm.BillingTransactionId = txn.BillingTransactionId 
			 LEFT OUTER JOIN dbo.BIL_TXN_InvoiceReturn AS ret WITH (NOLOCK) ON txnItm.BillingTransactionId = ret.BillingTransactionId 
			 LEFT OUTER JOIN dbo.BIL_CFG_Counter AS ctr WITH (NOLOCK) ON txnItm.CounterId = ctr.CounterId
             LEFT JOIN dbo.EMP_Employee AS emp WITH (NOLOCK) ON txnItm.PaymentReceivedBy = emp.EmployeeId)itmInfo
					LEFT JOIN [dbo].[EMP_Employee] emp ON itmInfo.PaymentReceivedBy = emp.EmployeeId
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )
)---end of return

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
-Select ReturnAmount,ReturnQuantity,* from [FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary]  ('2018-12-16','2019-01-14')
- select * from VW_BIL_TxnItemsInfoWithDateSeparation
/*
 File: [FN_BIL_GetTxnItemsInfoWithDateSeparation]
 Created: 15Aug'18 <sud>
 Description: This takes item's info from a view and does separation of Different Dates and Amount based on input values.
 Remarks: Needs Revision, Add more fields as per requirments
 ----------Change History------------
 S.No.   ModifiedBy/Date         Remarks
 --------------------------------------
 1.      Sud/15Aug'18           Initial Version
 2.      Sud/22Aug'18           Updated for TotalCollection  <Needs Revision>
 3.      Sud/30Aug'18           Revised for Provisional and BillStatus
 4.      Dinesh/10Sept'18		passing itemname along with srvDeptName to the function
 5.      Dinesh/14Sept'18		added Provisional amount for doctor summary report
 6.		 Ramavtar/12Nov'18		getting providerName from employee table
 6.      Dinesh / 05th Jan'19	Added Return Quantity 
 ---------------------------------------- */
AS
RETURN
( 

   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',

      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,

		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp, 
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,
				CASE WHEN ProviderId IS NOT NULL
					THEN emp.Salutation + '. ' + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ','') + emp.LastName
					ELSE NULL 
				END AS ProviderName,
				BillingType, 
				RequestingDeptId,
				CASE 
					WHEN itmInfo.CreditDate IS NULL AND itmInfo.PaymentMode = 'credit' THEN 'CreditPaidSameDay'
					ELSE itmInfo.PaymentMode
				END AS 'PaymentMode',
				VisitType,
					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnQuantity ELSE 0 END AS ReturnQuantity
				FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation] itmInfo
					LEFT JOIN [dbo].[EMP_Employee] emp ON itmInfo.ProviderId = emp.EmployeeId
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )
)---end of return
 
GO
/****** Object:  Table [dbo].[BIL_TXN_Deposit]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_Deposit](
	[DepositId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[ReceiptNo] [int] NULL,
	[PatientVisitId] [int] NULL,
	[PatientId] [int] NOT NULL,
	[DepositType] [varchar](20) NULL,
	[Amount] [float] NOT NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CounterId] [int] NULL,
	[PrintCount] [int] NULL,
	[PaymentMode] [varchar](50) NULL,
	[PaymentDetails] [varchar](1000) NULL,
	[BillingTransactionId] [int] NULL,
	[SettlementId] [int] NULL,
	[DepositBalance] [float] NULL,
	[CareOf] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsTransferTransaction] [bit] NULL,
	[ModifiedRemarks] [varchar](200) NULL,
	[ModifiedBy] [int] NULL,
	[PrintedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[IsDepositSync] [bit] NULL,
 CONSTRAINT [PK_BIL_TXN_Deposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetDepositNProvisionalBetnDateRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Table-Valued Function (Multi-line) to get deposit and provisional amount summary between a date range..
CREATE FUNCTION [dbo].[FN_BIL_GetDepositNProvisionalBetnDateRange] 
(@startDate datetime, @endDate datetime)
RETURNS TABLE
AS
    RETURN
    (
    SELECT
        dates.Dates 'BillingDate',
        dep.AdvanceReceived,
        dep.AdvanceSettled,
		dep.AdvanceReturned,
        prov.ProvisionalAmount
    FROM (SELECT
        *
    FROM FN_COMMON_GetAllDatesBetweenRange(CONVERT(date, ISNULL(@startDate, GETDATE())), CONVERT(date, ISNULL(@endDate, GETDATE())))) dates
    LEFT JOIN (SELECT
        CONVERT(date, CreatedOn) 'BillingDate',
        SUM(CASE WHEN DepositType = 'Deposit' THEN Amount ELSE 0 END) AS 'AdvanceReceived',
		SUM(CASE WHEN DepositType = 'ReturnDeposit' THEN Amount ELSE 0 END) AS 'AdvanceReturned',
        SUM(CASE WHEN DepositType = 'depositdeduct' THEN Amount ELSE 0 END) AS 'AdvanceSettled'
    FROM BIL_TXN_Deposit
    WHERE CONVERT(date, CreatedOn) BETWEEN CONVERT(date, ISNULL(@startDate, GETDATE())) AND CONVERT(date, ISNULL(@endDate, GETDATE()))
    GROUP BY CONVERT(date, CreatedOn)) dep ON dates.Dates = dep.BillingDate
    LEFT JOIN (SELECT
        CONVERT(date, CreatedOn) 'BillingDate',
        SUM(ISNULL(TotalAmount, 0)) 'ProvisionalAmount'
    FROM BIL_TXN_BillingTransactionItems
    WHERE BillStatus = 'provisional'
    AND CONVERT(date, CreatedOn) BETWEEN CONVERT(date, ISNULL(@startDate, GETDATE())) AND CONVERT(date, ISNULL(@endDate, GETDATE()))
    GROUP BY CONVERT(date, CreatedOn)) prov ON dates.Dates = prov.BillingDate
    )


GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
-Select * from [FN_BIL_GetTxnItemsInfoWithDateSeparation]  ('2018-09-12','2018-09-12')
- select * from VW_BIL_TxnItemsInfoWithDateSeparation
/*
 File: [FN_BIL_GetTxnItemsInfoWithDateSeparation]
 Created: 15Aug'18 <sud>
 Description: This takes item's info from a view and does separation of Different Dates and Amount based on input values.
 Remarks: Needs Revision, Add more fields as per requirments
 ----------Change History------------
 S.No.   ModifiedBy/Date         Remarks
 --------------------------------------
 1.      Sud/15Aug'18           Initial Version
 2.      Sud/22Aug'18           Updated for TotalCollection  <Needs Revision>
 3.      Sud/30Aug'18           Revised for Provisional and BillStatus
 4.      Dinesh/10Sept'18		passing itemname along with srvDeptName to the function
 5.      Dinesh/14Sept'18		added Provisional amount for doctor summary report
 6.		 Ramavtar/12Nov'18		getting providerName from employee table
 ---------------------------------------- */
AS
RETURN
( 

   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',

      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,

		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp, 
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,
				CASE WHEN ProviderId IS NOT NULL
					THEN ISNULL(emp.Salutation + '. ','') + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ','') + emp.LastName
					ELSE NULL 
				END AS ProviderName,
				BillingType, 
				RequestingDeptId,
				CASE 
					WHEN itmInfo.CreditDate IS NULL AND itmInfo.PaymentMode = 'credit' THEN 'CreditPaidSameDay'
					ELSE itmInfo.PaymentMode
				END AS 'PaymentMode',
				VisitType,
					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate
				FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation] itmInfo
					LEFT JOIN [dbo].[EMP_Employee] emp ON itmInfo.ProviderId = emp.EmployeeId
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )
)---end of return
GO
/****** Object:  Table [dbo].[BIL_TXN_Settlements]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_Settlements](
	[SettlementId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[SettlementReceiptNo] [int] NOT NULL,
	[SettlementDate] [datetime] NULL,
	[SettlementType] [varchar](50) NULL,
	[PatientId] [int] NOT NULL,
	[PayableAmount] [float] NULL,
	[RefundableAmount] [float] NULL,
	[PaidAmount] [float] NULL,
	[ReturnedAmount] [float] NULL,
	[DepositDeducted] [float] NULL,
	[DueAmount] [float] NULL,
	[DiscountAmount] [float] NULL,
	[PaymentMode] [varchar](50) NULL,
	[PaymentDetails] [varchar](1000) NULL,
	[CounterId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[PrintCount] [int] NULL,
	[IsActive] [bit] NULL,
	[PrintedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[IsCashDiscountSync] [bit] NULL,
	[CollectionFromReceivable] [float] NULL,
	[DiscountReturnAmount] [float] NULL,
 CONSTRAINT [PK_BIL_TXN_Settlements] PRIMARY KEY CLUSTERED 
(
	[SettlementId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BILL_GetCounterNUserCollectionDaily]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Function [dbo].[FN_BILL_GetCounterNUserCollectionDaily] 
                (   @FromDate datetime,
				    @ToDate datetime
				)
RETURNS TABLE
/*
File: [FN_BILL_GetCounterNUserCollectionDaily]
Created/Updated By: sudarshan-29May'18
Description: Returns all collection values between given dates for all users and counter combination.
Remarks  : Needs revision in settlemet and due part..

Select * from  [FN_BILL_GetCounterNUserCollectionDaily] ('2018-06-04','2018-06-04')
*/
AS
RETURN
(
       SELECT  
	 ctrUsrDay.BillingDate,
	 ctrUsrDay.CounterId,
	 ctrUsrDay.CounterName,
	 ctrUsrDay.EmployeeId,
	 ctrUsrDay.EmployeeName,
	 
	 ISNULL(paid.TotalAmount,0)  + ISNULL(depOnly.DepositReceived,0) 
		   - ISNULL(cashRet.TotalAmount,0) - ISNULL(SettlDiscountAmount,0) - ISNULL(DepositReturn,0) - ISNULL(SettlDueAmount,0)     'CashCollection'

FROM 
(
  SELECT Dates 'BillingDate' , 
  emp.EmployeeId, 
  emp.FirstName +' '+emp.LastName 'EmployeeName',
  cnt.CounterId, 
  cnt.CounterName
  FROM [FN_COMMON_GetAllDatesBetweenRange] (ISNULL(@FromDate,GETDATE()),ISNULL(@ToDate,GETDATE())),
  EMP_Employee emp, BIL_CFG_Counter cnt

) ctrUsrDay left join
(
  -paid on same day-- 
  Select Convert(date,txn.PaidDate) 'BillingDate', PaidCounterId 'CounterId', PaymentReceivedBy 'EmployeeId',
	  SUM(txn.SubTotal) 'Subtotal' ,
	  SUM(txn.DiscountAmount) DiscountAmount, 
	  SUM(txn.TaxableAmount) TaxableAmount, 
	  SUM(txn.TaxTotal) 'TaxAmount', 
	  SUM(txn.TotalAmount) TotalAmount
  FROM BIL_TXN_BillingTransaction txn 
  WHERE txn.BillStatus='paid' --and ( Convert(Date,txn.PaidDate) Between @FromDate AND @ToDate )
  GROUP BY Convert(date,txn.PaidDate), PaidCounterId, PaymentReceivedBy
) paid
ON ctrUsrDay.BillingDate = paid.BillingDate AND ctrUsrDay.EmployeeId=paid.EmployeeId and ctrUsrDay.CounterId=paid.CounterId

LEFT JOIN
(
 Select dep.CreatedBy, dep.CounterId,
      Convert(date,dep.CreatedOn) 'BillingDate',
      SUM( Case WHEN dep.DepositType='Deposit' then dep.Amount ELSE 0 END ) AS 'DepositReceived',
      SUM( Case WHEN dep.DepositType='depositdeduct' OR dep.DepositType='ReturnDeposit' then dep.Amount ELSE 0  END) AS 'DepositReturn'
	  
  from BIL_TXN_Deposit dep
  Group BY Convert(date,dep.CreatedOn),dep.CreatedBy, dep.CounterId
) depOnly
ON ctrUsrDay.BillingDate = depOnly.BillingDate AND ctrUsrDay.EmployeeId=depOnly.CreatedBy and ctrUsrDay.CounterId=depOnly.CounterId

LEFT JOIN
(
Select CreatedBy, CounterId, Convert(date,sett.SettlementDate) 'BillingDate',
        SUM(Case When sett.PayableAmount > 0 then sett.PaidAmount ELSE 0 END) AS 'SettlPaidAmount', 
		SUM(Case WHEN sett.RefundableAmount > 0 THEN sett.ReturnedAmount ELSE 0 END ) AS 'SettlReturnAmount',
		SUM(Case WHEN sett.DueAmount > 0 THEN sett.DueAmount   ELSE 0 END ) AS 'SettlDueAmount',
      SUM( sett.DiscountAmount ) 'SettlDiscountAmount'
from BIL_TXN_Settlements sett 
GROUP BY Convert(date,sett.SettlementDate),CreatedBy, CounterId
) settl
ON ctrUsrDay.BillingDate = settl.BillingDate AND ctrUsrDay.EmployeeId=settl.CreatedBy and ctrUsrDay.CounterId=settl.CounterId

LEFT JOIN
(
	  Select 
		ret.CounterId,
		ret.CreatedBy,
		Convert(date,ret.CreatedOn) 'BillingDate',
		 SUM(txn.SubTotal) AS 'SubTotal',
		 SUM(ret.DiscountAmount) AS 'DiscountAmount',
		 SUM(ret.TaxableAmount) AS 'TaxableAmount',
		 SUM(ret.TaxTotal) AS 'TaxAmount',
		 SUM(ret.TotalAmount) AS 'TotalAmount'
	 from BIL_TXN_InvoiceReturn ret, BIL_TXN_BillingTransaction txn
	 where ret.BillingTransactionId = txn.BillingTransactionId
	 and txn.BillStatus='paid'
	 GROUP BY Convert(date,ret.CreatedOn), ret.CounterId,ret.CreatedBy
	) cashRet
	ON ctrUsrDay.BillingDate = cashRet.BillingDate AND ctrUsrDay.EmployeeId=cashRet.CreatedBy and ctrUsrDay.CounterId=cashRet.CounterId	
)
GO
/****** Object:  Table [dbo].[MAT_TXN_PatientPayments]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAT_TXN_PatientPayments](
	[PatientPaymentId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[ReceiptNo] [int] NULL,
	[TransactionType] [varchar](50) NULL,
	[PatientId] [int] NOT NULL,
	[InAmount] [float] NULL,
	[OutAmount] [float] NULL,
	[Remarks] [varchar](400) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_MAT_TXN_PatientPayments] PRIMARY KEY CLUSTERED 
(
	[PatientPaymentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BILL_GetUserCollectionSummaryInDateRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BILL_GetUserCollectionSummaryInDateRange](
	@FromDate Date, 
	@ToDate Date
)
	RETURNS TABLE
/*
File: FN_BILL_GetUserCollectionSummaryInDateRange
Created: <sud:23Nov'21>
Usage Example: Select * from FN_BILL_GetUserCollectionSummaryInDateRange('2021-11-20','2021-11-25')
Description: To get different components of User Collection.
Calculation Variables:
      * CashSales_Amount  =  CashSubtotal-Discount
	  * CashSales_ReturnAmount =  ReturnSubtotal-ReturnDiscount
	  * Deposit Received
	  * Deposit Refund
	  * Net Collection From Receivable = CollectionFromReceivable (from Settlement table)
	  * Net Cash Discount = CashDiscount - ReturnCashDiscount (both from settlement table)
	  * Allowance Paid: To be added after Maternity payment done. 
Remarks:
	1. --We're taking CreditSales data only for Reference---
        Those values are neither used for calculation, nor to display in frontend---
	2. If billstatus value is null then we're considering it as 'paid'-- <needs revision>
Change History:
-----------------------------------------------------------------------------
S.No.  ChangedBy/Date                           Remarks
-----------------------------------------------------------------------------
1.    Sud/25Nov'21                  Initial Draft
---------------------------------------------------------------------------------------
*/
AS
RETURN
(

    SELECT * FROM 
	    (
			SELECT emp.EmployeeId, emp.FullName,  

				ISNULL(sales.Cash_TotalAmount,0)   'CashSales_Amount',
				ISNULL(retSales.Cash_RetTotalAmount,0) 'CashSales_ReturnAmount',
				ISNULL(deposits.DepositReceived,0) 'Deposit_Received',
				ISNULL(deposits.DepositRefund,0) 'Deposit_Refund',
				ISNULL(settl.CollnFromReceivable,0) 'CollectionFromReceivables',
				(ISNULL(settl.CashDiscountGiven,0) - ISNULL(settl.CashDiscountReturn,0)) 'Sett_CashDiscount',
				ISNULL(othrPmt.OtherPaymentGiven,0) 'OtherPaymentsGiven',

			-Calculation for Cash Collection---
			ISNULL(sales.Cash_TotalAmount,0) -  ISNULL(retSales.Cash_RetTotalAmount,0)
			+ ISNULL(deposits.DepositReceived,0) - ISNULL(deposits.DepositRefund,0)
			+ ISNULL(settl.CollnFromReceivable,0)
			- (ISNULL(settl.CashDiscountGiven,0) - ISNULL(settl.CashDiscountReturn,0)) 
			- ISNULL(othrPmt.OtherPaymentGiven,0)
			AS 'NetCollection'

			FROM EMP_Employee emp 
			LEFT JOIN
			(
				SELECT CreatedBy, 
						SUM(Case WHEN PaymentMode !='Credit' then SubTotal ELSE 0 END) AS Cash_Subtotal,
						SUM(Case WHEN PaymentMode ='Credit' then SubTotal ELSE 0 END) AS Credit_Subtotal,
	   					SUM(Case WHEN PaymentMode !='Credit' then DiscountAmount ELSE 0 END) AS Cash_DiscountAmt,
						SUM(Case WHEN PaymentMode ='Credit' then DiscountAmount ELSE 0 END) AS Credit_DiscountAmt,
						SUM(Case WHEN PaymentMode ='Credit' then TotalAmount ELSE 0 END) AS Credit_TotalAmount,
						SUM(Case WHEN PaymentMode !='Credit' then TotalAmount ELSE 0 END) AS Cash_TotalAmount,
						SUM(ISNULL(DiscountAmount,0)) AS Sales_TotalDiscount  --take both cash and credit
				FROM BIL_TXN_BillingTransaction
				WHERE CONVERT(Date,CreatedOn) BETWEEN @FromDate AND @ToDate
				GROUP BY CreatedBy
			) sales  ON sales.CreatedBy = emp.EmployeeId
			LEFT JOIN
			(
			BillStatus='paid'--takes Return of Cash sales as well as 'CreditReturned after settlement'
			if billstatus value is null then we're taking it as paid--
				SELECT CreatedBy, 
						SUM(Case WHEN ISNULL(BillStatus,'paid') ='paid' then SubTotal ELSE 0 END) AS Cash_RetSubtotal,
						SUM(Case WHEN ISNULL(BillStatus,'paid')='unpaid' then SubTotal ELSE 0 END) AS Credit_RetSubtotal,
	   					SUM(Case WHEN ISNULL(BillStatus,'paid')='paid' then DiscountAmount ELSE 0 END) AS Cash_RetDiscountAmt,
						SUM(Case WHEN ISNULL(BillStatus,'paid')='unpaid' then DiscountAmount ELSE 0 END) AS Credit_RetDiscountAmt,
						SUM(Case WHEN ISNULL(BillStatus,'paid')='unpaid' then TotalAmount ELSE 0 END) AS Credit_RetTotalAmount,
						SUM(Case WHEN ISNULL(BillStatus,'paid')='paid' then TotalAmount ELSE 0 END) AS Cash_RetTotalAmount,
						SUM(ISNULL(DiscountAmount,0)) AS SalesReturn_TotalDiscount  --take both cash and credit
				FROM BIL_TXN_InvoiceReturn
				WHERE CONVERT(Date,CreatedOn) BETWEEN @FromDate AND @ToDate
				GROUP BY CreatedBy
			) retSales  ON retSales.CreatedBy = emp.EmployeeId
			LEFT JOIN
			(
				SELECT CreatedBy, 
				SUM(CASE WHEN DepositType='Deposit' THEN Amount ELSE 0 END) AS 'DepositReceived',
				SUM(CASE WHEN  DepositType='depositdeduct' OR DepositType='ReturnDeposit' THEN Amount 
						ELSE 0 END) AS 'DepositRefund'
				FROM BIL_TXN_Deposit
				WHERE CONVERT(Date,CreatedOn) BETWEEN @FromDate AND @ToDate
				GROUP BY CreatedBy
			) deposits  ON deposits.CreatedBy = emp.EmployeeId

			LEFT JOIN
			(
				SELECT CreatedBy,
					Sum(ISNULL(CollectionFromReceivable,0)) 'CollnFromReceivable',
					Sum(ISNULL(DiscountAmount,0)) 'CashDiscountGiven',
					Sum(ISNULL(DiscountReturnAmount,0)) 'CashDiscountReturn'
				FROM BIL_TXN_Settlements 
				WHERE CONVERT(Date,CreatedOn) BETWEEN @FromDate AND @ToDate
				GROUP BY CreatedBy
			) settl  ON settl.CreatedBy = emp.EmployeeId

			LEFT JOIN
			(
				SELECT CreatedBy, SUM(ISNULL(OutAmount,0)) - SUM(ISNULL(InAmount,0)) 'OtherPaymentGiven'
				FROM MAT_TXN_PatientPayments
				WHERE Convert(DATE,CreatedOn) BETWEEN @FromDate AND @ToDate
				GROUP BY CreatedBy
			) othrPmt  ON othrPmt.CreatedBy = emp.EmployeeId


	) allDetails
	-Take only those rows where at least one of these fields are Non-Zero---
	WHERE CashSales_Amount != 0
		OR CashSales_ReturnAmount !=0
		OR Deposit_Received !=0
		OR Deposit_Refund !=0
		OR CollectionFromReceivables !=0
		OR Sett_CashDiscount !=0
		OR NetCollection !=0
)--end of Return

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemInfo]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BIL_GetTxnItemInfo]()
RETURNS TABLE
AS

/*
 FileName: FN_BIL_GetTxnItemInfo
 Description: This function returns distinct information of transactionitems along with its CreatedOn, CancelledOn, ReturnedOn, etc..
 Remarks: This Function doesn't contain information of Counter, CreatedBy so cannot be used for Counter/User-Collections.
 Created: 5Aug'17 <Sudarshan/Dinesh>
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      5Aug'17- sud/dinesh     created         To be used as common function for almost all billing reports.
 2.      6Aug'19-sud             modified        Added Insurance Column in return values.
 -----------------------------------------------------------------------
*/
RETURN
(
   get distinct CreatedDate and other informations about all transactionsItems--
   when an item is Unpaid, it's transactionid will always be null--
	Select Convert(date, CreatedOn) 'BillingDate',NULL AS BillingTransactionId,'unpaid' AS BillStatus, BillingTransactionItemId, ServiceDepartmentId, PatientId, ItemId, ProviderId,
	Price, Quantity, SubTotal,DiscountAmount,Tax,TotalAmount,Remarks, IsInsurance
	FROM BIL_TXN_BillingTransactionItems
	WHERE PaidDate is null or Convert(Date,PaidDate) != Convert(Date,CreatedOn)
	UNION
	  get distinct CreatedDate and other informations about only paid transactionsItems--
	Select Convert(date, PaidDate) 'BillingDate',BillingTransactionId,'paid' as BillStatus, BillingTransactionItemId, ServiceDepartmentId, PatientId, ItemId, ProviderId,
	price, Quantity, SubTotal,DiscountAmount,Tax,TotalAmount,Remarks , IsInsurance
	FROM BIL_TXN_BillingTransactionItems
	where BillStatus='Paid'
		UNION
   Select Convert(date,br.CreatedOn)'BillingDate',bi.BillingTransactionId,'return' as BillStatus, BillingTransactionItemId, ServiceDepartmentId, bi.PatientId, ItemId, ProviderId,
	     SUM(IsNULL(Price,0)) Price,SUM(IsNULL(Quantity,0)) Quantity ,SUM(IsNULL(bi.SubTotal,0)) SubTotal  ,SUM(IsNULL(bi.DiscountAmount,0)) DiscountAmount ,
		SUM(IsNULL(Tax,0)) Tax ,SUM(IsNULL(bi.TotalAmount,0)) TotalAmount, 
		MAX(br.Remarks) 'Remarks', IsInsurance  -- find a way to concatenate remarks if possible. this might be incorrect when 1 item is returned multiple times 
  from BIL_TXN_BillingTransactionItems bi join BIL_TXN_InvoiceReturn br on bi.BillingTransactionId=br.BillingTransactionId
	  where ReturnStatus=1
   Group By Convert(date, br.CreatedOn),bi.BillingTransactionId, BillingTransactionItemId, ServiceDepartmentId, bi.PatientId, ItemId, ProviderId, IsInsurance
		UNION
     get distinct CreatedDate and other informations of Cancelled transactionsItems--
	Select Convert(date, CancelledOn) 'CancelledDate',BillingTransactionId,'cancel' as BillStatus, BillingTransactionItemId, ServiceDepartmentId, PatientId, ItemId, ProviderId,
	price, Quantity, SubTotal,DiscountAmount,Tax,TotalAmount,CancelRemarks, IsInsurance
	from BIL_TXN_BillingTransactionItems
	where CancelledOn is not null
)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetActiveBilTxnItemsOfDoctors]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[FN_BIL_GetActiveBilTxnItemsOfDoctors]()
RETURNS TABLE
AS
/*
 FileName: FN_BIL_GetActiveBilTxnItemsOfDoctors
 Description: To get only the currently active items and their details for doctor referral 
              and doctor revenue reports. 
 Logics used here: 
  * ActiveQuantity =  Quantity-ReturnQuantity in case of return
  * Amount   =  TotalAmount * ActiveQuantity/InitialQuantity 
  * Cancelled items are excluded
  * items whose ActiveQuantity is zero are excluded.

 Remarks: This Function doesn't contain information of Counter, CreatedBy so cannot be used for Counter/User-Collections.
 Created: 12Dec'17 <Sudarshan>
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      12Dec'17               created         To be used as common function for all doctor related reports.
 -----------------------------------------------------------------------
*/
RETURN
(
  SELECT 
	CreatedOn 'BillingDate',
	ServiceDepartmentId,
	ServiceDepartmentName,
	ItemId,
	ItemName,
	this is Active Quantity--
	Quantity-ISNULL(ReturnQuantity,0) 'Quantity',
	this is Active Amount--
	TotalAmount * (Quantity - ISNULL(ReturnQuantity,0))/ ISNULL(NULLIF(Quantity,0),1)  'TotalAmount',
	ProviderId,
	ProviderName,
	PatientVisitId,
	RequisitionId
from BIL_TXN_BillingTransactionItems
where ProviderId is not null
and BillStatus !='cancel'
and Quantity-ISNULL(ReturnQuantity,0) != 0
)
-END OF FUNCTION----
GO
/****** Object:  View [dbo].[VW_BIL_TxnItemsInfo]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[VW_BIL_TxnItemsInfo]
  AS
/*
 FileName: VW_BIL_TxnItemsInfo
 Description: This view returns all transcationitems and their Paid/Unpaid/Cancelled/Returned Information grouped by date.
 Remarks: This view doesn't contain information of Counter, CreatedBy so cannot be used for Counter/User-Collections.
 Created: 5Aug'17 <Sudarshan/Dinesh>
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      5Aug'17- sud/dinesh     created         To be used as common view for almost all billing reports.
 2.      6Aug'19- sud            modified        Added insurance property in item level.
 -----------------------------------------------------------------------
*/
  SELECT 
	txnItmInfo.BillingDate,
	txnItmInfo.BillingTransactionItemId,
	txnItmInfo.BillingTransactionId,
	txnItmInfo.BillStatus,
	txnitmInfo.ServiceDepartmentId,
	txnItmInfo.ItemId,
	txnItmInfo.PatientId,
	txnItmInfo.ProviderId,
	txnItmInfo.IsInsurance,
    
	paid.Price 'PaidPrice',
	paid.Quantity 'PaidQuantity',
	paid.SubTotal 'PaidSubTotal',
	paid.DiscountAmount 'PaidDiscountAmount',
	paid.Tax 'PaidTax',
	paid.TotalAmount 'PaidTotalAmount',

	unpaid.Price 'UnpaidPrice',
	unpaid.Quantity 'UnpaidQuantity',
	unpaid.SubTotal 'UnpaidSubTotal',
	unpaid.DiscountAmount 'UnpaidDiscountAmount',
	unpaid.Tax 'UnpaidTax',
	unpaid.TotalAmount 'UnpaidTotalAmount',

	cancel.Price 'CancelPrice',
	cancel.Quantity 'CancelQuantity',
	cancel.SubTotal 'CancelSubTotal',
	cancel.DiscountAmount 'CancelDiscountAmount',
	cancel.Tax 'CancelTax',
	cancel.TotalAmount 'CancelTotalAmount',
	cancel.CreatedOn 'CreatedOn',
	
	bilRet.Price 'ReturnPrrice',
	bilRet.Quantity 'ReturnQuantity',
	bilRet.SubTotal 'ReturnSubTotal',
	bilRet.DiscountAmount 'ReturnDiscountAmount',
	bilRet.Tax 'ReturnTax',
	bilRet.TotalAmount 'ReturnTotalAmount'

 from  FN_BIL_GetTxnItemInfo() txnItmInfo

LEFT JOIN
(
	SELECT Convert(date,txnItm.PaidDate) 'BillingDate', txnItm.BillingTransactionItemId, txnItm.BillingTransactionId, txnItm.PatientId, txnItm.ProviderId, 
		txnItm.ServiceDepartmentId, txnItm.ItemId,txnItm.Price, txnItm.Quantity, txnItm.SubTotal,  txnItm.DiscountAmount, txnItm.Tax,
		txnItm.TotalAmount, txnItm.BillStatus, txnItm.IsInsurance
	FROM BIL_TXN_BillingTransactionItems txnItm 
	 WHERE  BillStatus = 'paid'
) paid

ON txnItmInfo.BillingDate = paid.BillingDate
  and txnItmInfo.BillingTransactionItemId = paid.BillingTransactionItemId and txnItmInfo.BillStatus = paid.BillStatus

LEFT JOIN
(

	SELECT Convert(date,txnItm.CreatedOn) 'BillingDate', txnItm.BillingTransactionItemId, txnItm.BillingTransactionId, txnItm.PatientId, txnItm.ProviderId, 
		txnItm.ServiceDepartmentId, txnItm.ItemId,txnItm.Price, txnItm.Quantity, txnItm.SubTotal,  txnItm.DiscountAmount, txnItm.Tax,
		txnItm.TotalAmount, 'unpaid' AS BillStatus
	FROM BIL_TXN_BillingTransactionItems txnItm 
	 WHERE  BillStatus = 'unpaid' OR (BillStatus = 'paid' AND Convert(date,CreatedOn) != CONVERT(date, PaidDate))
	  OR (BillStatus = 'cancel' )
) unpaid
ON txnItmInfo.BillingDate = unpaid.BillingDate
  and txnItmInfo.BillingTransactionItemId = unpaid.BillingTransactionItemId and txnItmInfo.BillStatus = unpaid.BillStatus

LEFT JOIN
(

	SELECT Convert(date,txnItm.CancelledOn) 'BillingDate', txnItm.BillingTransactionItemId, txnItm.BillingTransactionId, txnItm.PatientId, txnItm.ProviderId, 
		txnItm.ServiceDepartmentId, txnItm.ItemId,txnItm.Price, txnItm.Quantity, txnItm.SubTotal,  txnItm.DiscountAmount, txnItm.Tax,
		txnItm.TotalAmount, txnItm.BillStatus,txnItm.CancelledOn,txnItm.CreatedOn
	FROM BIL_TXN_BillingTransactionItems txnItm 
	 WHERE  BillStatus = 'cancel'
) cancel
ON txnItmInfo.BillingDate = cancel.BillingDate
  and txnItmInfo.BillingTransactionItemId = cancel.BillingTransactionItemId and txnItmInfo.BillStatus = cancel.BillStatus

LEFT JOIN
(
SELECT CONVERT(date,br.CreatedOn) 'BillingDate',
    BillingTransactionItemId, bi.BillingTransactionId,bi.Price, bi.Quantity,
     (ISNULL(bi.SubTotal,0)) SubTotal, (ISNULL(bi.DiscountAmount,0)) DiscountAmount, (ISNULL(Tax,0)) Tax, (ISNULL(bi.TotalAmount,0)) TotalAmount,'return' as BillStatus
    from BIL_TXN_BillingTransactionItems bi join BIL_TXN_InvoiceReturn br on bi.BillingTransactionId=br.BillingTransactionId
    where ReturnStatus=1
 
) bilRet
ON txnItmInfo.BillingDate = bilRet.BillingDate
  and txnItmInfo.BillingTransactionItemId = bilRet.BillingTransactionItemId

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemInfo_Income_Segregation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create FUNCTION [dbo].[FN_BIL_GetTxnItemInfo_Income_Segregation]()
RETURNS TABLE
AS

/*
 FileName: [FN_BIL_GetTxnItemInfo_Income_Segregation]
 Description: This function returns distinct information of transactionitems along with its CreatedOn, CancelledOn, ReturnedOn, etc..
 Remarks: This Function is created for to fetch the paid, unpaid , cancel and return transactions 
 Created: 29Nov'17 <Dinesh>
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      29Nov'18 Dinesh         created         To be used as common function for almost all billing reports.
 -----------------------------------------------------------------------
*/
RETURN
(
   get distinct CreatedDate and other informations about all transactionsItems--
   when an item is Unpaid, it's transactionid will always be null--
	Select Convert(date, CreatedOn) 'BillingDate',NULL AS BillingTransactionId,'unpaid' AS BillStatus, BillingTransactionItemId, ServiceDepartmentId, PatientId, ItemId, ProviderId,
	Price, Quantity, SubTotal,DiscountAmount,Tax,TotalAmount,Remarks
	FROM BIL_TXN_BillingTransactionItems
	WHERE PaidDate is null or Convert(Date,PaidDate) != Convert(Date,CreatedOn)
	UNION
	  get distinct CreatedDate and other informations about only paid transactionsItems--
	Select Convert(date, PaidDate) 'BillingDate',BillingTransactionId,'paid' as BillStatus, BillingTransactionItemId, ServiceDepartmentId, PatientId, ItemId, ProviderId,
	price, Quantity, SubTotal,DiscountAmount,Tax,TotalAmount,Remarks
	FROM BIL_TXN_BillingTransactionItems
	where BillStatus='Paid'
		UNION
   Select Convert(date,br.CreatedOn)'BillingDate',bi.BillingTransactionId,'return' as BillStatus, BillingTransactionItemId, ServiceDepartmentId, bi.PatientId, ItemId, ProviderId,
	     SUM(IsNULL(Price,0)) Price,SUM(IsNULL(Quantity,0)) Quantity ,SUM(IsNULL(bi.SubTotal,0)) SubTotal  ,SUM(IsNULL(bi.DiscountAmount,0)) DiscountAmount ,
		SUM(IsNULL(Tax,0)) Tax ,SUM(IsNULL(bi.TotalAmount,0)) TotalAmount, 
		MAX(br.Remarks) 'Remarks'  -- find a way to concatenate remarks if possible. this might be incorrect when 1 item is returned multiple times 
  from BIL_TXN_BillingTransactionItems bi join BIL_TXN_InvoiceReturn br on bi.BillingTransactionId=br.BillingTransactionId
	  where ReturnStatus=1
   Group By Convert(date, br.CreatedOn),bi.BillingTransactionId, BillingTransactionItemId, ServiceDepartmentId, bi.PatientId, ItemId, ProviderId
		UNION
     get distinct CreatedDate and other informations of Cancelled transactionsItems--
	Select Convert(date, CancelledOn) 'CancelledDate',BillingTransactionId,'cancel' as BillStatus, BillingTransactionItemId, ServiceDepartmentId, PatientId, ItemId, ProviderId,
	price, Quantity, SubTotal,DiscountAmount,Tax,TotalAmount,CancelRemarks
	from BIL_TXN_BillingTransactionItems
	where CancelledOn is not null
)

GO
/****** Object:  View [dbo].[VW_BIL_TxnItemsInfo_Income_Segregation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_BIL_TxnItemsInfo_Income_Segregation]
  AS
/*
 FileName: VW_BIL_TxnItemsInfo_Income_Segregation
 Description: This view returns all transcationitems and their Paid/Unpaid/Cancelled/Returned Information grouped by date.
 Remarks: This view doesn't contain information of Counter, CreatedBy so cannot be used for Counter/User-Collections.
 Created: 29Nov'18 <Dinesh>
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      29Nov'18 Dinesh     created         Created for Income Segregation Report 
 -----------------------------------------------------------------------
*/
  SELECT 
	txnItmInfo.BillingDate,
	txnItmInfo.BillingTransactionItemId,
	txnItmInfo.BillingTransactionId,
	txnItmInfo.BillStatus,
	txnitmInfo.ServiceDepartmentId,
	txnItmInfo.ItemId,
	txnItmInfo.PatientId,
	txnItmInfo.ProviderId,
    
	paid.Price 'PaidPrice',
	paid.Quantity 'PaidQuantity',
	paid.SubTotal 'PaidSubTotal',
	paid.DiscountAmount 'PaidDiscountAmount',
	paid.Tax 'PaidTax',
	paid.TotalAmount 'PaidTotalAmount',

	unpaid.Price 'UnpaidPrice',
	unpaid.Quantity 'UnpaidQuantity',
	unpaid.SubTotal 'UnpaidSubTotal',
	unpaid.DiscountAmount 'UnpaidDiscountAmount',
	unpaid.Tax 'UnpaidTax',
	unpaid.TotalAmount 'UnpaidTotalAmount',

	cancel.Price 'CancelPrice',
	cancel.Quantity 'CancelQuantity',
	cancel.SubTotal 'CancelSubTotal',
	cancel.DiscountAmount 'CancelDiscountAmount',
	cancel.Tax 'CancelTax',
	cancel.TotalAmount 'CancelTotalAmount',
	cancel.CreatedOn 'CreatedOn',
	
	bilRet.Price 'ReturnPrrice',
	bilRet.Quantity 'ReturnQuantity',
	bilRet.SubTotal 'ReturnSubTotal',
	bilRet.DiscountAmount 'ReturnDiscountAmount',
	bilRet.Tax 'ReturnTax',
	bilRet.TotalAmount 'ReturnTotalAmount'

 from  FN_BIL_GetTxnItemInfo_Income_Segregation() txnItmInfo

LEFT JOIN
(
	SELECT Convert(date,txnItm.PaidDate) 'BillingDate', txnItm.BillingTransactionItemId, txnItm.BillingTransactionId, txnItm.PatientId, txnItm.ProviderId, 
		txnItm.ServiceDepartmentId, txnItm.ItemId,txnItm.Price, txnItm.Quantity, txnItm.SubTotal,  txnItm.DiscountAmount, txnItm.Tax,
		txnItm.TotalAmount, txnItm.BillStatus
	FROM BIL_TXN_BillingTransactionItems txnItm 
	 WHERE  BillStatus = 'paid'
) paid

ON txnItmInfo.BillingDate = paid.BillingDate
  and txnItmInfo.BillingTransactionItemId = paid.BillingTransactionItemId and txnItmInfo.BillStatus = paid.BillStatus

LEFT JOIN
(

	SELECT Convert(date,txnItm.CreatedOn) 'BillingDate', txnItm.BillingTransactionItemId, txnItm.BillingTransactionId, txnItm.PatientId, txnItm.ProviderId, 
		txnItm.ServiceDepartmentId, txnItm.ItemId,txnItm.Price, txnItm.Quantity, txnItm.SubTotal,  txnItm.DiscountAmount, txnItm.Tax,
		txnItm.TotalAmount, 'unpaid' AS BillStatus
	FROM BIL_TXN_BillingTransactionItems txnItm 
	 WHERE  BillStatus = 'unpaid' OR (BillStatus = 'paid' AND Convert(date,CreatedOn) != CONVERT(date, PaidDate))
	  OR (BillStatus = 'cancel' )
) unpaid
ON txnItmInfo.BillingDate = unpaid.BillingDate
  and txnItmInfo.BillingTransactionItemId = unpaid.BillingTransactionItemId and txnItmInfo.BillStatus = unpaid.BillStatus

LEFT JOIN
(

	SELECT Convert(date,txnItm.CancelledOn) 'BillingDate', txnItm.BillingTransactionItemId, txnItm.BillingTransactionId, txnItm.PatientId, txnItm.ProviderId, 
		txnItm.ServiceDepartmentId, txnItm.ItemId,txnItm.Price, txnItm.Quantity, txnItm.SubTotal,  txnItm.DiscountAmount, txnItm.Tax,
		txnItm.TotalAmount, txnItm.BillStatus,txnItm.CancelledOn,txnItm.CreatedOn
	FROM BIL_TXN_BillingTransactionItems txnItm 
	 WHERE  BillStatus = 'cancel'
) cancel
ON txnItmInfo.BillingDate = cancel.BillingDate
  and txnItmInfo.BillingTransactionItemId = cancel.BillingTransactionItemId and txnItmInfo.BillStatus = cancel.BillStatus

LEFT JOIN
(

	 SELECT CONVERT(date,br.CreatedOn) 'BillingDate',
	  BillingTransactionItemId, br.BillingTransactionId,SUM(ISNULL(br.Quantity,0)) Quantity, 
	   SUM(ISNULL(br.SubTotal,0)) SubTotal, SUM(ISNULL( br.DiscountAmount,0)) DiscountAmount, SUM(ISNULL(Tax,0)) Tax, SUM(ISNULL(br.TotalAmount,0)) TotalAmount,'return' as BillStatus
	  from BIL_TXN_BillingTransactionItems br where ReturnStatus=1
	  Group BY BillingTransactionItemId, br.BillingTransactionId, CONVERT(date,br.CreatedOn),br.CreatedBy,  br.CounterId
) bilRet
ON txnItmInfo.BillingDate = bilRet.BillingDate
  and txnItmInfo.BillingTransactionItemId = bilRet.BillingTransactionItemId and txnItmInfo.BillStatus = bilRet.BillStatus

GO
/****** Object:  Table [dbo].[PAT_PatientVisits]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientVisits](
	[PatientVisitId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[VisitDate] [datetime] NULL,
	[ProviderName] [varchar](200) NULL,
	[Comments] [varchar](70) NULL,
	[ReferredByProvider] [varchar](70) NULL,
	[VisitType] [varchar](20) NULL,
	[VisitStatus] [varchar](20) NULL,
	[VisitTime] [time](7) NULL,
	[VisitDuration] [int] NULL,
	[VisitCode] [varchar](10) NULL,
	[ProviderId] [int] NULL,
	[AppointmentId] [int] NULL,
	[BillingStatus] [varchar](20) NULL,
	[ReferredByProviderId] [int] NULL,
	[AppointmentType] [varchar](20) NULL,
	[ParentVisitId] [int] NULL,
	[IsVisitContinued] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[Remarks] [nvarchar](100) NULL,
	[IsSignedVisitSummary] [bit] NULL,
	[TransferredProviderId] [int] NULL,
	[ClaimCode] [bigint] NULL,
	[DepartmentId] [int] NULL,
	[ConcludeDate] [datetime] NULL,
	[QueueNo] [int] NULL,
	[IsTriaged] [bit] NULL,
	[Ins_HasInsurance] [bit] NULL,
	[QueueStatus] [varchar](30) NULL,
 CONSTRAINT [PK_PAT_PatientVisits] PRIMARY KEY CLUSTERED 
(
	[PatientVisitId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_APPT_GetReferalVisitInformation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[FN_APPT_GetReferalVisitInformation]()
RETURNS TABLE
AS

/*
 FileName: FN_APPT_GetReferalVisitInformation
 Description: 
 Remarks: 
 Created: 19Aug'17- sud
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      19Aug'17- sud           created               
 -----------------------------------------------------------------------
*/
RETURN
(
	  WITH RefVisits AS
	  (
		Select v1.PatientId, v1.PatientVisitId 'InitialVisitId', v1.VisitDate, v1.ProviderId Doc1, v2.ProviderId Doc2, 
				v3.ProviderId Doc3, v4.ProviderId Doc4,v5.ProviderId Doc5,
       -Sum total number of Providers Involved in this Referal Hierarchy--
	   we needed to get 1 or zero from all parts, so dividing 'ProviderId' by 'ProviderId' will give us 1 or when null It'll give us Zero--
	   -Need 1 in denominator to avoid DivideByZero exception
		(ISNULL(v1.ProviderId,0)/ISNULL(v1.ProviderId,1)) + (ISNULL(v2.ProviderId,0)/ISNULL(v2.ProviderId,1))+(ISNULL(v3.ProviderId,0)/ISNULL(v3.ProviderId,1)) 
		+ (ISNULL(v4.ProviderId,0)/ISNULL(v4.ProviderId,1))+(ISNULL(v5.ProviderId,0)/ISNULL(v5.ProviderId,1))    AS 'TotalReferrals'
		from 
		 ( 
		 --Get the ParentMost visit Information as Anchor (LEFT-MOST) Table, and join to VisitTable Again to get it's NextVisit (referral)
		 We're Keeping Max Limit as 5 which will should cover 99.99% of the cases since it's not practical to do more than
		  5 OPD referrals in a single day for single patient
		  In 95% of the Referrals there'll be Total 2 doctors involved, Kept total 5 to be in safer side--
		 SELECT PatientId, ProviderId,PatientVisitId,ParentVisitId,  convert(date, VisitDate) 'VisitDate'  
		   from PAT_PatientVisits where ParentVisitId is null and IsVisitContinued=1 ) v1
		LEFT JOIN
		  ( SELECT PatientId, ProviderId,PatientVisitId,ParentVisitId, convert(date, VisitDate) 'VisitDate'  
			 from PAT_PatientVisits where ParentVisitId is not null and AppointmentType='referral' 
		  ) v2 ON v1.PatientVisitId = v2.ParentVisitId
		LEFT JOIN
		   ( SELECT PatientId, ProviderId,PatientVisitId,ParentVisitId,  convert(date, VisitDate) 'VisitDate'  
			 from PAT_PatientVisits where ParentVisitId is not null and AppointmentType='referral'
		   ) v3 ON v2.PatientVisitId = v3.ParentVisitId
		LEFT JOIN
		   ( SELECT PatientId, ProviderId,PatientVisitId,ParentVisitId,convert(date, VisitDate) 'VisitDate'  
			 from PAT_PatientVisits where ParentVisitId is not null and AppointmentType='referral'
		   ) v4
		 ON v3.PatientVisitId = v4.ParentVisitId
		LEFT JOIN
		   ( SELECT PatientId, ProviderId,PatientVisitId,ParentVisitId,convert(date, VisitDate) 'VisitDate'  
			 from PAT_PatientVisits where ParentVisitId is not null and AppointmentType='referral'
		   ) v5
		 ON v4.PatientVisitId = v5.ParentVisitId
	  )

	  SELECT PatientId, VisitDate,InitialVisitId 'InitialVisitId', DocName , ProviderId, TotalReferrals 
	  FROM   
	     (SELECT PatientId,InitialVisitId, VisitDate, TotalReferrals, Doc1, Doc2, Doc3, Doc4, Doc5  
	  	FROM RefVisits where TotalReferrals !=1  -- to exclude those visits woth followup, since IsVisitContinued will be 1 also for them
	  	) p  
	  UNPIVOT  
	     ( ProviderId FOR DocName IN (Doc1, Doc2, Doc3, Doc4, Doc5 )  
	  )AS unpvt
)

GO
/****** Object:  Table [dbo].[PHRM_Deposit]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_Deposit](
	[DepositId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[ReceiptNo] [int] NULL,
	[PatientVisitId] [int] NULL,
	[PatientId] [int] NOT NULL,
	[DepositType] [varchar](20) NULL,
	[DepositAmount] [float] NOT NULL,
	[DepositBalance] [float] NOT NULL,
	[Remark] [varchar](max) NULL,
	[CounterId] [int] NULL,
	[PrintCount] [int] NULL,
	[PaymentMode] [varchar](50) NULL,
	[PaymentDetails] [varchar](max) NULL,
	[TransactionId] [int] NULL,
	[SettlementId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[StoreId] [int] NOT NULL,
 CONSTRAINT [PK_PHRM_Deposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_Settlement]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_Settlement](
	[SettlementId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[SettlementReceiptNo] [int] NOT NULL,
	[SettlementDate] [datetime] NULL,
	[SettlementType] [varchar](50) NULL,
	[PatientId] [int] NOT NULL,
	[PayableAmount] [float] NULL,
	[RefundableAmount] [float] NULL,
	[PaidAmount] [float] NULL,
	[ReturnedAmount] [float] NULL,
	[DepositDeducted] [float] NULL,
	[DueAmount] [float] NULL,
	[DiscountAmount] [float] NULL,
	[PaymentMode] [varchar](50) NULL,
	[PaymentDetails] [varchar](1000) NULL,
	[CounterId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[PrintCount] [int] NULL,
	[IsActive] [bit] NULL,
	[PrintedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[CollectionFromReceivable] [float] NULL,
	[DiscountReturnAmount] [float] NULL,
	[StoreId] [int] NULL,
 CONSTRAINT [PK_PHRM_TXN_Settlement] PRIMARY KEY CLUSTERED 
(
	[SettlementId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_PHRM_GetUserCollectionSummaryInDateRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_PHRM_GetUserCollectionSummaryInDateRange] (
	@FromDate DATE
	,@ToDate DATE
	,@StoreId INT
	,@CreatedBy NVARCHAR(MAX)
	)
RETURNS TABLE
	/*
File: FN_PHRM_GetUserCollectionSummaryInDateRange
Created: <rohit/ramesh:12th Dec'21>
Usage Example: Select * from FN_PHRM_GetUserCollectionSummaryInDateRange('2021-12-11','2021-12-13')
Description: To get different components of User Collection.
Calculation Variables:
      * CashSales_Amount  =  CashSubtotal-Discount
	  * CashSales_ReturnAmount =  ReturnSubtotal-ReturnDiscount
	  * Deposit Received
	  * Deposit Refund
	  * Net Collection From Receivable = CollectionFromReceivable (from Settlement table)
	  * Net Cash Discount = CashDiscount - ReturnCashDiscount (both from settlement table)
Remarks:
	1. --We're taking CreditSales data only for Reference---
        Those values are neither used for calculation, nor to display in frontend---
	2. If billstatus value is null then we're considering it as 'paid'-- <needs revision>
    3. Same Function of Billing is Copied here <ref: ramesh>. 
Change History:
-----------------------------------------------------------------------------
S.No.  ChangedBy/Date                           Remarks
-----------------------------------------------------------------------------
1.    Rohit/11Dec'21                  Initial Draft
2.	  Rohit/14Jan'22				  Added New Parameter 'CreatedBy' To Filter The UserCollection Summary using Username.
---------------------------------------------------------------------------------------
*/
AS
RETURN (
		SELECT *
		FROM (
			SELECT emp.EmployeeId
				,emp.FullName
				,ISNULL(sales.Cash_TotalAmount, 0) 'CashSales_Amount'
				,ISNULL(retSales.Cash_RetTotalAmount, 0) 'CashSales_ReturnAmount'
				,ISNULL(deposits.DepositReceived, 0) 'Deposit_Received'
				,ISNULL(deposits.DepositRefund, 0) 'Deposit_Refund'
				,ISNULL(settl.CollnFromReceivable, 0) 'CollectionFromReceivables'
				,(ISNULL(settl.CashDiscountGiven, 0) - ISNULL(settl.CashDiscountReturn, 0)) 'Sett_CashDiscount'
				,
				ISNULL(othrPmt.OtherPaymentGiven,0) 'OtherPaymentsGiven',
				-Calculation for Cash Collection---
				ISNULL(sales.Cash_TotalAmount, 0) - ISNULL(retSales.Cash_RetTotalAmount, 0) + ISNULL(deposits.DepositReceived, 0) - ISNULL(deposits.DepositRefund, 0) + ISNULL(settl.CollnFromReceivable, 0) - (ISNULL(settl.CashDiscountGiven, 0) - ISNULL(settl.CashDiscountReturn, 0))
					- ISNULL(othrPmt.OtherPaymentGiven,0)
				AS 'NetCollection'
			FROM EMP_Employee emp
			LEFT JOIN (
				SELECT inv.CreatedBy
					,SUM(CASE 
							WHEN PaymentMode != 'credit'
								THEN SubTotal
							ELSE 0
							END) AS Cash_Subtotal
					,SUM(CASE 
							WHEN PaymentMode = 'credit'
								THEN SubTotal
							ELSE 0
							END) AS Credit_Subtotal
					,SUM(CASE 
							WHEN PaymentMode != 'credit'
								THEN DiscountAmount
							ELSE 0
							END) AS Cash_DiscountAmt
					,SUM(CASE 
							WHEN PaymentMode = 'credit'
								THEN DiscountAmount
							ELSE 0
							END) AS Credit_DiscountAmt
					,SUM(CASE 
							WHEN PaymentMode = 'credit'
								THEN TotalAmount
							ELSE 0
							END) AS Credit_TotalAmount
					,SUM(CASE 
							WHEN PaymentMode != 'credit'
								THEN TotalAmount
							ELSE 0
							END) AS Cash_TotalAmount
					,SUM(ISNULL(DiscountAmount, 0)) AS Sales_TotalDiscount
				take both cash and credit
				FROM PHRM_TXN_Invoice inv
				LEFT JOIN EMP_Employee emp ON inv.CreatedBy = emp.EmployeeId
				WHERE (
						StoreId = @StoreId
						OR @StoreId IS NULL
						)
					AND CONVERT(DATE, CreateOn) BETWEEN @FromDate
						AND @ToDate
					AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
				GROUP BY inv.CreatedBy
				) sales ON sales.CreatedBy = emp.EmployeeId
			LEFT JOIN (
				BillStatus='paid'--takes Return of Cash sales as well as 'CreditReturned after settlement'
				if billstatus value is null then we're taking it as paid--
				SELECT ret.CreatedBy
					,SUM(CASE 
							WHEN ISNULL(txn.BilStatus, 'paid') = 'paid'
								THEN ret.SubTotal
							ELSE 0
							END) AS Cash_RetSubtotal
					,SUM(CASE 
							WHEN ISNULL(txn.BilStatus, 'paid') = 'unpaid'
								THEN ret.SubTotal
							ELSE 0
							END) AS Credit_RetSubtotal
					,SUM(CASE 
							WHEN ISNULL(txn.BilStatus, 'paid') = 'paid'
								THEN ret.DiscountAmount
							ELSE 0
							END) AS Cash_RetDiscountAmt
					,SUM(CASE 
							WHEN ISNULL(txn.BilStatus, 'paid') = 'unpaid'
								THEN ret.DiscountAmount
							ELSE 0
							END) AS Credit_RetDiscountAmt
					,SUM(CASE 
							WHEN ISNULL(txn.BilStatus, 'paid') = 'unpaid'
								THEN ret.TotalAmount
							ELSE 0
							END) AS Credit_RetTotalAmount
					,SUM(CASE 
							WHEN ISNULL(txn.BilStatus, 'paid') = 'paid'
								THEN ret.TotalAmount
							ELSE 0
							END) AS Cash_RetTotalAmount
					,SUM(ISNULL(ret.DiscountAmount, 0)) AS SalesReturn_TotalDiscount
				take both cash and credit
				FROM PHRM_TXN_InvoiceReturn ret
				LEFT JOIN PHRM_TXN_Invoice txn ON (
						(
							ret.InvoiceId = txn.InvoiceId
							AND txn.PaymentMode = 'cash'
							)
						OR (
							ret.InvoiceId = txn.InvoiceId
							AND txn.PaymentMode = 'cash'
							AND txn.SettlementId IS NOT NULL
							)
						)
				LEFT JOIN EMP_Employee emp ON ret.CreatedBy = emp.EmployeeId
				WHERE ret.PaymentMode = 'cash'
					AND CONVERT(DATE, ret.CreatedOn) BETWEEN @FromDate
						AND @ToDate
					AND (
						ret.StoreId = @StoreId
						OR @StoreId IS NULL
						)
					AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
				GROUP BY ret.CreatedBy
				) retSales ON retSales.CreatedBy = emp.EmployeeId
			LEFT JOIN (
				SELECT dep.CreatedBy
					,SUM(CASE 
							WHEN DepositType = 'deposit'
								THEN DepositAmount
							ELSE 0
							END) AS 'DepositReceived'
					,SUM(CASE 
							WHEN DepositType = 'depositdeduct'
								OR DepositType = 'ReturnDeposit'
								THEN DepositAmount
							ELSE 0
							END) AS 'DepositRefund'
				FROM PHRM_Deposit dep
				LEFT JOIN EMP_Employee emp ON dep.CreatedBy = emp.EmployeeId
				WHERE CONVERT(DATE, dep.CreatedOn) BETWEEN @FromDate
						AND @ToDate
					AND (
						StoreId = @StoreId
						OR @StoreId IS NULL
						)
					AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
				GROUP BY dep.CreatedBy
				) deposits ON deposits.CreatedBy = emp.EmployeeId
			LEFT JOIN (
				SELECT sett.CreatedBy
					,Sum(ISNULL(CollectionFromReceivable, 0)) 'CollnFromReceivable'
					,Sum(ISNULL(DiscountAmount, 0)) 'CashDiscountGiven'
					,Sum(ISNULL(DiscountReturnAmount, 0)) 'CashDiscountReturn'
				FROM PHRM_TXN_Settlement sett
				LEFT JOIN EMP_Employee emp ON sett.CreatedBy = emp.EmployeeId
				WHERE CONVERT(DATE, sett.CreatedOn) BETWEEN @FromDate
						AND @ToDate
					AND (
						StoreId = @StoreId
						OR @StoreId IS NULL
						)
					AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
				GROUP BY sett.CreatedBy
				) settl ON settl.CreatedBy = emp.EmployeeId
			) allDetails
		-Take only those rows where at least one of these fields are Non-Zero---
		WHERE CashSales_Amount != 0
			OR CashSales_ReturnAmount != 0
			OR Deposit_Received != 0
			OR Deposit_Refund != 0
			OR CollectionFromReceivables != 0
			OR Sett_CashDiscount != 0
			OR NetCollection != 0
		) --end of Return

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_old]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_old] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
-Select * from [FN_BIL_GetTxnItemsInfoWithDateSeparation]  ('2018-09-12','2018-09-12')
- select * from VW_BIL_TxnItemsInfoWithDateSeparation
/*
 File: [FN_BIL_GetTxnItemsInfoWithDateSeparation]
 Created: 15Aug'18 <sud>
 Description: This takes item's info from a view and does separation of Different Dates and Amount based on input values.
 Remarks: Needs Revision, Add more fields as per requirments
 ----------Change History------------
 S.No.   ModifiedBy/Date         Remarks
 --------------------------------------
 1.      Sud/15Aug'18           Initial Version
 2.      Sud/22Aug'18           Updated for TotalCollection  <Needs Revision>
 3.      Sud/30Aug'18           Revised for Provisional and BillStatus
 4.       Dinesh/10Sept'18      passing itemname along with srvDeptName to the function
 5.       Dinesh/14Sept'18      added Provisional amount for doctor summary report
 ---------------------------------------- */
AS
RETURN
( 

   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',

      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,

		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp, 
			   
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,ProviderName,
				
				BillingType, 
				RequestingDeptId,

					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate
				FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation] itmInfo
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )

)---end of return

GO
/****** Object:  Table [dbo].[INCTV_MAP_EmployeeBillItemsMap]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_MAP_EmployeeBillItemsMap](
	[EmployeeBillItemsMapId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[BillItemPriceId] [int] NULL,
	[AssignedToPercent] [float] NULL,
	[ReferredByPercent] [float] NULL,
	[PriceCategoryId] [int] NULL,
	[HasGroupDistribution] [bit] NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[BillingTypesApplicable] [varchar](20) NULL,
 CONSTRAINT [PK_INCTV_MAP_EmployeeBillItemsMap] PRIMARY KEY CLUSTERED 
(
	[EmployeeBillItemsMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_CFG_BillItemPrice]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_CFG_BillItemPrice](
	[BillItemPriceId] [int] IDENTITY(1,1) NOT NULL,
	[ServiceDepartmentId] [int] NULL,
	[ItemName] [varchar](200) NULL,
	[Price] [float] NULL,
	[ItemId] [int] NULL,
	[TaxApplicable] [bit] NULL,
	[DiscountApplicable] [bit] NULL,
	[Description] [varchar](500) NULL,
	[ProcedureCode] [varchar](10) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[DisplaySeq] [int] NULL,
	[ItemCode] [varchar](20) NULL,
	[IsDoctorMandatory] [bit] NULL,
	[IntegrationName] [varchar](200) NULL,
	[HasAdditionalBillingItems] [bit] NULL,
	[EHSPrice] [float] NULL,
	[SAARCCitizenPrice] [float] NULL,
	[ForeignerPrice] [float] NULL,
	[GovtInsurancePrice] [float] NULL,
	[isFractionApplicable] [bit] NOT NULL,
	[InsuranceApplicable] [bit] NOT NULL,
	[IsInsurancePackage] [bit] NOT NULL,
	[IsNormalPriceApplicable] [bit] NULL,
	[IsEHSPriceApplicable] [bit] NULL,
	[IsForeignerPriceApplicable] [bit] NULL,
	[IsSAARCPriceApplicable] [bit] NULL,
	[IsOT] [bit] NULL,
	[IsProc] [bit] NULL,
	[Category] [varchar](55) NULL,
	[AllowMultipleQty] [bit] NULL,
	[InsForeignerPrice] [float] NULL,
	[IsInsForeignerPriceApplicable] [bit] NULL,
	[DefaultDoctorList] [varchar](2000) NULL,
	[IsValidForReporting] [bit] NULL,
	[IsZeroPriceAllowed] [bit] NULL,
	[IsErLabApplicable] [bit] NULL,
 CONSTRAINT [PK_BIL_CFG_BillItemPrice] PRIMARY KEY CLUSTERED 
(
	[BillItemPriceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_SrvDeptAndItemId] UNIQUE NONCLUSTERED 
(
	[ServiceDepartmentId] ASC,
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INCTV_EmployeeIncentiveInfo]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_EmployeeIncentiveInfo](
	[EmployeeIncentiveInfoId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[TDSPercent] [float] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_INCTV_EmployeeIncentiveInfo] PRIMARY KEY CLUSTERED 
(
	[EmployeeIncentiveInfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_INCTV_EmployeeIncentiveInfo_EmployeeId] UNIQUE NONCLUSTERED 
(
	[EmployeeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_CFG_PriceCategory]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_CFG_PriceCategory](
	[PriceCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[PriceCategoryName] [varchar](100) NULL,
	[DisplayName] [varchar](100) NULL,
	[BillingColumnName] [varchar](100) NULL,
	[IsDefault] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_BIL_CFG_PriceCategory] PRIMARY KEY CLUSTERED 
(
	[PriceCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_INCTV_GetIncentiveSettings]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_INCTV_GetIncentiveSettings] ()
RETURNS TABLE
/*
To get current incentive profile settings
Created: sud-15Feb'20
Remarks: Needs revision.
Change History:
----------------------------------------------------------------------------------------
S.No.    Author         Remarks
----------------------------------------------------------------------------------------
1.      15Feb'20/sud    Initial Draft
2.      15Mar'20/Sud    Added TDSPercenatge in the Select list, which will be used later in calculation.
3.		11June2020/Pratik   GroupDistribution Impacts on Existing Functionalities 
----------------------------------------------------------------------------------------
*/
AS
    RETURN
    (
      Select 
       profItm.BillItemPriceId, price.ServiceDepartmentId, price.ItemId, price.ItemName,
       priceCat.PriceCategoryId, priceCat.PriceCategoryName,
       prof.ProfileName, prof.ProfileId,
       emp.EmployeeId,
       emp.FullName,
       profItm.AssignedToPercent,
       profItm.ReferredByPercent,
       prof.TDSPercentage 
     from INCTV_MST_Profile  prof
       INNER JOIN BIL_CFG_PriceCategory priceCat
       ON prof.PriceCategoryId=priceCat.PriceCategoryId 
       INNER JOIN INCTV_BillItems_Profile_Map profItm
        ON prof.ProfileId= profItm.ProfileId
       INNER JOIN INCTV_EMP_Profile_Map empProf
        ON prof.ProfileId=empProf.ProfileId
       INNER JOIN EMP_Employee emp
       ON empProf.EmployeeId=emp.EmployeeId  
       INNER JOIN BIL_CFG_BillItemPrice  price
        ON profItm.BillItemPriceId = price.BillItemPriceId


      SELECT 
        empBillItmMap.BillItemPriceId,empInctvInfo.EmployeeIncentiveInfoId,
        itmPrice.ServiceDepartmentId, itmPrice.ItemId, itmPrice.ItemName,
        priceCat.PriceCategoryId, priceCat.PriceCategoryName,
        emp.EmployeeId,
        emp.FullName,
        empBillItmMap.AssignedToPercent,
        empBillItmMap.ReferredByPercent,
        empInctvInfo.TDSPercent 
      from INCTV_EmployeeIncentiveInfo empInctvInfo
      INNER JOIN INCTV_MAP_EmployeeBillItemsMap empBillItmMap
        on empInctvInfo.EmployeeId=empBillItmMap.EmployeeId
      INNER JOIN BIL_CFG_BillItemPrice  itmPrice
        ON empBillItmMap.BillItemPriceId = itmPrice.BillItemPriceId
      INNER JOIN BIL_CFG_PriceCategory priceCat
        ON empBillItmMap.PriceCategoryId=priceCat.PriceCategoryId 
      INNER JOIN EMP_Employee emp
        ON empInctvInfo.EmployeeId=emp.EmployeeId  
        where empInctvInfo.IsActive=1 
    )
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_PatientCensus]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_PatientCensus] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
-Select * from [FN_BIL_GetTxnItemsInfoWithDateSeparation]  ('2018-09-01','2018-09-12')
- select * from VW_BIL_TxnItemsInfoWithDateSeparation
/*
 File: [FN_BIL_GetTxnItemsInfoWithDateSeparation]
 Created: 15Aug'18 <sud>
 Description: This takes item's info from a view and does separation of Different Dates and Amount based on input values.
 Remarks: Needs Revision, Add more fields as per requirments
 ----------Change History------------
 S.No.   ModifiedBy/Date         Remarks
 --------------------------------------
 1.      Sud/15Aug'18           Initial Version
 2.      Sud/22Aug'18           Updated for TotalCollection  <Needs Revision>
 3.      Sud/30Aug'18           Revised for Provisional and BillStatus
 4.      Dinesh/10Sept'18		passing itemname along with srvDeptName to the function
 5.      Dinesh/14Sept'18		added Provisional amount for doctor summary report
 6.		 Ramavtar/12Nov'18		getting providerName from employee table
 7.      Dinesh/05th_Feb'19      Doctor Department Department included in report to segregate doctors according to department
 ---------------------------------------- */
AS
RETURN
( 

   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',

      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,

		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,emp.DepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp, 
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,
				CASE WHEN ProviderId IS NOT NULL
					THEN ISNULL(emp.Salutation + '. ','') + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ','') + emp.LastName
					ELSE NULL 
				END AS ProviderName,
				BillingType, 
				RequestingDeptId,
				CASE 
					WHEN itmInfo.CreditDate IS NULL AND itmInfo.PaymentMode = 'credit' THEN 'CreditPaidSameDay'
					ELSE itmInfo.PaymentMode
				END AS 'PaymentMode',
				VisitType,
					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate
				FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation] itmInfo
					LEFT JOIN [dbo].[EMP_Employee] emp ON itmInfo.ProviderId = emp.EmployeeId
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )
)---end of return

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BILL_BillingTxnSegregation_ByBillingType_DailySales]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
File: FN_BILL_BillingTxnSegregation_ByBillingType_DailySales
Created: <sud:15Feb'19>
Usage Example: Select * from FN_BILL_BillingTxnSegregation_ByBillingType_DailySales('2019-07-01','2019-07-10')
Description: Get individual components of sales eg: 
    CashSales, CreditSales, CashReturn, CreditReturn, CreditReceived 
	from Invoice Table ( BIL_TXN_BIllingTransaction )

Logic Used:
  Cash Sales   => PaymentMode !='credit'  
                 since we're yet to finalize multiple payment mode (eg: Cheque, Wallet, Card, etc scenarios)
  Credit Sales => PaymentMode = Credit
  CashReturn   => BillStatus='Paid' from Return Table--To manage Return of Credit Invoice after settlement.
  CreditReturn => BillStatus='unpaid' from Return Table
  CreditReceived => Not Required.. Handled by Settlement.

Remarks:
    PaymentMode if not found is considered as Cash.

Change History:
-----------------------------------------------------------------------------
S.No.  ChangedBy/Date                           Remarks
-----------------------------------------------------------------------------
1.    Sud/15Feb'19                  Initial Draft
2.    sud/7Aug'19                   Added Insurance Fields in Return table.
3.    Sud/3May'21                   Updated Remarks on Return cases.
4.    Sud/22Nov'21                  Complete Re-write after changes in settlement scenarios.
                                    JiraId: EMR-4496 
---------------------------------------------------------------------------------------
*/

CREATE FUNCTION [dbo].[FN_BILL_BillingTxnSegregation_ByBillingType_DailySales](
	@FromDate Date, 
	@ToDate Date
)

RETURNS TABLE

AS
RETURN
(
		Cash Sales---
		SELECT   Convert(Date,CreatedOn) 'BillingDate', 
				InvoiceCode+Convert(varchar(20),InvoiceNo) 'InvoiceNo', 
				Patientid,
				'CashSales' AS 'BillingType',
				SubTotal,DiscountAmount,TaxTotal, TotalAmount, 
				TotalAmount AS 'CashCollection', 
				0 AS 'DepositReceived', 0 AS 'DepositRefund',
				0 AS CreditReceived,  0 AS 'CreditAmount',
				PaidCounterId 'CounterId',PaymentReceivedBy 'EmployeeId',Remarks, IsInsuranceBilling, 1 as DisplaySeq
		FROM BIL_TXN_BillingTransaction
		WHERE ISNULL(PaymentMode,'cash') !='credit' 
			AND Convert(Date,Createdon) between @FromDate and @ToDate
				 
		UNION ALL

		Credit Sales--
		SELECT COnvert(Date,CreatedOn) 'BillingDate', 
			InvoiceCode+Convert(varchar(20),InvoiceNo) 'InvoiceNo', 
			Patientid,
			'CreditSales' AS 'BillingType',
			SubTotal,DiscountAmount,TaxTotal,TotalAmount, 
			0 AS 'CashCollection', 0 AS 'DepositReceived', 0 AS 'DepositRefund',
			0 AS 'CreditReceived',TotalAmount  AS 'CreditAmount',
			CounterId 'CounterId', CreatedBy 'EmployeeId', Remarks,IsInsuranceBilling, 2 as DisplaySeq 
		FROM BIL_TXN_BillingTransaction
		Where PaymentMode ='credit' 
			AND Convert(Date,Createdon) between @FromDate and @ToDate

		UNION ALL
		Cash Return---
		SELECT   Convert(Date,ret.CreatedOn) 'BillingDate',  
				'CRN-'+Convert(varchar(20),ret.CreditNoteNumber) 'ReceiptNo', 
				ret.Patientid,
				'CashReturn' AS 'BillingType',
				(-ret.SubTotal) 'SubTotal', (-ret.DiscountAmount) 'DiscountAmount', (-ret.TaxTotal) 'TaxAmount', (-ret.TotalAmount) 'TotalAmount', 
	  			(-ret.TotalAmount) AS 'CashCollection', 0 AS 'DepositReceived', 0 AS 'DepositRefund',
				0 AS 'CreditReceived', 0 AS 'CreditAmount',
			ret.CounterId, ret.CreatedBy 'EmployeeId', 
					ret.Remarks + ' (Reference Invoice No:'+ Convert(varchar(20),ret.RefInvoiceNum)+')' AS 'Remarks', 
			ret.IsInsuranceBilling, 4 as DisplaySeq 
		FROM BIL_TXN_InvoiceReturn ret
		where ISNULL(BillStatus,'paid')='paid'--takes Return of Cash sales as well as 'CreditReturned after settlement'
			AND Convert(Date,Createdon) between @FromDate and @ToDate

		UNION ALL
		Credit Return---
		SELECT   Convert(Date,ret.CreatedOn) 'BillingDate',  
				'CRN-'+Convert(varchar(20),ret.CreditNoteNumber) 'ReceiptNo', 
				ret.Patientid,
				'CreditReturn' AS 'BillingType',
				(-ret.SubTotal) 'SubTotal', (-ret.DiscountAmount) 'DiscountAmount', 
				(-ret.TaxTotal) 'TaxAmount', (-ret.TotalAmount) 'TotalAmount', 
	  			0 AS 'CashCollection', -- No impact on Cash in Credit Return.
				0 AS 'DepositReceived', 0 AS 'DepositRefund',
				0 AS 'CreditReceived', 
				(-ret.TotalAmount) AS 'CreditAmount',
			  ret.CounterId, ret.CreatedBy 'EmployeeId', 
					ret.Remarks + ' (Reference Invoice No:'+ Convert(varchar(20),ret.RefInvoiceNum)+')' AS 'Remarks', 
			ret.IsInsuranceBilling, 4 as DisplaySeq 
		FROM BIL_TXN_InvoiceReturn ret
		where ISNULL(BillStatus,'paid') = 'unpaid'  --takes 'credit return before settlement' only.
			AND Convert(Date,Createdon) between @FromDate and @ToDate

) -- end of return


GO
/****** Object:  Table [dbo].[PAT_Patient]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_Patient](
	[PatientId] [int] IDENTITY(1,1) NOT NULL,
	[PatientCode] [varchar](10) NULL,
	[PatientNo] [int] NULL,
	[Salutation] [varchar](10) NULL,
	[FirstName] [varchar](100) NULL,
	[MiddleName] [varchar](100) NULL,
	[LastName] [varchar](100) NULL,
	[Gender] [varchar](10) NOT NULL,
	[Age] [varchar](5) NULL,
	[DateOfBirth] [datetime] NULL,
	[PhoneNumber] [varchar](20) NULL,
	[Address] [varchar](100) NULL,
	[PANNumber] [varchar](100) NULL,
	[CountrySubDivisionId] [int] NULL,
	[CountryId] [int] NULL,
	[BloodGroup] [varchar](20) NULL,
	[MaritalStatus] [varchar](20) NULL,
	[Email] [varchar](50) NULL,
	[EMPI] [varchar](16) NULL,
	[PhoneAcceptsText] [bit] NULL,
	[IDCardNumber] [varchar](20) NULL,
	[IDCardType] [varchar](20) NULL,
	[Race] [varchar](20) NULL,
	[EthnicGroup] [varchar](20) NULL,
	[Occupation] [varchar](20) NULL,
	[PreviousLastName] [varchar](30) NULL,
	[EmployerInfo] [varchar](100) NULL,
	[IsDobVerified] [bit] NULL,
	[MembershipTypeId] [int] NULL,
	[IsOutdoorPat] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[PatientNameLocal] [nvarchar](100) NULL,
	[DialysisCode] [int] NULL,
	[LandLineNumber] [varchar](20) NULL,
	[PassportNumber] [varchar](20) NULL,
	[ShortName] [varchar](100) NULL,
	[Ins_HasInsurance] [bit] NULL,
	[Ins_NshiNumber] [varchar](20) NULL,
	[Ins_InsuranceBalance] [float] NULL,
	[IsSSUPatient] [bit] NULL,
	[FatherName] [varchar](100) NULL,
	[MotherName] [varchar](100) NULL,
	[SSU_IsActive] [bit] NULL,
	[Ins_LatestClaimCode] [bigint] NULL,
	[IsVaccinationPatient] [bit] NULL,
	[IsVaccinationActive] [bit] NULL,
	[VaccinationRegNo] [int] NULL,
	[VaccinationFiscalYearId] [int] NULL,
	[MunicipalityId] [int] NULL,
 CONSTRAINT [PK_PAT_Patient] PRIMARY KEY CLUSTERED 
(
	[PatientId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional]
(@StartDate Date, @EndDate Date)

/*
File: select * from FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional ('2019-01-01','2019-05-05')
Created: <sud:21Feb'19>
Description: Get individual components of sales eg: CashSales, CreditSales, CashReturn, CreditReturn, CreditReceived from Item Table ( BIL_TXN_BIllingTransactionItems )
NOTE: Provisional And Cancelled items are excluded from this.

Logic Used:
  Cash Sales   => billstatus=paid & paid on same day, 
  Credit Sales => billStatus = unpaid or paid on different day. i.e: this will be credit sales for InvoiceCreatedDate.
  CashReturn  => billStatus=paid and get from ReturnTable.
  CreditReturn => txn.PaymentMode='credit' and txn.BillStatus = 'unpaid'
  CreditReceived => bill status = paid and if its paid on different day, it'll be CreditReceived for PaidDate.

Change History:
-----------------------------------------------------------------------------
S.No.  ChangedBy/Date                           Remarks
-----------------------------------------------------------------------------
1.    Sud/21Feb'19                            Initial Draft
2.    Sud/13Mar'19                            ServiceDepartmentName is returned as it is, so that individual reports can decide how to show it..
                                               earlier we're getting it from ReportingName_DoctorSummary.
3.    Dinesh /27th May'19					  Added ReferredByDoctor 
4.    Sud/Pratik/13 Oct'19                    Added ReferrerId  for Referral Report.
                                              Replaced emp names with employee FullName column.
-----------------------------------------------------------------------------
*/
RETURNS TABLE
AS
RETURN
(

	
		WITH AllItems AS
			(

			Select  pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ','') + pat.LastName 'PatientName',
			CASE WHEN txnItemInfo.ProviderId IS NOT NULL
					 sud:31Jan'19--Isnull check for Salutation (needed for ER Doctor: Duty Doctor)--
					 THEN emp.FullName  --pratik:13Oct'19-- now we can get emplyee full name directly
					THEN ISNULL(emp.Salutation + '. ','') + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ','') + emp.LastName
					ELSE NULL 
				END AS DoctorName,
				CASE WHEN txnItemInfo.RequestedBy IS NOT NULL
					 sud:31Jan'19--Isnull check for Salutation (needed for ER Doctor: Duty Doctor)--
					 THEN refemp.FullName
					THEN ISNULL(refemp.Salutation + '. ','') + refemp.FirstName + ' ' + ISNULL(refemp.MiddleName + ' ','') + refemp.LastName
					ELSE NULL 
				END AS ReferredDoctorName,
				refemp.IsExternal as 'IsExtReferrer',

			  txnItemInfo.* 
			  
			  from VW_BIL_TxnItemsInfoWithDateSeparation txnItemInfo 

			      Inner Join PAT_Patient pat on txnItemInfo.PatientId=pat.Patientid
				  Left Join EMP_Employee emp ON txnItemInfo.ProviderId = emp.EmployeeId
				  Left Join EMP_Employee refemp ON txnItemInfo.RequestedBy = refemp.EmployeeId

			  WHERE
				billstatus !='provisional' and billstatus !='cancel'
				AND
				(
				  txnItemInfo.InvoiceCreatedDate BETWEEN @StartDate and @EndDate
				OR  txnItemInfo.InvoicePaidDate BETWEEN @StartDate and @EndDate
				OR  txnItemInfo.ReturnDate BETWEEN @StartDate and @EndDate
				)


			)

			Cash Sales (Same Day)--
			Select   Convert(Date,InvoicePaidDate) 'BillingDate', 
						Patientid, PatientName,
						'CashSales' AS 'BillingType',
						SubTotal,DiscountAmount, TotalAmount, 
						Price, Quantity, 0 As ReturnQuantity, 
						0 AS ReturnSubTotal, 0 AS ReturnDiscount, 0 AS ReturnTotalAmount,

						TotalAmount AS 'CashCollection', 
						0 AS CreditReceived,  0 AS 'CreditAmount',

					   BillingTransactionItemId,ItemId,ItemName, 
					   ServiceDepartmentId, 
					    [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
					   ServiceDepartmentName AS 'ServiceDepartmentName'
					   , ProviderId, DoctorName AS 'ProviderName',
					   RequestedBy AS 'ReferrerId',
					   ReferredDoctorName as 'ReferredDoctorName',
					   IsExtReferrer,
					   InvoiceNumber ,

						 1 as DisplaySeq
			from AllItems
			Where Billstatus='paid' and Convert(Date,InvoiceCreatedDate) = Convert(Date,InvoicePaidDate)
			  AND InvoicePaidDate BETWEEN @StartDate and @EndDate

			UNION ALL

			Credit Sales --
			Select   Convert(Date,InvoiceCreatedDate) 'BillingDate', 
						Patientid, PatientName,
						'CreditSales' AS 'BillingType',
						SubTotal,DiscountAmount, TotalAmount, 
						Price, Quantity, 0 As ReturnQuantity,
						0 AS ReturnSubTotal, 0 AS ReturnDiscount, 0 AS ReturnTotalAmount,
						0 AS 'CashCollection', 
						0 AS CreditReceived,  TotalAmount AS 'CreditAmount',
						  BillingTransactionItemId,ItemId,ItemName, 
						  ServiceDepartmentId, 
					    [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
					   ServiceDepartmentName AS 'ServiceDepartmentName'
						  , ProviderId,  DoctorName AS 'ProviderName',
						    RequestedBy AS 'ReferrerId',
							ReferredDoctorName as 'ReferredDoctorName', 
							IsExtReferrer,
							InvoiceNumber ,
						 2 as DisplaySeq
			from AllItems
			Where (Billstatus='unpaid' OR (BillStatus='paid' and Convert(Date,InvoicePaidDate) != Convert(Date,InvoiceCreatedDate)) )
			AND InvoiceCreatedDate  BETWEEN @StartDate and @EndDate


			UNION ALL

			CreditReceived--
			Select   Convert(Date,InvoicePaidDate) 'BillingDate', 
						Patientid, PatientName,
						'CreditReceived' AS 'BillingType',
						0 SubTotal,0 DiscountAmount, 0 TotalAmount, 
						Price, 0 As Quantity, 0 As ReturnQuantity,
						0 AS ReturnSubTotal, 0 AS ReturnDiscount, 0 AS ReturnTotalAmount,
						TotalAmount AS 'CashCollection', 
						TotalAmount AS CreditReceived,  0 AS 'CreditAmount',
						  BillingTransactionItemId,ItemId,ItemName, 
						 ServiceDepartmentId, 
						    [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
					   ServiceDepartmentName AS 'ServiceDepartmentName'
						  , ProviderId,  DoctorName AS 'ProviderName',
						    RequestedBy AS 'ReferrerId',
							ReferredDoctorName as 'ReferredDoctorName',
							 IsExtReferrer,
							 InvoiceNumber ,
						 3 as DisplaySeq
			from AllItems
			Where PaymentMode='credit' and BillStatus='paid' and Convert(Date,InvoicePaidDate) != Convert(Date,InvoiceCreatedDate)
			AND InvoicePaidDate BETWEEN @StartDate AND @EndDate

			UNION ALL

			CashReturn--
			SELECT   Convert(Date,ReturnDate) 'BillingDate', 
						Patientid, PatientName,
						'CashReturn' AS 'BillingType',
						0 AS SubTotal, 0 AS DiscountAmount, 0 AS TotalAmount, 
						Price, 0 As Quantity, Quantity As ReturnQuantity,
						SubTotal AS ReturnSubTotal, DiscountAmount AS ReturnDiscount, TotalAmount AS ReturnTotalAmount,
						-TotalAmount AS 'CashCollection', 
						0 AS CreditReceived,  0 AS 'CreditAmount',
						  BillingTransactionItemId,ItemId,ItemName, 
						   ServiceDepartmentId, 
						     [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
					   ServiceDepartmentName AS 'ServiceDepartmentName'
						  , ProviderId,  DoctorName AS 'ProviderName',
						    RequestedBy AS 'ReferrerId',
							ReferredDoctorName as 'ReferredDoctorName',
							 IsExtReferrer,
							 InvoiceNumber ,
						 3 as DisplaySeq
			FROM AllItems
			WHERE  BillStatus='paid'  AND  ReturnDate  BETWEEN @StartDate and @EndDate

			UNION ALL

			CreditReturn--
			SELECT   Convert(Date,ReturnDate) 'BillingDate', 
						Patientid, PatientName,
						'CreditReturn' AS 'BillingType',
						0 AS SubTotal, 0 AS DiscountAmount, 0 AS TotalAmount, 
						Price, 0 As Quantity, Quantity As ReturnQuantity,
						SubTotal AS ReturnSubTotal, DiscountAmount AS ReturnDiscount, TotalAmount AS ReturnTotalAmount,
						0 AS 'CashCollection', 
						0 AS CreditReceived,  -TotalAmount AS 'CreditAmount',
						  BillingTransactionItemId,ItemId,ItemName, 
						   ServiceDepartmentId, 
			    [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
					   ServiceDepartmentName AS 'ServiceDepartmentName'
						  , ProviderId,  DoctorName AS 'ProviderName',
						    RequestedBy AS 'ReferrerId',
							ReferredDoctorName as 'ReferredDoctorName',
							 IsExtReferrer,
							 InvoiceNumber ,
						 3 as DisplaySeq
			FROM AllItems
			WHERE  BillStatus='unpaid'  AND  ReturnDate  BETWEEN @StartDate and @EndDate
			

)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetSettledAmountBetnDateRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create Function [dbo].[FN_BIL_GetSettledAmountBetnDateRange] 
                (   @FromDate datetime,
				    @ToDate datetime
				)
RETURNS TABLE
/*
File: [FN_BIL_GetSettledAmountBetnDateRange]
Created/Updated By: dinesh 7th_Dec_2020
Description: Returns SettledDiscountAmount

Select * from  [FN_BIL_GetSettledAmountBetnDateRange] ('2020-12-07','2020-12-07')
*/
AS
RETURN
(
       SELECT  
	 UserDetails.BillingDate,
	ISNULL(SettlDiscountAmount,0)     'SettledDiscountAmount'

FROM 
(
  SELECT Dates 'BillingDate' 
  FROM [FN_COMMON_GetAllDatesBetweenRange] (ISNULL(@FromDate,GETDATE()),ISNULL(@ToDate,GETDATE()))

) UserDetails


LEFT JOIN
(
Select  Convert(date,sett.SettlementDate) 'BillingDate',
        SUM(Case When sett.PayableAmount > 0 then sett.PaidAmount ELSE 0 END) AS 'SettlPaidAmount', 
		SUM(Case WHEN sett.RefundableAmount > 0 THEN sett.ReturnedAmount ELSE 0 END ) AS 'SettlReturnAmount',
		SUM(Case WHEN sett.DueAmount > 0 THEN sett.DueAmount   ELSE 0 END ) AS 'SettlDueAmount',
      SUM( sett.DiscountAmount ) 'SettlDiscountAmount'
from BIL_TXN_Settlements sett 
GROUP BY Convert(date,sett.SettlementDate)
) settl
ON UserDetails.BillingDate = settl.BillingDate 

)

GO
/****** Object:  Table [dbo].[ACC_ReverseTransaction]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_ReverseTransaction](
	[ReverseTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionDate] [datetime] NULL,
	[Section] [int] NULL,
	[TUId] [int] NULL,
	[Reason] [nvarchar](max) NULL,
	[JsonData] [nvarchar](max) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[FiscalYearId] [int] NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_UndoTransaction] PRIMARY KEY CLUSTERED 
(
	[ReverseTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ACC_Get_Reverse_Transaction_Records]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[FN_ACC_Get_Reverse_Transaction_Records]()
RETURNS TABLE
AS

/*
 FileName: [FN_ACC_Get_Reverse_Transaction_Records]
 Description: This function return all transaction records with basic details like sectionId, voucherId, fiscalYearId, VoucherNumber,voucherserialno
			In ACC_RevrseTransaction table we are saving reversed txn details in json format. so, function will help for get easily all records basic details
			Please add time to time more columns as per need 
 Author: NageshBB: on 18 Aug 2020
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User						Change          Remarks
 -----------------------------------------------------------------------
 1.      18 Aug 2020 - NageshBB         created        function for show reversed details
 -----------------------------------------------------------------------
*/
RETURN
(
	SELECT 
	RTxn.ReverseTransactionId
	,RTxn.TUId
	,JSON_VALUE( x.[Value],'$.TransactionId') as TransactionId
	,RTxn.FiscalYearId
	,JSON_VALUE( x.[Value],'$.SectionId') as SectionId
	,JSON_VALUE( x.[Value],'$.VoucherId') as VoucherId
	,JSON_VALUE( x.[Value],'$.VoucherNumber') as VoucherNumber
	,VoucherSerialNo=SUBSTRING( JSON_VALUE( x.[Value],'$.VoucherNumber') , LEN(JSON_VALUE( x.[Value],'$.VoucherNumber')) -  CHARINDEX('-',REVERSE(JSON_VALUE( x.[Value],'$.VoucherNumber'))) + 2  , LEN(JSON_VALUE( x.[Value],'$.VoucherNumber'))  ) 
	,convert(date,JSON_VALUE( x.[Value],'$.TransactionDate') )as TransactionDate
	,convert(date,JSON_VALUE( x.[Value],'$.CreatedOn') )as CreatedOn
	,convert (date,RTxn.CreatedOn ) as ReversedOn
	,JSON_VALUE( x.[Value],'$.CreatedBy') as CreatedBy	
	,RTxn.CreatedBy as ReversedBy
	,HospitalId
	,RTxn.Reason
	FROM dbo.ACC_ReverseTransaction AS RTxn	
	CROSS APPLY OPENJSON(JSON_QUERY(JSONData, '$')) AS x		
)
GO
/****** Object:  Table [dbo].[INV_MST_Item]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Item](
	[ItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemCategoryId] [int] NULL,
	[PackagingTypeId] [int] NULL,
	[ItemName] [nvarchar](200) NULL,
	[ItemType] [varchar](30) NULL,
	[Description] [varchar](200) NULL,
	[ReOrderQuantity] [float] NULL,
	[UnitOfMeasurementId] [int] NULL,
	[MinStockQuantity] [float] NULL,
	[BudgetedQuantity] [float] NULL,
	[StandardRate] [decimal](16, 4) NULL,
	[VAT] [decimal](16, 4) NULL,
	[UnitQuantity] [float] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[Code] [varchar](50) NULL,
	[CompanyId] [int] NULL,
	[SubCategoryId] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsVATApplicable] [bit] NULL,
	[MSSNO] [nvarchar](500) NULL,
	[HSNCODE] [nvarchar](500) NULL,
	[VendorId] [int] NULL,
	[IsCssdApplicable] [bit] NULL,
	[IsColdStorageApplicable] [bit] NULL,
	[IsPatConsumptionApplicable] [bit] NOT NULL,
	[MaintenanceOwnerRoleId] [int] NULL,
	[StoreId] [int] NULL,
	[RegisterPageNumber] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_INV_MST_Item_ItemName_ItemCategoryId] UNIQUE NONCLUSTERED 
(
	[ItemName] ASC,
	[ItemCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_StockTransaction]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_StockTransaction](
	[StockTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[StockId] [int] NULL,
	[ItemId] [int] NULL,
	[GoodsReceiptItemId] [int] NULL,
	[Quantity] [float] NULL,
	[InOut] [varchar](10) NULL,
	[ReferenceNo] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[TransactionType] [varchar](60) NULL,
	[IsTransferredToACC] [bit] NULL,
	[MRP] [decimal](16, 4) NULL,
	[CostPrice] [decimal](16, 4) NULL,
	[FiscalYearId] [int] NULL,
	[TransactionDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[StoreId] [int] NULL,
	[StoreStockId] [int] NULL,
	[InQty] [float] NULL,
	[OutQty] [float] NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[Remarks] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[StockTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_RPT_INV_GetItemStockTxnsBetnDateRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
End: 18Jul'21: Anjana: Get values of EGene, NGene and ORF Gene for covid tests---

START: 19Jul21: Sanjit: Inventory Summary Report Corrected after Stock Refactoring

CREATE FUNCTION [dbo].[FN_RPT_INV_GetItemStockTxnsBetnDateRange](@FromDate Date, @ToDate Date)
RETURNS TABLE
AS
/*
 FileName    : FN_RPT_INV_GetItemStockTxnsBetnDateRange
 Description : Gives Purchase, Dispatch, Consumption and StockManage(IN/Out) information for each item on a given date range
 Remarks     : 
 Created: 03Jan'21/Sud
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      03Jan'21/Sud          created
 2.		19Jul21/Sanjit			updated after stock refactoring              
 -----------------------------------------------------------------------
*/
RETURN
(

Select 
  itms.ItemId,
  Isnull(gri.GrQty,0) - isnull(cancel.CancelQty,0)  'PurchaseQty', 
  Isnull(gri.StockValue,0) - isnull(cancel.StockValue,0)  'PurchaseValue', 

  Isnull(disp.DispatchQty,0) 'DispatchQty', 
  Isnull(disp.StockValue,0) 'DispatchValue', 

  ISNULL(cons.ConsumedQty,0)  'ConsumptionQty',
  ISNULL(cons.StockValue,0)  'ConsumptionValue',

  Isnull(stmgOut_MainStore.Quantity,0) + ISNULL(stmgOut_substore.Quantity,0)  'StockManageOutQty',
  Isnull(stmgOut_MainStore.StockValue,0)+ISNULL(stmgOut_substore.StockValue,0) 'StockManageOutValue',

  Isnull(stmgIn_MainStore.Quantity,0) +Isnull(stmgIn_substore.Quantity,0)  'StockManageInQty', 
  Isnull(stmgIn_MainStore.StockValue,0)+Isnull(stmgIn_substore.StockValue,0) 'StockManageInValue' 

-Table 1: Item Information for Left most table (anchor table)----
from 
   INV_MST_Item itms
LEFT JOIN
(
  -Table 2: Purchase Values--(GoodsReceipt in MainStore)---
    SELECT ItemId, SUM(Isnull(InQty,0)) 'GrQty' , SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
    from INV_TXN_StockTransaction 
    WHERE TransactionType IN('goodreceipt-items','opening-gr-items')
	  and Convert(Date,TransactionDate) Between @FromDate and @ToDate
	  and FiscalYearId=@FiscalYearId
	Group by ItemId
 ) gri
 ON itms.ItemId=gri.ItemId

LEFT JOIN
(
 -Table 3: Purchase Cancelled- (GR-Cancelled) of MainStore---
    SELECT ItemId, SUM(Isnull(OutQty,0)) 'CancelQty' , SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue'
    from INV_TXN_StockTransaction 
    WHERE TransactionType IN ('cancel-gr-items')
	and Convert(Date,TransactionDate) Between @FromDate and @ToDate
	Group by ItemId
 ) cancel
 ON itms.ItemId=cancel.ItemId

LEFT JOIN
(
  -Table 4: StockManage-In of MainStore---
    SELECT ItemId, SUM(Isnull(InQty,0)) 'Quantity' , SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue'
    from INV_TXN_StockTransaction 
    WHERE TransactionType IN ('stockmanaged-items','fy-managed-items')
	      and InOut='in'
		  and Convert(Date,TransactionDate) Between @FromDate and @ToDate
	Group by ItemId
 ) stmgIn_MainStore
 ON itms.ItemId=stmgIn_MainStore.ItemId

LEFT JOIN
(
 -Table 5: StockManage-Out of MainStore---
    SELECT ItemId, SUM(Isnull(OutQty,0)) 'Quantity', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue' 
    from INV_TXN_StockTransaction 
    WHERE TransactionType IN ('stockmanaged-items','fy-managed-items')
	      and InOut='out'
		  and Convert(Date,TransactionDate) Between @FromDate and @ToDate
	Group by ItemId
 ) stmgOut_MainStore
 ON itms.ItemId=stmgOut_MainStore.ItemId

LEFT JOIN
(
 -Table 6: Dispatch From MainStore---
    SELECT ItemId, SUM(Isnull(OutQty,0)) 'DispatchQty', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue' 
    from INV_TXN_StockTransaction 
    WHERE TransactionType IN ('dispatched-items')
	 and Convert(Date,TransactionDate) Between @FromDate and @ToDate
	Group by ItemId
 ) disp
 ON itms.ItemId=disp.ItemId

 LEFT JOIN 
 (
  -Table 7 : Consumption From Substore---
		Select ItemId, SUM(ISNULL(OutQty,0)) 'ConsumedQty', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue' 
		from INV_TXN_StockTransaction ST
		INNER JOIN PHRM_MST_Store Store ON ST.StoreId = Store.StoreId 
		where TransactionType='consumption-items' AND Store.Category = 'substore'
		and Convert(Date,TransactionDate) Between @FromDate and @ToDate
		  and FiscalYearId=@FiscalYearId
		Group by ItemId
 )cons on itms.ItemId=cons.ItemId

 LEFT JOIN 
 (
   -Table 8 : StockManageOut From Substore---
		Select ItemId, SUM(ISNULL(OutQty,0)) 'Quantity', SUM(IsNull(OutQty,0) * IsNull(CostPrice,0)) 'StockValue' 
		from INV_TXN_StockTransaction ST
		INNER JOIN PHRM_MST_Store Store ON ST.StoreId = Store.StoreId
		where TransactionType='fy-stock-manage' and InOut='out' AND Store.Category = 'substore'
		and Convert(Date,TransactionDate) Between @FromDate and @ToDate 
		Group by ItemId
 )stmgOut_substore 
 on itms.ItemId=stmgOut_substore.ItemId

LEFT JOIN 
 (
   -Table 9 : StockManageIN From Substore---
		Select ItemId, SUM(ISNULL(InQty,0)) 'Quantity', SUM(IsNull(InQty,0) * IsNull(CostPrice,0)) 'StockValue' 
		from PHRM_TXN_StockTransaction ST
		INNER JOIN PHRM_MST_Store Store ON ST.StoreId = Store.StoreId
		where TransactionType='fy-stock-manage' and InOut='in' AND Store.Category = 'substore'
		and Convert(Date,TransactionDate) Between @FromDate and @ToDate
		Group by ItemId
 )stmgIn_substore 
 on itms.ItemId=stmgIn_substore.ItemId


 WHERE 
 
 - take only those having at least one transaction in the system..
 ( 
	   isnull(opening.Opening_Qty,0) !=0 OR 
	 Isnull(gri.GrQty,0) != 0 
	 OR isnull(cancel.CancelQty,0) !=0
	 OR Isnull(disp.DispatchQty,0)!=0
	 OR Isnull(stmgOut_MainStore.Quantity,0) !=0
	 OR  Isnull(stmgIn_MainStore.Quantity,0) !=0
	 OR ISNULL(cons.ConsumedQty,0) !=0
	 OR ISNULL(stmgOut_substore.Quantity,0) !=0
	 OR ISNULL(stmgIn_substore.Quantity,0) !=0
 )

)

GO
/****** Object:  Table [dbo].[INV_FiscalYearStock]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_FiscalYearStock](
	[FiscalYrStockId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[StoreId] [int] NULL,
	[StockId] [int] NULL,
	[GRItemId] [int] NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](50) NULL,
	[ExpiryDate] [datetime] NULL,
	[MRP] [decimal](16, 4) NULL,
	[Price] [decimal](16, 4) NULL,
	[OpeningQty] [float] NULL,
	[ClosingQty] [float] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_INV_FiscalYearStock] PRIMARY KEY CLUSTERED 
(
	[FiscalYrStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_RPT_INV_GetItemsOpeningQtyUptoDate]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_RPT_INV_GetItemsOpeningQtyUptoDate](@FiscalYearId INT, @FyStartDate Date, @UpToDate Date, @DispatchOrConsumption Varchar(20))
RETURNS TABLE
AS
/*
 FileName    : FN_RPT_INV_GetItemsOpeningQtyUptoDate
 Description : Opening = Opening at FyStart + Transaction(IN-OUT)
             : If dispatch then take from Dispatch Value, If consumption then take from Consumption Value for OUT.
 Remarks     : 
 Created: 03Jan'21/Sud
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      03Jan'21/Sud          created   
 2.		19Jul21/Sanjit			updated after stock refactoring     
 -----------------------------------------------------------------------
*/
RETURN
(
Select 
itms.ItemId,
ISNULL(opening_FY.Opening_Qty,0) + ISNULL(txnsUptoLastDay.PurchaseQty ,0)
   + ISNULL(txnsUptoLastDay.StockManageInQty,0) - ISNULL(txnsUptoLastDay.StockManageOutQty ,0)
   - ( Case WHEN @DispatchOrConsumption = 'dispatch' then ISNULL(txnsUptoLastDay.DispatchQty,0)	
          ELSE ISNULL(txnsUptoLastDay.ConsumptionQty,0) END)	
   AS 'OpeningQty',

ISNULL(opening_FY.StockValue,0) + ISNULL(txnsUptoLastDay.PurchaseValue ,0)
  + ISNULL(txnsUptoLastDay.StockManageInValue,0) - ISNULL(txnsUptoLastDay.StockManageOutValue ,0)
  -  ( Case WHEN @DispatchOrConsumption = 'dispatch' then ISNULL(txnsUptoLastDay.DispatchValue,0)
          ELSE ISNULL(txnsUptoLastDay.ConsumptionValue,0) END) AS  'OpeningValue'

 From  
 
 INV_MST_Item itms
LEFT JOIN
(
	select ItemId, SUM(IsNull(OpeningQty,0)) 'Opening_Qty', SUM(IsNull(OpeningQty,0) * IsNull(Price,0)) 'StockValue'
	from INV_FiscalYearStock
	where   FiscalYearId=@FiscalYearId
	Group by ItemId
) opening_FY
ON opening_FY.ItemId=itms.ItemId

Left join
(
 Get transactions from FYStartDate upto LastDay for Opening Calculation---
  Select * from [FN_RPT_INV_GetItemStockTxnsBetnDateRange](@FyStartDate, @UpToDate)
)
txnsUptoLastDay
ON itms.ItemId = txnsUptoLastDay.ItemId

)

GO
/****** Object:  Table [dbo].[PHRM_StoreStock]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StoreStock](
	[StoreStockId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime] NULL,
	[Quantity] [float] NULL,
	[FreeQuantity] [float] NULL,
	[Price] [decimal](18, 4) NULL,
	[DiscountPercentage] [float] NULL,
	[VATPercentage] [float] NULL,
	[SubTotal] [decimal](18, 4) NULL,
	[TotalAmount] [decimal](18, 4) NULL,
	[InOut] [varchar](20) NULL,
	[ReferenceNo] [int] NULL,
	[ReferenceItemCreatedOn] [datetime] NULL,
	[TransactionType] [varchar](30) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[MRP] [decimal](18, 4) NULL,
	[GoodsReceiptItemId] [int] NULL,
	[CCCharge] [float] NULL,
	[StoreName] [varchar](255) NULL,
	[StoreId] [int] NULL,
	[Remark] [varchar](max) NULL,
	[ItemName] [varchar](500) NULL,
	[IsActive] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PHRM_StoreStock] PRIMARY KEY CLUSTERED 
(
	[StoreStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_ReturnToSupplierItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_ReturnToSupplierItems](
	[ReturnToSupplierItemId] [int] IDENTITY(1,1) NOT NULL,
	[ReturnToSupplierId] [int] NOT NULL,
	[ItemId] [int] NULL,
	[GoodReceiptItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[Quantity] [float] NOT NULL,
	[ItemPrice] [decimal](16, 4) NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountPercentage] [float] NULL,
	[VATPercentage] [float] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[ExpiryDate] [datetime] NULL,
	[ReturnRemarks] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[MRP] [decimal](16, 4) NULL,
	[FreeQuantity] [float] NOT NULL,
	[FreeRate] [decimal](18, 4) NULL,
	[FreeAmount] [decimal](10, 4) NULL,
	[OldItemPrice] [decimal](16, 4) NULL,
	[DiscountedAmount] [decimal](16, 4) NULL,
 CONSTRAINT [PK_PHRM_ReturnToSupplierItems] PRIMARY KEY CLUSTERED 
(
	[ReturnToSupplierItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_InvoiceItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_InvoiceItems](
	[InvoiceItemId] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NULL,
	[CompanyId] [int] NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](200) NULL,
	[BatchNo] [varchar](300) NULL,
	[Quantity] [float] NULL,
	[Price] [decimal](16, 4) NULL,
	[MRP] [decimal](16, 4) NULL,
	[GrItemPrice] [decimal](16, 4) NULL,
	[FreeQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[VATPercentage] [float] NULL,
	[DiscountPercentage] [float] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[BilItemStatus] [varchar](20) NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[PrescriptionItemId] [int] NULL,
	[CounterId] [int] NULL,
	[ExpiryDate] [datetime] NULL,
	[PatientId] [int] NULL,
	[GrItemId] [int] NULL,
	[VisitType] [varchar](50) NULL,
	[TotalDisAmt] [decimal](16, 4) NULL,
	[PerItemDisAmt] [decimal](16, 4) NULL,
	[StoreId] [int] NOT NULL,
	[GenericId] [int] NULL,
	[GenericName] [nvarchar](200) NULL,
	[VATAmount] [decimal](16, 4) NULL,
 CONSTRAINT [PK_PHRM_TXN_InvoiceItems] PRIMARY KEY CLUSTERED 
(
	[InvoiceItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_InvoiceReturnItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_InvoiceReturnItems](
	[InvoiceReturnItemId] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceItemId] [int] NULL,
	[InvoiceId] [int] NULL,
	[Quantity] [float] NULL,
	[Price] [decimal](16, 4) NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[VATPercentage] [float] NULL,
	[DiscountPercentage] [float] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[BatchNo] [nvarchar](50) NULL,
	[MRP] [decimal](16, 4) NULL,
	[CounterId] [int] NULL,
	[CreditNoteNumber] [int] NULL,
	[FiscalYearId] [int] NULL,
	[IsTransferredToACC] [bit] NULL,
	[ItemId] [int] NULL,
	[InvoiceReturnId] [int] NULL,
	[ReturnedQty] [float] NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[TotalDisAmt] [decimal](16, 4) NULL,
	[PerItemDisAmt] [decimal](16, 4) NULL,
	[StoreId] [int] NOT NULL,
 CONSTRAINT [PK_PHRM_TXN_InvoiceReturnItems] PRIMARY KEY CLUSTERED 
(
	[InvoiceReturnItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_GoodsReceipt]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_GoodsReceipt](
	[GoodReceiptId] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseOrderId] [int] NULL,
	[SupplierId] [int] NULL,
	[GoodReceiptDate] [datetime] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[Remarks] [nvarchar](500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[InvoiceNo] [varchar](50) NULL,
	[Adjustment] [decimal](10, 2) NULL,
	[GoodReceiptPrintId] [int] NULL,
	[IsCancel] [bit] NULL,
	[IsTransferredToACC] [bit] NULL,
	[StoreId] [int] NULL,
	[TransactionType] [varchar](30) NULL,
	[CreditPeriod] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[FiscalYearId] [int] NULL,
	[CancelRemarks] [nvarchar](200) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[IsPacking] [bit] NULL,
	[IsItemDiscountApplicable] [bit] NULL,
	[CancelBy] [int] NULL,
	[CancelOn] [datetime2](3) NULL,
	[PaymentStatus] [varchar](100) NULL,
	[SupplierBillDate] [datetime2](3) NULL,
	[IsPaymentDoneFromAcc] [bit] NOT NULL,
	[DiscountPercentage] [float] NULL,
 CONSTRAINT [PK_PHRM_GoodsReceipt] PRIMARY KEY CLUSTERED 
(
	[GoodReceiptId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_GoodsReceiptItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_GoodsReceiptItems](
	[GoodReceiptItemId] [int] IDENTITY(1,1) NOT NULL,
	[GoodReceiptId] [int] NULL,
	[CompanyName] [varchar](200) NULL,
	[SupplierName] [varchar](200) NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](200) NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime] NULL,
	[ReceivedQuantity] [float] NULL,
	[FreeQuantity] [float] NULL,
	[RejectedQuantity] [float] NULL,
	[UOMName] [nvarchar](100) NULL,
	[SellingPrice] [decimal](16, 4) NULL,
	[GRItemPrice] [decimal](16, 4) NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[VATPercentage] [float] NULL,
	[DiscountPercentage] [float] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[MRP] [decimal](16, 4) NULL,
	[AvailableQuantity] [float] NULL,
	[CCCharge] [float] NULL,
	[CounterId] [int] NULL,
	[IsTransferredToACC] [bit] NULL,
	[GrPerItemVATAmt] [decimal](16, 4) NULL,
	[GrPerItemDisAmt] [decimal](16, 4) NULL,
	[GrTotalDisAmt] [decimal](16, 4) NULL,
	[StripRate] [decimal](18, 2) NULL,
	[IsPacking] [bit] NULL,
	[IsItemDiscountApplicable] [bit] NULL,
	[PackingQty] [float] NULL,
	[StripMRP] [decimal](16, 4) NULL,
	[PackingTypeId] [int] NULL,
	[StockId] [int] NULL,
	[IsCancel] [bit] NULL,
	[StoreStockId] [int] NULL,
 CONSTRAINT [PK_PHRM_GoodsReceiptItems] PRIMARY KEY CLUSTERED 
(
	[GoodReceiptItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Item]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Item](
	[ItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemName] [varchar](200) NOT NULL,
	[GenericId] [int] NULL,
	[ItemCode] [nvarchar](100) NULL,
	[CompanyId] [int] NULL,
	[ItemTypeId] [int] NULL,
	[UOMId] [int] NULL,
	[ReOrderQuantity] [float] NULL,
	[MinStockQuantity] [float] NULL,
	[BudgetedQuantity] [float] NULL,
	[PurchaseVATPercentage] [float] NULL,
	[IsVATApplicable] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsInternationalBrand] [bit] NULL,
	[ABCCategory] [nvarchar](100) NULL,
	[VED] [varchar](50) NULL,
	[Dosage] [varchar](255) NULL,
	[Frequency] [varchar](255) NULL,
	[Duration] [varchar](255) NULL,
	[Rack] [int] NULL,
	[SalesCategoryId] [int] NULL,
	[CCCharge] [float] NULL,
	[IsNarcotic] [bit] NOT NULL,
	[StoreRackId] [int] NULL,
	[PackingTypeId] [int] NULL,
	[IsInsuranceApplicable] [bit] NULL,
	[GovtInsurancePrice] [decimal](16, 4) NULL,
	[SalesVATPercentage] [float] NULL,
 CONSTRAINT [PK_PHRM_Mst_Item] PRIMARY KEY CLUSTERED 
(
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_UnitOfMeasurement]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_UnitOfMeasurement](
	[UOMId] [int] IDENTITY(1,1) NOT NULL,
	[UOMName] [nvarchar](100) NOT NULL,
	[Description] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_PHRM_MST_UnitOfMeasurement] PRIMARY KEY CLUSTERED 
(
	[UOMId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_PHRM_StockDetailsOfGRItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[FN_PHRM_StockDetailsOfGRItems](@fromDate datetime,@toDate datetime)
RETURNS TABLE  
AS  
RETURN   
(  
select GRItemID
      ,GRItems.ItemId
      ,GRItems.ItemName
	  ,GRItems.BatchNo
	  ,GRItems.ExpiryDate
	  ,GRItems.GRItemPrice
	  ,GRItems.MRP
	  ,ISNULL(UOMMaster.UOMName, 'N/A') as 'UOMName'
      ,GRIReceivedQuantity
	  ,GRIFreeQuantity
	  ,GRITotalAmount
	  ,RTSQuantity
	  ,RTSFreeAmount
	  ,RTSTotalAmount
	  ,SalesQuantity
	  ,SalesTotalAmount
	  ,ProvisionalQuantity
	  ,ProvisionalTotalAmount
	  ,ReturnQuantity
	  ,ReturnTotalAmount
	  ,StockManageQuantityIn
	  ,StockManageAmountIn
	  ,StockManageQuantityOut
	  ,StockManageAmountOut
from 
    (select  
        GRItemID
	   ,ItemID
       ,sum(isnull(ReceivedQuantity,0)) as 'GRIReceivedQuantity'
	   ,sum(isnull(FreeQuantity,0)) as 'GRIFreeQuantity'
	   ,sum(isnull(TotalAmount,0)) as 'GRITotalAmount' 
	   ,sum(isnull(RTSQuantity,0)) as 'RTSQuantity'
	   ,sum(isnull(RTSFreeAmount,0)) as 'RTSFreeAmount'
	   ,sum(isnull(RTSTotalAmount,0)) as 'RTSTotalAmount'
       ,sum(isnull(SalesQuantity,0)) as 'SalesQuantity'
	   ,sum(isnull(SalesTotalAmount,0)) as 'SalesTotalAmount'
	   ,sum(isnull(ProvisionalQuantity,0)) as 'ProvisionalQuantity'
	   ,sum(isnull(ProvisionalTotalAmount,0)) as 'ProvisionalTotalAmount'
	   ,sum(isnull(ReturnQuantity,0)) as 'ReturnQuantity'
	   ,sum(isnull(ReturnTotalAmount,0)) as 'ReturnTotalAmount'
	   ,sum(isnull(InQuantity,0)) as 'StockManageQuantityIn'
	   ,sum(isnull(InAmount,0)) as 'StockManageAmountIn'
	   ,sum(isnull(OutQuantity,0)) as 'StockManageQuantityOut'
	   ,sum(isnull(OutAmount,0)) as 'StockManageAmountOut'
from 
(
select case when InvoiceAndStockManage.GRItemID is null then GoodsReceipt.GoodReceiptItemId else InvoiceAndStockManage.GRItemID end as GRItemID
	   ,case when InvoiceAndStockManage.ItemId is null then GoodsReceipt.ItemId else InvoiceAndStockManage.ItemId end as ItemID
	   ,GoodsReceipt.FreeQuantity
	   ,GoodsReceipt.ReceivedQuantity
	   ,GoodsReceipt.RTSFreeAmount
	   ,GoodsReceipt.RTSQuantity
	   ,GoodsReceipt.RTSTotalAmount
	   ,GoodsReceipt.TotalAmount
	   ,InvoiceAndStockManage.SalesQuantity
	   ,InvoiceAndStockManage.SalesTotalAmount
	   ,InvoiceAndStockManage.ProvisionalQuantity
	   ,InvoiceAndStockManage.ProvisionalTotalAmount
	   ,InvoiceAndStockManage.ReturnQuantity
	   ,InvoiceAndStockManage.ReturnTotalAmount
	   ,InvoiceAndStockManage.InQuantity
	   ,InvoiceAndStockManage.InAmount
	   ,InvoiceAndStockManage.OutQuantity
	   ,InvoiceAndStockManage.OutAmount
from
(
select GRItemID
	  ,ItemId
      ,sum(isnull(SalesQuantity,0)) as 'SalesQuantity'
	  ,sum(isnull(SalesTotalAmount,0)) as 'SalesTotalAmount'
	  ,sum(isnull(ProvisionalQuantity,0)) as 'ProvisionalQuantity'
	  ,sum(isnull(ProvisionalTotalAmount,0)) as 'ProvisionalTotalAmount'
	  ,sum(isnull(ReturnQuantity,0)) as 'ReturnQuantity'
	  ,sum(isnull(ReturnTotalAmount,0)) as 'ReturnTotalAmount'
	  ,sum(isnull(InQuantity,0)) as 'InQuantity'
	  ,sum(isnull(InAmount,0)) as 'InAmount'
	  ,sum(isnull(OutQuantity,0)) as 'OutQuantity'
	  ,sum(isnull(OutAmount,0)) as 'OutAmount'
from 
(
	select case 
	          when StockManage.GoodsReceiptItemId is null then Invoice.GrItemId 
	          else StockManage.GoodsReceiptItemId 
		   end as GRItemID
		  ,case
		      when StockManage.ItemId is null then Invoice.ItemId
		      else StockManage.ItemId
		  end as ItemId
		  ,Invoice.GrItemId as InvoiceGRItemID
		  ,StockManage.GoodsReceiptItemId as StockManageGRItemID
		  ,Invoice.SalesQuantity
		  ,Invoice.SalesTotalAmount
		  ,Invoice.ProvisionalQuantity
		  ,Invoice.ProvisionalTotalAmount
		  ,Invoice.ReturnQuantity
		  ,Invoice.ReturnTotalAmount
		  ,StockManage.InQuantity
		  ,StockManage.InAmount
		  ,StockManage.OutQuantity
		  ,StockManage.OutAmount
	from 
		(select a.GrItemId
		       ,a.ItemId
			   ,sum(isnull(SalesQuantity,0)) as SalesQuantity
			   ,sum(isnull(SalesTotalAmount,0)) as SalesTotalAmount
			   ,sum(isnull(ProvisionalQuantity,0)) as ProvisionalQuantity
			   ,sum(isnull(ProvisionalTotalAmount,0)) as ProvisionalTotalAmount
			   ,sum(isnull(ReturnQuantity, 0)) as ReturnQuantity
			   ,sum(isnull(ReturnTotalAmount, 0)) as ReturnTotalAmount
		from
			    (select
					 InvItems.GrItemId
					,InvItems.ItemId
					,case
					   when InvItems.InvoiceId is null then InvItems.TotalAmount
					 end as ProvisionalTotalAmount
					,case
					   when InvItems.InvoiceId is null then InvItems.Quantity
					 end as ProvisionalQuantity
					,case
					   when InvItems.InvoiceId is not null then InvItems.TotalAmount
					 end as SalesTotalAmount
					,case
					   when InvItems.InvoiceId is not null then InvItems.Quantity
					 end as SalesQuantity
					,InvItemsReturn.ReturnedQty as ReturnQuantity
					,InvItemsReturn.TotalAmount as ReturnTotalAmount
				from 
				(select * from PHRM_TXN_InvoiceItems where CreatedOn between @fromDate and @toDate) as InvItems
				left join 
				(select * from PHRM_TXN_InvoiceReturnItems where CreatedOn between @fromDate and @toDate) as InvItemsReturn
				on 
				InvItems.InvoiceItemId = InvItemsReturn.InvoiceItemId
			) as a
			group by a.GrItemId,a.ItemId
	) 
	as Invoice

	full join

	 (select GoodsReceiptItemId
	        ,ItemId
			,sum(case when InOut = 'in' then Quantity else 0 end) as InQuantity
			,sum(case when InOut = 'in' then TotalAmount  else 0 end) as InAmount
			,sum(case when InOut = 'out' then Quantity else 0 end) as OutQuantity
			,sum(case when InOut = 'out' then TotalAmount else 0 end) as OutAmount
		from (select * from PHRM_StoreStock where CreatedOn between @fromDate and @toDate) as PHRM_StoreStock
		where TransactionType = 'stockmanage'
		group by GoodsReceiptItemId,ItemId
	) 
	as StockManage
	on
	Invoice.GrItemId = StockManage.GoodsReceiptItemId
) as g
group by g.GRItemID,g.ItemId

) as InvoiceAndStockManage

full join

	(select GRI.GoodReceiptItemId
		   ,GRI.ItemId
		   ,GRI.ReceivedQuantity
		   ,GRI.FreeQuantity
		   ,GRI.TotalAmount
		   ,RTS.Quantity as RTSQuantity
		   ,RTS.FreeAmount as RTSFreeAmount
		   ,RTS.TotalAmount as RTSTotalAmount
	from 
	(select * from PHRM_GoodsReceipt where GoodReceiptDate between @fromDate and @toDate) as GR
	join 
	(select * from PHRM_GoodsReceiptItems) as GRI
	on
	GRI.GoodReceiptId = GR.GoodReceiptId
	left join 
	(select * from PHRM_ReturnToSupplierItems) as RTS
	on
	GRI.GoodReceiptItemId = RTS.GoodReceiptItemId
	where GR.IsCancel = 0
) 
as GoodsReceipt
on 
InvoiceAndStockManage.GRItemID = GoodsReceipt.GoodReceiptItemId 
) as f
group by f.GRItemID,f.ItemId 
) 
as GRItemStock
join 
PHRM_GoodsReceiptItems as GRItems
on
GRItemStock.GRItemID = GRItems.GoodReceiptItemId
join 
PHRM_MST_Item  as ItemMaster 
on
GRItems.ItemId = ItemMaster.ItemId
left join
PHRM_MST_UnitOfMeasurement as UOMMaster
on 
UOMMaster.UOMId = ItemMaster.UOMId
);  

GO
/****** Object:  View [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report]
  AS
/*
 FileName    : [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report]
 Description : 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.     14Dec18 Ajay			created		reffered from [VW_BIL_TxnItemsInfoWithDateSeparation]
 -----------------------------------------------------------------------
*/
 SELECT
	txnItm.BillingTransactionItemId,
	txnItm.PatientId,
	txnItm.ItemId,
	txnItm.ItemName, 
	txnitm.ServiceDepartmentId,
	txnItm.ServiceDepartmentName,
	txnItm.ProviderId,
	txnItm.ProviderName,
	ISNULL(txnItm.BillingType,'Outpatient') AS 'BillingType',--default BillingType is Outpatient, so.. 
	txnItm.RequestingDeptId, -- sud:22Aug'18
	Convert(DATE, txnItm.CreatedOn) 'CreatedDate',
	Convert(DATE, txnItm.PaidDate) 'PaidDate',
	Convert(DATE, ret.CreatedOn)  'ReturnDate', 
	-cancelled---
	CASE WHEN txnItm.BillStatus = 'Cancel' THEN Convert(DATE,txnItm.CancelledOn) ELSE NULL END AS CancelledDate,

  -provisional--
    -below are conditions for Provisional--
	---Invoice not Generated--
	1. Billstatus = Provisional
	2. BillStatus = Cancel  & CreatedOn != CancelledOn
	--Invoice Generated--
	3. billstatus = unpaid  &  ItemCreatedOn != InvoiceCreatedOn
	4. billstatus = paid  &   ItemCreatedOn != InvoiceCreatedOn   & PaymentMode != Credit   
  CASE 
	WHEN txnItm.BillStatus = 'provisional' 
		THEN Convert(DATE, txnItm.CreatedOn) 
	WHEN (txnItm.BillStatus='cancel' AND Convert(Date,txnItm.CreatedOn) != Convert(Date,txnItm.CancelledOn) )
		THEN Convert(DATE,txnItm.CreatedOn)
	WHEN (txnItm.BillingTransactionId IS NOT NULL
			AND ( 
					(txn.PaymentMode != 'credit' AND CONVERT(Date,txnItm.CreatedOn) !=  COnvert(Date,txn.CreatedOn))
				OR  (txnItm.BillStatus='unpaid' AND  CONVERT(Date,txnItm.CreatedOn) !=  COnvert(Date,txn.CreatedOn)) 
				OR  (txnItm.BillStatus='paid' and  CONVERT(Date,txnItm.CreatedOn) !=  CONVERT(Date,txnItm.PaidDate) AND txn.PaymentMode != 'credit')
				OR (txnItm.BillStatus = 'paid' AND CONVERT(date,txnItm.CreatedOn) != CONVERT(date,txn.CreatedOn) AND txn.PaymentMode = 'credit')	--ramavtar:06Dec'18	checking paymentMode!='credit'
				 )
		   ) THEN Convert(DATE, txnItm.CreatedOn) 
	ELSE NULL END AS ProvisionalDate,

CREDIT---
  CASE WHEN (txn.PaymentMode='credit' AND txn.BillStatus='unpaid' )
	   OR ( txn.BillStatus='paid' AND Convert(Date,txn.CreatedOn)  != Convert(Date,txn.PaidDate) ) 
	   THEN CONVERT(DATE,txn.CreatedOn)
	   ELSE NULL END AS 'CreditDate',

	 txnItm.Price,
	 txnItm.Quantity,
	 txnItm.SubTotal,
	 txnItm.DiscountAmount,
	 txnitm.TotalAmount,
	 Case  WHEN ISNULL(txnItm.ReturnStatus,0)=1 THEN txnItm.TotalAmount ELSE 0 END AS  'ReturnAmount',
	 ret.TotalAmount 'ReturnAmount',---this is incorrect.. use above: sud-30aug'18
	 ret.Remarks 'ReturnRemarks',
	 txnItm.CancelRemarks as 'CancelRemarks',
	 txn.PaymentMode as 'PaymentMode',
	 txnItm.VisitType AS 'VisitType',
	 ISNULL(txn.InvoiceCode + '-' + CONVERT(VARCHAR,txn.InvoiceNo),'') 'InvoiceNumber'	-- ramavtar 23Aug'18
FROM 
	BIL_TXN_BillingTransactionItems txnItm WITH (NOLOCK)
	LEFT JOIN
	BIL_TXN_BillingTransaction txn  WITH (NOLOCK)
	ON txnItm.BillingTransactionId = txn.BillingTransactionId
	LEFT JOIN
	BIL_TXN_InvoiceReturn ret  WITH (NOLOCK)
	ON txnItm.BillingTransactionId = ret.BillingTransactionId
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report] 
(@StartDate DATE, @EndDate DATE)
RETURNS TABLE
/*
 File: [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report]
 Created: 14Dec 2018
 Description: created for Daily MIS report reffered from FN_BIL_GetTxnItemsInfoWithDateSeparation

 ----------Change History------------
 S.No.   ModifiedBy/Date         Remarks
 --------------------------------------
 1.      Ajay/14Dec2018			Created the script
 ---------------------------------------- */
AS
RETURN
( 
   -----------Start:Ot (Outer Table)-----------------------------------------
		SELECT 
		CASE WHEN A.PaidDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'PaidAmount',
		CASE WHEN A.ReturnDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'ReturnAmount',
		CASE WHEN A.CreditDate IS NOT NULL AND A.PaidDate IS NULL AND A.ReturnDate IS NULL THEN A.Total_Temp ELSE 0 END AS 'CreditAmount',
		CASE WHEN A.CancelledDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS 'CancelledAmount',
		CASE WHEN A.ProvisionalDate IS NOT NULL 
			  AND A.CancelledDate IS NULL
			  AND A.CreditDate IS NULL
			  AND A.PaidDate IS NULL 
			  AND A.ReturnDate IS NULL 
			  THEN A.Total_Temp ELSE 0 END AS 'ProvisionalAmount',
       CASE WHEN A.ReturnDate IS NOT NULL THEN 'return'
	        WHEN A.PaidDate IS NOT NULL THEN 'paid'
			WHEN A.CreditDate IS NOT NULL THEN 'credit'
			WHEN A.CancelledDate IS NOT NULL THEN 'cancelled'
			WHEN A.ProvisionalDate IS NOT NULL THEN 'provisional'
			ELSE 'none' END AS 'BillStatus',
      -in case bill was only returned on given date selection, we should omit the value also from Price, Qty, Subtotal, Discount fields..
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Price_Temp ELSE 0 END AS Price,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Qty_Temp ELSE 0 END AS Quantity,
      CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Subtot_Temp ELSE 0 END AS SubTotal,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Discount_Temp ELSE 0 END AS DiscountAmount,
	  CASE WHEN A.PaidDate IS NOT NULL OR A.CreditDate IS NOT NULL OR A.ProvisionalDate IS NOT NULL THEN A.Total_Temp ELSE 0 END AS TotalAmount,
		* FROM 
		 (
		    --------------------------------------------------------------------
			  SELECT PatientId, BillingTransactionItemId, ItemId, ItemName, ServiceDepartmentId,
			  below four fields shouldn't be there when only return has happened in given date range.
			  Price AS Price_Temp,
			  Quantity AS Qty_Temp,
			  SubTotal AS Subtot_Temp,
			  DiscountAmount AS Discount_Temp,
			  TotalAmount AS Total_Temp, 
				we're using below scalar value function to get reporting name of item's SrvDeptName 
				[dbo].[FN_BIL_GetSrvDeptReportingName_MIS_Report] (itmInfo.ServiceDepartmentName,itmInfo.ItemName) AS ServiceDepartmentName,
				ProviderId,
				CASE WHEN ProviderId IS NOT NULL
					THEN emp.Salutation + '. ' + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ','') + emp.LastName
					ELSE NULL 
				END AS ProviderName,
				BillingType, 
				RequestingDeptId,
				CASE 
					WHEN itmInfo.CreditDate IS NULL AND itmInfo.PaymentMode = 'credit' THEN 'CreditPaidSameDay'
					ELSE itmInfo.PaymentMode
					END AS 'PaymentMode',
				VisitType,
					CASE WHEN ProvisionalDate BETWEEN @StartDate AND @EndDate THEN ProvisionalDate ELSE NULL END AS ProvisionalDate,
					CASE WHEN CancelledDate BETWEEN @StartDate AND @EndDate THEN CancelledDate ELSE NULL END AS CancelledDate,
					CASE WHEN CreditDate BETWEEN @StartDate AND @EndDate THEN CreditDate ELSE NULL END AS CreditDate,
					CASE WHEN PaidDate BETWEEN @StartDate AND @EndDate THEN PaidDate ELSE NULL END AS PaidDate,
					CASE WHEN ReturnDate BETWEEN @StartDate AND @EndDate THEN ReturnDate ELSE NULL END AS ReturnDate
				FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] itmInfo
					LEFT JOIN [dbo].[EMP_Employee] emp ON itmInfo.ProviderId = emp.EmployeeId
			-----------------------------------------------------------------
			) A  -- end of inner select
			-no need to return those items where none of below fields are there---
		WHERE
		 ( A.ProvisionalDate IS NOT NULL
			OR A.CancelledDate IS NOT NULL
			OR A.CreditDate IS NOT NULL
			OR A.PaidDate IS NOT NULL
			OR A.ReturnDate IS NOT NULL )
)---end of return-

GO
/****** Object:  Table [dbo].[ACC_MST_LedgerGroup]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_LedgerGroup](
	[LedgerGroupId] [int] IDENTITY(1,1) NOT NULL,
	[PrimaryGroup] [varchar](100) NULL,
	[COA] [varchar](100) NULL,
	[LedgerGroupName] [varchar](100) NULL,
	[Description] [varchar](200) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[Name] [varchar](max) NULL,
	[Code] [varchar](200) NULL,
	[HospitalId] [int] NULL,
	[COAId] [int] NULL,
 CONSTRAINT [PK_ACC_MST_LedgerGroup] PRIMARY KEY CLUSTERED 
(
	[LedgerGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Ledger]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Ledger](
	[LedgerId] [int] IDENTITY(1,1) NOT NULL,
	[LedgerGroupId] [int] NULL,
	[LedgerName] [nvarchar](200) NOT NULL,
	[Description] [varchar](500) NULL,
	[SectionId] [int] NULL,
	[LedgerReferenceId] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[IsCostCenterApplicable] [bit] NULL,
	[OpeningBalance] [float] NULL,
	[DrCr] [bit] NULL,
	[Name] [varchar](max) NULL,
	[LedgerType] [varchar](max) NULL,
	[Code] [varchar](200) NULL,
	[PANNo] [varchar](20) NULL,
	[Address] [varchar](200) NULL,
	[MobileNo] [varchar](20) NULL,
	[CreditPeriod] [int] NULL,
	[TDSPercent] [decimal](18, 2) NULL,
	[LandlineNo] [varchar](20) NULL,
	[MigrationStatus] [varchar](30) NULL,
	[HospitalId] [int] NULL,
	[MigrationRemark] [varchar](50) NULL,
 CONSTRAINT [PK_ACC_Ledger] PRIMARY KEY CLUSTERED 
(
	[LedgerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_LedgerName_LedgerGroupId] UNIQUE NONCLUSTERED 
(
	[LedgerName] ASC,
	[LedgerGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_LedgerBalanceHistory]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_LedgerBalanceHistory](
	[LedgerBalanceHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[LedgerId] [int] NULL,
	[OpeningBalance] [float] NULL,
	[OpeningDrCr] [bit] NULL,
	[ClosingBalance] [float] NULL,
	[ClosingDrCr] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_LedgerBalanceHistory] PRIMARY KEY CLUSTERED 
(
	[LedgerBalanceHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_ACC_LedgerBalanceHistory_FiscalYearId_LedgerId] UNIQUE NONCLUSTERED 
(
	[FiscalYearId] ASC,
	[LedgerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ACC_GetOpeningBalanceForPnL_MidYear]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[FN_ACC_GetOpeningBalanceForPnL_MidYear]
  ( 
   @HospitalId INT, 
   @FiscalYearId INT, 
   @Revenue varchar(50),
   @Expenses varchar(50)
  )
RETURNS TABLE
AS

/*
 FileName: [FN_ACC_GetOpeningBalanceForPnL_MidYear]
 Summary: This functions gives Ledger's Opening balance only for Revenue and Expenses Ledgers that too for specific fiscal year.

 Description: when we start our software from Mid of a fiscal year then we migrate only the OpeningBalances of the ledgers
             Those Opening balances are taken in TrialBalance but not in Profit and Loss Report.
			 Because of which, P&L report was not matching with that of Trial balance and other reports.
Remarks: 
  HospitalId and FiscalYear must be passed from Calling-Part (another SP in this case)
  This is intermediate solution until we finalize correct solution like: Adding the required flag in FiscalYear Table itself

 Author: Sud/25Feb'21
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User			          Remarks
 -----------------------------------------------------------------------
 1.      Sud/25Feb'21                Initial Draft
 -----------------------------------------------------------------------
*/
RETURN
(

  select 

  led.LedgerId, ledGrp.PrimaryGroup, led.LedgerName, ledGrp.COA, ledGrp.LedgerGroupName,
  led.Code,
  Case When hist.OpeningDrCr=1 then hist.OpeningBalance Else 0 END as DRAmount,
 Case WHEN hist.OpeningDrCr=0 then hist.OpeningBalance ELSE 0 END as CRAmount
 
  from ACC_LedgerBalanceHistory hist 
       inner join ACC_Ledger led on hist.LedgerId=led.LedgerId
	   INNER JOIN ACC_MST_LedgerGroup ledGrp on led.LedgerGroupId=ledGrp.LedgerGroupId

  where FiscalYearId=2
  and  ledGrp.PrimaryGroup IN (@Revenue, @Expenses)
  and hist.HospitalId=@HospitalId
  and hist.FiscalYearId = @FiscalYearId
  and IsNULL(hist.OpeningBalance,0) !=0

)

GO
/****** Object:  View [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation_Income_Segregation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation_Income_Segregation]
  AS
/*
 FileName    : VW_BIL_TxnItemsInfoWithDateSeparation
 Description : This view returns all transcationitems and their Paid/Unpaid/Cancelled/Returned Information grouped by date.
 Remarks     : Add new fields as per requirements
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.     14Aug'18- sud			created		To be used as common view for those billing reports where item level segregation is required
 2.		23Aug'18 - ramavtar		alter		added receipt no/invoice number in select(view table)
 3.     Sud/30Aug'18                        Revised for Provisional and BillStatus
 4.		Ramavtar/06Dec			alter		change in ProvisionalDate case statements
 5.     sud:6Aug'19             alter       added column for IsInsurance
 -----------------------------------------------------------------------
*/
 SELECT
	txnItm.BillingTransactionItemId,
	txnItm.PatientId,
	txnItm.ItemId,
	txnItm.ItemName, 
	txnitm.ServiceDepartmentId,
	txnItm.ServiceDepartmentName,
	txnItm.ProviderId,
	txnItm.ProviderName,
	ISNULL(txnItm.BillingType,'Outpatient') AS 'BillingType',--default BillingType is Outpatient, so.. 
	txnItm.RequestingDeptId, -- sud:22Aug'18
	Convert(DATE, txnItm.CreatedOn) 'CreatedDate',
	Convert(DATE, txnItm.PaidDate) 'PaidDate',
	Convert(DATE, ret.CreatedOn)  'ReturnDate', 
	-cancelled---
	CASE WHEN txnItm.BillStatus = 'Cancel' THEN Convert(DATE,txnItm.CancelledOn) ELSE NULL END AS CancelledDate,

  -provisional--
    -below are conditions for Provisional--
	---Invoice not Generated--
	1. Billstatus = Provisional
	2. BillStatus = Cancel  & CreatedOn != CancelledOn
	--Invoice Generated--
	3. billstatus = unpaid  &  ItemCreatedOn != InvoiceCreatedOn
	4. billstatus = paid  &   ItemCreatedOn != InvoiceCreatedOn   & PaymentMode != Credit   
  CASE 
	WHEN txnItm.BillStatus = 'provisional' 
		THEN Convert(DATE, txnItm.CreatedOn) 
	WHEN (txnItm.BillStatus='cancel' AND Convert(Date,txnItm.CreatedOn) != Convert(Date,txnItm.CancelledOn) )
		THEN Convert(DATE,txnItm.CreatedOn)
	WHEN (txnItm.BillingTransactionId IS NOT NULL
			AND ( 
					(txn.PaymentMode != 'credit' AND CONVERT(Date,txnItm.CreatedOn) !=  COnvert(Date,txn.CreatedOn))
				OR  (txnItm.BillStatus='unpaid' AND  CONVERT(Date,txnItm.CreatedOn) !=  COnvert(Date,txn.CreatedOn)) 
				OR  (txnItm.BillStatus='paid' and  CONVERT(Date,txnItm.CreatedOn) !=  CONVERT(Date,txnItm.PaidDate) AND txn.PaymentMode != 'credit')
				OR (txnItm.BillStatus = 'paid' AND CONVERT(date,txnItm.CreatedOn) != CONVERT(date,txn.CreatedOn) AND txn.PaymentMode = 'credit')	--ramavtar:06Dec'18	checking paymentMode!='credit'
				 )
		   ) THEN Convert(DATE, txnItm.CreatedOn) 
	ELSE NULL END AS ProvisionalDate,

CREDIT---
  CASE WHEN (txn.PaymentMode='credit' AND txn.BillStatus='unpaid' )
	   OR ( txn.BillStatus='paid' AND Convert(Date,txn.CreatedOn)  != Convert(Date,txn.PaidDate) ) 
	   THEN CONVERT(DATE,txn.CreatedOn)
	   ELSE NULL END AS 'CreditDate',

	 txnItm.Price,
	 txnItm.Quantity,
	 txnItm.SubTotal,
	 txnItm.DiscountAmount,
	 txnitm.TotalAmount,
	 Case  WHEN ISNULL(txnItm.ReturnStatus,0)=1 THEN txnItm.TotalAmount ELSE 0 END AS  'ReturnAmount',
	 ret.TotalAmount 'ReturnAmount',---this is incorrect.. use above: sud-30aug'18
	 ret.Remarks 'ReturnRemarks',
	 txnItm.CancelRemarks as 'CancelRemarks',
	 txn.PaymentMode as 'PaymentMode',
	 txnItm.VisitType AS 'VisitType',
	 ISNULL(txn.InvoiceCode + '-' + CONVERT(VARCHAR,txn.InvoiceNo),'') 'InvoiceNumber'	-- ramavtar 23Aug'18
	 ,txnItm.IsInsurance --sud:6Aug'19
FROM 
	BIL_TXN_BillingTransactionItems txnItm WITH (NOLOCK)
	LEFT JOIN
	BIL_TXN_BillingTransaction txn  WITH (NOLOCK)
	ON txnItm.BillingTransactionId = txn.BillingTransactionId
	LEFT JOIN
	BIL_TXN_InvoiceReturn ret  WITH (NOLOCK)
	ON txnItm.BillingTransactionId = ret.BillingTransactionId
GO
/****** Object:  UserDefinedFunction [dbo].[FN_INCTV_GetIncentiveSettings_Normal]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--------------------------------------------------------------------------------------


CREATE FUNCTION [dbo].[FN_INCTV_GetIncentiveSettings_Normal] ()
RETURNS TABLE
/*
To get current incentive profile settings for normal. i.e: No GroupDistribution.. 
Created: sud-15Feb'20
Remarks: 
Change History:
----------------------------------------------------------------------------------------
S.No.    Author						Remarks
----------------------------------------------------------------------------------------
1.      15Feb'20/sud				 Initial Draft
2.      15Mar'20/Sud				Added TDSPercenatge in the Select list, which will be used later in calculation.
3.		11June2020/Pratik			GroupDistribution Impacts on Existing Functionalities 
4.      17Jul'20/Sud/Pratik			Recreate after Renamed.. 
----------------------------------------------------------------------------------------
*/
AS
    RETURN
    (
 
      SELECT 
        empBillItmMap.BillItemPriceId,empInctvInfo.EmployeeIncentiveInfoId,
        itmPrice.ServiceDepartmentId, itmPrice.ItemId, itmPrice.ItemName,
        priceCat.PriceCategoryId, priceCat.PriceCategoryName,
        emp.EmployeeId,
        emp.FullName,
        empBillItmMap.AssignedToPercent,
        empBillItmMap.ReferredByPercent,
        empInctvInfo.TDSPercent,
		empBillItmMap.BillingTypesApplicable
      from INCTV_EmployeeIncentiveInfo empInctvInfo
      INNER JOIN INCTV_MAP_EmployeeBillItemsMap empBillItmMap
        on empInctvInfo.EmployeeId=empBillItmMap.EmployeeId
      INNER JOIN BIL_CFG_BillItemPrice  itmPrice
        ON empBillItmMap.BillItemPriceId = itmPrice.BillItemPriceId
      INNER JOIN BIL_CFG_PriceCategory priceCat
        ON empBillItmMap.PriceCategoryId=priceCat.PriceCategoryId 
      INNER JOIN EMP_Employee emp
        ON empInctvInfo.EmployeeId=emp.EmployeeId  
        where empInctvInfo.IsActive=1 and empBillItmMap.IsActive=1 
		 take only those where groupdistribution is not there---
		and ISNULL(empBillItmMap.HasGroupDistribution,0) = 0
    )

GO
/****** Object:  Table [dbo].[INCTV_CFG_ItemGroupDistribution]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_CFG_ItemGroupDistribution](
	[ItemGroupDistributionId] [int] IDENTITY(1,1) NOT NULL,
	[IncentiveType] [varchar](30) NULL,
	[BillItemPriceId] [int] NULL,
	[EmployeeBillItemsMapId] [int] NULL,
	[FromEmployeeId] [int] NULL,
	[DistributeToEmployeeId] [int] NULL,
	[DistributionPercent] [float] NULL,
	[FixedDistributionAmount] [float] NULL,
	[IsFixedAmount] [bit] NULL,
	[DisplaySeq] [int] NULL,
	[Remarks] [varchar](400) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_INCTV_CFG_ItemGroupDistribution] PRIMARY KEY CLUSTERED 
(
	[ItemGroupDistributionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_INCTV_ItemGroupDistribution] UNIQUE NONCLUSTERED 
(
	[BillItemPriceId] ASC,
	[EmployeeBillItemsMapId] ASC,
	[DistributeToEmployeeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_INCTV_GetIncentiveSettings_GroupDistribution]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 End: Pratik: 20 oct 2020:-- Incentive-IP/OP Separation on Settings

  Start: Pratik: 22 oct 2020:-- Incentive-IP/OP Separation on Bill Sync
  

CREATE FUNCTION [dbo].[FN_INCTV_GetIncentiveSettings_GroupDistribution] ()  
RETURNS TABLE
/*
To get settings for GroupDistribution bill items only.. 
Created: Sud/Pratik-17Jul'20
Remarks: This is different than normal incentive distribution. 
           another function for nonGroupDistribution is 'FN_INCTV_GetIncentiveSettings()'
Change History:
----------------------------------------------------------------------------------------
S.No.    Author         Remarks
----------------------------------------------------------------------------------------
1.      Sud/Pratik-17Jul'20   Initial Draft
----------------------------------------------------------------------------------------
*/
AS
    RETURN
    (
 
      Select 
		   grpDist.FromEmployeeId,
		   grpDist.DistributeToEmployeeId 'ToEmployeeId',
		   toEmp.FullName  'ToEmployeeName',
		   grpDist.DistributionPercent,

		  grpDist.BillItemPriceId,
		  cfgPrice.ServiceDepartmentId,
		  cfgPrice.ItemId,
		  cfgPrice.ItemName,
		  grpDist.IncentiveType,
		  inctvInfo.TDSPercent,
		  empBilMap.PriceCategoryId,
		  pricCat.PriceCategoryName,
		  empBilMap.BillingTypesApplicable
 
		 from INCTV_CFG_ItemGroupDistribution grpDist
		   INNER JOIN  EMP_Employee fromEmp
			  ON grpDist.FromEmployeeId = fromEmp.EmployeeId
		  INNER JOIN EMP_Employee toEmp
			  ON grpDist.DistributeToEmployeeId = toEmp.EmployeeId
		  INNER JOIN INCTV_EmployeeIncentiveInfo  inctvInfo
			  ON grpDist.DistributeToEmployeeId = inctvInfo.EmployeeId
		  INNER JOIN BIL_CFG_BillItemPrice cfgPrice
		     ON grpDist.BillItemPriceId = cfgPrice.BillItemPriceId
		  INNER JOIN INCTV_MAP_EmployeeBillItemsMap empBilMap
              ON grpDist.EmployeeBillItemsMapId = empBilMap.EmployeeBillItemsMapId
          INNER JOIN BIL_CFG_PriceCategory pricCat
             ON empBilMap.PriceCategoryId = pricCat.PriceCategoryId
		WHERE grpDist.IsActive=1 and empBilMap.IsActive=1
    )

GO
/****** Object:  Table [dbo].[PHRM_FiscalYearStock]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_FiscalYearStock](
	[FiscalYearStockId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[StoreId] [int] NULL,
	[StoreType] [varchar](20) NULL,
	[StockId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[CostPrice] [decimal](18, 4) NULL,
	[MRP] [decimal](18, 4) NULL,
	[OpeningQuantity] [float] NULL,
	[ClosingQuantity] [float] NULL,
	[Remarks] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NULL,
 CONSTRAINT [PK_PHRM_FiscalYearStock] PRIMARY KEY CLUSTERED 
(
	[FiscalYearStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_RPT_PHRM_GetClosingStockDetailsOnGivenDate]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_RPT_PHRM_GetClosingStockDetailsOnGivenDate](@FiscalYearId INT, @FyStartDate Date, @ClosingDate DATE)
RETURNS TABLE
AS
/*
 FileName    : [FN_RPT_PHRM_GetClosingStockDetailsOnGivenDate]
 Description :	Gives OpeningQty and OpeningValue information for each item on a particular date.
				FiscalYearId and FiscalYearStartDate are passed
 Remarks     : 
 Example	 : select * from FN_RPT_PHRM_GetClosingStockDetailsOnGivenDate(4, '2020-07-16', '2021-06-19')
 Created: 30Aug'21/Sud/Sanjit
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      30Aug'21/Sud/Sanjit    created         
 -----------------------------------------------------------------------
*/
RETURN
(

	SELECT stkMaster.StockId, store.StoreId, stkMaster.ItemId, store.Name,
		ISNULL(opening_FY.Opening_Qty,0) + ISNULL(txnsUptoLastDay.PurchaseQty,0) - ISNULL(txnsUptoLastDay.PurchaseReturnQty,0)
		- ISNULL(txnsUptoLastDay.WriteOffQty,0) - ISNULL(txnsUptoLastDay.SalesQty,0) 
		+ ISNULL(txnsUptoLastDay.SalesReturnQty,0) - ISNULL(txnsUptoLastDay.ProvisionalQty,0) 
		- ISNULL(txnsUptoLastDay.ConsumptionQty,0) - ISNULL(txnsUptoLastDay.StockManageOutQty,0) + ISNULL(txnsUptoLastDay.StockManageInQty,0)
		+ ISNULL(txnsUptoLastDay.TransferInQty,0) - ISNULL(txnsUptoLastDay.TransferOutQty,0)
		AS 'ClosingQty_WithProvisional',

		ISNULL(opening_FY.Opening_Value,0) + ISNULL(txnsUptoLastDay.PurchaseValue,0) - ISNULL(txnsUptoLastDay.PurchaseReturnValue,0)
		- ISNULL(txnsUptoLastDay.WriteOffValue,0) - ISNULL(txnsUptoLastDay.SalesValue,0) 
		+ ISNULL(txnsUptoLastDay.SalesReturnValue,0) - ISNULL(txnsUptoLastDay.ProvisionalValue,0) 
		- ISNULL(txnsUptoLastDay.ConsumptionValue,0) - ISNULL(txnsUptoLastDay.StockManageOutValue,0) + ISNULL(txnsUptoLastDay.StockManageInValue,0)
		+ ISNULL(txnsUptoLastDay.TransferInValue,0) - ISNULL(txnsUptoLastDay.TransferOutValue,0)
			AS  'ClosingValue_WithProvisional',
			
		ISNULL(opening_FY.Opening_Qty,0) + ISNULL(txnsUptoLastDay.PurchaseQty,0) - ISNULL(txnsUptoLastDay.PurchaseReturnQty,0)
		- ISNULL(txnsUptoLastDay.WriteOffQty,0) - ISNULL(txnsUptoLastDay.SalesQty,0) 
		+ ISNULL(txnsUptoLastDay.SalesReturnQty,0) 
		- ISNULL(txnsUptoLastDay.ConsumptionQty,0) - ISNULL(txnsUptoLastDay.StockManageOutQty,0) + ISNULL(txnsUptoLastDay.StockManageInQty,0)
		+ ISNULL(txnsUptoLastDay.TransferInQty,0) - ISNULL(txnsUptoLastDay.TransferOutQty,0)
		AS 'ClosingQty',

		ISNULL(opening_FY.Opening_Value,0) + ISNULL(txnsUptoLastDay.PurchaseValue,0) - ISNULL(txnsUptoLastDay.PurchaseReturnValue,0)
		- ISNULL(txnsUptoLastDay.WriteOffValue,0) - ISNULL(txnsUptoLastDay.SalesValue,0) 
		+ ISNULL(txnsUptoLastDay.SalesReturnValue,0) 
		- ISNULL(txnsUptoLastDay.ConsumptionValue,0) - ISNULL(txnsUptoLastDay.StockManageOutValue,0) + ISNULL(txnsUptoLastDay.StockManageInValue,0)
		+ ISNULL(txnsUptoLastDay.TransferInValue,0) - ISNULL(txnsUptoLastDay.TransferOutValue,0)
			AS  'ClosingValue'
	FROM PHRM_MST_Stock stkMaster
	INNER JOIN PHRM_MST_Store store ON store.Category IN ('dispensary') OR store.SubCategory = 'pharmacy'
	LEFT JOIN
	(       
		SELECT FYS.StockId, FYS.StoreId, FYS.ItemId,
		SUM(ISNULL(FYS.OpeningQuantity, 0)) 'Opening_Qty',
		SUM(IsNull(FYS.OpeningQuantity,0) * IsNull(FYS.CostPrice,0)) 'Opening_Value'
		FROM PHRM_FiscalYearStock FYS
		WHERE   FiscalYearId=@FiscalYearId
		GROUP BY FYS.StockId, FYS.StoreId, FYS.ItemId
		) opening_FY
	ON opening_FY.StockId = stkMaster.StockId AND opening_FY.StoreId = store.StoreId
	LEFT JOIN
	(
		Get transactions from FYStartDate upto LastDay for Opening Calculation---
		SELECT *
		FROM [FN_RPT_PHRM_GetItemStockTxnsBetnDateRange](@FyStartDate, @ClosingDate)
	) txnsUptoLastDay
	ON txnsUptoLastDay.StockId = stkMaster.StockId AND txnsUptoLastDay.StoreId = store.StoreId
)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RPT_BIL_GetDepositTransationsInDatRange]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Function [dbo].[FN_RPT_BIL_GetDepositTransationsInDatRange]
(	@FromDate Date=NULL, 
	@ToDate Date=NULL, 
	@PatSearchText varchar(100)=null,
	@employeeId INT=null)
REturns table
AS
/*
 File: FN_RPT_BIL_GetDepositTransationsInDatRange
 CreatedBy: Sud/10Sep'21
 Description: To get the details of deposit in a given date range for given patient(optional), for given user(optional)
 Remarks: 
   *If Single patient's data is required then Pass the patientid, else pass NULL or ZERO
   *if single User's data is required then pass the UserId (EmployeeId) else pas NULL/Zero.
   *Created this as function so that the Function can be used by multiple SPs or other functions..
       If created SP then it can't be reused by another DB-Object.. so.. 
 Example: select * from FN_RPT_BIL_GetDepositTransationsInDatRange ('2021-06-15','2021-09-10','ram',NULL)

Change History:
-------------------------------------------------------------------------------
SN   User/Date                                Remarks
-------------------------------------------------------------------------------
1.   Sud/10Sep'21                              Created
-------------------------------------------------------------------------------
*/
RETURN
(
  Select 
  DepositId, DepositDate, ReceiptNo, 
  PatientId, PatientCode, PatientName, DateOfBirth, Gender, PhoneNumber, 
  ISNULL([Deposit],0) 'DepositReceived',
  ISNULL([depositdeduct],0) 'DepositDeducted',
  ISNULL([ReturnDeposit],0) 'DepositReturned', 
  CreatedBy 'CreatedById', UserName, CounterName, Remarks
  from
  (
  Select pat.PatientCode, pat.PatientId, pat.ShortName 'PatientName', pat.DateOfBirth, pat.Gender, pat.PhoneNumber,
  dep.DepositId, Convert(date,dep.CreatedOn) DepositDate, 'DR'+Convert(Varchar(20),ReceiptNo) 'ReceiptNo',
   dep.DepositType, dep.Amount, dep.Remarks, 
   dep.CreatedBy, emp.FullName 'UserName', cnt.CounterName
  
from BIL_TXN_Deposit dep INNER JOIN PAT_Patient pat
    on dep.PatientId=pat.PatientId
   left join EMP_Employee emp
     on dep.CreatedBy=emp.EmployeeId
   left join BIL_CFG_Counter cnt
     on dep.CounterId=cnt.CounterId
  
Where Convert(date,dep.CreatedOn) between @FromDate and @ToDate
     and (@employeeId=dep.CreatedBy OR ISNULL(@employeeId,0)=0 )
	 -we may receive both HospitalNo or PatientName from Patient Search txtbox---
     and (pat.ShortName like '%' + ISNULL(@PatSearchText,'') + '%'  or pat.PatientCode like '%' + ISNULL(@PatSearchText,'') + '%')
  ) tbl  --get all required data here and then do pivot ..

  since we have one row at a time, doing SUM would not be an issue..
  But please check carefully in other scenarios.. 
pivot (SUM(Amount) for DepositType IN ([Deposit],[depositdeduct],[ReturnDeposit])) as pvtData
  
)

GO
/****** Object:  Table [dbo].[__MigrationHistory]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[__MigrationHistory](
	[MigrationId] [nvarchar](150) NOT NULL,
	[ContextKey] [nvarchar](300) NOT NULL,
	[Model] [varbinary](max) NOT NULL,
	[ProductVersion] [nvarchar](32) NOT NULL,
 CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED 
(
	[MigrationId] ASC,
	[ContextKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Bill_LedgerMapping]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Bill_LedgerMapping](
	[BillLedgerMappingId] [int] IDENTITY(1,1) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[ServiceDepartmentId] [int] NOT NULL,
	[ItemId] [int] NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_Bill_LedgerMapping] PRIMARY KEY CLUSTERED 
(
	[BillLedgerMappingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_FiscalYear_Log]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_FiscalYear_Log](
	[LogId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NULL,
	[LogType] [varchar](50) NULL,
	[LogDetails] [varchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_FiscalYear_Log] PRIMARY KEY CLUSTERED 
(
	[LogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_InvoiceData]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_InvoiceData](
	[InvoiceDataId] [int] IDENTITY(1,1) NOT NULL,
	[SectionId] [int] NULL,
	[ReferenceId] [int] NULL,
	[ReferenceModelName] [varchar](100) NULL,
	[ServiceDepartmentId] [int] NULL,
	[ItemId] [int] NULL,
	[IncomeLedgerName] [varchar](100) NULL,
	[PatientId] [int] NULL,
	[TransactionType] [varchar](50) NULL,
	[PaymentMode] [varchar](20) NULL,
	[SubTotal] [float] NULL,
	[TaxAmount] [float] NULL,
	[DiscountAmount] [float] NULL,
	[TotalAmount] [float] NULL,
	[CashAmount] [float] NULL,
	[DepositAdd] [float] NULL,
	[DepositDeduct] [float] NULL,
	[DepositReturn] [float] NULL,
	[IsTransferedToAcc] [bit] NULL,
	[TransactionDate] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
 CONSTRAINT [PK_ACC_InvoiceData] PRIMARY KEY CLUSTERED 
(
	[InvoiceDataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Ledger_2076_77_2]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Ledger_2076_77_2](
	[COACode] [float] NULL,
	[COA] [nvarchar](255) NULL,
	[LedgerGroupCode] [float] NULL,
	[LedgerGroupName] [nvarchar](255) NULL,
	[Code] [float] NULL,
	[LedgerName] [nvarchar](255) NULL,
	[Opening] [float] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[Closing] [float] NULL,
	[MigrationRemark] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Ledger_Mapping]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Ledger_Mapping](
	[LedgerMappingId] [int] IDENTITY(1,1) NOT NULL,
	[LedgerId] [int] NULL,
	[ReferenceId] [int] NULL,
	[LedgerType] [varchar](max) NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_Ledger_Mapping] PRIMARY KEY CLUSTERED 
(
	[LedgerMappingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_LedgerCharak$]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_LedgerCharak$](
	[COACode] [float] NULL,
	[COA] [nvarchar](255) NULL,
	[LedgerGroupCode] [float] NULL,
	[LedgerGroupName] [nvarchar](255) NULL,
	[LedgerCode] [float] NULL,
	[LedgerName] [nvarchar](255) NULL,
	[Opening] [float] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[Closing] [float] NULL,
	[MigrationStatus] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Log_EditVoucher]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Log_EditVoucher](
	[LogId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionDate] [datetime] NULL,
	[SectionId] [int] NULL,
	[VoucherNumber] [varchar](50) NULL,
	[Reason] [nvarchar](max) NULL,
	[OldVocherJsonData] [nvarchar](max) NULL,
	[FiscalYearId] [varchar](50) NULL,
	[HospitalId] [varchar](50) NULL,
	[CreatedOn] [varchar](50) NULL,
	[CreatedBy] [varchar](50) NULL,
 CONSTRAINT [PK_ACC_Log_EditVoucher] PRIMARY KEY CLUSTERED 
(
	[LogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Map_TxnItemCostCenterItem]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Map_TxnItemCostCenterItem](
	[TxnItemCostCenterItemId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionItemId] [int] NULL,
	[CostCenterItemId] [int] NULL,
	[Amount] [float] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_Map_TxnItemCostCenterItem] PRIMARY KEY CLUSTERED 
(
	[TxnItemCostCenterItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_Bank_ReconciliationCategory]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_Bank_ReconciliationCategory](
	[CategoryId] [int] IDENTITY(1,1) NOT NULL,
	[CategoryName] [varchar](50) NULL,
	[Description] [varchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ACC_MST_Bank_ReconciliationCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_ChartOfAccounts]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_ChartOfAccounts](
	[ChartOfAccountId] [int] IDENTITY(1,1) NOT NULL,
	[ChartOfAccountName] [varchar](100) NULL,
	[COACode] [varchar](100) NULL,
	[PrimaryGroupId] [int] NULL,
	[Description] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ACC_MST_ChartOfAccounts] PRIMARY KEY CLUSTERED 
(
	[ChartOfAccountId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_CodeDetails]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_CodeDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](50) NULL,
	[Name] [varchar](50) NULL,
	[Description] [varchar](100) NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_MST_CodeDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_CostCenterItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_CostCenterItems](
	[CostCenterItemId] [int] IDENTITY(1,1) NOT NULL,
	[CostCenterItemName] [varchar](50) NOT NULL,
	[Description] [varchar](200) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_MST_CostCenterItems] PRIMARY KEY CLUSTERED 
(
	[CostCenterItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_FiscalYears]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_FiscalYears](
	[FiscalYearId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearName] [varchar](50) NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[Description] [varchar](200) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[NpFiscalYearName] [varchar](50) NULL,
	[IsClosed] [bit] NULL,
	[ClosedOn] [datetime] NULL,
	[ClosedBy] [int] NULL,
	[ReadyToClose] [bit] NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_MST_FiscalYears] PRIMARY KEY CLUSTERED 
(
	[FiscalYearId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_GroupMapping]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_GroupMapping](
	[GroupMappingId] [int] IDENTITY(1,1) NOT NULL,
	[Description] [varchar](200) NULL,
	[Section] [int] NULL,
	[Details] [varchar](max) NULL,
	[VoucherId] [int] NULL,
	[Remarks] [varchar](255) NULL,
	[CustomVoucherId] [int] NULL,
 CONSTRAINT [PK_AccountingGroupMapping] PRIMARY KEY CLUSTERED 
(
	[GroupMappingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_Hospital]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_Hospital](
	[HospitalId] [int] IDENTITY(1,1) NOT NULL,
	[HospitalShortName] [varchar](100) NULL,
	[HospitalLongName] [varchar](500) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_HospitalId] PRIMARY KEY CLUSTERED 
(
	[HospitalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Acc_HospitalShortName] UNIQUE NONCLUSTERED 
(
	[HospitalShortName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_Hospital_TransferRules_Mapping]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_Hospital_TransferRules_Mapping](
	[HospitalTransferRulesMapId] [int] IDENTITY(1,1) NOT NULL,
	[HospitalId] [int] NULL,
	[TransferRuleId] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_HospitalTransferRulesMapId] PRIMARY KEY CLUSTERED 
(
	[HospitalTransferRulesMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_MappingDetail]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_MappingDetail](
	[AccountingMappingDetailId] [int] IDENTITY(1,1) NOT NULL,
	[GroupMappingId] [int] NULL,
	[LedgerGroupId] [int] NULL,
	[DrCr] [bit] NULL,
	[Description] [varchar](max) NULL,
 CONSTRAINT [PK_ACC_MST_MappingDetail] PRIMARY KEY CLUSTERED 
(
	[AccountingMappingDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_PrimaryGroup]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_PrimaryGroup](
	[PrimaryGroupId] [int] IDENTITY(1,1) NOT NULL,
	[PrimaryGroupCode] [varchar](20) NULL,
	[PrimaryGroupName] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
 CONSTRAINT [PK_ACC_MST_PrimaryGroup] PRIMARY KEY CLUSTERED 
(
	[PrimaryGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_SectionList]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_SectionList](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SectionId] [int] NULL,
	[SectionName] [varchar](50) NULL,
	[SectionCode] [varchar](20) NULL,
	[HospitalId] [int] NULL,
	[IsDefault] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_VoucherHead]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_VoucherHead](
	[VoucherHeadId] [int] IDENTITY(1,1) NOT NULL,
	[VoucherHeadName] [varchar](100) NOT NULL,
	[Description] [varchar](500) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[IsDefault] [bit] NOT NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_MST_VoucherHead] PRIMARY KEY CLUSTERED 
(
	[VoucherHeadId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[VoucherHeadName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_MST_Vouchers]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_MST_Vouchers](
	[VoucherId] [int] IDENTITY(1,1) NOT NULL,
	[VoucherName] [varchar](200) NULL,
	[Description] [varchar](200) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[VoucherCode] [varchar](50) NULL,
	[ISCopyDescription] [bit] NOT NULL,
	[ShowPayeeName] [bit] NULL,
	[ShowChequeNumber] [bit] NULL,
 CONSTRAINT [PK_ACC_MST_Vouchers] PRIMARY KEY CLUSTERED 
(
	[VoucherId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Transaction_History]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Transaction_History](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TransactionDate] [datetime] NULL,
	[SyncedOn] [datetime] NULL,
	[SyncedBy] [int] NULL,
	[SectionId] [int] NULL,
	[TransactionType] [varchar](100) NULL,
 CONSTRAINT [PK_ACC_Transaction_History] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_TransactionItemDetail]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_TransactionItemDetail](
	[TransactionItemDetailId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionItemId] [int] NULL,
	[Amount] [float] NULL,
	[Description] [varchar](200) NULL,
	[ReferenceId] [int] NULL,
	[ReferenceType] [varchar](200) NULL,
 CONSTRAINT [PK_ACC_TransactionItemDetail] PRIMARY KEY CLUSTERED 
(
	[TransactionItemDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_TransactionItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_TransactionItems](
	[TransactionItemId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionId] [int] NULL,
	[LedgerId] [int] NULL,
	[DrCr] [bit] NULL,
	[Amount] [float] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[Description] [varchar](200) NULL,
	[HospitalId] [int] NULL,
 CONSTRAINT [PK_ACC_TransactionItems] PRIMARY KEY CLUSTERED 
(
	[TransactionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_Transactions]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_Transactions](
	[TransactionId] [int] IDENTITY(1,1) NOT NULL,
	[VoucherId] [int] NULL,
	[TransactionDate] [datetime] NULL,
	[FiscalYearId] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[Remarks] [varchar](500) NULL,
	[SectionId] [int] NULL,
	[VoucherNumber] [nvarchar](50) NULL,
	[VoucherHeadId] [int] NULL,
	[IsBackDateEntry] [bit] NULL,
	[TransactionType] [varchar](100) NULL,
	[TUId] [int] NULL,
	[DayVoucherNumber] [int] NULL,
	[IsCustomVoucher] [bit] NOT NULL,
	[IsReverseTxnAllow] [bit] NULL,
	[IsEditable] [bit] NULL,
	[IsGroupTxn] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[HospitalId] [int] NULL,
	[VoucherSerialNo] [int] NULL,
	[NewVoucherNumber] [varchar](50) NULL,
	[OldVoucherNumber] [varchar](50) NULL,
	[IsAllowReverseVoucher] [bit] NULL,
	[PayeeName] [nvarchar](100) NULL,
	[ChequeNumber] [int] NULL,
 CONSTRAINT [PK_ACC_Transactions] PRIMARY KEY CLUSTERED 
(
	[TransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_TXN_Bank_Reconciliation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_TXN_Bank_Reconciliation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SectionId] [int] NULL,
	[VoucherNumber] [varchar](50) NULL,
	[TransactionDate] [datetime] NULL,
	[FiscalyearId] [int] NULL,
	[BankTransactionDate] [datetime] NULL,
	[CategoryId] [int] NULL,
	[BankBalance] [decimal](18, 0) NULL,
	[IsVerified] [bit] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedOn] [datetime] NULL,
	[Remark] [varchar](100) NULL,
	[Difference] [decimal](18, 0) NULL,
	[TransactionId] [int] NULL,
	[LedgerId] [int] NULL,
	[HospitalId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[DrCr] [bit] NULL,
 CONSTRAINT [PK_ACC_TXN_Bank_Reconciliation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_TXN_Link]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_TXN_Link](
	[AccountingTxnLinkId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionId] [int] NULL,
	[ReferenceId] [varchar](max) NULL,
	[ReferenceIdOne] [varchar](max) NULL,
 CONSTRAINT [PK_ACC_TXN_Link] PRIMARY KEY CLUSTERED 
(
	[AccountingTxnLinkId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ACC_TXN_Payment]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACC_TXN_Payment](
	[PaymentId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionId] [int] NOT NULL,
	[VoucherNumber] [varchar](100) NULL,
	[PaymentDate] [datetime2](3) NULL,
	[ReceiverLedgerId] [int] NULL,
	[GoodReceiptID] [int] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[PaidAmount] [decimal](16, 4) NULL,
	[VoucherAmount] [decimal](16, 4) NULL,
	[RemainingAmount] [decimal](16, 4) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[Remarks] [nvarchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime2](3) NULL,
 CONSTRAINT [PK_ACC_TXN_Payment] PRIMARY KEY CLUSTERED 
(
	[PaymentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_BabyBirthDetails]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_BabyBirthDetails](
	[BabyBirthDetailsId] [int] IDENTITY(1,1) NOT NULL,
	[CertificateNumber] [nvarchar](100) NULL,
	[Sex] [nvarchar](50) NULL,
	[FathersName] [nvarchar](50) NULL,
	[WeightOfBaby] [decimal](18, 2) NULL,
	[BirthDate] [datetime] NULL,
	[BirthTime] [time](7) NULL,
	[DischargeSummaryId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[PatientId] [int] NULL,
	[MedicalRecordId] [int] NULL,
	[BirthType] [varchar](70) NULL,
	[BirthNumberType] [varchar](30) NULL,
	[IssuedBy] [int] NULL,
	[CertifiedBy] [int] NULL,
	[FiscalYear] [varchar](20) NOT NULL,
	[PrintedBy] [int] NULL,
	[PrintCount] [int] NULL,
	[PrintedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[BirthConditionId] [int] NOT NULL,
 CONSTRAINT [PK_ADT_BabyBirthDetails] PRIMARY KEY CLUSTERED 
(
	[BabyBirthDetailsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_Bed]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_Bed](
	[BedID] [int] IDENTITY(1,1) NOT NULL,
	[BedCode] [varchar](50) NULL,
	[BedNumber] [int] NOT NULL,
	[WardId] [int] NOT NULL,
	[IsOccupied] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsReserved] [bit] NULL,
	[OnHold] [bit] NULL,
	[HoldedOn] [datetime] NULL,
 CONSTRAINT [PK_ADT_Bed] PRIMARY KEY CLUSTERED 
(
	[BedID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_BedReservation]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_BedReservation](
	[ReservedBedInfoId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NULL,
	[RequestingDepartmentId] [int] NULL,
	[AdmittingDoctorId] [int] NULL,
	[WardId] [int] NOT NULL,
	[BedFeatureId] [int] NOT NULL,
	[BedId] [int] NOT NULL,
	[AdmissionStartsOn] [datetime] NOT NULL,
	[AdmissionNotes] [varchar](1000) NULL,
	[ReservedOn] [datetime] NULL,
	[ReservedBy] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[IsAutoCancelled] [bit] NULL,
	[AutoCancelledOn] [datetime] NULL,
 CONSTRAINT [ReservedBedInfoId] PRIMARY KEY CLUSTERED 
(
	[ReservedBedInfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_DeathDeatils]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_DeathDeatils](
	[DeathId] [int] IDENTITY(1,1) NOT NULL,
	[DeathDate] [datetime] NOT NULL,
	[DeathTime] [time](7) NOT NULL,
	[CertificateNumber] [varchar](30) NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[MedicalRecordId] [int] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[FatherName] [varchar](80) NULL,
	[MotherName] [varchar](80) NULL,
	[SpouseOf] [varchar](80) NULL,
	[VisitCode] [varchar](20) NULL,
	[CauseOfDeath] [varchar](200) NULL,
	[Age] [varchar](20) NULL,
	[CertifiedBy] [int] NULL,
	[FiscalYear] [varchar](20) NULL,
	[PrintedBy] [int] NULL,
	[PrintCount] [int] NULL,
	[PrintedOn] [datetime] NULL,
 CONSTRAINT [PK_DeathId] PRIMARY KEY CLUSTERED 
(
	[DeathId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_DischargeCancel]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_DischargeCancel](
	[DischargeCancelId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[PatientAdmissionId] [int] NOT NULL,
	[DischargedDate] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[DischargedBy] [int] NOT NULL,
	[DischargeCancelledBy] [int] NOT NULL,
	[DischargeCancelNote] [varchar](300) NOT NULL,
	[BillingTransactionId] [int] NOT NULL,
 CONSTRAINT [PK_ADT_DischargeCancel] PRIMARY KEY CLUSTERED 
(
	[DischargeCancelId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_DischargeSummary]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_DischargeSummary](
	[PatientVisitId] [int] NOT NULL,
	[DischargeSummaryId] [int] IDENTITY(1,1) NOT NULL,
	[DischargeTypeId] [int] NOT NULL,
	[ConsultantId] [int] NOT NULL,
	[DoctorInchargeId] [int] NOT NULL,
	[OperativeProcedure] [varchar](1000) NULL,
	[OperativeFindings] [varchar](1000) NULL,
	[AnaesthetistsId] [int] NULL,
	[Diagnosis] [varchar](1000) NULL,
	[CaseSummary] [varchar](8000) NULL,
	[Condition] [varchar](5000) NULL,
	[Treatment] [varchar](1000) NULL,
	[HistologyReport] [varchar](1000) NULL,
	[SpeicialNotes] [varchar](1000) NULL,
	[Medications] [varchar](1000) NULL,
	[Allergies] [varchar](1000) NULL,
	[Activities] [varchar](1000) NULL,
	[Diet] [varchar](1000) NULL,
	[RestDays] [int] NULL,
	[FollowUp] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsSubmitted] [bit] NULL,
	[Others] [varchar](1000) NULL,
	[ResidenceDrId] [int] NULL,
	[IsDischargeCancel] [bit] NULL,
	[LabTests] [varchar](5000) NULL,
	[DischargeConditionId] [int] NULL,
	[DeliveryTypeId] [int] NULL,
	[BabyBirthConditionId] [int] NULL,
	[DeathTypeId] [int] NULL,
	[DeathPeriod] [varchar](50) NULL,
	[ChiefComplaint] [varchar](1000) NULL,
	[PendingReports] [varchar](1000) NULL,
	[HospitalCourse] [varchar](1000) NULL,
	[PresentingIllness] [varchar](1000) NULL,
	[ProcedureNts] [varchar](1000) NULL,
	[NotesId] [int] NULL,
	[SelectedImagingItems] [nvarchar](2000) NULL,
	[RegistrarName] [varchar](500) NULL,
	[PastHistory] [varchar](5000) NULL,
	[PhysicalExamination] [varchar](5000) NULL,
	[AdviceOnDischarge] [varchar](5000) NULL,
	[DiagnosisFreeText] [varchar](1000) NULL,
	[ProvisionalDiagnosis] [nvarchar](max) NULL,
 CONSTRAINT [PK_ADT_DischargeSummary] PRIMARY KEY CLUSTERED 
(
	[PatientVisitId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_DischargeSummaryMedication]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_DischargeSummaryMedication](
	[DischargeSummaryMedicationId] [int] IDENTITY(1,1) NOT NULL,
	[DischargeSummaryId] [int] NOT NULL,
	[OldNewMedicineType] [int] NULL,
	[Medicine] [nvarchar](100) NULL,
	[FrequencyId] [int] NULL,
	[Notes] [nvarchar](100) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ADT_DischargeSummaryMedication] PRIMARY KEY CLUSTERED 
(
	[DischargeSummaryMedicationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_DischargeType]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_DischargeType](
	[DischargeTypeId] [int] IDENTITY(1,1) NOT NULL,
	[DischargeTypeName] [varchar](30) NOT NULL,
	[Description] [varchar](30) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ADT_DischargeType] PRIMARY KEY CLUSTERED 
(
	[DischargeTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MAP_BedFeaturesMap]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MAP_BedFeaturesMap](
	[BedFeatureCFGId] [int] IDENTITY(1,1) NOT NULL,
	[BedId] [int] NOT NULL,
	[WardId] [int] NOT NULL,
	[BedFeatureId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_BabyBirthCondition]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_BabyBirthCondition](
	[BabyBirthConditionId] [int] IDENTITY(1,1) NOT NULL,
	[BirthConditionType] [nvarchar](50) NOT NULL,
	[DischargeConditionId] [int] NOT NULL,
 CONSTRAINT [PK_ADT_MST_BabyBirthCondition] PRIMARY KEY CLUSTERED 
(
	[BabyBirthConditionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_BedFeature]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_BedFeature](
	[BedFeatureId] [int] IDENTITY(1,1) NOT NULL,
	[BedFeatureName] [varchar](50) NOT NULL,
	[BedFeatureFullName] [varchar](100) NULL,
	[BedPrice] [float] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ADT_MST_BedFeature] PRIMARY KEY CLUSTERED 
(
	[BedFeatureId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_DeathType]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_DeathType](
	[DeathTypeId] [int] IDENTITY(1,1) NOT NULL,
	[DeathType] [nvarchar](50) NULL,
	[DischargeTypeId] [int] NULL,
 CONSTRAINT [PK_ADT_MST_DeathType] PRIMARY KEY CLUSTERED 
(
	[DeathTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_DeliveryType]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_DeliveryType](
	[DeliveryTypeId] [int] IDENTITY(1,1) NOT NULL,
	[DischargeConditionId] [int] NOT NULL,
	[DeliveryTypeName] [nvarchar](50) NULL,
 CONSTRAINT [PK_ADT_MST_DeliveryType] PRIMARY KEY CLUSTERED 
(
	[DeliveryTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_DischargeConditionType]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_DischargeConditionType](
	[DischargeConditionId] [int] IDENTITY(1,1) NOT NULL,
	[DischargeTypeId] [int] NOT NULL,
	[Condition] [nvarchar](50) NULL,
 CONSTRAINT [PK_ADT_MST_DischargeConditionType] PRIMARY KEY CLUSTERED 
(
	[DischargeConditionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_Gravita]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_Gravita](
	[GravitaId] [int] IDENTITY(1,1) NOT NULL,
	[GravitaName] [varchar](30) NULL,
 CONSTRAINT [PK_GravitaId] PRIMARY KEY CLUSTERED 
(
	[GravitaId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_MST_Ward]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_MST_Ward](
	[WardID] [int] IDENTITY(1,1) NOT NULL,
	[WardCode] [varchar](20) NULL,
	[WardName] [varchar](100) NOT NULL,
	[WardLocation] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[StoreId] [int] NULL,
 CONSTRAINT [PK_ADT_MST_Ward] PRIMARY KEY CLUSTERED 
(
	[WardID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_WardCode] UNIQUE NONCLUSTERED 
(
	[WardCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_WardName] UNIQUE NONCLUSTERED 
(
	[WardName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_PatientAdmission]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_PatientAdmission](
	[PatientVisitId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientAdmissionId] [int] IDENTITY(1,1) NOT NULL,
	[AdmittingDoctorId] [int] NULL,
	[AdmissionDate] [datetime] NULL,
	[DischargeDate] [datetime] NULL,
	[AdmissionNotes] [varchar](1000) NULL,
	[AdmissionOrders] [varchar](200) NULL,
	[AdmissionStatus] [varchar](15) NULL,
	[BillStatusOnDischarge] [varchar](10) NULL,
	[DischargedBy] [int] NULL,
	[DischargeRemarks] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[CareOfPersonName] [varchar](100) NULL,
	[CareOfPersonPhoneNo] [varchar](20) NULL,
	[CareOfPersonRelation] [varchar](100) NULL,
	[CancelledOn] [datetime] NULL,
	[CancelledBy] [int] NULL,
	[CancelledRemark] [varchar](200) NULL,
	[ProcedureType] [varchar](150) NULL,
	[IsPoliceCase] [bit] NULL,
	[IsInsurancePatient] [bit] NULL,
	[DiscountSchemeId] [int] NULL,
	[AdmissionCase] [varchar](100) NULL,
	[IsItemDiscountEnabled] [bit] NOT NULL,
	[ProvisionalDiscPercent] [float] NULL,
 CONSTRAINT [PK_ADT_PatientAdmission] PRIMARY KEY CLUSTERED 
(
	[PatientVisitId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_PatientCertificate]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_PatientCertificate](
	[CertificateId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearName] [nvarchar](50) NULL,
	[CertificateNumber] [nvarchar](50) NOT NULL,
	[CertificateType] [nvarchar](50) NULL,
	[IssuedBySignatories] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[DischargeSummaryId] [int] NULL,
	[CertifiedBySignatories] [nvarchar](max) NOT NULL,
	[BirthType] [nvarchar](max) NULL,
	[DeathDate] [date] NULL,
	[DeathTime] [time](7) NULL,
	[DeathCause] [nvarchar](max) NULL,
	[FatherName] [nvarchar](50) NULL,
	[MotherName] [nvarchar](50) NULL,
	[Spouse] [nvarchar](50) NULL,
 CONSTRAINT [PK_ADT_PatientCertificate] PRIMARY KEY CLUSTERED 
(
	[CertificateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADT_TXN_PatientBedInfo]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADT_TXN_PatientBedInfo](
	[PatientBedInfoId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[WardId] [int] NOT NULL,
	[BedId] [int] NOT NULL,
	[BedFeatureId] [int] NOT NULL,
	[BedPrice] [float] NULL,
	[Action] [varchar](10) NULL,
	[Remarks] [varchar](100) NULL,
	[StartedOn] [datetime] NOT NULL,
	[EndedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[RequestingDeptId] [int] NULL,
	[BedQuantity] [int] NULL,
	[SecondaryDoctorId] [int] NULL,
	[OutAction] [varchar](20) NULL,
	[ReceivedBy] [int] NULL,
	[ReceivedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[BedOnHoldEnabled] [bit] NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelRemarks] [nvarchar](600) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AllAbnormalDataTable]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AllAbnormalDataTable](
	[Range] [varchar](3000) NULL,
	[TestComponentResultId] [bigint] IDENTITY(1,1) NOT NULL,
	[Value] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BedInformationModels]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BedInformationModels](
	[BedNumber] [int] IDENTITY(1,1) NOT NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[BedTypeName] [nvarchar](max) NULL,
	[IsOccupied] [bit] NOT NULL,
	[WardName] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.BedInformationModels] PRIMARY KEY CLUSTERED 
(
	[BedNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_BillItemRequisition]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_BillItemRequisition](
	[BillItemRequisitionId] [bigint] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [bigint] NULL,
	[BillStatus] [varchar](20) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[ProviderId] [int] NOT NULL,
	[ServiceDepartmentId] [int] NOT NULL,
	[DepartmentName] [varchar](50) NULL,
	[ItemId] [int] NOT NULL,
	[ItemName] [varchar](100) NULL,
	[Price] [float] NULL,
	[Quantity] [float] NOT NULL,
	[ProcedureCode] [varchar](10) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[AssignedTo] [int] NULL,
 CONSTRAINT [PK_BIL_BillItemRequisition] PRIMARY KEY CLUSTERED 
(
	[BillItemRequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_CFG_BillItemPrice_History]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_CFG_BillItemPrice_History](
	[BillItemPriceHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[BillItemPriceId] [int] NULL,
	[ServiceDepartmentId] [int] NULL,
	[ItemId] [int] NULL,
	[Price] [float] NULL,
	[CreatedBy] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
 CONSTRAINT [PK_BillItemPriceHistoryId] PRIMARY KEY CLUSTERED 
(
	[BillItemPriceHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_CFG_FiscalYears]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_CFG_FiscalYears](
	[FiscalYearId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearName] [varchar](20) NOT NULL,
	[FiscalYearFormatted] [varchar](20) NOT NULL,
	[StartYear] [datetime] NOT NULL,
	[EndYear] [datetime] NOT NULL,
	[Description] [varchar](200) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_BIL_CFG_FiscalYears] PRIMARY KEY CLUSTERED 
(
	[FiscalYearId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_BIL_CFG_FiscalYears] UNIQUE NONCLUSTERED 
(
	[FiscalYearName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_CFG_Packages]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_CFG_Packages](
	[BillingPackageId] [int] IDENTITY(1,1) NOT NULL,
	[BillingPackageName] [varchar](100) NULL,
	[Description] [varchar](200) NULL,
	[TotalPrice] [float] NOT NULL,
	[DiscountPercent] [float] NOT NULL,
	[BillingItemsXML] [xml] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[PackageCode] [varchar](20) NULL,
	[InsuranceApplicable] [bit] NOT NULL,
 CONSTRAINT [PK_BIL_CFG_Packages] PRIMARY KEY CLUSTERED 
(
	[BillingPackageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_History_BillingTransactionItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_History_BillingTransactionItems](
	[BillTxnItemHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[HistoryType] [varchar](50) NULL,
	[BillingTransactionItemId] [int] NOT NULL,
	[BillingTransactionId] [int] NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CounterId] [int] NULL,
	[Remarks] [varchar](100) NULL,
	[ServiceDepartmentId] [int] NOT NULL,
	[ServiceDepartmentName] [varchar](50) NULL,
	[ItemId] [int] NOT NULL,
	[ItemName] [varchar](100) NOT NULL,
	[Price] [float] NULL,
	[Quantity] [float] NULL,
	[SubTotal] [float] NULL,
	[DiscountAmount] [float] NULL,
	[TaxableAmount] [float] NULL,
	[Tax] [float] NULL,
	[TotalAmount] [float] NULL,
	[DiscountPercent] [float] NULL,
	[DiscountPercentAgg] [float] NULL,
	[ProviderId] [int] NULL,
	[ProviderName] [varchar](70) NULL,
	[RequisitionId] [bigint] NULL,
	[CounterDay] [date] NULL,
	[TaxPercent] [float] NULL,
	[NonTaxableAmount] [float] NULL,
	[PatientType] [varchar](20) NULL,
	[RequestingDeptId] [int] NULL,
	[IsTransferredToACC] [int] NULL,
 CONSTRAINT [PK_BIL_TXN_BillCancellationItems] PRIMARY KEY CLUSTERED 
(
	[BillTxnItemHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_MAP_FreeService_BillingItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_MAP_FreeService_BillingItems](
	[FreeServiceAndBillingItemMappingId] [int] IDENTITY(1,1) NOT NULL,
	[FreeServiceId] [int] NULL,
	[BillItemPriceId] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_BIL_MAP_FreeService_BillingItems] PRIMARY KEY CLUSTERED 
(
	[FreeServiceAndBillingItemMappingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_MAP_ReportingItem_BillingItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_MAP_ReportingItem_BillingItems](
	[RptItem_BillItemMappingId] [int] IDENTITY(1,1) NOT NULL,
	[ReportingItemsId] [int] NULL,
	[BillItemPriceId] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_BIL_MAP_ReportingItem_BillingItems] PRIMARY KEY CLUSTERED 
(
	[RptItem_BillItemMappingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_MST_Credit_Organization]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_MST_Credit_Organization](
	[OrganizationId] [int] IDENTITY(1,1) NOT NULL,
	[OrganizationName] [varchar](50) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[OrganizationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_MST_Handover]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_MST_Handover](
	[HandoverId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NULL,
	[CounterId] [int] NULL,
	[HandoverType] [varchar](50) NULL,
	[HandoverUserId] [int] NULL,
	[PreviousAmount] [float] NULL,
	[HandoverAmount] [float] NULL,
	[TotalAmount] [float] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[HandoverId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_MST_ServiceDepartment]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_MST_ServiceDepartment](
	[ServiceDepartmentId] [int] IDENTITY(1,1) NOT NULL,
	[ServiceDepartmentName] [varchar](100) NULL,
	[ServiceDepartmentShortName] [varchar](100) NULL,
	[DepartmentId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IntegrationName] [varchar](50) NULL,
	[ParentServiceDepartmentId] [int] NULL,
 CONSTRAINT [PK_BILL_ServiceDepartment] PRIMARY KEY CLUSTERED 
(
	[ServiceDepartmentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uk_bil_mst_servicedepartment] UNIQUE NONCLUSTERED 
(
	[ServiceDepartmentName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_SYNC_BillingAccounting]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_SYNC_BillingAccounting](
	[BillingAccountingSyncId] [int] IDENTITY(1,1) NOT NULL,
	[ReferenceId] [int] NULL,
	[ReferenceModelName] [varchar](100) NULL,
	[ServiceDepartmentId] [int] NULL,
	[ItemId] [int] NULL,
	[IncomeLedgerName] [varchar](100) NULL,
	[PatientId] [int] NULL,
	[TransactionType] [varchar](50) NULL,
	[PaymentMode] [varchar](20) NULL,
	[SubTotal] [float] NULL,
	[TaxAmount] [float] NULL,
	[DiscountAmount] [float] NULL,
	[TotalAmount] [float] NULL,
	[IsTransferedToAcc] [bit] NULL,
	[TransactionDate] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[SettlementDiscountAmount] [float] NULL,
	[Remark] [varchar](max) NULL,
	[CreditOrganizationId] [int] NULL,
 CONSTRAINT [PK_BIL_SYNC_BillingAccounting] PRIMARY KEY CLUSTERED 
(
	[BillingAccountingSyncId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TEMP_CFGBillItemPrice_7Sept]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TEMP_CFGBillItemPrice_7Sept](
	[BillItemPriceId] [int] IDENTITY(1,1) NOT NULL,
	[ServiceDepartmentId] [int] NULL,
	[ItemName] [varchar](100) NULL,
	[Price] [float] NULL,
	[ItemId] [int] NULL,
	[TaxApplicable] [bit] NULL,
	[DiscountApplicable] [bit] NULL,
	[Description] [varchar](100) NULL,
	[ProcedureCode] [varchar](10) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[DisplaySeq] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_Temp_ItemsMapping]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_Temp_ItemsMapping](
	[ServiceDepartmentId] [int] NULL,
	[ItemName] [varchar](100) NULL,
	[OldItemId] [int] NULL,
	[NewItemId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TXN_CashHandover]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_CashHandover](
	[HandoverTxnId] [int] IDENTITY(1,1) NOT NULL,
	[HandoverByEmpId] [int] NULL,
	[HandoverToEmpId] [int] NULL,
	[HandoverType] [varchar](50) NULL,
	[CounterId] [int] NULL,
	[BankName] [varchar](200) NULL,
	[VoucherNumber] [varchar](100) NULL,
	[VoucherDate] [datetime] NULL,
	[HandoverAmount] [float] NULL,
	[DueAmount] [float] NULL,
	[HandoverRemarks] [varchar](200) NULL,
	[ReceivedById] [int] NULL,
	[ReceivedOn] [datetime] NULL,
	[ReceiveRemarks] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime2](7) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_BIL_TXN_CashHandover] PRIMARY KEY CLUSTERED 
(
	[HandoverTxnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TXN_Denomination]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_Denomination](
	[DenominationId] [int] IDENTITY(1,1) NOT NULL,
	[HandoverId] [int] NULL,
	[CurrencyType] [int] NULL,
	[Quantity] [float] NULL,
	[Amount] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[DenominationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BIL_TXN_InvoiceReturnItems]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIL_TXN_InvoiceReturnItems](
	[BillReturnItemId] [int] IDENTITY(1,1) NOT NULL,
	[BillReturnId] [int] NOT NULL,
	[BillingTransactionItemId] [int] NOT NULL,
	[BillingTransactionId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[ServiceDepartmentId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[ItemName] [varchar](400) NULL,
	[Price] [float] NULL,
	[RetQuantity] [float] NULL,
	[RetSubTotal] [float] NULL,
	[RetDiscountAmount] [float] NULL,
	[RetTaxAmount] [float] NULL,
	[RetTotalAmount] [float] NULL,
	[RetDiscountPercent] [float] NULL,
	[ProviderId] [int] NULL,
	[BillStatus] [varchar](20) NULL,
	[RequisitionId] [bigint] NULL,
	[RequisitionDate] [datetime] NULL,
	[RetCounterId] [int] NULL,
	[RetRemarks] [varchar](200) NULL,
	[RequestedBy] [int] NULL,
	[PatientVisitId] [int] NULL,
	[BillingPackageId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[BillingType] [varchar](20) NULL,
	[RequestingDeptId] [int] NULL,
	[VisitType] [varchar](50) NULL,
	[PriceCategory] [varchar](50) NULL,
	[PatientInsurancePackageId] [int] NULL,
	[IsInsurance] [bit] NULL,
	[DiscountSchemeId] [int] NULL,
	[IsCashBillSyncToAcc] [bit] NULL,
	[IsCreditBillSyncToAcc] [bit] NULL,
	[LabTypeName] [varchar](20) NULL,
 CONSTRAINT [PK_BIL_TXN_InvoiceReturnItems] PRIMARY KEY CLUSTERED 
(
	[BillReturnItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CFG_PrinterSettings]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CFG_PrinterSettings](
	[PrinterSettingId] [int] IDENTITY(1,1) NOT NULL,
	[PrintingType] [varchar](20) NULL,
	[GroupName] [varchar](50) NULL,
	[PrinterDisplayName] [varchar](100) NULL,
	[PrinterName] [varchar](50) NULL,
	[ModelName] [varchar](50) NULL,
	[Width_Lines] [int] NULL,
	[Height_Lines] [int] NULL,
	[HeaderGap_Lines] [int] NULL,
	[FooterGap_Lines] [int] NULL,
	[mh] [int] NULL,
	[ml] [int] NULL,
	[ServerFolderPath] [varchar](200) NULL,
	[Remarks] [varchar](200) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[PrinterSettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CFG_PrintExportSettings]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CFG_PrintExportSettings](
	[PrintExportSettingsId] [int] IDENTITY(1,1) NOT NULL,
	[SettingName] [varchar](100) NOT NULL,
	[PageHeaderText] [varchar](200) NOT NULL,
	[ReportDescription] [varchar](400) NULL,
	[ModuleName] [varchar](50) NULL,
	[ShowHeader] [bit] NULL,
	[ShowFooter] [bit] NULL,
	[ShowUserName] [bit] NULL,
	[ShowPrintExportDateTime] [bit] NULL,
	[ShowNpDate] [bit] NULL,
	[ShowEnDate] [bit] NULL,
	[ShowFilterDateRange] [bit] NULL,
	[ShowOtherFilterVariables] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[PrintExportSettingsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_ActiveMedicals]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_ActiveMedicals](
	[PatientProblemId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[ICD10Code] [varchar](10) NULL,
	[ICD10Description] [varchar](200) NULL,
	[CurrentStatus] [varchar](20) NULL,
	[OnSetDate] [datetime] NULL,
	[ResolvedDate] [datetime] NULL,
	[Note] [varchar](200) NULL,
	[IsResolved] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[PrincipleProblem] [bit] NULL,
 CONSTRAINT [PK_PAT_PatientProblems] PRIMARY KEY CLUSTERED 
(
	[PatientProblemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Allergies]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Allergies](
	[PatientAllergyId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[AllergyType] [varchar](50) NULL,
	[Severity] [varchar](20) NULL,
	[Comments] [varchar](200) NULL,
	[AllergenAdvRecId] [int] NULL,
	[Verified] [bit] NULL,
	[Reaction] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[AllergenAdvRecName] [varchar](200) NULL,
 CONSTRAINT [PK_PAT_PatientAllergies] PRIMARY KEY CLUSTERED 
(
	[PatientAllergyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Diagnosis]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Diagnosis](
	[DiagnosisId] [int] IDENTITY(1,1) NOT NULL,
	[NotesId] [int] NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[ICD10Code] [varchar](500) NULL,
	[ICD10Description] [varchar](500) NULL,
	[ICD10ID] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[DiagnosisId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Ablation_Profile]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Ablation_Profile](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Profile] [varchar](200) NULL,
	[DZPFactor] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
	[Notes] [varchar](200) NULL,
	[isSXDone] [bit] NOT NULL,
	[isPTKPerformed] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Laser_DataEntry]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Laser_DataEntry](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Profile] [varchar](200) NULL,
	[Sph] [float] NULL,
	[Cyf] [float] NULL,
	[Axis] [int] NULL,
	[Zone] [varchar](50) NULL,
	[Transmission] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_LasikRST]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_LasikRST](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[PachymetryMicrons] [varchar](50) NULL,
	[PachymetryNotes] [varchar](50) NULL,
	[FlapDepthMicrons] [varchar](50) NULL,
	[FlapDepthNotes] [varchar](50) NULL,
	[AblationDepthMicrons] [varchar](50) NULL,
	[AblationDepthNotes] [varchar](50) NULL,
	[PredictedRSTMicrons] [varchar](50) NULL,
	[PredictedRSTNotes] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_OperationNotes]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_OperationNotes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Notes] [varchar](1500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_ORA]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_ORA](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Date] [datetime] NULL,
	[Timepoint] [varchar](50) NULL,
	[IOPcc] [varchar](50) NULL,
	[CRF] [varchar](50) NULL,
	[CH] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Pachymetry]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Pachymetry](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Date] [datetime] NULL,
	[TimepointPre] [varchar](50) NULL,
	[USMin] [varchar](50) NULL,
	[VisanteRST] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_PreOP_Pachymetry]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_PreOP_Pachymetry](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Profile] [varchar](200) NULL,
	[PentMin] [int] NULL,
	[PentCentral] [int] NULL,
	[USMin] [int] NULL,
	[VisanteMin] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Refraction]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Refraction](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Date] [datetime] NULL,
	[TimePoint] [varchar](200) NULL,
	[UCVA] [int] NULL,
	[ULett] [varchar](50) NULL,
	[NUC] [varchar](50) NULL,
	[Sph] [float] NULL,
	[Cyf] [float] NULL,
	[Axis] [int] NULL,
	[BSCVA] [int] NULL,
	[BLett] [varchar](50) NULL,
	[DCNV] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Smile_Incisions]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Smile_Incisions](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Position] [int] NULL,
	[Width] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Smile_Setting]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Smile_Setting](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[SpotDistanceLent] [varchar](50) NULL,
	[SpotDistanceLentSide] [varchar](50) NULL,
	[SpotDistanceCap] [varchar](50) NULL,
	[SpotDistanceCapSide] [varchar](50) NULL,
	[TrackDistanceLent] [varchar](50) NULL,
	[TrackDistanceLentSide] [varchar](50) NULL,
	[TrackDistanceCap] [varchar](50) NULL,
	[TrackDistanceCapSide] [varchar](50) NULL,
	[EnergyOffsetLent] [varchar](50) NULL,
	[EnergyOffsetLentSide] [varchar](50) NULL,
	[EnergyOffsetCap] [varchar](50) NULL,
	[EnergyOffsetCapSide] [varchar](50) NULL,
	[ScanDirectionLent] [varchar](50) NULL,
	[ScanDirectionLentSide] [varchar](50) NULL,
	[ScanDirectionCap] [varchar](50) NULL,
	[ScanDirectionCapSide] [varchar](50) NULL,
	[ScanModeLent] [varchar](50) NULL,
	[ScanModeLentSide] [varchar](50) NULL,
	[ScanModeCap] [varchar](50) NULL,
	[ScanModeCapSide] [varchar](50) NULL,
	[MinThicknessLent] [varchar](50) NULL,
	[MinThicknessLentSide] [varchar](50) NULL,
	[MinThicknessCap] [varchar](50) NULL,
	[MinThicknessCapSide] [varchar](50) NULL,
	[SidecutLent] [varchar](50) NULL,
	[SidecutLentSide] [varchar](50) NULL,
	[SidecutCap] [varchar](50) NULL,
	[SidecutCapSide] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_VisuMax]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_VisuMax](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Thickness] [int] NULL,
	[Diameter] [int] NULL,
	[Hinge] [varchar](50) NULL,
	[Glass] [varchar](50) NULL,
	[Sidecut] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EYE_Wavefront]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EYE_Wavefront](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Date] [datetime] NULL,
	[Timepoint] [varchar](50) NULL,
	[Coma] [varchar](50) NULL,
	[SphAb] [varchar](50) NULL,
	[HoRMS] [varchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsOD] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_EyeScanImages]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_EyeScanImages](
	[PatientFileId] [bigint] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[ROWGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[FileType] [varchar](50) NULL,
	[Description] [varchar](200) NULL,
	[FileName] [varchar](200) NULL,
	[FileNo] [int] NULL,
	[Title] [varchar](200) NULL,
	[FileExtention] [varchar](50) NULL,
	[UploadedOn] [datetime] NULL,
	[UploadedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[ImageFullPath] [varchar](500) NULL,
	[FileBinaryData] [varbinary](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[PatientFileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ROWGUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_FamilyHistory]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_FamilyHistory](
	[FamilyProblemId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[ICD10Code] [varchar](10) NULL,
	[ICD10Description] [varchar](200) NULL,
	[Relationship] [varchar](20) NULL,
	[Note] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[FamilyProblemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_HomeMedications]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_HomeMedications](
	[HomeMedicationId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[LastTaken] [datetime] NULL,
	[Route] [varchar](50) NULL,
	[Dose] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[MedicationId] [int] NULL,
	[OtherMedication] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[Frequency] [int] NULL,
	[MedicationType] [varchar](255) NULL,
 CONSTRAINT [PK_PAT_HomeMedication] PRIMARY KEY CLUSTERED 
(
	[HomeMedicationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_InputOutput]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_InputOutput](
	[InputOutputId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[IntakeType] [varchar](30) NULL,
	[OutputType] [varchar](30) NULL,
	[Unit] [varchar](10) NULL,
	[TotalIntake] [float] NULL,
	[TotalOutput] [float] NULL,
	[Balance] [float] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_CLN_InputOutput_1] PRIMARY KEY CLUSTERED 
(
	[InputOutputId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_KV_PatientClinical_Info]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_KV_PatientClinical_Info](
	[InfoId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[KeyName] [varchar](100) NULL,
	[Value] [varchar](1000) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[InfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_MedicationPrescription]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_MedicationPrescription](
	[MedicationPrescriptionId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[MedicationId] [int] NOT NULL,
	[ProviderId] [int] NOT NULL,
	[Route] [varchar](50) NOT NULL,
	[Frequency] [varchar](50) NOT NULL,
	[Duration] [int] NOT NULL,
	[DurationType] [varchar](10) NULL,
	[Dose] [varchar](100) NULL,
	[Refill] [int] NULL,
	[TypeofMedication] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_CLN_MedicationPrescription] PRIMARY KEY CLUSTERED 
(
	[MedicationPrescriptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_MST_EYE]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_MST_EYE](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VisitId] [int] NULL,
	[ProviderId] [int] NULL,
	[PatientId] [int] NULL,
	[VisitDate] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[VisitId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_MST_Frequency]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_MST_Frequency](
	[FrequencyId] [int] IDENTITY(1,1) NOT NULL,
	[Type] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_CLN_MST_Frequency] PRIMARY KEY CLUSTERED 
(
	[FrequencyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_MST_NoteType]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_MST_NoteType](
	[NoteTypeId] [int] IDENTITY(1,1) NOT NULL,
	[NoteType] [varchar](250) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsForNursing] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[NoteTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_MST_PrescriptionSlip]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_MST_PrescriptionSlip](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VisitId] [int] NULL,
	[PatientId] [int] NULL,
	[VisitDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ProviderId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes]    Script Date: 4/12/2025 9:35:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes](
	[NotesId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[ProviderId] [int] NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[FollowUp] [int] NULL,
	[Remarks] [nvarchar](max) NULL,
	[IsPending] [bit] NULL,
	[TemplateId] [int] NULL,
	[TemplateName] [varchar](250) NULL,
	[SecondaryDoctorId] [int] NULL,
	[NoteTypeId] [int] NULL,
	[FollowUpUnit] [varchar](50) NULL,
	[ICDSelected] [nvarchar](max) NULL,
 CONSTRAINT [PK_CLN_Notes] PRIMARY KEY CLUSTERED 
(
	[NotesId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_Emergency]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_Emergency](
	[EmergencyNoteId] [int] IDENTITY(1,1) NOT NULL,
	[NotesId] [int] NOT NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[BroughtIn] [varchar](50) NULL,
	[BroughtBy] [varchar](250) NULL,
	[Relationship] [varchar](250) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[ModeOfArrival] [varchar](250) NULL,
	[ReferralDoctorOrHospital] [varchar](250) NULL,
	[TriageTime] [time](7) NULL,
	[TriagedBy] [varchar](50) NULL,
	[Trauma] [bit] NULL,
	[Disposition] [varchar](250) NULL,
	[DispositionDepartmentId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[ErCourseDescription] [varchar](800) NULL,
	[ICDSelected] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[EmergencyNoteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_FreeText]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_FreeText](
	[FreeTextId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[FreeText] [nvarchar](max) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[NotesId] [int] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_Objective]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_Objective](
	[ObjectiveNotesId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[HEENT] [varchar](2000) NULL,
	[Chest] [varchar](500) NULL,
	[CVS] [varchar](500) NULL,
	[Abdomen] [varchar](500) NULL,
	[Extremity] [varchar](500) NULL,
	[Skin] [varchar](500) NULL,
	[Neurological] [varchar](500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[NotesId] [int] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ObjectiveNotesId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_PrescriptionNote]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_PrescriptionNote](
	[PrescriptionNoteId] [int] IDENTITY(1,1) NOT NULL,
	[NotesId] [int] NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[PrescriptionNoteText] [nvarchar](max) NULL,
	[OldMedicationStopped] [nvarchar](max) NULL,
	[NewMedicationStarted] [nvarchar](max) NULL,
	[ICDRemarks] [nvarchar](max) NULL,
	[ICDSelected] [nvarchar](max) NULL,
	[OrdersSelected] [nvarchar](max) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_CLN_Note_PrescriptionNote] PRIMARY KEY CLUSTERED 
(
	[PrescriptionNoteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_Procedure]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_Procedure](
	[ProcedureNoteId] [int] IDENTITY(1,1) NOT NULL,
	[NotesId] [int] NULL,
	[PatientId ] [int] NULL,
	[PatientVisitId] [int] NULL,
	[FreeText] [varchar](max) NULL,
	[LinesProse] [varchar](max) NULL,
	[Remarks] [varchar](max) NULL,
	[Site] [varchar](max) NULL,
	[IsActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[Date] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_Progress]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_Progress](
	[ProgressNoteId] [int] IDENTITY(1,1) NOT NULL,
	[NotesId] [int] NULL,
	[PatientId ] [int] NULL,
	[PatientVisitId] [int] NULL,
	[SubjectiveNotes] [varchar](max) NULL,
	[ObjectiveNotes] [varchar](max) NULL,
	[AssessmentPlan] [varchar](max) NULL,
	[Instructions] [varchar](max) NULL,
	[IsActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[Date] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Notes_Subjective]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Notes_Subjective](
	[SubjectiveNoteId] [int] IDENTITY(1,1) NOT NULL,
	[NotesId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[ChiefComplaint] [varchar](2000) NULL,
	[HistoryOfPresentingIllness] [varchar](2000) NULL,
	[ReviewOfSystems] [varchar](2000) NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_CLN_Notes_Subjective] PRIMARY KEY CLUSTERED 
(
	[SubjectiveNoteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PastMedicals]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PastMedicals](
	[PatientProblemId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[ICD10Code] [varchar](10) NULL,
	[ICD10Description] [varchar](200) NULL,
	[CurrentStatus] [varchar](20) NULL,
	[OnSetDate] [datetime] NULL,
	[ResolvedDate] [datetime] NULL,
	[Note] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[PrincipleProblem] [bit] NULL,
 CONSTRAINT [PK_PAT_PastMedical] PRIMARY KEY CLUSTERED 
(
	[PatientProblemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PAT_Images]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PAT_Images](
	[PatImageId] [bigint] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[DepartmentId] [int] NULL,
	[ROWGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[FileType] [varchar](50) NULL,
	[Comment] [varchar](200) NULL,
	[FileName] [varchar](200) NULL,
	[Title] [varchar](200) NULL,
	[FileExtention] [varchar](50) NULL,
	[UploadedOn] [datetime] NULL,
	[UploadedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[FileBinaryData] [varbinary](max) NULL,
 CONSTRAINT [PK_CLN_PAT_Images] PRIMARY KEY CLUSTERED 
(
	[PatImageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ROWGUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PatientNotes]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PatientNotes](
	[PatientNoteId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[NoteType] [varchar](20) NULL,
	[ObjectiveNote] [varchar](1000) NULL,
	[SubjectiveNote] [varchar](1000) NULL,
	[AssessmentNote] [varchar](1000) NULL,
	[PlanNote] [varchar](1000) NULL,
	[RecordedOnDate] [datetime] NULL,
	[Addendum] [varchar](1000) NULL,
	[Orders] [varchar](1000) NULL,
 CONSTRAINT [PK__CLN_Pati__1908825687B809ED] PRIMARY KEY CLUSTERED 
(
	[PatientNoteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PatientVitals]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PatientVitals](
	[PatientVitalId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[Height] [float] NULL,
	[HeightUnit] [varchar](10) NULL,
	[Weight] [float] NULL,
	[WeightUnit] [varchar](10) NULL,
	[BMI] [float] NULL,
	[Temperature] [float] NULL,
	[TemperatureUnit] [varchar](10) NULL,
	[Pulse] [int] NULL,
	[BPSystolic] [int] NULL,
	[BPDiastolic] [int] NULL,
	[RespiratoryRatePerMin] [varchar](10) NULL,
	[SpO2] [float] NULL,
	[OxygenDeliveryMethod] [varchar](30) NULL,
	[PainScale] [int] NULL,
	[BodyPart] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[Advice] [varchar](max) NULL,
	[FreeNotes] [varchar](max) NULL,
	[DiagnosisType] [varchar](50) NULL,
	[Diagnosis] [varchar](max) NULL,
	[VitalsTakenOn] [datetime] NULL,
	[Nadi] [int] NULL,
	[Mala] [varchar](20) NULL,
	[Mutra] [varchar](20) NULL,
	[Jivha] [varchar](20) NULL,
	[Shabda] [varchar](20) NULL,
	[Sparsha] [varchar](20) NULL,
	[Drik] [varchar](20) NULL,
	[Akriti] [varchar](20) NULL,
	[LungField] [varchar](20) NULL,
	[HeartSounds] [nvarchar](20) NULL,
	[PA_Tenderness] [varchar](20) NULL,
	[Organomegaly] [varchar](20) NULL,
	[CNS_Consiousness] [varchar](20) NULL,
	[Power] [varchar](20) NULL,
	[Reflexes] [varchar](20) NULL,
	[Tone] [varchar](20) NULL,
	[Others] [varchar](50) NULL,
 CONSTRAINT [PK_CLN_PatientVitals_1] PRIMARY KEY CLUSTERED 
(
	[PatientVitalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_Acceptance]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_Acceptance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[SphOD] [varchar](10) NULL,
	[SphOS] [varchar](10) NULL,
	[CylOD] [varchar](10) NULL,
	[CylOS] [varchar](10) NULL,
	[VaOS] [varchar](10) NULL,
	[VaOD] [varchar](10) NULL,
	[AxisOD] [varchar](10) NULL,
	[AxisOS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_AdviceDiagnosis]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_AdviceDiagnosis](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[AdviceDiagnosis] [varchar](1000) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_Dilate]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_Dilate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[Atropine] [bit] NULL,
	[CP] [bit] NULL,
	[CTC] [bit] NULL,
	[Tplus] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_FinalClass]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_FinalClass](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[SphOS] [varchar](10) NULL,
	[SphOD] [varchar](10) NULL,
	[CylOD] [varchar](10) NULL,
	[CylOS] [varchar](10) NULL,
	[AxisOD] [varchar](10) NULL,
	[AxisOS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[VaOD] [varchar](10) NULL,
	[VaOS] [varchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_History]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_History](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[History] [varchar](1000) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK__CLN_Pres__CA1EE04C6990A2C9] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_IOP]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_IOP](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[OD] [varchar](10) NULL,
	[OS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK__CLN_Pres__CA1EE04CE03B7A64] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_Plup]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_Plup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[SphOD] [varchar](10) NULL,
	[SphOS] [varchar](10) NULL,
	[CylOD] [varchar](10) NULL,
	[CylOS] [varchar](10) NULL,
	[AxisOD] [varchar](10) NULL,
	[AxisOS] [varchar](10) NULL,
	[VaOD] [varchar](10) NULL,
	[VaOS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK__CLN_Pres__CA1EE04CE8120FF0] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_Retinoscopy]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_Retinoscopy](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[SphOS] [varchar](10) NULL,
	[SphOD] [varchar](10) NULL,
	[CylOD] [varchar](10) NULL,
	[CylOS] [varchar](10) NULL,
	[VaOS] [varchar](10) NULL,
	[VaOD] [varchar](10) NULL,
	[AxisOD] [varchar](10) NULL,
	[AxisOS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_Schrime]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_Schrime](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[OD] [varchar](10) NULL,
	[OS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK__CLN_Pres__CA1EE04CA79EB37E] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_TBUT]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_TBUT](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[OD] [varchar](10) NULL,
	[OS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK__CLN_Pres__CA1EE04C91FCE0A2] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_PrescriptionSlip_VaUnaided]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_PrescriptionSlip_VaUnaided](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [int] NULL,
	[OD] [varchar](10) NULL,
	[OS] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK__CLN_Pres__CA1EE04C998B6ADA] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_ReferralSource]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_ReferralSource](
	[ReferralSourceId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[Newspaper] [bit] NULL,
	[Unknown] [bit] NULL,
	[Doctor] [bit] NULL,
	[Radio] [bit] NULL,
	[WebPage] [bit] NULL,
	[FriendAndFamily] [bit] NULL,
	[Magazine] [bit] NULL,
	[Staff] [bit] NULL,
	[Others] [varchar](500) NULL,
	[TV] [bit] NULL,
	[Note] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ReferralSourceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_SocialHistory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_SocialHistory](
	[SocialHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[SmokingHistory] [varchar](30) NULL,
	[AlcoholHistory] [varchar](30) NULL,
	[DrugHistory] [varchar](30) NULL,
	[Occupation] [varchar](50) NULL,
	[FamilySupport] [varchar](50) NULL,
	[Note] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PAT_SocialHistory] PRIMARY KEY CLUSTERED 
(
	[SocialHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_SurgicalHistory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_SurgicalHistory](
	[SurgicalHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[SurgeryType] [varchar](30) NULL,
	[ICD10Code] [varchar](10) NULL,
	[ICD10Description] [varchar](200) NULL,
	[SurgeryDate] [datetime] NULL,
	[Note] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PAT_SurgicalHistory] PRIMARY KEY CLUSTERED 
(
	[SurgicalHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CLN_Template]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLN_Template](
	[TemplateId] [int] IDENTITY(1,1) NOT NULL,
	[TemplateName] [varchar](500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsForNursing] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[TemplateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_CFG_LookUps]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_CFG_LookUps](
	[LookUpId] [int] IDENTITY(1,1) NOT NULL,
	[ModuleName] [varchar](30) NOT NULL,
	[LookUpName] [varchar](100) NOT NULL,
	[LookupDataJson] [varchar](8000) NULL,
	[Description] [varchar](200) NULL,
 CONSTRAINT [PK_CORE_CFG_LookUps] PRIMARY KEY CLUSTERED 
(
	[LookUpId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_CORE_CFG_LookUps_ModuleName_LookupName] UNIQUE NONCLUSTERED 
(
	[ModuleName] ASC,
	[LookUpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_CFG_Parameters]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_CFG_Parameters](
	[ParameterId] [int] IDENTITY(1,1) NOT NULL,
	[ParameterGroupName] [varchar](100) NULL,
	[ParameterName] [varchar](200) NULL,
	[ParameterValue] [nvarchar](4000) NULL,
	[ValueDataType] [varchar](50) NULL,
	[Description] [varchar](1000) NULL,
	[ParameterType] [varchar](30) NULL,
	[ValueLookUpList] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[ParameterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Core_CFG_Parameters] UNIQUE NONCLUSTERED 
(
	[ParameterGroupName] ASC,
	[ParameterName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_DistributedCache]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_DistributedCache](
	[Id] [nvarchar](449) NOT NULL,
	[Value] [varbinary](max) NOT NULL,
	[ExpiresAtTime] [datetimeoffset](7) NOT NULL,
	[SlidingExpirationInSeconds] [bigint] NULL,
	[AbsoluteExpiration] [datetimeoffset](7) NULL,
 CONSTRAINT [pk_Id] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_DYNTMP_Option]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_DYNTMP_Option](
	[OptionId] [int] IDENTITY(1,1) NOT NULL,
	[Text] [varchar](500) NULL,
	[QuestionId] [int] NULL,
	[IsDefault] [bit] NULL,
	[ShowChildOnSelect] [bit] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_CORE_DYNTMP_QtnOptionMap] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_DYNTMP_Question]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_DYNTMP_Question](
	[QuestionId] [int] IDENTITY(1,1) NOT NULL,
	[TemplateId] [int] NULL,
	[QnairId] [int] NULL,
	[Text] [varchar](500) NULL,
	[Type] [varchar](20) NULL,
	[ParentQtnId] [int] NULL,
	[ShowChilds] [bit] NULL,
	[DisplaySeq] [int] NULL,
 CONSTRAINT [PK_CORE_DYNTMP_Question_1] PRIMARY KEY CLUSTERED 
(
	[QuestionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_CORE_DYNTMP_Question] UNIQUE NONCLUSTERED 
(
	[Text] ASC,
	[ParentQtnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_DYNTMP_Questionnaire]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_DYNTMP_Questionnaire](
	[QnairId] [int] IDENTITY(1,1) NOT NULL,
	[Text] [varchar](200) NULL,
	[TemplateId] [int] NULL,
	[DisplaySeq] [int] NULL,
 CONSTRAINT [PK_CORE_DYNTMP_Questionnaire] PRIMARY KEY CLUSTERED 
(
	[QnairId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_CORE_DYNTMP_Questionnaire] UNIQUE NONCLUSTERED 
(
	[Text] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_DYNTMP_Template]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_DYNTMP_Template](
	[TemplateId] [int] NOT NULL,
	[Code] [varchar](50) NULL,
	[Text] [varchar](100) NULL,
	[ModuleName] [varchar](50) NULL,
 CONSTRAINT [PK_CORE_DYNTMP_Template] PRIMARY KEY CLUSTERED 
(
	[TemplateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_CORE_DYNTMP_Template] UNIQUE NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_LookupDetail]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_LookupDetail](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](50) NULL,
	[Description] [varchar](100) NULL,
	[DisplayName] [varchar](50) NULL,
	[DisplaySequence] [int] NULL,
	[ParentId] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_CoreLookupDetailId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CORE_Notification]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CORE_Notification](
	[NotificationId] [int] IDENTITY(1,1) NOT NULL,
	[Notification_ModuleName] [varchar](50) NOT NULL,
	[Notification_Title] [varchar](100) NOT NULL,
	[Notification_Details] [varchar](500) NULL,
	[RecipientId] [int] NULL,
	[ParentTableName] [varchar](50) NULL,
	[NotificationParentId] [int] NULL,
	[IsRead] [bit] NULL,
	[ReadBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsArchived] [bit] NULL,
	[RecipientType] [varchar](20) NULL,
	[Sub_ModuleName] [varchar](100) NULL,
 CONSTRAINT [PK_Notification] PRIMARY KEY CLUSTERED 
(
	[NotificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CSSD_TXN_ItemTransaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CSSD_TXN_ItemTransaction](
	[CssdTxnId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[StoreId] [int] NOT NULL,
	[RequestedBy] [int] NOT NULL,
	[RequestedOn] [datetime2](3) NOT NULL,
	[RequestRemarks] [varchar](200) NULL,
	[DisinfectantName] [varchar](200) NULL,
	[DisinfectedBy] [int] NULL,
	[DisinfectedOn] [datetime2](3) NULL,
	[DisinfectionRemarks] [varchar](200) NULL,
	[DispatchedBy] [int] NULL,
	[DispatchedOn] [datetime2](3) NULL,
	[DispatchRemarks] [varchar](200) NULL,
	[CssdStatus] [varchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NOT NULL,
 CONSTRAINT [PK_CSSD_TXN_ItemTransaction] PRIMARY KEY CLUSTERED 
(
	[CssdTxnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DanpheAudit]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DanpheAudit](
	[AuditId] [bigint] IDENTITY(1,1) NOT NULL,
	[InsertedDate] [datetime] NOT NULL,
	[LastUpdatedDate] [datetime] NULL,
	[Data] [nvarchar](max) NOT NULL,
 CONSTRAINT [PK_DanpheAudit] PRIMARY KEY CLUSTERED 
(
	[AuditId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DanpheLogInInformation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DanpheLogInInformation](
	[InformationId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[UserName] [varchar](100) NULL,
	[ActionName] [varchar](100) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_LogInInformationId] PRIMARY KEY CLUSTERED 
(
	[InformationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DOC_TXN_VisitSummary]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DOC_TXN_VisitSummary](
	[VisitSummaryId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[VisitId] [int] NULL,
	[QnairId] [int] NULL,
	[QuestionId] [int] NULL,
	[Answer] [varchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_DOC_TXN_VisitSummary] PRIMARY KEY CLUSTERED 
(
	[VisitSummaryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMP_EmployeePreferences]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMP_EmployeePreferences](
	[PreferenceId] [int] IDENTITY(1,1) NOT NULL,
	[PreferenceName] [nvarchar](50) NULL,
	[PreferenceValue] [xml] NULL,
	[EmployeeId] [int] NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMP_EmployeeRole]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMP_EmployeeRole](
	[EmployeeRoleId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeRoleName] [varchar](30) NOT NULL,
	[Description] [varchar](30) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_EMP_EmployeeRole] PRIMARY KEY CLUSTERED 
(
	[EmployeeRoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMP_EmployeeType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMP_EmployeeType](
	[EmployeeTypeId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeTypeName] [varchar](30) NOT NULL,
	[Description] [varchar](30) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_EMP_EmployeeType] PRIMARY KEY CLUSTERED 
(
	[EmployeeTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EmployeeInfoModels]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EmployeeInfoModels](
	[EmployeeId] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[Salutation] [nvarchar](max) NULL,
	[Designation] [nvarchar](max) NULL,
	[DepartmentName] [nvarchar](max) NULL,
	[ContactNumber] [nvarchar](max) NULL,
	[EmailId] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.EmployeeInfoModels] PRIMARY KEY CLUSTERED 
(
	[EmployeeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EngNepaliDateMapped]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EngNepaliDateMapped](
	[DateMapNum] [int] IDENTITY(1,1) NOT NULL,
	[EngYear] [int] NULL,
	[NepYear] [int] NULL,
	[EngMonth] [int] NULL,
	[NepMonth] [int] NULL,
	[EngDay] [int] NULL,
	[NepDay] [int] NULL,
 CONSTRAINT [DateMapNumber] PRIMARY KEY CLUSTERED 
(
	[DateMapNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ER_DischargeSummary]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ER_DischargeSummary](
	[ERDischargeSummaryId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[DischargeType] [varchar](30) NULL,
	[ChiefComplaints] [varchar](max) NULL,
	[TreatmentInER] [varchar](max) NULL,
	[Investigations] [varchar](800) NULL,
	[AdviceOnDischarge] [varchar](max) NULL,
	[OnExamination] [varchar](max) NULL,
	[ProvisionalDiagnosis] [varchar](800) NULL,
	[DoctorName] [varchar](100) NULL,
	[MedicalOfficer] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_ER_DischargeSummary] PRIMARY KEY CLUSTERED 
(
	[ERDischargeSummaryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ER_FileUploads]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ER_FileUploads](
	[FileId] [int] IDENTITY(1,1) NOT NULL,
	[ERPatientId] [int] NULL,
	[PatientId] [int] NULL,
	[FileName] [varchar](100) NULL,
	[DisplayName] [varchar](100) NULL,
	[FileType] [varchar](20) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ER_FileId] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ER_ModeOfArrival]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ER_ModeOfArrival](
	[ModeOfArrivalId] [int] IDENTITY(1,1) NOT NULL,
	[ModeOfArrivalName] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_ModeOfArrival] PRIMARY KEY CLUSTERED 
(
	[ModeOfArrivalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ER_Patient]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ER_Patient](
	[ERPatientId] [int] IDENTITY(1,1) NOT NULL,
	[ERPatientNumber] [int] NOT NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[ERDischargeSummaryId] [int] NULL,
	[VisitDateTime] [datetime] NOT NULL,
	[FirstName] [varchar](40) NOT NULL,
	[MiddleName] [varchar](40) NULL,
	[LastName] [varchar](40) NOT NULL,
	[Gender] [varchar](10) NOT NULL,
	[Age] [varchar](10) NULL,
	[DateOfBirth] [datetime] NULL,
	[ContactNo] [varchar](20) NULL,
	[ProviderId] [int] NULL,
	[ProviderName] [varchar](200) NULL,
	[Address] [varchar](100) NULL,
	[Case] [varchar](100) NULL,
	[ConditionOnArrival] [varchar](100) NULL,
	[ModeOfArrival] [int] NULL,
	[CareOfPerson] [varchar](100) NULL,
	[ReferredBy] [varchar](100) NULL,
	[ReferredTo] [varchar](100) NULL,
	[ERStatus] [varchar](20) NULL,
	[TriageCode] [varchar](50) NULL,
	[TriagedBy] [int] NULL,
	[TriagedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsExistingPatient] [bit] NULL,
	[FinalizedStatus] [varchar](20) NULL,
	[FinalizedRemarks] [varchar](4000) NULL,
	[FinalizedBy] [int] NULL,
	[FinalizedOn] [datetime] NULL,
	[IsPoliceCase] [bit] NULL,
	[OldPatientId] [varchar](50) NULL,
	[CareOfPersonContactNumber] [varchar](20) NULL,
 CONSTRAINT [PK_ER_Patients] PRIMARY KEY CLUSTERED 
(
	[ERPatientId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ER_Patient_Cases]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ER_Patient_Cases](
	[PatientCaseId] [int] IDENTITY(1,1) NOT NULL,
	[ERPatientId] [int] NULL,
	[MainCase] [int] NULL,
	[SubCase] [int] NULL,
	[OtherCaseDetails] [varchar](200) NULL,
	[BitingSite] [int] NULL,
	[DateTimeOfBite] [datetime] NULL,
	[BitingAnimal] [int] NULL,
	[BitingAnimalName] [varchar](200) NULL,
	[FirstAid] [int] NULL,
	[FirstAidOthers] [varchar](100) NULL,
	[BitingAnimalOthers] [varchar](100) NULL,
	[BitingSiteOthers] [varchar](100) NULL,
	[BitingCountry] [int] NOT NULL,
	[BitingMunicipality] [int] NOT NULL,
	[BitingAddress] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_ERPatient_Case] PRIMARY KEY CLUSTERED 
(
	[PatientCaseId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FRC_Designation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FRC_Designation](
	[DesignationId] [int] IDENTITY(1,1) NOT NULL,
	[DesignationName] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[Description] [text] NULL,
PRIMARY KEY CLUSTERED 
(
	[DesignationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FRC_FractionCalculation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FRC_FractionCalculation](
	[FractionCalculationId] [int] IDENTITY(1,1) NOT NULL,
	[PercentSettingId] [int] NOT NULL,
	[BillTxnItemId] [int] NOT NULL,
	[DoctorId] [int] NOT NULL,
	[IsParentId] [int] NULL,
	[DesignationId] [int] NOT NULL,
	[InitialPercent] [decimal](18, 0) NULL,
	[FinalPercent] [decimal](18, 0) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[FinalAmount] [decimal](10, 2) NULL,
	[Hierarchy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[FractionCalculationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FRC_PercentSetting]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FRC_PercentSetting](
	[PercentSettingId] [int] IDENTITY(1,1) NOT NULL,
	[BillItemPriceId] [int] NOT NULL,
	[HospitalPercent] [decimal](18, 0) NULL,
	[DoctorPercent] [decimal](18, 0) NULL,
	[Description] [text] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[PercentSettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GovtInsuranceItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GovtInsuranceItems](
	[Sno] [int] NULL,
	[DepartmentId] [int] NULL,
	[DepartmentName] [nvarchar](255) NULL,
	[ServiceDepartmentId] [int] NULL,
	[ServiceDepartmentName] [nvarchar](255) NULL,
	[ItemId] [int] NULL,
	[ItemName] [nvarchar](255) NULL,
	[ImagingTypeId] [int] NULL,
	[Description] [nvarchar](255) NULL,
	[Price] [float] NULL,
	[IsPackage] [bit] NULL,
	[IntegrationName] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ICD_DiseaseGroup]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ICD_DiseaseGroup](
	[DiseaseGroupId] [int] IDENTITY(1,1) NOT NULL,
	[SerialNumber] [int] NOT NULL,
	[ICDCode] [varchar](100) NOT NULL,
	[DiseaseGroupName] [varchar](400) NOT NULL,
	[ReportingGroupId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DiseaseGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ICD_ReportingGroup]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ICD_ReportingGroup](
	[ReportingGroupId] [int] IDENTITY(1,1) NOT NULL,
	[SerialNumber] [int] NOT NULL,
	[ReportingGroupName] [varchar](400) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[GroupCode] [varchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[ReportingGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INCTV_BillItems_Profile_Map]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_BillItems_Profile_Map](
	[BillItemProfileMapId] [int] IDENTITY(1,1) NOT NULL,
	[BillItemPriceId] [int] NULL,
	[ProfileId] [int] NULL,
	[AssignedToPercent] [float] NULL,
	[ReferredByPercent] [float] NULL,
	[PriceCategoryId] [int] NULL,
	[BillingTypesApplicable] [varchar](20) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_INCTV_BillItems_Profile_Map] PRIMARY KEY CLUSTERED 
(
	[BillItemProfileMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INCTV_MST_Profile]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_MST_Profile](
	[ProfileId] [int] IDENTITY(1,1) NOT NULL,
	[ProfileName] [varchar](150) NULL,
	[PriceCategoryId] [int] NULL,
	[IsActive] [bit] NULL,
	[TDSPercentage] [float] NULL,
	[Description] [varchar](1000) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_INCTV_MST_Profile] PRIMARY KEY CLUSTERED 
(
	[ProfileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INCTV_TXN_IncentiveFractionItem]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_TXN_IncentiveFractionItem](
	[InctvTxnItemId] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNoFormatted] [varchar](30) NOT NULL,
	[TransactionDate] [datetime] NULL,
	[PriceCategory] [varchar](20) NULL,
	[BillingTransactionId] [int] NULL,
	[BillingTransactionItemId] [int] NULL,
	[PatientId] [int] NULL,
	[BillItemPriceId] [int] NULL,
	[ItemName] [varchar](400) NULL,
	[TotalBillAmount] [float] NULL,
	[IncentiveType] [varchar](20) NULL,
	[IncentiveReceiverId] [int] NULL,
	[IncentiveReceiverName] [varchar](200) NULL,
	[IncentivePercent] [float] NULL,
	[IncentiveAmount] [float] NULL,
	[IsPaymentProcessed] [bit] NULL,
	[PaymentInfoId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsMainDoctor] [bit] NULL,
	[TDSPercentage] [float] NULL,
	[TDSAmount] [float] NULL,
	[IsTransferToAcc] [bit] NULL,
	[IsReturnTxn] [bit] NULL,
	[Quantity] [float] NULL,
 CONSTRAINT [PK_INCTV_TXN_IncentiveFractionItems] PRIMARY KEY CLUSTERED 
(
	[InctvTxnItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_IncentiveFractionItems] UNIQUE NONCLUSTERED 
(
	[BillingTransactionItemId] ASC,
	[IncentiveReceiverId] ASC,
	[IncentiveType] ASC,
	[IsReturnTxn] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INCTV_TXN_PaymentInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INCTV_TXN_PaymentInfo](
	[PaymentInfoId] [int] IDENTITY(1,1) NOT NULL,
	[PaymentDate] [datetime] NULL,
	[ReceiverId] [int] NULL,
	[TotalAmount] [float] NULL,
	[TDSAmount] [float] NULL,
	[NetPayAmount] [float] NULL,
	[IsPostedToAccounting] [bit] NULL,
	[AccountingPostedDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[AdjustedAmount] [float] NULL,
	[VoucherNumber] [nvarchar](50) NULL,
	[Remarks] [nvarchar](200) NULL,
PRIMARY KEY CLUSTERED 
(
	[PaymentInfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INS_CFG_InsuranceProviders]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INS_CFG_InsuranceProviders](
	[InsuranceProviderId] [int] IDENTITY(1,1) NOT NULL,
	[InsuranceProviderName] [varchar](100) NULL,
	[Description] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_INS_CFG_InsuranceProviders] PRIMARY KEY CLUSTERED 
(
	[InsuranceProviderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INS_InsuranceBalanceAmount_History]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INS_InsuranceBalanceAmount_History](
	[HistoryId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[PreviousAmount] [decimal](18, 4) NULL,
	[UpdatedAmount] [decimal](18, 4) NULL,
	[Remark] [varchar](200) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_INS_InsuranceBalanceAmounHistory] PRIMARY KEY CLUSTERED 
(
	[HistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INS_TXN_PatientInsurancePackages]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INS_TXN_PatientInsurancePackages](
	[PatientInsurancePackageId] [int] IDENTITY(1,1) NOT NULL,
	[PackageId] [int] NULL,
	[PatientId] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[IsCompleted] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_INS_TXN_PatientInsurancePackages] PRIMARY KEY CLUSTERED 
(
	[PatientInsurancePackageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_AssetConditionCheckList]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_AssetConditionCheckList](
	[AssetConditionCheckListId] [int] IDENTITY(1,1) NOT NULL,
	[AssetConditionId] [int] NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[Condition] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetConditionCheckListId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_AssetContractFileInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_AssetContractFileInfo](
	[AssetContractId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[ContractFileName] [nvarchar](250) NULL,
	[FileExtention] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetContractId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_AssetFaultHistory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_AssetFaultHistory](
	[FaultHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[FaultResolvedDate] [datetime] NULL,
	[FaultResolvedRemarks] [nvarchar](500) NULL,
	[FaultDescription] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[FaultDate] [datetime] NULL,
	[IsFaultResolved] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[FaultHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_AssetInsurance]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_AssetInsurance](
	[AssetInsurannceId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[PolicyNumber] [nvarchar](250) NULL,
	[Insurer] [nvarchar](250) NULL,
	[InsuredValue] [nvarchar](250) NULL,
	[InsuranceStartDate] [datetime] NULL,
	[InsuranceEndDate] [datetime] NULL,
	[ComprehensiveInsurance] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetInsurannceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_AssetLocationHistory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_AssetLocationHistory](
	[AssetsLocationHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[OldLocation] [nvarchar](250) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[OldAssetHolderId] [int] NULL,
	[OldStoreId] [int] NOT NULL,
	[OldSubStoreId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetsLocationHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_AssetServiceHistory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_AssetServiceHistory](
	[AssetServiceId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[ServiceDate] [datetime] NOT NULL,
	[ServiceRemarks] [nvarchar](4000) NULL,
	[ServiceCompleteDate] [datetime] NULL,
	[ServiceCompleteRemarks] [nvarchar](4000) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetServiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_CFG_FiscalYears]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_CFG_FiscalYears](
	[FiscalYearId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearName] [varchar](20) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[NpFiscalYearName] [varchar](20) NULL,
	[IsClosed] [bit] NULL,
	[ClosedOn] [datetime] NULL,
	[ClosedBy] [int] NULL,
 CONSTRAINT [PK_INV_CFG_FiscalYear] PRIMARY KEY CLUSTERED 
(
	[FiscalYearId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_INV_CFG_FiscalYear] UNIQUE NONCLUSTERED 
(
	[FiscalYearName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_AccountHead]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_AccountHead](
	[AccountHeadId] [int] IDENTITY(1,1) NOT NULL,
	[AccountHeadName] [varchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[Description] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[AccountHeadId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_AssetCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_AssetCategory](
	[AssetCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[SubCategoryId] [int] NOT NULL,
	[ParentId] [int] NOT NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_AssetDepreciationMethod]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_AssetDepreciationMethod](
	[AssetDeprnMethodId] [int] IDENTITY(1,1) NOT NULL,
	[Method] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetDeprnMethodId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_AssetLocation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_AssetLocation](
	[LocationId] [int] IDENTITY(1,1) NOT NULL,
	[LocationName] [nvarchar](500) NULL,
	[LocationDetails] [nvarchar](500) NULL,
	[PhoneNumber] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[LocationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_Company]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Company](
	[CompanyId] [int] IDENTITY(1,1) NOT NULL,
	[CompanyName] [varchar](200) NOT NULL,
	[ContactNo] [nvarchar](20) NULL,
	[Description] [varchar](200) NULL,
	[ContactAddress] [nvarchar](200) NULL,
	[Email] [nvarchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[Code] [nvarchar](50) NULL,
 CONSTRAINT [PK_INV_MST_Company] PRIMARY KEY CLUSTERED 
(
	[CompanyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_Currency]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Currency](
	[CurrencyID] [int] IDENTITY(1,1) NOT NULL,
	[CurrencyCode] [varchar](10) NULL,
	[Description] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK__INV_MST___14470B10764F9E3E] PRIMARY KEY CLUSTERED 
(
	[CurrencyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_Donation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Donation](
	[DonationId] [int] IDENTITY(1,1) NOT NULL,
	[Donation] [nvarchar](500) NULL,
	[DonationPersonName] [nvarchar](500) NULL,
	[DonationDetails] [nvarchar](500) NULL,
	[PhoneNumber] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[DonationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_ItemCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_ItemCategory](
	[ItemCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[ItemCategoryName] [varchar](100) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsActive] [bit] NULL,
	[Description] [varchar](100) NULL,
	[CategoryCode] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ItemCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_ItemSubCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_ItemSubCategory](
	[SubCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](6) NOT NULL,
	[SubCategoryName] [varchar](100) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsConsumable] [bit] NOT NULL,
	[Description] [varchar](100) NULL,
	[LedgerId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SubCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_PackagingType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_PackagingType](
	[PackagingTypeId] [int] IDENTITY(1,1) NOT NULL,
	[PackagingTypeName] [varchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[Description] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[PackagingTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_Stock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[CostPrice] [decimal](18, 4) NOT NULL,
	[MRP] [decimal](18, 4) NOT NULL,
	[Specification] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_INV_MST_Stock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_Terms]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Terms](
	[TermsId] [int] IDENTITY(1,1) NOT NULL,
	[Text] [nvarchar](max) NULL,
	[Type] [varchar](50) NOT NULL,
	[OrderBy] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ShortName] [varchar](50) NOT NULL,
	[TermsApplicationEnumId] [int] NULL,
 CONSTRAINT [PK_INV_MST_Terms] PRIMARY KEY CLUSTERED 
(
	[TermsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_UnitOfMeasurement]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_UnitOfMeasurement](
	[UOMId] [int] IDENTITY(1,1) NOT NULL,
	[UOMName] [nvarchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[Description] [varchar](100) NULL,
 CONSTRAINT [PK_INV_MST_UnitOfMeasurement] PRIMARY KEY CLUSTERED 
(
	[UOMId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_MST_Vendor]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_MST_Vendor](
	[VendorId] [int] IDENTITY(1,1) NOT NULL,
	[VendorName] [nvarchar](400) NULL,
	[ContactAddress] [nvarchar](200) NULL,
	[ContactNo] [nvarchar](20) NULL,
	[Email] [nvarchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[DefaultCurrencyId] [int] NULL,
	[VendorCode] [varchar](50) NULL,
	[ContactPerson] [varchar](50) NULL,
	[Tds] [float] NULL,
	[GovtRegDate] [date] NULL,
	[PanNo] [varchar](50) NULL,
	[CreditPeriod] [float] NULL,
	[IsTDSApplicable] [bit] NULL,
	[DefaultItemJSON] [varchar](max) NULL,
	[CountryId] [int] NULL,
	[CompanyPosition] [varchar](255) NULL,
	[Name] [varchar](255) NULL,
	[PhoneNumber] [varchar](255) NULL,
	[CompanyPosition2] [varchar](255) NULL,
	[Name2] [varchar](255) NULL,
	[PhoneNumber2] [varchar](255) NULL,
	[BankDetails] [nvarchar](max) NULL,
	[SARFNo] [nvarchar](200) NULL,
 CONSTRAINT [PK_Mst_SupplierMaster] PRIMARY KEY CLUSTERED 
(
	[VendorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_Quotation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_Quotation](
	[QuotationId] [int] IDENTITY(1,1) NOT NULL,
	[ReqForQuotationId] [int] NULL,
	[VendorId] [int] NULL,
	[VendorName] [nvarchar](150) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[Status] [nvarchar](150) NULL,
	[StoreId] [int] NULL,
	[RFQGroupId] [int] NULL,
	[IssuedDate] [datetime2](3) NULL,
	[FiscalYearId] [int] NULL,
	[QuotationNo] [int] NULL,
 CONSTRAINT [PK_INV_QuotationItems] PRIMARY KEY CLUSTERED 
(
	[QuotationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_QuotationItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_QuotationItems](
	[QuotationItemId] [int] IDENTITY(1,1) NOT NULL,
	[QuotationId] [int] NULL,
	[VendorId] [int] NULL,
	[ItemId] [int] NULL,
	[ItemName] [nvarchar](150) NULL,
	[Price] [decimal](16, 4) NULL,
	[Description] [nvarchar](max) NULL,
	[UpLoadedOn] [datetime] NULL,
	[UpLoadedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
 CONSTRAINT [PK_INV_RequestForQuotation_1] PRIMARY KEY CLUSTERED 
(
	[QuotationItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_QuotationUploadedFiles]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_QuotationUploadedFiles](
	[QuotationUploadedFileId] [int] IDENTITY(1,1) NOT NULL,
	[RequestForQuotationId] [int] NULL,
	[VendorId] [int] NULL,
	[ROWGUID] [uniqueidentifier] NULL,
	[FileType] [nvarchar](300) NULL,
	[FileBinaryData] [varbinary](max) NULL,
	[FileName] [nvarchar](300) NULL,
	[FileNo] [int] NULL,
	[FileExtention] [nvarchar](50) NULL,
	[UpLoadedOn] [datetime] NULL,
	[UpLoadedBy] [int] NULL,
	[Description] [nvarchar](300) NULL,
 CONSTRAINT [PK_INV_QuotationUploadedFiles] PRIMARY KEY CLUSTERED 
(
	[QuotationUploadedFileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_RequestForQuotation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_RequestForQuotation](
	[ReqForQuotationId] [int] IDENTITY(1,1) NOT NULL,
	[Subject] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[RequestedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ApprovedBy] [int] NULL,
	[RequestedOn] [datetime] NULL,
	[RequestedCloseOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[StoreId] [int] NOT NULL,
	[RFQGroupId] [int] NULL,
	[FiscalYearId] [int] NULL,
	[RequestForQuotationNo] [int] NULL,
 CONSTRAINT [PK_INV_RequestForQuotation] PRIMARY KEY CLUSTERED 
(
	[ReqForQuotationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_RequestForQuotationItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_RequestForQuotationItems](
	[ReqForQuotationItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[ReqForQuotationId] [int] NULL,
	[ItemName] [nvarchar](300) NULL,
	[Quantity] [int] NULL,
	[Price] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_INV_RequestForQuotationItems] PRIMARY KEY CLUSTERED 
(
	[ReqForQuotationItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_RequestForQuotationVendors]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_RequestForQuotationVendors](
	[ReqForQuotationVendorId] [int] IDENTITY(1,1) NOT NULL,
	[VendorId] [int] NOT NULL,
	[ReqForQuotationId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ReqForQuotationVendorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_Temp_ItemPriceWithVAT]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_Temp_ItemPriceWithVAT](
	[SerNo] [int] NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](200) NULL,
	[ItemRate] [float] NULL,
	[VATPercent] [float] NULL,
	[FinalPrice] [float] NULL,
	[Quantity] [float] NULL,
	[VATAmount] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_Temp_Stock_Migration_CMH]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_Temp_Stock_Migration_CMH](
	[SerialNo] [int] NOT NULL,
	[AccountHead] [nvarchar](100) NULL,
	[ItemName] [nvarchar](200) NULL,
	[Category] [nvarchar](200) NULL,
	[PackagingTypeName] [nvarchar](100) NULL,
	[Price] [decimal](13, 3) NULL,
	[StockQuantity] [int] NULL,
	[ItemId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TEMP_TXN_NewStockTxn]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TEMP_TXN_NewStockTxn](
	[StockTxnId] [int] IDENTITY(1,1) NOT NULL,
	[StockId] [int] NULL,
	[ItemId] [int] NULL,
	[GoodsReceiptItemId] [int] NULL,
	[Quantity] [float] NULL,
	[InOut] [varchar](10) NULL,
	[ReferenceNo] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[TransactionType] [varchar](20) NULL,
	[IsTransferredToACC] [bit] NULL,
	[MRP] [decimal](16, 4) NULL,
	[Price] [decimal](16, 4) NULL,
	[FiscalYearId] [int] NULL,
	[TransactionDate] [datetime] NULL,
	[IsActive] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_AssetDepreciation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_AssetDepreciation](
	[AssetDepreciationId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetStockId] [int] NOT NULL,
	[AssetDeprnMethodId] [int] NOT NULL,
	[Rate] [int] NULL,
	[DepreciationAmount] [decimal](18, 0) NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AssetDepreciationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_DispatchItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_DispatchItems](
	[DispatchItemsId] [int] IDENTITY(1,1) NOT NULL,
	[DepartmentId] [int] NULL,
	[RequisitionItemId] [int] NOT NULL,
	[DispatchedQuantity] [float] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ReceivedBy] [varchar](100) NULL,
	[ItemId] [int] NULL,
	[DispatchId] [int] NULL,
	[StoreId] [int] NOT NULL,
	[RequisitionId] [int] NULL,
	[Remarks] [nvarchar](500) NULL,
	[ReceivedById] [int] NULL,
	[ReceivedOn] [datetime] NULL,
	[ReceivedRemarks] [nvarchar](500) NULL,
	[MatIssueDate] [datetime] NULL,
	[MatIssueTo] [nvarchar](200) NULL,
	[SourceStoreId] [int] NULL,
	[TargetStoreId] [int] NULL,
	[ItemRemarks] [nvarchar](500) NULL,
	[BatchNo] [varchar](100) NULL,
	[DispatchedDate] [datetime2](3) NULL,
	[ReqDisGroupId] [int] NULL,
	[FiscalYearId] [int] NULL,
	[DispatchNo] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[DispatchItemsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetDispatch]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetDispatch](
	[DispatchId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [int] NULL,
	[SubTotal] [decimal](16, 4) NOT NULL,
	[Remark] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ReceivedBy] [varchar](55) NULL,
	[StoreId] [int] NULL,
	[SubStoreId] [int] NULL,
	[ReceivedOn] [datetime] NULL,
 CONSTRAINT [PK_INV_TXN_FixedAssetDispatch] PRIMARY KEY CLUSTERED 
(
	[DispatchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetDispatchItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetDispatchItems](
	[DispatchItemId] [int] IDENTITY(1,1) NOT NULL,
	[DispatchId] [int] NULL,
	[RequisitionItemId] [int] NULL,
	[ItemId] [int] NULL,
	[ItemName] [nvarchar](200) NULL,
	[BatchNo] [varchar](300) NULL,
	[ExpiryDate] [datetime] NULL,
	[BarCodeNumber] [nvarchar](255) NULL,
	[MRP] [decimal](16, 4) NOT NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[Remark] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[Price] [decimal](18, 4) NULL,
	[FixedAssetStockId] [int] NULL,
	[RequisitionId] [int] NULL,
 CONSTRAINT [PK_INV_TXN_FixedAssetDispatchItems] PRIMARY KEY CLUSTERED 
(
	[DispatchItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetRequisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetRequisition](
	[RequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionDate] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[RequisitionStatus] [varchar](20) NULL,
	[IssueNo] [int] NULL,
	[StoreId] [int] NOT NULL,
	[SubStoreId] [int] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsCancel] [bit] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[RequisitionNo] [int] NOT NULL,
	[Remarks] [nvarchar](500) NULL,
	[IsDirectDispatch] [bit] NULL,
 CONSTRAINT [PK_INV_TXN_FixedAssetRequisition] PRIMARY KEY CLUSTERED 
(
	[RequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetRequisitionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems](
	[RequisitionItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[Quantity] [int] NULL,
	[RequisitionId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ReceivedQuantity] [float] NULL,
	[PendingQuantity] [float] NULL,
	[RequisitionItemStatus] [varchar](20) NULL,
	[Remark] [nvarchar](500) NULL,
	[IssueNo] [int] NULL,
	[CancelQuantity] [float] NULL,
	[CancelBy] [int] NULL,
	[CancelOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_INV_TXN_FixedAssetRequisitionItems] PRIMARY KEY CLUSTERED 
(
	[RequisitionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetReturn]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetReturn](
	[ReturnId] [int] IDENTITY(1,1) NOT NULL,
	[ReturnDate] [datetime] NOT NULL,
	[SubStoreId] [int] NULL,
	[StoreId] [int] NULL,
	[Remarks] [nvarchar](255) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_INV_TXN_FixedAssetReturn] PRIMARY KEY CLUSTERED 
(
	[ReturnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetReturnItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetReturnItems](
	[ReturnItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[ReturnId] [int] NULL,
	[FixedAssetStockId] [int] NULL,
	[SerialNo] [varchar](255) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[Remark] [nvarchar](500) NULL,
 CONSTRAINT [PK_INV_TXN_FixedAssetReturnItems] PRIMARY KEY CLUSTERED 
(
	[ReturnItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_FixedAssetStock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_FixedAssetStock](
	[FixedAssetStockId] [int] IDENTITY(1,1) NOT NULL,
	[GoodsReceiptItemId] [int] NULL,
	[ItemId] [int] NOT NULL,
	[BarCodeNumber] [nvarchar](250) NULL,
	[AssetsLocation] [nvarchar](250) NULL,
	[BatchNo] [varchar](50) NULL,
	[WarrantyExpiryDate] [datetime] NULL,
	[ItemRate] [decimal](16, 4) NULL,
	[MRP] [decimal](16, 4) NULL,
	[DiscountPercent] [float] NULL,
	[DiscountAmount] [decimal](10, 2) NULL,
	[VAT] [float] NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[CcCharge] [decimal](10, 2) NULL,
	[CcAmount] [decimal](10, 2) NULL,
	[OtherCharge] [decimal](16, 4) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CounterId] [int] NULL,
	[IsBarCodeGenerated] [bit] NULL,
	[IsActive] [bit] NULL,
	[IsAssetDamaged] [bit] NULL,
	[DamagedRemarks] [nvarchar](500) NULL,
	[UndamagedRemarks] [nvarchar](500) NULL,
	[Performance] [nvarchar](250) NULL,
	[TotalLife] [int] NULL,
	[YearOfUse] [float] NULL,
	[ManufactureDate] [datetime] NULL,
	[IsUnderMaintenance] [bit] NOT NULL,
	[BuildingBlockNumber] [varchar](255) NULL,
	[Floors] [varchar](255) NULL,
	[RoomNumber] [varchar](255) NULL,
	[RoomPosition] [varchar](255) NULL,
	[SerialNo] [varchar](255) NULL,
	[ModelNo] [varchar](255) NULL,
	[IsMaintenanceRequired] [bit] NOT NULL,
	[ExpectedValueAfterUsefulLife] [int] NULL,
	[IsAssetDamageConfirmed] [bit] NOT NULL,
	[IsAssetScraped] [bit] NOT NULL,
	[ScrapAmount] [decimal](18, 0) NULL,
	[ScrapRemarks] [nvarchar](2000) NULL,
	[ScrapCancelRemarks] [nvarchar](2000) NULL,
	[InstallationDate] [datetime] NULL,
	[DonationId] [int] NULL,
	[PeriodicServiceDays] [int] NULL,
	[AssetHolderId] [int] NULL,
	[StoreId] [int] NOT NULL,
	[SubStoreId] [int] NULL,
	[CssdStatus] [varchar](100) NULL,
	[AssetCode] [nvarchar](max) NULL,
	[StockSpecification] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[FixedAssetStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_GoodsReceipt]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_GoodsReceipt](
	[GoodsReceiptID] [int] IDENTITY(1,1) NOT NULL,
	[GoodsReceiptDate] [datetime] NULL,
	[PurchaseOrderId] [int] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[Remarks] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[VendorId] [int] NULL,
	[SubTotal] [decimal](10, 2) NULL,
	[VATTotal] [decimal](10, 2) NULL,
	[CcCharge] [decimal](10, 2) NULL,
	[Discount] [float] NULL,
	[DiscountAmount] [decimal](10, 2) NULL,
	[PrintCount] [int] NULL,
	[BillNo] [varchar](50) NULL,
	[ReceiptNo] [varchar](50) NULL,
	[ReceivedDate] [datetime] NULL,
	[OrderDate] [varchar](50) NULL,
	[CreditPeriod] [int] NULL,
	[PaymentMode] [varchar](50) NULL,
	[OtherCharges] [decimal](16, 4) NULL,
	[IsTransferredToACC] [bit] NULL,
	[TDSRate] [decimal](18, 0) NULL,
	[TDSAmount] [decimal](18, 0) NULL,
	[TotalWithTDS] [decimal](16, 4) NULL,
	[InsuranceCharge] [decimal](16, 4) NULL,
	[CarriageFreightCharge] [decimal](16, 4) NULL,
	[PackingCharge] [decimal](16, 4) NULL,
	[TransportCourierCharge] [decimal](16, 4) NULL,
	[OtherCharge] [decimal](16, 4) NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsCancel] [bit] NULL,
	[CancelRemarks] [nvarchar](1000) NULL,
	[GoodsReceiptNo] [int] NULL,
	[GRCategory] [varchar](20) NULL,
	[FiscalYearId] [int] NULL,
	[IsVerificationEnabled] [bit] NULL,
	[VerifierIds] [varchar](199) NULL,
	[VerificationId] [int] NULL,
	[GRStatus] [varchar](20) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[DonationId] [int] NULL,
	[MaterialCoaDate] [datetime] NULL,
	[MaterialCoaNo] [nvarchar](500) NULL,
	[IsSupplierApproved] [bit] NULL,
	[IsDeliveryTopClosed] [bit] NULL,
	[IsBoxNumbered] [bit] NULL,
	[GoodsArrivalNo] [int] NOT NULL,
	[GoodsArrivalDate] [datetime] NOT NULL,
	[IMIRNo] [int] NULL,
	[IMIRDate] [datetime] NULL,
	[ReceivedBy] [int] NULL,
	[ReceivedOn] [datetime] NULL,
	[ReceivedRemarks] [nvarchar](500) NULL,
	[StoreId] [int] NOT NULL,
	[IsDonation] [bit] NULL,
	[VendorBillDate] [datetime2](3) NULL,
	[GRGroupId] [int] NULL,
	[IsPaymentDoneFromAcc] [bit] NOT NULL,
 CONSTRAINT [PK__INV_Good__F8D12B8CD465E120] PRIMARY KEY CLUSTERED 
(
	[GoodsReceiptID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_GoodsReceiptItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_GoodsReceiptItems](
	[GoodsReceiptItemId] [int] IDENTITY(1,1) NOT NULL,
	[GoodsReceiptId] [int] NOT NULL,
	[ItemId] [int] NULL,
	[BatchNO] [varchar](50) NULL,
	[ExpiryDate] [datetime] NULL,
	[ReceivedQuantity] [float] NULL,
	[FreeQuantity] [float] NULL,
	[RejectedQuantity] [float] NULL,
	[ItemRate] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[SubTotal] [decimal](10, 2) NULL,
	[MRP] [decimal](16, 4) NULL,
	[DiscountPercent] [float] NULL,
	[CcCharge] [decimal](10, 2) NULL,
	[CounterId] [int] NULL,
	[DiscountAmount] [decimal](10, 2) NULL,
	[VAT] [float] NULL,
	[CcAmount] [decimal](10, 2) NULL,
	[OtherCharge] [decimal](16, 4) NULL,
	[IsTransferredToACC] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[GRItemDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[SamplingDate] [datetime] NULL,
	[NoOfBoxes] [int] NULL,
	[SamplingQuantity] [int] NULL,
	[IdentificationLabel] [nvarchar](500) NULL,
	[IsSamplingLabel] [nvarchar](500) NULL,
	[SamplingBoxes] [nvarchar](500) NULL,
	[SampleRemoved] [int] NULL,
	[ManufactureDate] [datetime] NULL,
	[ArrivalQuantity] [float] NOT NULL,
	[MaterialNO] [varchar](150) NULL,
	[StockId] [int] NULL,
	[GRItemSpecification] [nvarchar](500) NULL,
	[Remarks] [nvarchar](500) NULL,
	[ItemCategory] [varchar](100) NULL,
 CONSTRAINT [PK_INV_TXN_GoodsReceiptItems] PRIMARY KEY CLUSTERED 
(
	[GoodsReceiptItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_PurchaseOrder]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_PurchaseOrder](
	[PurchaseOrderId] [int] IDENTITY(1,1) NOT NULL,
	[VendorId] [int] NULL,
	[PoDate] [datetime] NULL,
	[POStatus] [varchar](20) NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[VAT] [decimal](16, 4) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[DeliveryAddress] [varchar](500) NULL,
	[CurrencyId] [int] NULL,
	[PORemark] [nvarchar](500) NULL,
	[TermsConditions] [nvarchar](max) NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsCancel] [bit] NULL,
	[RequisitionId] [int] NULL,
	[IsVerificationEnabled] [bit] NULL,
	[VerifierIds] [varchar](199) NULL,
	[VerificationId] [int] NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[InvoiceHeaderId] [int] NULL,
	[PerformanceInvoiceNo] [nvarchar](200) NULL,
	[POCategory] [varchar](100) NULL,
	[StoreId] [int] NOT NULL,
	[DeliveryDate] [datetime2](3) NULL,
	[POGroupId] [int] NULL,
	[FiscalYearId] [int] NULL,
	[PONumber] [int] NULL,
	[ReferenceNo] [nvarchar](50) NULL,
	[InvoicingAddress] [nvarchar](1000) NULL,
	[ContactPersonName] [nvarchar](1000) NULL,
	[ContactPersonEmail] [nvarchar](1000) NULL,
 CONSTRAINT [PK_INV_TXN_PurchaseOrder] PRIMARY KEY CLUSTERED 
(
	[PurchaseOrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_PurchaseOrderItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_PurchaseOrderItems](
	[PurchaseOrderItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[Quantity] [float] NULL,
	[PurchaseOrderId] [int] NULL,
	[StandardRate] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[ReceivedQuantity] [float] NULL,
	[PendingQuantity] [float] NULL,
	[DeliveryDays] [int] NULL,
	[AuthorizedRemark] [nvarchar](500) NULL,
	[AuthorizedBy] [int] NULL,
	[AuthorizedOn] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[Remark] [nvarchar](500) NULL,
	[POItemStatus] [varchar](20) NULL,
	[POItemSpecification] [nvarchar](500) NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[IsActive] [bit] NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[VatPercentage] [float] NULL,
	[ItemCategory] [varchar](100) NULL,
	[VendorItemCode] [nvarchar](50) NULL,
 CONSTRAINT [PK_INV_TXN_PurchaseOrderItems] PRIMARY KEY CLUSTERED 
(
	[PurchaseOrderItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_PurchaseRequest]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_PurchaseRequest](
	[PurchaseRequestId] [int] IDENTITY(1,1) NOT NULL,
	[RequestDate] [datetime] NULL,
	[PRNumber] [int] NULL,
	[VendorId] [int] NULL,
	[RequestStatus] [varchar](20) NULL,
	[VerificationId] [int] NULL,
	[IsPOCreated] [bit] NULL,
	[Remarks] [nvarchar](500) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[PRCategory] [varchar](100) NULL,
	[StoreId] [int] NOT NULL,
	[PRGroupId] [int] NULL,
	[FiscalYearId] [int] NULL,
 CONSTRAINT [PK_INV_TXN_PurchaseRequest] PRIMARY KEY CLUSTERED 
(
	[PurchaseRequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_PurchaseRequestItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_PurchaseRequestItems](
	[PurchaseRequestItemId] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseRequestId] [int] NOT NULL,
	[VendorId] [int] NULL,
	[ItemId] [int] NOT NULL,
	[RequestedQuantity] [float] NOT NULL,
	[RequestItemStatus] [varchar](20) NULL,
	[Remarks] [nvarchar](500) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[SupplyRequiredBefore] [nvarchar](500) NULL,
	[QuantityVerifiedOn] [datetime] NULL,
	[ItemCategory] [varchar](50) NULL,
 CONSTRAINT [PK_INV_TXN_PurchaseRequestItems] PRIMARY KEY CLUSTERED 
(
	[PurchaseRequestItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_Requisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_Requisition](
	[RequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[DepartmentId] [int] NULL,
	[RequisitionDate] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[RequisitionStatus] [varchar](20) NULL,
	[IssueNo] [int] NULL,
	[RequestFromStoreId] [int] NOT NULL,
	[VerificationId] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsCancel] [bit] NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[RequisitionNo] [int] NOT NULL,
	[Remarks] [nvarchar](500) NULL,
	[MatIssueDate] [datetime] NULL,
	[MatIssueTo] [nvarchar](200) NULL,
	[RequestToStoreId] [int] NOT NULL,
	[ReqDisGroupId] [int] NULL,
	[FiscalYearId] [int] NULL,
 CONSTRAINT [PK_INV_TXN_RequisitionHeader] PRIMARY KEY CLUSTERED 
(
	[RequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_RequisitionForPO]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_RequisitionForPO](
	[RequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[isActive] [bit] NOT NULL,
	[isApproved] [bit] NOT NULL,
	[ApprovedBy] [int] NULL,
	[isPOCreated] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_RequisitionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_RequisitionItems](
	[RequisitionItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[Quantity] [int] NULL,
	[RequisitionId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[AuthorizedOn] [datetime] NULL,
	[AuthorizedBy] [int] NULL,
	[ReceivedQuantity] [float] NULL,
	[PendingQuantity] [float] NULL,
	[AuthorizedRemark] [nvarchar](500) NULL,
	[RequisitionItemStatus] [varchar](20) NULL,
	[Remark] [nvarchar](500) NULL,
	[IssueNo] [int] NULL,
	[CancelQuantity] [float] NULL,
	[CancelBy] [int] NULL,
	[CancelOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[isActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[RequisitionNo] [int] NOT NULL,
	[CancelRemarks] [nvarchar](500) NULL,
	[MSSNO] [nvarchar](500) NULL,
	[FirstWeekQty] [nvarchar](100) NULL,
	[SecondWeekQty] [nvarchar](100) NULL,
	[ThirdWeekQty] [nvarchar](100) NULL,
	[FourthWeekQty] [nvarchar](100) NULL,
	[MINNo] [nvarchar](100) NULL,
	[MINDate] [datetime] NULL,
	[MatIssueTo] [nvarchar](500) NULL,
	[MatIssueDate] [datetime] NULL,
 CONSTRAINT [PK_INV_TXN_RequestedItems] PRIMARY KEY CLUSTERED 
(
	[RequisitionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_RequisitionItemsForPO]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_RequisitionItemsForPO](
	[RequisitionItemId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[Quantity] [float] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_ReturnToVendor]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_ReturnToVendor](
	[ReturnToVendorId] [int] IDENTITY(1,1) NOT NULL,
	[ReturnDate] [datetime] NOT NULL,
	[VendorId] [int] NULL,
	[SubTotal] [decimal](10, 2) NULL,
	[VATTotal] [decimal](10, 2) NULL,
	[DiscountAmount] [decimal](10, 2) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[CreditNoteId] [int] NULL,
	[CreditNotePrintNo] [int] NULL,
	[Remarks] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[StoreId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ReturnToVendorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_ReturnToVendorItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_ReturnToVendorItems](
	[ReturnToVendorItemId] [int] IDENTITY(1,1) NOT NULL,
	[VendorId] [int] NULL,
	[ItemId] [int] NULL,
	[GoodsReceiptItemId] [int] NULL,
	[StockId] [int] NULL,
	[BatchNo] [varchar](50) NULL,
	[Quantity] [float] NULL,
	[ItemRate] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[Remark] [nvarchar](500) NULL,
	[ReturnType] [varchar](30) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[IsTransferredToACC] [bit] NULL,
	[VAT] [decimal](16, 4) NULL,
	[GoodsReceiptId] [int] NULL,
	[CreditNoteNo] [int] NULL,
	[ReturnToVendorId] [int] NULL,
 CONSTRAINT [PK__INV_TXN___91F2E30FCC7812F3] PRIMARY KEY CLUSTERED 
(
	[ReturnToVendorItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_Stock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[BatchNO] [varchar](50) NULL,
	[ExpiryDate] [datetime] NULL,
	[ReceivedQuantity] [float] NULL,
	[AvailableQuantity] [float] NULL,
	[TransactionDate] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[GoodsReceiptId] [int] NULL,
	[MRP] [decimal](16, 4) NULL,
	[Price] [decimal](16, 4) NULL,
	[StoreId] [int] NOT NULL,
	[StockSpecification] [nvarchar](500) NULL,
 CONSTRAINT [PK_INV_TXN_NewStock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_StoreStock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_StoreStock](
	[StoreStockId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NULL,
	[StockId] [int] NULL,
	[ItemId] [int] NULL,
	[SellingPrice] [decimal](18, 4) NOT NULL,
	[AvailableQuantity] [float] NOT NULL,
	[UnConfirmedQty_In] [float] NOT NULL,
	[UnConfirmedQty_Out] [float] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_INV_TXN_StoreStock] PRIMARY KEY CLUSTERED 
(
	[StoreStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INV_TXN_WriteOffItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INV_TXN_WriteOffItems](
	[WriteOffId] [int] IDENTITY(1,1) NOT NULL,
	[GoodsReceiptItemId] [int] NULL,
	[StockId] [int] NULL,
	[BatchNO] [varchar](50) NULL,
	[ItemId] [int] NULL,
	[ItemRate] [decimal](16, 4) NULL,
	[WriteOffQuantity] [float] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[WriteOffDate] [datetime] NULL,
	[Remark] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[IsTransferredToACC] [bit] NULL,
	[StoreId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[WriteOffId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IRD_Log]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IRD_Log](
	[LogId] [int] IDENTITY(1,1) NOT NULL,
	[JsonData] [varchar](max) NULL,
	[Status] [varchar](20) NULL,
	[ResponseMessage] [varchar](20) NULL,
	[BillType] [varchar](50) NULL,
	[UrlInfo] [varchar](100) NULL,
	[ErrorMessage] [varchar](max) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_IRD_Log] PRIMARY KEY CLUSTERED 
(
	[LogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_BarCode]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_BarCode](
	[BarCodeId] [int] IDENTITY(1,1) NOT NULL,
	[BarCodeNumber] [bigint] NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_LabBarCodeNumber] PRIMARY KEY CLUSTERED 
(
	[BarCodeNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_Gov_Report_Mapping]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_Gov_Report_Mapping](
	[ReportMapId] [int] IDENTITY(1,1) NOT NULL,
	[ReportItemId] [int] NULL,
	[LabItemId] [int] NULL,
	[IsActive] [bit] NULL,
	[IsComponentBased] [bit] NULL,
	[ComponentName] [varchar](80) NULL,
	[IsResultCount] [bit] NULL,
	[PositiveIndicator] [varchar](50) NULL,
	[ComponentId] [int] NULL,
 CONSTRAINT [PK_MapID_Lab_Gov_TestReport] PRIMARY KEY CLUSTERED 
(
	[ReportMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_LabTests]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_LabTests](
	[LabTestId] [bigint] IDENTITY(1,1) NOT NULL,
	[LabTestCode] [varchar](10) NULL,
	[LabTestName] [varchar](100) NULL,
	[LabTestSpecimen] [varchar](200) NULL,
	[LabTestSpecimenSource] [varchar](50) NULL,
	[ReportTemplateID] [int] NULL,
	[Description] [varchar](200) NULL,
	[HasNegativeResults] [bit] NULL,
	[NegativeResultText] [varchar](1000) NULL,
	[ProcedureCode] [varchar](10) NULL,
	[LabTestSynonym] [varchar](50) NULL,
	[LOINC] [varchar](10) NULL,
	[IsValidForReporting] [bit] NULL,
	[LabSequence] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[DisplaySequence] [int] NULL,
	[ReportingName] [varchar](150) NULL,
	[Interpretation] [varchar](2000) NULL,
	[RunNumberType] [varchar](200) NULL,
	[LabTestCategoryId] [int] NULL,
	[SmsApplicable] [bit] NULL,
 CONSTRAINT [PK_LAB_LabTests] PRIMARY KEY CLUSTERED 
(
	[LabTestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_LabTestsWithCorrectedCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_LabTestsWithCorrectedCategory](
	[LabTestWithCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[LabTestName] [nvarchar](2000) NULL,
	[Category] [nvarchar](2000) NULL,
	[CorrectedCategory] [nvarchar](2000) NULL,
	[CategoryId] [int] NULL,
 CONSTRAINT [PK_LAB_LabTestsWithCorrectedCategory] PRIMARY KEY CLUSTERED 
(
	[LabTestWithCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_LIS_ComponentMap]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_LIS_ComponentMap](
	[LISComponentMapId] [int] IDENTITY(1,1) NOT NULL,
	[ComponentId] [int] NOT NULL,
	[LISComponentId] [int] NULL,
	[MachineId] [int] NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ConversionFactor] [int] NULL,
 CONSTRAINT [PK_LAB_LIS_ComponentMap] PRIMARY KEY CLUSTERED 
(
	[LISComponentMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_LIS_SyncedComponent_Detail]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_LIS_SyncedComponent_Detail](
	[LISComponentResultId] [int] IDENTITY(1,1) NOT NULL,
	[SyncStatus] [bit] NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_LAB_LIS_ComponentResult] PRIMARY KEY CLUSTERED 
(
	[LISComponentResultId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_MAP_TestComponents]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_MAP_TestComponents](
	[ComponentMapId] [int] IDENTITY(1,1) NOT NULL,
	[LabTestId] [bigint] NOT NULL,
	[ComponentId] [int] NOT NULL,
	[DisplaySequence] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[GroupName] [varchar](80) NULL,
	[IndentationCount] [int] NULL,
	[ShowInSheet] [bit] NULL,
 CONSTRAINT [PK_ComponentMapId] PRIMARY KEY CLUSTERED 
(
	[ComponentMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_MST_Components]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_MST_Components](
	[ComponentId] [int] IDENTITY(1,1) NOT NULL,
	[ComponentName] [varchar](120) NULL,
	[Unit] [varchar](20) NULL,
	[ValueType] [varchar](50) NULL,
	[ControlType] [varchar](50) NULL,
	[Range] [varchar](80) NULL,
	[RangeDescription] [nvarchar](1000) NULL,
	[Method] [varchar](200) NULL,
	[ValueLookup] [varchar](150) NULL,
	[MinValue] [float] NULL,
	[MaxValue] [float] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[DisplayName] [varchar](200) NULL,
	[MaleRange] [varchar](80) NULL,
	[FemaleRange] [varchar](80) NULL,
	[ChildRange] [varchar](80) NULL,
 CONSTRAINT [PK_ComponentId] PRIMARY KEY CLUSTERED 
(
	[ComponentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_Mst_Gov_Report_Items]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_Mst_Gov_Report_Items](
	[ReportItemId] [int] IDENTITY(1,1) NOT NULL,
	[SerialNumber] [int] NULL,
	[TestName] [varchar](50) NULL,
	[GroupName] [varchar](50) NULL,
	[DisplayName] [varchar](50) NULL,
	[HasInnerItems] [bit] NULL,
	[InnerTestGroupName] [varchar](50) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_ItemId_Of_TestName_In_Lab_GovReport] PRIMARY KEY CLUSTERED 
(
	[ReportItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [Unique_Gov_Lab_ReportItem_Name] UNIQUE NONCLUSTERED 
(
	[TestName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [Unique_Gov_Lab_ReportItem_SerialNumber] UNIQUE NONCLUSTERED 
(
	[SerialNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_MST_LabVendors]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_MST_LabVendors](
	[LabVendorId] [int] IDENTITY(1,1) NOT NULL,
	[VendorCode] [varchar](20) NULL,
	[VendorName] [varchar](200) NULL,
	[IsExternal] [bit] NOT NULL,
	[ContactAddress] [nvarchar](200) NULL,
	[ContactNo] [nvarchar](20) NULL,
	[Email] [nvarchar](50) NULL,
	[Remarks] [varchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsDefault] [bit] NOT NULL,
 CONSTRAINT [PK_LabVendors] PRIMARY KEY CLUSTERED 
(
	[LabVendorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_MST_RunNumberSettings]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_MST_RunNumberSettings](
	[RunNumberFormatId] [int] IDENTITY(1,1) NOT NULL,
	[RunNumberFormatName] [varchar](40) NULL,
	[RunNumberGroupingIndex] [int] NULL,
	[StartingLetter] [varchar](10) NULL,
	[FormatInitialPart] [varchar](10) NULL,
	[FormatSeparator] [varchar](5) NULL,
	[FormatLastPart] [varchar](10) NULL,
	[VisitType] [varchar](20) NULL,
	[RunNumberType] [varchar](20) NULL,
	[UnderInsurance] [bit] NULL,
	[ResetDaily] [bit] NULL,
	[ResetMonthly] [bit] NULL,
	[ResetYearly] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [RunNumberFormatID] PRIMARY KEY CLUSTERED 
(
	[RunNumberFormatId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_MST_TestSpecimen]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_MST_TestSpecimen](
	[SpecimenId] [int] IDENTITY(1,1) NOT NULL,
	[SpecimenName] [varchar](20) NULL,
 CONSTRAINT [PK_SpecimenId] PRIMARY KEY CLUSTERED 
(
	[SpecimenId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UniqueSpecimenName] UNIQUE NONCLUSTERED 
(
	[SpecimenName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lab_ReportTemplate]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lab_ReportTemplate](
	[ReportTemplateID] [int] IDENTITY(1,1) NOT NULL,
	[ReportTemplateShortName] [varchar](100) NULL,
	[ReportTemplateName] [varchar](200) NULL,
	[TemplateFileName] [varchar](100) NULL,
	[NegativeTemplateFileName] [varchar](100) NULL,
	[IsDefault] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[HeaderText] [varchar](200) NULL,
	[ColSettingsJSON] [varchar](4000) NULL,
	[TemplateType] [varchar](100) NULL,
	[TemplateHTML] [nvarchar](max) NULL,
	[Description] [varchar](200) NULL,
	[FooterText] [varchar](2000) NULL,
	[DisplaySequence] [int] NULL,
 CONSTRAINT [PK_LAB_ReportTemplate] PRIMARY KEY CLUSTERED 
(
	[ReportTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_LAB_ReportTemplate_TemplateSName] UNIQUE NONCLUSTERED 
(
	[ReportTemplateShortName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_Sms]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_Sms](
	[SmsId] [int] IDENTITY(1,1) NOT NULL,
	[Message] [varchar](400) NULL,
	[RequisitionId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_LAB_SMS_Id] PRIMARY KEY CLUSTERED 
(
	[SmsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_TestCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_TestCategory](
	[TestCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[TestCategoryName] [nvarchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDefault] [bit] NULL,
	[PermissionId] [int] NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [LabTestCategoryId] PRIMARY KEY CLUSTERED 
(
	[TestCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uniqueCategory] UNIQUE NONCLUSTERED 
(
	[TestCategoryName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_TestRequisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_TestRequisition](
	[RequisitionId] [bigint] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[PatientName] [varchar](100) NULL,
	[LabTestId] [bigint] NOT NULL,
	[LabTestName] [varchar](100) NULL,
	[SampleCode] [int] NULL,
	[LabTestSpecimen] [varchar](50) NULL,
	[LabTestSpecimenSource] [varchar](50) NULL,
	[PatientVisitId] [int] NULL,
	[OrderDateTime] [datetime] NULL,
	[ProviderId] [int] NULL,
	[ProviderName] [varchar](100) NULL,
	[BillingStatus] [varchar](50) NULL,
	[OrderStatus] [varchar](30) NULL,
	[SampleCreatedBy] [int] NULL,
	[SampleCreatedOn] [datetime] NULL,
	[Urgency] [varchar](30) NULL,
	[Comments] [varchar](100) NULL,
	[Diagnosis] [varchar](30) NULL,
	[ProcedureCode] [varchar](50) NULL,
	[LOINC] [varchar](50) NULL,
	[RequisitionRemarks] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[DiagnosisId] [int] NULL,
	[ReportTemplateId] [int] NOT NULL,
	[IsActive] [bit] NULL,
	[VisitType] [varchar](20) NULL,
	[RunNumberType] [varchar](200) NULL,
	[LabReportId] [int] NULL,
	[BarCodeNumber] [bigint] NULL,
	[WardName] [varchar](50) NULL,
	[IsVerified] [bit] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedOn] [datetime] NULL,
	[ResultingVendorId] [int] NULL,
	[HasInsurance] [bit] NULL,
	[ResultAddedBy] [int] NULL,
	[ResultAddedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[PrintCount] [int] NULL,
	[SampleCodeFormatted] [varchar](20) NULL,
	[SampleCollectedOnDateTime] [datetime] NULL,
	[BillCancelledBy] [int] NULL,
	[BillCancelledOn] [datetime] NULL,
	[LabTypeName] [varchar](20) NULL,
	[IsSmsSend] [bit] NULL,
	[GoogleFileIdForCovid] [varchar](100) NULL,
	[CovidFileName] [varchar](100) NULL,
	[IsFileUploaded] [bit] NULL,
	[UploadedOn] [datetime] NULL,
	[UploadedBy] [int] NULL,
	[IsFileUploadedToTeleMedicine] [bit] NULL,
	[UploadedByToTeleMedicine] [int] NULL,
	[UploadedOnToTeleMedicine] [datetime] NULL,
 CONSTRAINT [PK_LAB_TestRequisition] PRIMARY KEY CLUSTERED 
(
	[RequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_TXN_LabReports]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_TXN_LabReports](
	[LabReportId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[TemplateId] [int] NULL,
	[ReceivingDate] [datetime] NOT NULL,
	[ReportingDate] [datetime] NOT NULL,
	[IsPrinted] [bit] NULL,
	[Signatories] [varchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ReferredByDr] [varchar](100) NULL,
	[Comments] [varchar](4000) NULL,
	[PrintedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[PrintCount] [int] NULL,
 CONSTRAINT [PK_LAB_TXN_LabReports] PRIMARY KEY CLUSTERED 
(
	[LabReportId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LAB_TXN_TestComponentResult]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAB_TXN_TestComponentResult](
	[TestComponentResultId] [bigint] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [bigint] NOT NULL,
	[LabTestId] [bigint] NULL,
	[ComponentName] [varchar](100) NULL,
	[Value] [nvarchar](max) NULL,
	[Unit] [varchar](50) NULL,
	[Range] [varchar](3000) NULL,
	[Remarks] [varchar](1000) NULL,
	[TemplateId] [int] NULL,
	[Method] [varchar](100) NULL,
	[RangeDescription] [varchar](3000) NULL,
	[IsNegativeResult] [bit] NULL,
	[NegativeResultText] [varchar](1000) NULL,
	[IsAbnormal] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[LabReportId] [int] NULL,
	[IsActive] [bit] NULL,
	[AbnormalType] [varchar](20) NULL,
	[ResultGroup] [int] NULL,
	[ComponentId] [int] NULL,
 CONSTRAINT [PK_LAB_TXN_TestComponentResult] PRIMARY KEY CLUSTERED 
(
	[TestComponentResultId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MAT_FileUploads]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAT_FileUploads](
	[FileId] [int] IDENTITY(1,1) NOT NULL,
	[MaternityPatientId] [int] NULL,
	[PatientId] [int] NULL,
	[FileName] [varchar](100) NULL,
	[DisplayName] [varchar](100) NULL,
	[FileType] [varchar](20) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_MAT_FileId] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MAT_MaternityANC]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAT_MaternityANC](
	[MaternityANCId] [int] IDENTITY(1,1) NOT NULL,
	[MaternityPatientId] [int] NULL,
	[ANCDateTime] [datetime] NULL,
	[PatientId] [int] NULL,
	[VisitNumber] [varchar](20) NULL,
	[ANCPlace] [varchar](100) NULL,
	[PregnancyPeriodInWeeks] [int] NULL,
	[ConditionOfANC] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[Weight] [float] NOT NULL,
 CONSTRAINT [PK_MaternityANCId] PRIMARY KEY CLUSTERED 
(
	[MaternityANCId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MAT_Patient]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAT_Patient](
	[MaternityPatientId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[HusbandName] [varchar](100) NULL,
	[Height] [float] NOT NULL,
	[Weight] [float] NOT NULL,
	[LastMenstrualPeriod] [datetime] NOT NULL,
	[ExpectedDeliveryDate] [datetime] NOT NULL,
	[PlaceOfDelivery] [varchar](200) NULL,
	[DeliveryDate] [datetime] NULL,
	[TypeOfDelivery] [int] NULL,
	[OBSHistory] [varchar](500) NULL,
	[Presentation] [varchar](50) NULL,
	[Complications] [varchar](500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ConcludedBy] [int] NULL,
	[ConcludedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsConcluded] [bit] NULL,
 CONSTRAINT [PK_MaternityPatientId] PRIMARY KEY CLUSTERED 
(
	[MaternityPatientId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MAT_Register]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAT_Register](
	[MaternityRegisterId] [int] IDENTITY(1,1) NOT NULL,
	[MaternityPatientId] [int] NULL,
	[PatientId] [int] NULL,
	[Gender] [varchar](10) NULL,
	[WeightInGram] [int] NULL,
	[OutcomeOfBaby] [varchar](200) NULL,
	[OutcomeOfMother] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_MaternityRegisterId] PRIMARY KEY CLUSTERED 
(
	[MaternityRegisterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MR_MST_OperationType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MR_MST_OperationType](
	[OperationId] [int] IDENTITY(1,1) NOT NULL,
	[OperationName] [varchar](50) NULL,
 CONSTRAINT [PK_OperationId] PRIMARY KEY CLUSTERED 
(
	[OperationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UniqueOperationName] UNIQUE NONCLUSTERED 
(
	[OperationName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MR_RecordSummary]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MR_RecordSummary](
	[MedicalRecordId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[FileNumber] [varchar](250) NULL,
	[DischargeTypeId] [int] NOT NULL,
	[DischargeConditionId] [int] NULL,
	[DeliveryTypeId] [int] NULL,
	[DeathPeriodTypeId] [int] NULL,
	[OperationTypeId] [int] NULL,
	[OperatedByDoctor] [int] NULL,
	[GravitaId] [int] NULL,
	[GestationalWeek] [int] NULL,
	[OperationDiagnosis] [nvarchar](max) NULL,
	[Remarks] [nvarchar](300) NULL,
	[AllTests] [nvarchar](max) NULL,
	[ICDCode] [nvarchar](max) NULL,
	[OperationDate] [datetime] NULL,
	[IsOperationConducted] [bit] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ReferredDate] [datetime] NULL,
	[ReferredTime] [time](7) NULL,
	[NumberOfBabies] [int] NULL,
	[BloodLost] [int] NULL,
	[BloodLostUnit] [varchar](30) NULL,
	[GestationalUnit] [varchar](30) NULL,
	[GestationalDay] [int] NULL,
 CONSTRAINT [PK_MR_RecordSummaryID] PRIMARY KEY CLUSTERED 
(
	[MedicalRecordId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MR_TXN_Inpatient_Diagnosis]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MR_TXN_Inpatient_Diagnosis](
	[DiagnosisId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[MedicalRecordId] [int] NOT NULL,
	[ICD10ID] [int] NOT NULL,
	[ICD10Code] [varchar](250) NOT NULL,
	[ICD10Name] [varchar](250) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedBy] [datetime] NULL,
	[ModifiedOn] [int] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DiagnosisId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MR_TXN_Outpatient_FinalDiagnosis]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MR_TXN_Outpatient_FinalDiagnosis](
	[FinalDiagnosisId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NOT NULL,
	[ICD10ID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[FinalDiagnosisId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Bank]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Bank](
	[BankId] [int] IDENTITY(1,1) NOT NULL,
	[BankShortName] [varchar](20) NULL,
	[BankName] [varchar](200) NULL,
	[Description] [varchar](200) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[BankId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Country]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Country](
	[CountryId] [int] IDENTITY(1,1) NOT NULL,
	[CountryShortName] [varchar](10) NULL,
	[CountryName] [varchar](200) NULL,
	[ISDCode] [varchar](10) NULL,
	[CountrySubDivisionType] [varchar](20) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[CountryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_CountryName] UNIQUE NONCLUSTERED 
(
	[CountryName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_CountryShortName] UNIQUE NONCLUSTERED 
(
	[CountryShortName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_CountrySubDivision]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_CountrySubDivision](
	[CountrySubDivisionId] [int] IDENTITY(1,1) NOT NULL,
	[CountryId] [int] NOT NULL,
	[CountrySubDivisionName] [varchar](50) NULL,
	[CountrySubDivisionCode] [varchar](10) NULL,
	[MapAreaCode] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_CountrySubDivision] PRIMARY KEY CLUSTERED 
(
	[CountrySubDivisionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Department]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Department](
	[DepartmentId] [int] IDENTITY(1,1) NOT NULL,
	[DepartmentCode] [varchar](10) NULL,
	[DepartmentName] [varchar](50) NOT NULL,
	[Description] [varchar](100) NULL,
	[DepartmentHead] [int] NULL,
	[IsActive] [bit] NULL,
	[IsAppointmentApplicable] [bit] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ParentDepartmentId] [int] NULL,
	[RoomNumber] [nvarchar](20) NULL,
	[NoticeText] [nvarchar](4000) NULL,
 CONSTRAINT [PK_MST_Department] PRIMARY KEY CLUSTERED 
(
	[DepartmentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_MSTDepartment_Name] UNIQUE NONCLUSTERED 
(
	[DepartmentName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_EthnicGroup]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_EthnicGroup](
	[EthnicGroupId] [int] IDENTITY(1,1) NOT NULL,
	[EthnicGroup] [nvarchar](500) NOT NULL,
	[CastKeyWords] [nvarchar](max) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[EthnicGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Gov_FreeServiceCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Gov_FreeServiceCategory](
	[FreeServiceId] [int] IDENTITY(1,1) NOT NULL,
	[FreeServiceName] [nvarchar](50) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_MST_Gov_FreeServiceCategory] PRIMARY KEY CLUSTERED 
(
	[FreeServiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_ICD10]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_ICD10](
	[ICD10ID] [int] IDENTITY(1,1) NOT NULL,
	[ICDShortCode] [varchar](7) NOT NULL,
	[ICD10Code] [varchar](10) NOT NULL,
	[ValidForCoding] [bit] NULL,
	[ICD10Description] [varchar](200) NULL,
	[ICD10LongDescription] [varchar](1000) NULL,
	[Active] [bit] NULL,
	[Revision] [bit] NULL,
	[DiseaseGroupId] [int] NOT NULL,
 CONSTRAINT [PK_MST_ICD10] PRIMARY KEY CLUSTERED 
(
	[ICD10ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ICD10Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ICD10Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ICD10Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_InvoiceHeaders]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_InvoiceHeaders](
	[InvoiceHeaderId] [int] IDENTITY(1,1) NOT NULL,
	[Module] [varchar](200) NULL,
	[HeaderDescription] [varchar](200) NULL,
	[HospitalName] [varchar](200) NULL,
	[Address] [varchar](200) NULL,
	[Email] [varchar](200) NULL,
	[PAN] [varchar](50) NULL,
	[Telephone] [varchar](200) NULL,
	[DDA] [varchar](200) NULL,
	[LogoFileName] [varchar](200) NULL,
	[LogoFileExtention] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[InvoiceHeaderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_LabTypes]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_LabTypes](
	[LabTypeId] [int] IDENTITY(1,1) NOT NULL,
	[LabTypeName] [varchar](60) NOT NULL,
	[DisplayName] [varchar](60) NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsDefault] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[LabTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_LOINC]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_LOINC](
	[LoincID] [int] IDENTITY(1,1) NOT NULL,
	[LoincCode] [varchar](8) NOT NULL,
	[ShortName] [varchar](100) NULL,
	[LongName] [varchar](300) NOT NULL,
	[Component] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[LoincID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_MAP_StoreVerification]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_MAP_StoreVerification](
	[StoreVerificationMapId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NOT NULL,
	[MaxVerificationLevel] [int] NOT NULL,
	[VerificationLevel] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[PermissionId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[StoreVerificationMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_MST_MAP_StoreVerification] UNIQUE NONCLUSTERED 
(
	[StoreVerificationMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Municipality]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Municipality](
	[MunicipalityId] [int] IDENTITY(1,1) NOT NULL,
	[MunicipalityName] [varchar](200) NOT NULL,
	[CountryId] [int] NOT NULL,
	[CountrySubDivisionId] [int] NOT NULL,
	[IsActive] [bit] NULL,
	[Type] [varchar](40) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[MunicipalityId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Reactions]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Reactions](
	[ReactionId] [int] IDENTITY(1,1) NOT NULL,
	[ReactionCode] [varchar](10) NULL,
	[ReactionName] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_MST_Reactions] PRIMARY KEY CLUSTERED 
(
	[ReactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_RPT_DynamicReportingItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_RPT_DynamicReportingItems](
	[ReportingItemsId] [int] IDENTITY(1,1) NOT NULL,
	[ReportingItemName] [nvarchar](150) NULL,
	[DynamicReportId] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[RptCountUnit] [varchar](50) NULL,
 CONSTRAINT [PK_MST_RPT_DynamicReportingItems] PRIMARY KEY CLUSTERED 
(
	[ReportingItemsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_RPT_DynamicReportName]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_RPT_DynamicReportName](
	[DynamicReportId] [int] IDENTITY(1,1) NOT NULL,
	[ReportName] [varchar](150) NOT NULL,
	[ReportCode] [varchar](100) NOT NULL,
	[ReportDescription] [varchar](400) NOT NULL,
	[Module] [varchar](50) NOT NULL,
	[UsedIn_SPName] [varchar](200) NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
 CONSTRAINT [PK_MST_RPT_DynamicReportName] PRIMARY KEY CLUSTERED 
(
	[DynamicReportId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MST_Tax]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MST_Tax](
	[TaxId] [int] IDENTITY(1,1) NOT NULL,
	[TaxName] [varchar](30) NOT NULL,
	[TaxPercentage] [float] NOT NULL,
	[TaxLabel] [varchar](30) NOT NULL,
	[Description] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_MST_Tax] PRIMARY KEY CLUSTERED 
(
	[TaxId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MSTEmailSendDetail]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MSTEmailSendDetail](
	[SendId] [int] IDENTITY(1,1) NOT NULL,
	[SendBy] [int] NOT NULL,
	[SendToEmail] [varchar](100) NULL,
	[EmailSubject] [varchar](500) NULL,
	[SendOn] [datetime] NULL,
 CONSTRAINT [SendId] PRIMARY KEY CLUSTERED 
(
	[SendId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[NEPH_HemodialysisRecord]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NEPH_HemodialysisRecord](
	[HemodialysisRecordId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NULL,
	[Diagnosis] [varchar](500) NULL,
	[Schedule] [varchar](100) NULL,
	[NextHD] [datetime] NULL,
	[CurrentHdDate] [datetime] NULL,
	[IdNo] [varchar](50) NULL,
	[HdNo] [varchar](50) NULL,
	[TreatmentOrder_DryWeight] [varchar](50) NULL,
	[TreatmentOrder_DialysisFlow] [varchar](50) NULL,
	[TreatmentOrder_Blood] [varchar](50) NULL,
	[TreatmentOrder_TimeInMin] [varchar](50) NULL,
	[TreatmentOrder_UsedNo] [varchar](50) NULL,
	[TreatmentOrder_BloodTransfusion] [varchar](50) NULL,
	[TreatmentOrder_HeparineSaline_Circulation] [varchar](50) NULL,
	[TreatmentOrder_HeparineSaline_Bolus] [varchar](50) NULL,
	[TreatmentOrder_HeparineSaline_Continuous] [varchar](50) NULL,
	[VascularAccess_AVF] [bit] NULL,
	[VascularAccess_Subclavian] [bit] NULL,
	[VascularAccess_Jugular] [bit] NULL,
	[VascularAccess_FemoralCatheter] [bit] NULL,
	[VascularAccess_PermCath] [bit] NULL,
	[BloodTrans_BloodGroup] [varchar](500) NULL,
	[BloodTrans_Today] [varchar](500) NULL,
	[BloodTrans_BagNo] [varchar](500) NULL,
	[BloodTrans_NextBT] [bit] NULL,
	[BloodTrans_CollectionDate] [datetime] NULL,
	[BloodTrans_ExpDate] [datetime] NULL,
	[TreatmentData_PreWeight] [varchar](50) NULL,
	[TreatmentData_PostWeight] [varchar](50) NULL,
	[TreatmentData_PreTemperature] [varchar](50) NULL,
	[TreatmentData_PostTemperature] [varchar](50) NULL,
	[TreatmentData_PrePulse] [varchar](50) NULL,
	[TreatmentData_PostPulse] [varchar](50) NULL,
	[TreatmentData_PreStandBp] [varchar](50) NULL,
	[TreatmentData_PostStandBp] [varchar](50) NULL,
	[TreatmentData_PreSitBp] [varchar](50) NULL,
	[TreatmentData_PostSitBp] [varchar](50) NULL,
	[TreatmentData_UfGoal] [varchar](50) NULL,
	[TreatmentData_MachineNo] [varchar](50) NULL,
	[TreatmentData_Machine_Conductivity] [varchar](50) NULL,
	[TreatmentData_Machine_Temperature] [varchar](50) NULL,
	[TreatmentData_Machine_MachineCheck] [varchar](50) NULL,
	[TreatmentData_Initials] [varchar](50) NULL,
	[TreatmentData_PreLab] [varchar](50) NULL,
	[TreatmentData_PostLab] [varchar](50) NULL,
	[TreatmentData_Hb_PcV] [varchar](50) NULL,
	[TreatmentData_BloodSugar] [varchar](50) NULL,
	[TreatmentData_TimeOn] [varchar](50) NULL,
	[TreatmentData_TimeOn_By] [varchar](50) NULL,
	[TreatmentData_TimeOff] [varchar](50) NULL,
	[TreatmentData_TimeOff_By] [varchar](50) NULL,
	[OnExamination_Pallor] [varchar](100) NULL,
	[OnExamination_Ictercus] [varchar](100) NULL,
	[OnExamination_JVP] [varchar](100) NULL,
	[OnExamination_Rash] [varchar](100) NULL,
	[OnExamination_Lymphnode] [varchar](100) NULL,
	[OnExamination_Chest] [varchar](100) NULL,
	[OnExamination_CVS] [varchar](100) NULL,
	[OnExamination_PA] [varchar](100) NULL,
	[OnExamination_SPo2] [varchar](100) NULL,
	[OnExamination_Others] [varchar](500) NULL,
	[ChiefComplaint] [varchar](4000) NULL,
	[Comments_Drugs] [varchar](4000) NULL,
	[PostDialysisAssesment] [varchar](4000) NULL,
	[TotalBloodVolume] [varchar](50) NULL,
	[TotalHeparin_Saline] [varchar](50) NULL,
	[TotalFluidRemoved] [varchar](50) NULL,
	[WeightDifference] [varchar](50) NULL,
	[PtSentToHospital] [varchar](200) NULL,
	[PtSentToHome] [varchar](200) NULL,
	[IsDialyzerDiscard] [bit] NULL,
	[IsSubmitted] [bit] NULL,
	[IsSubmittedOn] [datetime] NULL,
	[CheckedByName] [varchar](200) NULL,
	[VerifiedByName] [varchar](200) NULL,
	[SignatoryName_1] [varchar](200) NULL,
	[SignatoryName_2] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_HemodialysisRecord] PRIMARY KEY CLUSTERED 
(
	[HemodialysisRecordId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[NewItemHAMS]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NewItemHAMS](
	[ItemIdNew] [int] NULL,
	[S/N] [int] NULL,
	[DepartmentName] [varchar](50) NULL,
	[ServiceDeptId] [int] NULL,
	[ServDept] [varchar](50) NULL,
	[ItemName] [varchar](max) NULL,
	[Price] [float] NULL,
	[NewPrice] [float] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OPPatients]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OPPatients](
	[OPPatientId] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[DateOfBirth] [datetime] NULL,
	[Age] [varchar](50) NULL,
	[Gender] [varchar](50) NULL,
	[VillageCity] [varchar](50) NULL,
	[Taluka] [varchar](50) NULL,
	[District] [varchar](50) NULL,
	[State] [varchar](50) NULL,
	[Country] [varchar](50) NULL,
	[IsActive] [bit] NULL,
	[IsEMRPatient] [bit] NULL,
 CONSTRAINT [PK_OPPatients] PRIMARY KEY CLUSTERED 
(
	[OPPatientId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OT_TXN_BookingDetails]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OT_TXN_BookingDetails](
	[OTBookingId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NULL,
	[BookedForDate] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[SurgeryType] [varchar](50) NULL,
	[Diagnosis] [varchar](400) NULL,
	[ProcedureType] [varchar](50) NULL,
	[AnesthesiaType] [varchar](30) NULL,
	[Remarks] [varchar](400) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancellationRemarks] [varchar](400) NULL,
	[ConsentFormPath] [varchar](400) NULL,
	[PACFormPath] [varchar](400) NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[OTBookingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OT_TXN_CheckListInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OT_TXN_CheckListInfo](
	[CheckListId] [int] IDENTITY(1,1) NOT NULL,
	[OTBookingId] [int] NOT NULL,
	[ChekListItemName] [varchar](100) NULL,
	[ItemValue] [bit] NOT NULL,
	[Itemdetails] [varchar](400) NULL,
 CONSTRAINT [PK_CheckListId] PRIMARY KEY CLUSTERED 
(
	[CheckListId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OT_TXN_OtTeamsInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OT_TXN_OtTeamsInfo](
	[OTTeamId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NOT NULL,
	[OTBookingId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientVisitId] [int] NULL,
	[RoleType] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[OTTeamId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OT_TXN_Summary]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OT_TXN_Summary](
	[OTSummaryId] [int] IDENTITY(1,1) NOT NULL,
	[OTTeamId] [int] NOT NULL,
	[OTBookingId] [int] NOT NULL,
	[PreOperationDiagnosis] [varchar](400) NULL,
	[PostOperationDiagnosis] [varchar](400) NULL,
	[Anesthesia] [varchar](100) NULL,
	[OTCharge] [float] NULL,
	[OTDescription] [varchar](400) NULL,
	[Category] [varchar](100) NULL,
	[SignatureOfNurse] [varchar](400) NULL,
PRIMARY KEY CLUSTERED 
(
	[OTSummaryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_Appointment]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_Appointment](
	[AppointmentId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[FirstName] [varchar](30) NOT NULL,
	[LastName] [varchar](30) NOT NULL,
	[Gender] [varchar](10) NULL,
	[ContactNumber] [varchar](20) NULL,
	[ProviderName] [varchar](70) NULL,
	[AppointmentType] [varchar](20) NOT NULL,
	[AppointmentDate] [datetime] NULL,
	[AppointmentTime] [time](7) NULL,
	[ProviderId] [int] NULL,
	[AppointmentStatus] [varchar](15) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[Reason] [varchar](50) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
	[CancelledRemarks] [nvarchar](500) NULL,
	[DepartmentId] [int] NULL,
	[MiddleName] [varchar](30) NULL,
	[Age] [varchar](5) NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PAT_Appointment] PRIMARY KEY CLUSTERED 
(
	[AppointmentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_CFG_MembershipType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_CFG_MembershipType](
	[MembershipTypeId] [int] IDENTITY(1,1) NOT NULL,
	[MembershipTypeName] [varchar](50) NOT NULL,
	[DiscountPercent] [float] NOT NULL,
	[Description] [varchar](200) NULL,
	[ExpiryMonths] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[CommunityName] [varchar](200) NULL,
 CONSTRAINT [PK_PAT_CFG_MembershipType] PRIMARY KEY CLUSTERED 
(
	[MembershipTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Membership_Community] UNIQUE NONCLUSTERED 
(
	[MembershipTypeName] ASC,
	[CommunityName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_HealthCardInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_HealthCardInfo](
	[PatHealthCardId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[InfoOnCardJSON] [nvarchar](4000) NULL,
	[BillingDate] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[Remarks] [varchar](200) NULL,
 CONSTRAINT [PK_PAT_HealthCardInfo] PRIMARY KEY CLUSTERED 
(
	[PatHealthCardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_NeighbourhoodCardDetail]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_NeighbourhoodCardDetail](
	[NeighbourhoodCardId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientCode] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_NeighbourhoodCardId] PRIMARY KEY CLUSTERED 
(
	[NeighbourhoodCardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_PatientAddress]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientAddress](
	[PatientAddressId] [int] IDENTITY(1,1) NOT NULL,
	[PatientID] [int] NOT NULL,
	[AddressType] [varchar](10) NOT NULL,
	[Street1] [varchar](50) NOT NULL,
	[Street2] [varchar](50) NULL,
	[CountrySubDivisionId] [int] NULL,
	[City] [varchar](50) NULL,
	[ZipCode] [varchar](10) NULL,
	[CountryId] [int] NULL,
 CONSTRAINT [PK_PAT_PatientAddress] PRIMARY KEY CLUSTERED 
(
	[PatientAddressId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_PatientFiles]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientFiles](
	[PatientFileId] [bigint] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[ROWGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[FileType] [varchar](50) NULL,
	[Description] [varchar](200) NULL,
	[FileName] [varchar](200) NULL,
	[FileNo] [int] NULL,
	[Title] [varchar](200) NULL,
	[FileExtention] [varchar](50) NULL,
	[UploadedOn] [datetime] NULL,
	[UploadedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[ImageFullPath] [varchar](500) NULL,
	[FileBinaryData] [varbinary](max) NULL,
 CONSTRAINT [PK_PAT_PatientFiles] PRIMARY KEY CLUSTERED 
(
	[PatientFileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ROWGUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_PatientGurantorInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientGurantorInfo](
	[PatientGurantorInfo] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[PatientRelationship] [varchar](30) NULL,
	[GuarantorName] [varchar](70) NULL,
	[GuarantorGender] [varchar](10) NULL,
	[GuarantorCountryId] [int] NULL,
	[GuarantorPhoneNumber] [varchar](20) NULL,
	[GuarantorDateOfBirth] [datetime] NULL,
	[GuarantorStreet1] [varchar](50) NULL,
	[GuarantorStreet2] [varchar](50) NULL,
	[GuarantorCity] [varchar](50) NULL,
	[GuarantorCountrySubDivisionId] [int] NULL,
	[GuarantorZIPCode] [varchar](10) NULL,
	[GuarantorSelf] [bit] NULL,
 CONSTRAINT [PK_PAT_PatientGurantorInfo] PRIMARY KEY CLUSTERED 
(
	[PatientId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_PatientInsuranceInfo]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientInsuranceInfo](
	[PatientInsuranceInfoId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[InsuranceNumber] [varchar](50) NULL,
	[InsuranceName] [varchar](50) NULL,
	[CardNumber] [varchar](50) NULL,
	[SubscriberFirstName] [varchar](30) NULL,
	[SubscriberLastName] [varchar](30) NULL,
	[SubscriberGender] [varchar](10) NULL,
	[SubscriberDOB] [datetime] NULL,
	[SubscriberIDCardNumber] [varchar](20) NULL,
	[SubscriberIDCardType] [int] NULL,
	[InitialBalance] [float] NOT NULL,
	[CurrentBalance] [float] NOT NULL,
	[InsuranceProviderId] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IMISCode] [varchar](50) NULL,
	[Ins_HasInsurance] [bit] NULL,
	[Ins_NshiNumber] [varchar](20) NULL,
	[Ins_InsuranceBalance] [float] NULL,
	[Ins_InsuranceProviderId] [int] NULL,
	[Ins_IsFamilyHead] [bit] NULL,
	[Ins_FamilyHeadNshi] [varchar](20) NULL,
	[Ins_FamilyHeadName] [varchar](100) NULL,
	[Ins_IsFirstServicePoint] [bit] NULL,
 CONSTRAINT [PK_PAT_PatientInsuranceInfo] PRIMARY KEY CLUSTERED 
(
	[PatientInsuranceInfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_PatientKinOrEmergencyContacts]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientKinOrEmergencyContacts](
	[PatientKinOrEmergencyContactId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[KinContactType] [varchar](30) NULL,
	[KinFirstName] [varchar](30) NULL,
	[KinLastName] [varchar](30) NULL,
	[KinPhoneNumber] [varchar](20) NULL,
	[KinComment] [varchar](200) NULL,
	[RelationShip] [varchar](200) NULL,
 CONSTRAINT [PK_PAT_PatientKinOrEmergencyContacts] PRIMARY KEY CLUSTERED 
(
	[PatientKinOrEmergencyContactId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_PatientMembership]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_PatientMembership](
	[PatientMembershipId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[MembershipTypeId] [int] NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_PAT_PatientMembership] PRIMARY KEY CLUSTERED 
(
	[PatientMembershipId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAT_SSU_Information]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAT_SSU_Information](
	[SSU_InfoId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[TargetGroupId] [int] NOT NULL,
	[TargetGroup] [varchar](255) NOT NULL,
	[TG_CertificateType] [varchar](255) NULL,
	[TG_CertificateNo] [nvarchar](255) NULL,
	[IncomeSource] [varchar](255) NULL,
	[PatFamilyFinancialStatus] [varchar](255) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[SSU_InfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_BIL_Transaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_BIL_Transaction](
	[BilTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[CounterId] [int] NULL,
	[PaidDate] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[TotalQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountPercentage] [float] NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[VATPercentage] [float] NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[PaidAmount] [decimal](16, 4) NULL,
	[AmountFromDeposit] [decimal](16, 4) NULL,
	[CreditAmount] [decimal](18, 0) NULL,
	[BilStatus] [varchar](50) NULL,
	[PrintCount] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_Bil_Transaction] PRIMARY KEY CLUSTERED 
(
	[BilTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_BIL_TransactionItem]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_BIL_TransactionItem](
	[BilTransactionItemId] [int] IDENTITY(1,1) NOT NULL,
	[BilTransactionId] [int] NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](100) NULL,
	[BatchNo] [varchar](100) NULL,
	[PatientId] [int] NULL,
	[CounterId] [int] NULL,
	[ItemPrice] [decimal](16, 4) NULL,
	[SellingPrice] [decimal](16, 4) NULL,
	[Quantity] [float] NULL,
	[FreeQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountPercentage] [float] NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[VATPercentage] [float] NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[PaidAmount] [decimal](16, 4) NULL,
	[PaidDate] [datetime] NULL,
	[TransactionType] [varchar](100) NULL,
	[ReferenceId] [int] NULL,
	[BillStatus] [varchar](50) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_PHRM_Bil_TransactionItems] PRIMARY KEY CLUSTERED 
(
	[BilTransactionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_CFG_FiscalYears]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_CFG_FiscalYears](
	[FiscalYearId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearName] [varchar](20) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[NpFiscalYearName] [varchar](20) NULL,
	[IsClosed] [bit] NULL,
	[ClosedOn] [datetime] NULL,
	[ClosedBy] [int] NULL,
 CONSTRAINT [PK_PHRM_CFG_FiscalYear] PRIMARY KEY CLUSTERED 
(
	[FiscalYearId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_PHRM_CFG_FiscalYear] UNIQUE NONCLUSTERED 
(
	[FiscalYearName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_DispensaryStock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_DispensaryStock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[DispensaryId] [int] NULL,
	[ItemId] [int] NULL,
	[AvailableQuantity] [float] NULL,
	[MRP] [decimal](18, 4) NULL,
	[Price] [decimal](18, 4) NULL,
	[ExpiryDate] [datetime] NULL,
	[BatchNo] [varchar](50) NULL,
	[GoodReceiptItemId] [int] NULL,
 CONSTRAINT [PK_PHRM_DispensaryStock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_ExpiryDate_BatchNo_History]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_ExpiryDate_BatchNo_History](
	[PHRMExpBatchHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[StoreStockId] [int] NULL,
	[OldExpiryDate] [datetime] NULL,
	[OldBatchNo] [varchar](100) NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
 CONSTRAINT [PK_Phrm_Exp_Batch_History] PRIMARY KEY CLUSTERED 
(
	[PHRMExpBatchHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_History_Item]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_History_Item](
	[HistoryItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](200) NOT NULL,
	[ItemCode] [nvarchar](100) NULL,
	[CompanyId] [int] NULL,
	[SupplierId] [int] NULL,
	[ItemTypeId] [int] NULL,
	[UOMId] [int] NULL,
	[StandardPrice] [decimal](16, 4) NULL,
	[SellingPrice] [decimal](16, 4) NULL,
	[ReOrderQuantity] [float] NULL,
	[MinStockQuantity] [float] NULL,
	[BudgetedQuantity] [float] NULL,
	[VATPercentage] [float] NULL,
	[IsVATApplicable] [bit] NULL,
	[IsActive] [bit] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_History_Item] PRIMARY KEY CLUSTERED 
(
	[HistoryItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_History_StockBatchExpiry]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_History_StockBatchExpiry](
	[PHRMStockBatchExpiryHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[StockId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[StartDate] [datetime2](3) NULL,
	[EndDate] [datetime2](3) NULL,
	[CreatedBy] [int] NOT NULL,
 CONSTRAINT [PHRM_StockHistory_BatchExpiry] PRIMARY KEY CLUSTERED 
(
	[PHRMStockBatchExpiryHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_History_StockMRP]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_History_StockMRP](
	[PHRMStockMRPHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[StockId] [int] NOT NULL,
	[StartDate] [datetime2](3) NULL,
	[EndDate] [datetime2](3) NULL,
	[MRP] [decimal](18, 4) NULL,
	[CreatedBy] [int] NOT NULL,
 CONSTRAINT [PHRM_StockHistory_MRP] PRIMARY KEY CLUSTERED 
(
	[PHRMStockMRPHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MAP_GenericDosaseNFreq]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MAP_GenericDosaseNFreq](
	[GenericDosageMapId] [int] IDENTITY(1,1) NOT NULL,
	[GenericId] [int] NULL,
	[GenericName] [varchar](400) NULL,
	[Dosage] [varchar](200) NULL,
	[Route] [varchar](100) NULL,
	[Frequency] [float] NULL,
	[FreqInWords] [varchar](200) NULL,
 CONSTRAINT [PK_PHRM_MAP_GenericDosaseNFreq] PRIMARY KEY CLUSTERED 
(
	[GenericDosageMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Category]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Category](
	[CategoryId] [int] IDENTITY(1,1) NOT NULL,
	[CategoryName] [varchar](100) NOT NULL,
	[Description] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_PHRM_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Company]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Company](
	[CompanyId] [int] IDENTITY(1,1) NOT NULL,
	[CompanyName] [varchar](200) NOT NULL,
	[ContactNo] [nvarchar](20) NULL,
	[Description] [varchar](200) NULL,
	[ContactAddress] [nvarchar](200) NULL,
	[Email] [nvarchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[Code] [nvarchar](50) NULL,
 CONSTRAINT [PK_PHRM_MST_Company] PRIMARY KEY CLUSTERED 
(
	[CompanyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Counter]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Counter](
	[CounterId] [int] IDENTITY(1,1) NOT NULL,
	[CounterName] [varchar](50) NOT NULL,
	[CounterType] [varchar](50) NULL,
	[BeginningDate] [datetime] NULL,
	[ClosingDate] [datetime] NULL,
	[StoreId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_MST_Counter] PRIMARY KEY CLUSTERED 
(
	[CounterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Credit_Organization]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Credit_Organization](
	[OrganizationId] [int] IDENTITY(1,1) NOT NULL,
	[OrganizationName] [varchar](50) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Dispensary]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Dispensary](
	[DispensaryId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[Address] [varchar](200) NULL,
	[ContactNo] [varchar](20) NULL,
	[Email] [varchar](100) NULL,
	[DispensaryLabel] [varchar](100) NULL,
	[DispensaryDescription] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsActive] [bit] NULL,
	[PermissionId] [int] NULL,
	[Type] [varchar](20) NULL,
PRIMARY KEY CLUSTERED 
(
	[DispensaryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Generic]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Generic](
	[GenericId] [int] IDENTITY(1,1) NOT NULL,
	[GenericName] [nvarchar](200) NULL,
	[GeneralCategory] [nvarchar](200) NULL,
	[TherapeuticCategory] [nvarchar](200) NULL,
	[Counseling] [nvarchar](500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[CategoryId] [int] NULL,
	[IsAllergen] [bit] NULL,
 CONSTRAINT [PK_PHRM_MST_Generic] PRIMARY KEY CLUSTERED 
(
	[GenericId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_ItemType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_ItemType](
	[ItemTypeId] [int] IDENTITY(1,1) NOT NULL,
	[CategoryId] [int] NULL,
	[ItemTypeName] [varchar](100) NOT NULL,
	[Description] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_PHRM_MST_ItemType] PRIMARY KEY CLUSTERED 
(
	[ItemTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_PackingType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_PackingType](
	[PackingTypeId] [int] IDENTITY(1,1) NOT NULL,
	[PackingName] [varchar](100) NOT NULL,
	[PackingQuantity] [float] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[PackingTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Rack]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Rack](
	[RackId] [int] IDENTITY(1,1) NOT NULL,
	[ParentId] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[Description] [text] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[LocationId] [int] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_SalesCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_SalesCategory](
	[SalesCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NULL,
	[Description] [varchar](255) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsBatchApplicable] [bit] NULL,
	[IsExpiryApplicable] [bit] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[SalesCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_StockBarcode]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_StockBarcode](
	[BarcodeId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[MRP] [decimal](18, 4) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[BarcodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_Supplier]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_Supplier](
	[SupplierId] [int] IDENTITY(1,1) NOT NULL,
	[SupplierName] [varchar](200) NOT NULL,
	[ContactNo] [nvarchar](20) NULL,
	[Description] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[PANNumber] [nvarchar](50) NULL,
	[ContactAddress] [nvarchar](200) NULL,
	[Email] [nvarchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[CreditPeriod] [int] NULL,
	[AdditionalContactInformation] [varchar](400) NULL,
	[IsLedgerRequired] [bit] NULL,
	[DDA] [varchar](50) NULL,
 CONSTRAINT [PK_PHRM_MST_Supplier] PRIMARY KEY CLUSTERED 
(
	[SupplierId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_MST_TAX]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_MST_TAX](
	[TAXId] [int] IDENTITY(1,1) NOT NULL,
	[TAXName] [varchar](100) NOT NULL,
	[TAXPercentage] [float] NULL,
	[Description] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_MST_TAX] PRIMARY KEY CLUSTERED 
(
	[TAXId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_NarcoticSaleRecord]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_NarcoticSaleRecord](
	[NarcoticRecordId] [int] IDENTITY(1,1) NOT NULL,
	[BuyerName] [varchar](200) NULL,
	[EmployeId] [int] NULL,
	[ItemId] [int] NULL,
	[Quantity] [int] NULL,
	[DoctorName] [varchar](200) NULL,
	[NMCNumber] [varchar](200) NULL,
	[Batch] [varchar](200) NULL,
	[Refill] [int] NULL,
	[ImgUrl] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [date] NULL,
	[InvoiceId] [int] NULL,
	[InvoiceItemId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[NarcoticRecordId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_Prescription]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_Prescription](
	[PrescriptionId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NULL,
	[ProviderId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ProviderFullName] [varchar](100) NULL,
	[IsInPatient] [bit] NULL,
	[PrescriptionStatus] [varchar](20) NULL,
	[Notes] [varchar](400) NULL,
 CONSTRAINT [PK_PHRM_Prescription] PRIMARY KEY CLUSTERED 
(
	[PrescriptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_PrescriptionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_PrescriptionItems](
	[PrescriptionItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[Quantity] [float] NULL,
	[Frequency] [int] NULL,
	[StartingDate] [datetime] NULL,
	[HowManyDays] [int] NULL,
	[Notes] [varchar](300) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[PatientId] [int] NULL,
	[ProviderId] [int] NULL,
	[OrderStatus] [varchar](30) NULL,
	[Dosage] [varchar](50) NULL,
	[GenericId] [int] NULL,
	[DiagnosisId] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
 CONSTRAINT [PK_PHRM_PrescriptionItems] PRIMARY KEY CLUSTERED 
(
	[PrescriptionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_PurchaseOrder]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_PurchaseOrder](
	[PurchaseOrderId] [int] IDENTITY(1,1) NOT NULL,
	[SupplierId] [int] NULL,
	[PODate] [datetime] NULL,
	[POStatus] [varchar](100) NULL,
	[Subtotal] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[DeliveryAddress] [varchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[Remarks] [nvarchar](500) NULL,
	[TermsId] [int] NULL,
	[PurchaseNo] [int] NULL,
	[FiscalYearId] [int] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
	[PurchaseOrderNo] [int] NULL,
 CONSTRAINT [PK_PHRM_PurchaseOrder] PRIMARY KEY CLUSTERED 
(
	[PurchaseOrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_PurchaseOrderItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_PurchaseOrderItems](
	[PurchaseOrderItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[PurchaseOrderId] [int] NULL,
	[Quantity] [float] NULL,
	[StandaredPrice] [decimal](16, 4) NULL,
	[ReceivedQuantity] [float] NULL,
	[PendingQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[DeliveryDays] [int] NULL,
	[AuthorizedRemark] [nvarchar](500) NULL,
	[Remarks] [nvarchar](500) NULL,
	[POItemStatus] [varchar](20) NULL,
	[AuthorizedBy] [int] NULL,
	[AuthorizedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsCancel] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
 CONSTRAINT [PK_PHRM_PurchaseOrderItems] PRIMARY KEY CLUSTERED 
(
	[PurchaseOrderItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_Requisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_Requisition](
	[RequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[VisitId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[Status] [varchar](50) NULL,
	[ReferenceId] [varchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_Requisition] PRIMARY KEY CLUSTERED 
(
	[RequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_RequisitionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_RequisitionItems](
	[RequisitionItemId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[Quantity] [int] NOT NULL,
 CONSTRAINT [PK_PHRM_RequisitionItems] PRIMARY KEY CLUSTERED 
(
	[RequisitionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_ReturnToSupplier]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_ReturnToSupplier](
	[ReturnToSupplierId] [int] IDENTITY(1,1) NOT NULL,
	[SupplierId] [int] NOT NULL,
	[ReturnDate] [datetime] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[CreditNoteId] [varchar](200) NULL,
	[CreditNotePrintId] [int] NULL,
	[Remarks] [nvarchar](255) NULL,
	[IsTransferredToACC] [bit] NULL,
	[ReturnStatus] [int] NULL,
	[GoodReceiptId] [int] NULL,
 CONSTRAINT [PK_PHRM_ReturnToSupplier_1] PRIMARY KEY CLUSTERED 
(
	[ReturnToSupplierId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_SaleItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_SaleItems](
	[SaleItemId] [int] IDENTITY(1,1) NOT NULL,
	[PrescriptionItemsId] [int] NULL,
	[CompanyName] [varchar](100) NULL,
	[PatientId] [int] NULL,
	[IsInPatient] [bit] NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](100) NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime] NULL,
	[ManufactureDate] [datetime] NULL,
	[Quantity] [float] NULL,
	[SellingPrice] [decimal](16, 4) NULL,
	[FreeQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[VATPercentage] [float] NULL,
	[DiscountPercentage] [float] NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[UOMName] [nvarchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_SaleItems] PRIMARY KEY CLUSTERED 
(
	[SaleItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_SaleItemsReturn]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_SaleItemsReturn](
	[SaleItemReturnId] [int] IDENTITY(1,1) NOT NULL,
	[SaleItemId] [int] NULL,
	[PatientId] [int] NULL,
	[IsInPatient] [bit] NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](100) NULL,
	[ItemName] [varchar](200) NULL,
	[Quantity] [float] NULL,
	[SellingPrice] [decimal](16, 4) NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountPercentage] [float] NULL,
	[VATPercentage] [float] NULL,
	[ReturnAmount] [decimal](16, 4) NULL,
	[ReturnRemarks] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_SaleItemsReturn] PRIMARY KEY CLUSTERED 
(
	[SaleItemReturnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_Stock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[AvailableQuantity] [float] NULL,
	[MRP] [float] NULL,
	[BatchNo] [varchar](max) NULL,
	[ExpiryDate] [datetime] NULL,
	[Price] [float] NULL,
 CONSTRAINT [PK_PHRM_Stock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_StockManage]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StockManage](
	[StockManageId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](100) NULL,
	[MRP] [decimal](16, 4) NULL,
	[Price] [decimal](16, 4) NULL,
	[Quantity] [float] NULL,
	[StockTxnItemId] [int] NULL,
	[VATPercentage] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[ExpiryDate] [datetime] NULL,
	[InOut] [varchar](10) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[Remark] [varchar](max) NULL,
 CONSTRAINT [PK_PHRM_StockManage] PRIMARY KEY CLUSTERED 
(
	[StockManageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_StockTxnItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StockTxnItems](
	[StockTxnItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime] NULL,
	[Quantity] [float] NULL,
	[FreeQuantity] [float] NULL,
	[Price] [decimal](18, 4) NULL,
	[DiscountPercentage] [float] NULL,
	[VATPercentage] [float] NULL,
	[SubTotal] [decimal](18, 4) NULL,
	[TotalAmount] [decimal](18, 4) NULL,
	[InOut] [varchar](20) NULL,
	[ReferenceNo] [int] NULL,
	[ReferenceItemCreatedOn] [datetime] NULL,
	[TransactionType] [varchar](30) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[MRP] [decimal](18, 4) NULL,
	[GoodsReceiptItemId] [int] NULL,
	[CCCharge] [float] NULL,
	[DispensaryId] [int] NOT NULL,
	[IsTransferredToACC] [bit] NULL,
 CONSTRAINT [PK_PHRM_StockTxnItems] PRIMARY KEY CLUSTERED 
(
	[StockTxnItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_StockTxnItems_MRPHistory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StockTxnItems_MRPHistory](
	[PHRMStockTxnItemMRPHistoryId] [int] IDENTITY(1,1) NOT NULL,
	[PHRMStockTxnItemId] [int] NULL,
	[MRP] [decimal](18, 4) NULL,
	[CreatedBy] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[LocationId] [int] NULL,
	[oldMRP] [decimal](18, 4) NULL,
	[StoreStockId] [int] NULL,
 CONSTRAINT [PK_PHRM_StockTxnItems_MRPHistory] PRIMARY KEY CLUSTERED 
(
	[PHRMStockTxnItemMRPHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_StoreDispatchItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StoreDispatchItems](
	[DispatchItemsId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionItemId] [int] NULL,
	[DispatchedQuantity] [float] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ReceivedBy] [varchar](100) NULL,
	[ItemId] [int] NULL,
	[DispatchId] [int] NULL,
	[TargetStoreId] [int] NOT NULL,
	[RequisitionId] [int] NULL,
	[DispatchedDate] [datetime2](3) NULL,
	[ItemRemarks] [varchar](50) NULL,
	[Remarks] [varchar](100) NULL,
	[ReceivedRemarks] [varchar](100) NULL,
	[ReceivedById] [int] NULL,
	[ReceivedOn] [datetime2](3) NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[CostPrice] [decimal](18, 4) NULL,
	[MRP] [decimal](18, 4) NULL,
	[SourceStoreId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[DispatchItemsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_StoreRequisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StoreRequisition](
	[RequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionDate] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[RequisitionStatus] [varchar](20) NULL,
	[StoreId] [int] NOT NULL,
	[RequisitionNo] [int] NOT NULL,
	[ApprovedBy] [int] NULL,
	[ApprovedOn] [datetime2](3) NULL,
	[FiscalYearId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[RequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_StoreRequisitionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_StoreRequisitionItems](
	[RequisitionItemId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NULL,
	[Quantity] [float] NULL,
	[RequisitionId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[AuthorizedOn] [datetime] NULL,
	[AuthorizedBy] [int] NULL,
	[ReceivedQuantity] [float] NULL,
	[PendingQuantity] [float] NULL,
	[AuthorizedRemark] [nvarchar](500) NULL,
	[RequisitionItemStatus] [varchar](20) NULL,
	[Remark] [text] NULL,
	[CancelQuantity] [float] NULL,
	[CancelRemarks] [nvarchar](400) NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime2](3) NULL,
PRIMARY KEY CLUSTERED 
(
	[RequisitionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_DispensaryStock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_DispensaryStock](
	[DispensaryStockId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NOT NULL,
	[StockId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[AvailableQuantity] [float] NOT NULL,
	[UnConfirmedQuantity] [float] NOT NULL,
	[CostPrice] [decimal](18, 4) NULL,
	[MRP] [decimal](18, 4) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
 CONSTRAINT [PK_PHRM_TXN_DispensaryStock] PRIMARY KEY CLUSTERED 
(
	[DispensaryStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_DispensaryStockTransaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction](
	[DispensaryStockTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NOT NULL,
	[StockId] [int] NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[InOut] [varchar](10) NOT NULL,
	[TransactionType] [varchar](50) NOT NULL,
	[TransactionDate] [datetime2](3) NOT NULL,
	[Quantity] [float] NOT NULL,
	[CostPrice] [decimal](18, 4) NULL,
	[MRP] [decimal](18, 4) NULL,
	[ReferenceNo] [int] NULL,
	[Remarks] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[IsTransferedToAcc] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NULL,
 CONSTRAINT [PK_PHRM_TXN_DispensaryStockTransaction] PRIMARY KEY CLUSTERED 
(
	[DispensaryStockTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_Stock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[ItemId] [int] NOT NULL,
	[BatchNo] [varchar](100) NULL,
	[ExpiryDate] [datetime2](3) NULL,
	[AvailableQuantity] [float] NOT NULL,
	[CostPrice] [decimal](18, 4) NULL,
	[MRP] [decimal](18, 4) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
	[UnConfirmedQuantity] [float] NOT NULL,
	[StoreId] [int] NULL,
 CONSTRAINT [PK_PHRM_TXN_Stock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_StoreStock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_StoreStock](
	[StoreStockId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NULL,
	[StockId] [int] NULL,
	[ItemId] [int] NULL,
	[AvailableQuantity] [float] NOT NULL,
	[UnConfirmedQty_In] [float] NOT NULL,
	[UnConfirmedQty_Out] [float] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_PHRM_TXN_StoreStock] PRIMARY KEY CLUSTERED 
(
	[StoreStockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_SupplierLedger]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_SupplierLedger](
	[LedgerId] [int] IDENTITY(1,1) NOT NULL,
	[SupplierId] [int] NOT NULL,
	[CreditAmount] [decimal](18, 4) NOT NULL,
	[DebitAmount] [decimal](18, 4) NOT NULL,
	[BalanceAmount] [decimal](18, 4) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[LedgerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_TXN_SupplierLedgerTransaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction](
	[LedgerTransactionId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[LedgerId] [int] NOT NULL,
	[SupplierId] [int] NOT NULL,
	[DebitAmount] [decimal](18, 4) NULL,
	[CreditAmount] [decimal](18, 4) NULL,
	[Remarks] [varchar](200) NULL,
	[TransactionType] [varchar](30) NOT NULL,
	[ReferenceNo] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[LedgerTransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_WriteOff]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_WriteOff](
	[WriteOffId] [int] IDENTITY(1,1) NOT NULL,
	[WriteOffDate] [datetime] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountAmount] [decimal](16, 4) NULL,
	[VATAmount] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[WriteOffRemark] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsTransferredToACC] [bit] NULL,
	[StoreId] [int] NULL,
	[WriteOffNo] [int] NULL,
 CONSTRAINT [PK_PHRM_WriteOff] PRIMARY KEY CLUSTERED 
(
	[WriteOffId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PHRM_WriteOffItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PHRM_WriteOffItems](
	[WriteOffItemId] [int] IDENTITY(1,1) NOT NULL,
	[WriteOffId] [int] NOT NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](50) NULL,
	[ItemPrice] [decimal](16, 4) NULL,
	[WriteOffQuantity] [float] NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[DiscountPercentage] [decimal](16, 4) NULL,
	[VATPercentage] [decimal](16, 4) NULL,
	[TotalAmount] [decimal](16, 4) NULL,
	[WriteOffItemRemark] [nvarchar](500) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PHRM_WriteOffItems] PRIMARY KEY CLUSTERED 
(
	[WriteOffItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_AttendanceDailyTimeRecord]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_AttendanceDailyTimeRecord](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[EmployeeName] [nvarchar](350) NULL,
	[RecordDateTime] [nvarchar](350) NULL,
 CONSTRAINT [PK_PROLL_AttendanceDailyTimeRecord] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_DailyMuster]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_DailyMuster](
	[DailyMusterId] [bigint] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [bigint] NOT NULL,
	[Present] [bit] NOT NULL,
	[AttStatus] [nvarchar](50) NULL,
	[ColorCode] [nvarchar](50) NULL,
	[TimeIn] [time](7) NULL,
	[TimeOut] [time](7) NULL,
	[Day] [int] NULL,
	[Month] [int] NULL,
	[Year] [bigint] NULL,
	[HoursInDay] [decimal](18, 0) NULL,
 CONSTRAINT [PK_PAY_DailyMuster] PRIMARY KEY CLUSTERED 
(
	[DailyMusterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_EmpLeave]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_EmpLeave](
	[EmpLeaveId] [int] IDENTITY(1,1) NOT NULL,
	[LeaveRuleId] [int] NOT NULL,
	[Date] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[RequestedTo] [int] NOT NULL,
	[ApprovedBy] [int] NULL,
	[ApprovedOn] [datetime] NULL,
	[LeaveStatus] [nvarchar](50) NOT NULL,
	[EmployeeId] [int] NOT NULL,
	[CancelledBy] [int] NULL,
	[CancelledOn] [datetime] NULL,
 CONSTRAINT [PK_PROLL_EmpLeave] PRIMARY KEY CLUSTERED 
(
	[EmpLeaveId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_MST_Holidays]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_MST_Holidays](
	[HolidayId] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYearId] [int] NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[ApprovedBy] [int] NOT NULL,
	[Date] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PROLL_MST_Holidays] PRIMARY KEY CLUSTERED 
(
	[HolidayId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_MST_LeaveCategory]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_MST_LeaveCategory](
	[LeaveCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[LeaveCategoryName] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NULL,
	[CategoryCode] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_PROLL_MST_LeaveCategory] PRIMARY KEY CLUSTERED 
(
	[LeaveCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_MST_LeaveRules]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_MST_LeaveRules](
	[LeaveRuleId] [int] IDENTITY(1,1) NOT NULL,
	[LeaveCategoryId] [int] NOT NULL,
	[Year] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsApproved] [bit] NULL,
	[ApprovedBy] [int] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[PayPercent] [float] NULL,
	[Days] [int] NOT NULL,
 CONSTRAINT [PK_PROLL_MST_Leave] PRIMARY KEY CLUSTERED 
(
	[LeaveRuleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROLL_MST_WeekendHolidays]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROLL_MST_WeekendHolidays](
	[WeekendHolidayId] [int] IDENTITY(1,1) NOT NULL,
	[Year] [int] NOT NULL,
	[DayName] [nvarchar](50) NULL,
	[Value] [nvarchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ApprovedBy] [int] NULL,
	[IsApproved] [bit] NULL,
	[IsActive] [bit] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[Description] [nvarchar](max) NULL,
 CONSTRAINT [PK_PROLL_MST_WeekendHolidays] PRIMARY KEY CLUSTERED 
(
	[WeekendHolidayId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_CFG_ReportTemplates]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_CFG_ReportTemplates](
	[TemplateId] [int] IDENTITY(1,1) NOT NULL,
	[ModuleName] [varchar](100) NULL,
	[TemplateCode] [nvarchar](50) NULL,
	[TemplateName] [varchar](200) NOT NULL,
	[TemplateHTML] [nvarchar](max) NOT NULL,
	[FooterNote] [nvarchar](2000) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_MST_Template] PRIMARY KEY CLUSTERED 
(
	[TemplateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_MST_FilmType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_MST_FilmType](
	[FilmTypeId] [int] IDENTITY(1,1) NOT NULL,
	[FilmType] [varchar](30) NULL,
	[ImagingTypeId] [int] NULL,
	[FilmTypeDisplayName] [varchar](100) NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[FilmTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_MST_ImagingItem]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_MST_ImagingItem](
	[ImagingItemId] [int] IDENTITY(1,1) NOT NULL,
	[ImagingTypeId] [int] NOT NULL,
	[ProcedureCode] [varchar](9) NULL,
	[ImagingItemName] [varchar](200) NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[TemplateId] [int] NULL,
	[IsValidForReporting] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ImagingItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_MST_ImagingType]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_MST_ImagingType](
	[ImagingTypeId] [int] IDENTITY(1,1) NOT NULL,
	[ImagingTypeName] [varchar](50) NOT NULL,
	[ProcedureCoding] [varchar](2) NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ImagingTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_PatientImagingReport]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_PatientImagingReport](
	[ImagingReportId] [int] IDENTITY(1,1) NOT NULL,
	[ImagingRequisitionId] [int] NULL,
	[PatientId] [int] NULL,
	[PatientVisitId] [int] NULL,
	[ProviderName] [varchar](100) NULL,
	[ImagingTypeId] [int] NULL,
	[ImagingTypeName] [varchar](50) NULL,
	[ImagingItemId] [int] NULL,
	[ImagingItemName] [varchar](200) NULL,
	[ImageFullPath] [varchar](1000) NULL,
	[ImageName] [varchar](max) NULL,
	[ReportText] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[OrderStatus] [varchar](20) NULL,
	[ReportingDoctorId] [int] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ReportTemplateId] [int] NULL,
	[PatientStudyId] [varchar](max) NULL,
	[Signatories] [nvarchar](4000) NULL,
	[Indication] [varchar](max) NULL,
	[RadiologyNo] [varchar](20) NULL,
PRIMARY KEY CLUSTERED 
(
	[ImagingReportId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_PatientImagingRequisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_PatientImagingRequisition](
	[ImagingRequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[PatientVisitId] [int] NULL,
	[PatientId] [int] NULL,
	[ProviderName] [varchar](70) NULL,
	[ImagingTypeId] [int] NULL,
	[ImagingTypeName] [varchar](50) NULL,
	[ImagingItemId] [int] NOT NULL,
	[ImagingItemName] [varchar](200) NULL,
	[ProcedureCode] [varchar](9) NULL,
	[RequisitionRemarks] [varchar](200) NULL,
	[OrderStatus] [varchar](20) NULL,
	[ImagingDate] [datetime] NULL,
	[ProviderId] [int] NULL,
	[BillingStatus] [varchar](20) NULL,
	[Urgency] [varchar](30) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[DiagnosisId] [int] NULL,
	[HasInsurance] [bit] NULL,
	[WardName] [varchar](50) NULL,
	[IsActive] [bit] NOT NULL,
	[IsScanned] [bit] NULL,
	[ScannedBy] [int] NULL,
	[ScannedOn] [datetime] NULL,
	[ScanRemarks] [varchar](400) NULL,
	[BillCancelledBy] [int] NULL,
	[BillCancelledOn] [datetime] NULL,
	[FilmTypeId] [int] NULL,
	[FilmQuantity] [int] NULL,
	[IsReportSaved] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ImagingRequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RAD_ReportingDoctors]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RAD_ReportingDoctors](
	[ReportingDoctorId] [int] IDENTITY(1,1) NOT NULL,
	[DoctorSignatureJSON] [varchar](500) NOT NULL,
	[ImagingTypeId] [int] NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ReportingDoctorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_Application]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_Application](
	[ApplicationId] [int] IDENTITY(1,1) NOT NULL,
	[ApplicationCode] [varchar](20) NULL,
	[ApplicationName] [varchar](40) NOT NULL,
	[Description] [varchar](100) NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ApplicationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Rbac_Application] UNIQUE NONCLUSTERED 
(
	[ApplicationCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Rbac_Application_Name] UNIQUE NONCLUSTERED 
(
	[ApplicationName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_MAP_RolePermission]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_MAP_RolePermission](
	[RolePermissionMapId] [int] IDENTITY(1,1) NOT NULL,
	[RoleId] [int] NULL,
	[PermissionId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[RolePermissionMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_MAP_RolePermission] UNIQUE NONCLUSTERED 
(
	[RoleId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_MAP_UserRole]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_MAP_UserRole](
	[UserRoleMapId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NULL,
	[RoleId] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[UserRoleMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_MAP_UserRole] UNIQUE NONCLUSTERED 
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_Permission]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_Permission](
	[PermissionId] [int] IDENTITY(1,1) NOT NULL,
	[PermissionName] [varchar](100) NOT NULL,
	[Description] [varchar](250) NULL,
	[ApplicationId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_RBAC_Permission] PRIMARY KEY CLUSTERED 
(
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_Permission] UNIQUE NONCLUSTERED 
(
	[ApplicationId] ASC,
	[PermissionName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_Role]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_Role](
	[RoleId] [int] IDENTITY(1,1) NOT NULL,
	[RoleName] [varchar](50) NOT NULL,
	[RoleDescription] [varchar](250) NULL,
	[ApplicationId] [int] NULL,
	[IsSysAdmin] [bit] NULL,
	[IsActive] [bit] NULL,
	[RolePriority] [int] NULL,
	[DefaultRouteId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[RoleType] [varchar](20) NULL,
 CONSTRAINT [PK_RBAC_Role] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_Role] UNIQUE NONCLUSTERED 
(
	[ApplicationId] ASC,
	[RoleName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_RouteConfig]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_RouteConfig](
	[RouteId] [int] IDENTITY(1,1) NOT NULL,
	[RouteName] [varchar](50) NULL,
	[RouteDescription] [varchar](250) NULL,
	[DisplayName] [varchar](50) NOT NULL,
	[UrlFullPath] [varchar](200) NULL,
	[RouterLink] [varchar](50) NULL,
	[PermissionId] [int] NULL,
	[ParentRouteId] [int] NULL,
	[Css] [varchar](50) NULL,
	[DefaultShow] [bit] NULL,
	[DisplaySeq] [int] NULL,
	[IsActive] [bit] NULL,
	[IsSecondaryNavInDropdown] [bit] NULL,
 CONSTRAINT [PK_RBAC_RouteConfig] PRIMARY KEY CLUSTERED 
(
	[RouteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_RouteConfig] UNIQUE NONCLUSTERED 
(
	[UrlFullPath] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RBAC_User]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBAC_User](
	[UserId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[UserName] [varchar](30) NOT NULL,
	[Password] [nvarchar](100) NOT NULL,
	[Email] [varchar](100) NULL,
	[NeedsPasswordUpdate] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[LandingPageRouteId] [int] NULL,
 CONSTRAINT [PK__RBAC_Use__1788CC4CBD1007FE] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_EmployeeId] UNIQUE NONCLUSTERED 
(
	[EmployeeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_User] UNIQUE NONCLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_RBAC_User_Email] UNIQUE NONCLUSTERED 
(
	[Email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ResetVoucherNo207677]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ResetVoucherNo207677](
	[Id] [float] NULL,
	[SectionId] [float] NULL,
	[VoucherId] [float] NULL,
	[TransactionDate] [datetime] NULL,
	[TransactionId] [float] NULL,
	[VoucherNumber] [nvarchar](255) NULL,
	[VoucherSerialNo] [float] NULL,
	[NewVoucherSerialNo] [float] NULL,
	[NewVoucherNumber] [nvarchar](255) NULL,
	[str] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SCH_EmpDayWiseAvailability]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SCH_EmpDayWiseAvailability](
	[EmployeeId] [int] NULL,
	[DayId] [int] NULL,
	[DayName] [nvarchar](10) NULL,
	[IsWorking] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SCH_EmployeeSchedules]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SCH_EmployeeSchedules](
	[EmployeeSCHId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[Date] [date] NULL,
	[DayName] [nvarchar](10) NULL,
	[IsWorkingDay] [bit] NULL,
	[IsPresent] [bit] NULL,
 CONSTRAINT [PK_SCH_EmployeeSchedules] PRIMARY KEY CLUSTERED 
(
	[EmployeeSCHId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SCH_EmployeeShifts]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SCH_EmployeeShifts](
	[EmpShiftId] [int] NOT NULL,
	[EmployeeId] [int] NULL,
	[ShiftName] [nvarchar](10) NULL,
	[StartTime] [time](7) NULL,
	[EndTime] [time](7) NULL,
 CONSTRAINT [PK_SCH_EmployeeShifts] PRIMARY KEY CLUSTERED 
(
	[EmpShiftId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SCH_MAP_EmployeeShift]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SCH_MAP_EmployeeShift](
	[EmployeeShiftMapId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[ShiftId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_SCH_MAP_EmployeeShift] PRIMARY KEY CLUSTERED 
(
	[EmployeeShiftMapId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SCH_MST_Shifts]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SCH_MST_Shifts](
	[ShiftId] [int] IDENTITY(1,1) NOT NULL,
	[ShiftName] [nvarchar](50) NULL,
	[StartTime] [time](7) NULL,
	[EndTime] [time](7) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[TotalHrs] [float] NULL,
	[IsDefault] [bit] NULL,
 CONSTRAINT [PK_SCH_MST_Shifts] PRIMARY KEY CLUSTERED 
(
	[ShiftId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ServiceDepartment_MST_IntegrationName]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceDepartment_MST_IntegrationName](
	[IntegrationNameID] [int] IDENTITY(1,1) NOT NULL,
	[IntegrationName] [nvarchar](50) NULL,
 CONSTRAINT [PK_ServiceDepartment_MST_IntegrationName] PRIMARY KEY CLUSTERED 
(
	[IntegrationNameID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TBL_BillItem_Temp]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBL_BillItem_Temp](
	[DepartmentId] [int] NULL,
	[DepartmentName] [varchar](200) NULL,
	[ServiceDeptId] [int] NULL,
	[ServiceDepartmentName] [varchar](200) NULL,
	[ItemCode] [varchar](20) NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](400) NULL,
	[Price] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Temp_LabNewPrice]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Temp_LabNewPrice](
	[NewItemId] [int] NULL,
	[Department] [varchar](200) NULL,
	[SrvDeptName] [varchar](200) NULL,
	[ItemName] [varchar](400) NULL,
	[NewRate] [float] NULL,
	[IsFoundInOld] [bit] NULL,
	[IsPriceDifferent] [bit] NULL,
	[OldRate] [float] NULL,
	[SrvDeptId] [int] NULL,
	[ItemId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Temp10]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Temp10](
	[Parameter] [varchar](200) NULL,
	[ParameterValue] [varchar](500) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tempRange]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tempRange](
	[RowNum] [bigint] NULL,
	[value] [varchar](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TXN_EmpCashTransaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TXN_EmpCashTransaction](
	[CashTxnId] [int] IDENTITY(1,1) NOT NULL,
	[TransactionType] [varchar](40) NOT NULL,
	[ReferenceNo] [int] NULL,
	[EmployeeId] [int] NOT NULL,
	[InAmount] [float] NULL,
	[OutAmount] [float] NULL,
	[Description] [varchar](400) NULL,
	[TransactionDate] [datetime2](7) NULL,
	[IsActive] [bit] NOT NULL,
	[CounterID] [int] NULL,
 CONSTRAINT [PK_TXN_EmpCashTransactions] PRIMARY KEY CLUSTERED 
(
	[CashTxnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TXN_EmpDueAmount]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TXN_EmpDueAmount](
	[EmployeeDueId] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NOT NULL,
	[LatestDueAmount] [float] NULL,
	[LatestTransactionDate] [datetime2](7) NULL,
 CONSTRAINT [PK_TXN_EmpDueAmounts] PRIMARY KEY CLUSTERED 
(
	[EmployeeDueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TXN_PrintInformation]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TXN_PrintInformation](
	[PrintId] [int] IDENTITY(1,1) NOT NULL,
	[ModuleName] [varchar](100) NULL,
	[DocumentName] [varchar](100) NULL,
	[ReferenceId] [int] NULL,
	[PrintedOn] [datetime] NULL,
	[PrintedBy] [int] NULL,
	[PrintCount] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TXN_Sms]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TXN_Sms](
	[SmsId] [int] IDENTITY(1,1) NOT NULL,
	[SmsCounter] [int] NULL,
	[PatientId] [int] NULL,
	[DoctorId] [int] NULL,
	[SmsInformation] [varchar](255) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SmsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TXN_Verification]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TXN_Verification](
	[VerificationId] [int] IDENTITY(1,1) NOT NULL,
	[VerifiedBy] [int] NOT NULL,
	[VerifiedOn] [datetime] NOT NULL,
	[CurrentVerificationLevel] [int] NOT NULL,
	[MaxVerificationLevel] [int] NOT NULL,
	[VerificationStatus] [nvarchar](50) NOT NULL,
	[ParentVerificationId] [int] NULL,
	[VerificationRemarks] [varchar](400) NULL,
	[CurrentVerificationLevelCount] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[VerificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UpdatedBillItemPriceTable]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UpdatedBillItemPriceTable](
	[billitemId] [int] NOT NULL,
	[Department] [nvarchar](250) NULL,
	[Itemname] [nvarchar](250) NULL,
	[Price] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VACC_PatientVaccineDetail]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VACC_PatientVaccineDetail](
	[PatientVaccineId] [int] IDENTITY(1,1) NOT NULL,
	[VaccineId] [int] NOT NULL,
	[PatientId] [int] NOT NULL,
	[DoseNumber] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[VaccineDate] [datetime] NOT NULL,
	[Remarks] [varchar](200) NULL,
 CONSTRAINT [PK_Patient_VaccineId] PRIMARY KEY CLUSTERED 
(
	[PatientVaccineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VACC_Vaccines]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VACC_Vaccines](
	[VaccineId] [int] IDENTITY(1,1) NOT NULL,
	[VaccineName] [varchar](100) NOT NULL,
	[NumberOfDoses] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_VaccineId] PRIMARY KEY CLUSTERED 
(
	[VaccineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_Consumption]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_Consumption](
	[ConsumptionId] [int] IDENTITY(1,1) NOT NULL,
	[WardId] [int] NOT NULL,
	[InvoiceId] [int] NULL,
	[InvoiceItemId] [int] NULL,
	[PatientId] [int] NULL,
	[ItemId] [int] NOT NULL,
	[VisitId] [int] NULL,
	[ItemName] [varchar](200) NULL,
	[BatchNo] [varchar](300) NULL,
	[ExpiryDate] [datetime] NULL,
	[Quantity] [int] NULL,
	[MRP] [decimal](16, 4) NOT NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[StoreId] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_WARD_Consumption] PRIMARY KEY CLUSTERED 
(
	[ConsumptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_Dispatch]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_Dispatch](
	[DispatchId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [int] NULL,
	[SubTotal] [decimal](16, 4) NOT NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ReceivedBy] [varchar](55) NULL,
	[StoreId] [int] NULL,
 CONSTRAINT [PK_WARD_Dispatch] PRIMARY KEY CLUSTERED 
(
	[DispatchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_DispatchItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_DispatchItems](
	[DispatchItemId] [int] IDENTITY(1,1) NOT NULL,
	[DispatchId] [int] NULL,
	[RequisitionItemId] [int] NULL,
	[ItemId] [int] NULL,
	[ItemName] [varchar](200) NULL,
	[BatchNo] [varchar](300) NULL,
	[ExpiryDate] [datetime] NULL,
	[Quantity] [int] NOT NULL,
	[MRP] [decimal](16, 4) NOT NULL,
	[SubTotal] [decimal](16, 4) NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[Price] [decimal](18, 4) NULL,
 CONSTRAINT [PK_WARD_DispatchItems] PRIMARY KEY CLUSTERED 
(
	[DispatchItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_InternalConsumption]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_InternalConsumption](
	[ConsumptionId] [int] IDENTITY(1,1) NOT NULL,
	[WardId] [int] NULL,
	[DepartmentId] [int] NULL,
	[SubStoreId] [int] NULL,
	[TotalAmount] [float] NULL,
	[Remark] [varchar](100) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ConsumedBy] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[ConsumptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_InternalConsumptionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_InternalConsumptionItems](
	[ConsumptionItemId] [int] IDENTITY(1,1) NOT NULL,
	[ConsumptionId] [int] NULL,
	[ItemId] [int] NULL,
	[WardId] [int] NULL,
	[DepartmentId] [int] NULL,
	[SubstoreId] [int] NULL,
	[BatchNo] [varchar](10) NULL,
	[ItemName] [varchar](200) NULL,
	[MRP] [float] NULL,
	[Quantity] [int] NULL,
	[Subtotal] [float] NULL,
	[Remark] [varchar](500) NULL,
	[ExpiryDate] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[Price] [decimal](18, 4) NULL,
PRIMARY KEY CLUSTERED 
(
	[ConsumptionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_INV_Consumption]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_INV_Consumption](
	[ConsumptionId] [int] IDENTITY(1,1) NOT NULL,
	[DepartmentId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[ItemName] [varchar](200) NULL,
	[Quantity] [float] NULL,
	[Remark] [varchar](100) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[DepartmentName] [varchar](200) NULL,
	[UsedBy] [varchar](50) NULL,
	[StoreId] [int] NULL,
	[IsTransferToAcc] [bit] NULL,
	[ConsumptionDate] [datetime] NULL,
	[ConsumptionReceiptId] [int] NULL,
 CONSTRAINT [PK_WARD_INV_Consumption] PRIMARY KEY CLUSTERED 
(
	[ConsumptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_INV_ConsumptionReceipt]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_INV_ConsumptionReceipt](
	[ConsumptionReceiptId] [int] IDENTITY(1,1) NOT NULL,
	[ConsumptionReceiptNo] [int] NOT NULL,
	[ConsumptionDate] [datetime2](3) NOT NULL,
	[PatientId] [int] NOT NULL,
	[StoreId] [int] NOT NULL,
	[Remarks] [varchar](100) NULL,
	[IsCancel] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime2](3) NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime2](3) NULL,
 CONSTRAINT [PK_WARD_INV_ConsumptionReceipt] PRIMARY KEY CLUSTERED 
(
	[ConsumptionReceiptId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_INV_Stock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_INV_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NULL,
	[ItemId] [int] NULL,
	[BatchNo] [varchar](max) NULL,
	[ExpiryDate] [datetime] NULL,
	[AvailableQuantity] [float] NULL,
	[UnConfirmedQty] [float] NOT NULL,
	[DepartmentId] [int] NULL,
	[MRP] [decimal](16, 4) NULL,
	[Price] [decimal](16, 4) NULL,
	[GoodsReceiptItemId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[SubstoreId] [int] NOT NULL,
 CONSTRAINT [PK_WARD_INV_NewStock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_INV_Transaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_INV_Transaction](
	[TransactionId] [int] IDENTITY(1,1) NOT NULL,
	[StoreId] [int] NULL,
	[ItemId] [int] NOT NULL,
	[StockId] [int] NULL,
	[GoodsReceiptItemId] [int] NULL,
	[Quantity] [float] NULL,
	[TransactionType] [varchar](255) NOT NULL,
	[Remarks] [varchar](255) NOT NULL,
	[ReceivedBy] [varchar](55) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[ReferenceNo] [int] NULL,
	[InOut] [varchar](10) NULL,
	[Price] [decimal](16, 4) NULL,
	[MRP] [decimal](16, 4) NULL,
	[FiscalYearId] [int] NULL,
	[TransactionDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsTransferToAcc] [bit] NULL,
	[SubstoreId] [int] NOT NULL,
 CONSTRAINT [PK_WARD_INV_NewStockTxn] PRIMARY KEY CLUSTERED 
(
	[TransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_Requisition]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_Requisition](
	[RequisitionId] [int] IDENTITY(1,1) NOT NULL,
	[WardId] [int] NOT NULL,
	[Status] [varchar](50) NULL,
	[ReferenceId] [varchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [date] NOT NULL,
	[StoreId] [int] NULL,
 CONSTRAINT [PK_WARD_Requisition] PRIMARY KEY CLUSTERED 
(
	[RequisitionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_RequisitionItems]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_RequisitionItems](
	[RequisitionItemId] [int] IDENTITY(1,1) NOT NULL,
	[RequisitionId] [int] NOT NULL,
	[ItemId] [int] NOT NULL,
	[Quantity] [int] NOT NULL,
	[DispatchedQty] [int] NULL,
 CONSTRAINT [PK_WARD_RequisitionItems] PRIMARY KEY CLUSTERED 
(
	[RequisitionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_Stock]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_Stock](
	[StockId] [int] IDENTITY(1,1) NOT NULL,
	[WardId] [int] NULL,
	[ItemId] [int] NULL,
	[AvailableQuantity] [int] NULL,
	[MRP] [float] NULL,
	[BatchNo] [varchar](max) NULL,
	[ExpiryDate] [datetime] NULL,
	[StockType] [varchar](50) NULL,
	[DepartmentId] [int] NULL,
	[StoreId] [int] NULL,
	[Price] [decimal](18, 4) NULL,
 CONSTRAINT [PK_WARD_Stock] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WARD_Transaction]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WARD_Transaction](
	[TransactionId] [int] IDENTITY(1,1) NOT NULL,
	[WardId] [int] NULL,
	[ItemId] [int] NOT NULL,
	[StockId] [int] NULL,
	[Quantity] [int] NOT NULL,
	[TransactionType] [varchar](255) NOT NULL,
	[CreatedBy] [varchar](255) NOT NULL,
	[CreatedOn] [date] NOT NULL,
	[Remarks] [varchar](255) NOT NULL,
	[IsWard] [bit] NOT NULL,
	[newWardId] [int] NULL,
	[ReceivedBy] [varchar](55) NULL,
	[StoreId] [int] NULL,
	[InOut] [varchar](100) NULL,
	[Price] [decimal](18, 4) NULL,
PRIMARY KEY CLUSTERED 
(
	[TransactionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WardInformationModels]    Script Date: 4/12/2025 9:35:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WardInformationModels](
	[WardName] [nvarchar](128) NOT NULL,
	[TotalBeds] [int] NOT NULL,
	[Available] [int] NOT NULL,
	[Occupied] [int] NOT NULL,
 CONSTRAINT [PK_dbo.WardInformationModels] PRIMARY KEY CLUSTERED 
(
	[WardName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ACC_MST_CostCenterItems] ADD  CONSTRAINT [IsActiveCostCenter]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ACC_MST_FiscalYears] ADD  CONSTRAINT [DEF_ACC_MST_FiscalYears_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ACC_MST_SectionList] ADD  CONSTRAINT [DEF_ACC_MST_SectionList_IsDefault]  DEFAULT ((0)) FOR [IsDefault]
GO
ALTER TABLE [dbo].[ACC_MST_SectionList] ADD  CONSTRAINT [DEF_ACC_MST_SectionList_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ACC_MST_VoucherHead] ADD  DEFAULT ((0)) FOR [IsDefault]
GO
ALTER TABLE [dbo].[ACC_MST_Vouchers] ADD  CONSTRAINT [IsActiveVouchers]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ACC_MST_Vouchers] ADD  DEFAULT ((0)) FOR [ISCopyDescription]
GO
ALTER TABLE [dbo].[ACC_MST_Vouchers] ADD  DEFAULT ((0)) FOR [ShowPayeeName]
GO
ALTER TABLE [dbo].[ACC_MST_Vouchers] ADD  DEFAULT ((0)) FOR [ShowChequeNumber]
GO
ALTER TABLE [dbo].[ACC_TransactionItems] ADD  CONSTRAINT [IsActiveTransactionItems]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ACC_Transactions] ADD  DEFAULT ((0)) FOR [IsCustomVoucher]
GO
ALTER TABLE [dbo].[ACC_Transactions] ADD  DEFAULT (NULL) FOR [IsReverseTxnAllow]
GO
ALTER TABLE [dbo].[ACC_Transactions] ADD  DEFAULT ((0)) FOR [IsEditable]
GO
ALTER TABLE [dbo].[ACC_Transactions] ADD  DEFAULT ((0)) FOR [IsAllowReverseVoucher]
GO
ALTER TABLE [dbo].[ADT_Bed] ADD  CONSTRAINT [IsOccupied]  DEFAULT ((0)) FOR [IsOccupied]
GO
ALTER TABLE [dbo].[ADT_Bed] ADD  CONSTRAINT [IsActiveBed]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] ADD  CONSTRAINT [IsSubmitted]  DEFAULT ((0)) FOR [IsSubmitted]
GO
ALTER TABLE [dbo].[ADT_DischargeType] ADD  CONSTRAINT [IsActiveDischargeType]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap] ADD  CONSTRAINT [IsActiveBedFeaturesMap]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ADT_MST_BedFeature] ADD  CONSTRAINT [IsActiveBedFeature]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ADT_MST_Ward] ADD  CONSTRAINT [IsActiveWard]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] ADD  DEFAULT (NULL) FOR [IsPoliceCase]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] ADD  DEFAULT ((0)) FOR [IsItemDiscountEnabled]
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo] ADD  CONSTRAINT [IsActivePatientBedInfo]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition] ADD  CONSTRAINT [BillItemRequisition_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [HstApplicable]  DEFAULT ((0)) FOR [TaxApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [DiscountApplicable]  DEFAULT ((1)) FOR [DiscountApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [BilItemPrice_DisplaySeq]  DEFAULT ((100)) FOR [DisplaySeq]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  DEFAULT ((0)) FOR [IsDoctorMandatory]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  DEFAULT (NULL) FOR [HasAdditionalBillingItems]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  DEFAULT ((0)) FOR [isFractionApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [DEF_IsNormalPrice]  DEFAULT ((1)) FOR [IsNormalPriceApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [DEF_IsEHSPrice]  DEFAULT ((1)) FOR [IsEHSPriceApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [DEF_IsForeignerPrice]  DEFAULT ((1)) FOR [IsForeignerPriceApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [DEF_IsSAARCPrice]  DEFAULT ((1)) FOR [IsSAARCPriceApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  DEFAULT ((1)) FOR [AllowMultipleQty]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  DEFAULT ((0)) FOR [IsInsForeignerPriceApplicable]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  CONSTRAINT [df_ValidForReporting]  DEFAULT ((0)) FOR [IsValidForReporting]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] ADD  DEFAULT ((0)) FOR [IsZeroPriceAllowed]
GO
ALTER TABLE [dbo].[BIL_CFG_Counter] ADD  CONSTRAINT [BIL_Counter_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BIL_CFG_Packages] ADD  CONSTRAINT [IsActiveBillingPackage]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[BIL_CFG_Packages] ADD  CONSTRAINT [PackageInsuranceApplicable]  DEFAULT ((0)) FOR [InsuranceApplicable]
GO
ALTER TABLE [dbo].[BIL_MST_Credit_Organization] ADD  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction] ADD  CONSTRAINT [BillingTransaction_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] ADD  CONSTRAINT [BillTxnItem_ReturnStatus]  DEFAULT ((0)) FOR [ReturnStatus]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] ADD  CONSTRAINT [BillTxnItem_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit] ADD  CONSTRAINT [BIL_Deposit_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit] ADD  CONSTRAINT [DepositPrintCount]  DEFAULT ((1)) FOR [PrintCount]
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit] ADD  CONSTRAINT [DF_BIL_TXN_Deposit_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit] ADD  CONSTRAINT [DF_BIL_TXN_Deposit_IsTransferTransaction]  DEFAULT ((0)) FOR [IsTransferTransaction]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowHeader]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowFooter]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowUserName]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowPrintExportDateTime]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowNpDate]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowEnDate]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowFilterDateRange]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [ShowOtherFilterVariables]
GO
ALTER TABLE [dbo].[CFG_PrintExportSettings] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[CLN_EYE_Ablation_Profile] ADD  DEFAULT ((0)) FOR [isSXDone]
GO
ALTER TABLE [dbo].[CLN_EYE_Ablation_Profile] ADD  DEFAULT ((0)) FOR [isPTKPerformed]
GO
ALTER TABLE [dbo].[CLN_KV_PatientClinical_Info] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[CLN_Notes_Subjective] ADD  CONSTRAINT [IsActiveSubjectiveNote]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Question] ADD  CONSTRAINT [DF_QtnSeq]  DEFAULT ((100)) FOR [DisplaySeq]
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Questionnaire] ADD  CONSTRAINT [DF_QnrSeq]  DEFAULT ((100)) FOR [DisplaySeq]
GO
ALTER TABLE [dbo].[CORE_Notification] ADD  CONSTRAINT [df_Notification_IsArchived]  DEFAULT ((0)) FOR [IsArchived]
GO
ALTER TABLE [dbo].[DanpheAudit] ADD  DEFAULT (getdate()) FOR [InsertedDate]
GO
ALTER TABLE [dbo].[DOC_TXN_VisitSummary] ADD  CONSTRAINT [IsActiveVisitSummary]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[EMP_Employee] ADD  CONSTRAINT [IsActiveEmployee]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[EMP_Employee] ADD  CONSTRAINT [DEF_Emp_IsExternal]  DEFAULT ((0)) FOR [IsExternal]
GO
ALTER TABLE [dbo].[EMP_EmployeeRole] ADD  CONSTRAINT [IsActiveEmployeeRole]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[EMP_EmployeeType] ADD  CONSTRAINT [IsActiveEmployeeType]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[FRC_FractionCalculation] ADD  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[INCTV_MAP_EmployeeBillItemsMap] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[INCTV_MST_Profile] ADD  CONSTRAINT [DefaultTDSPercentage]  DEFAULT ((0)) FOR [TDSPercentage]
GO
ALTER TABLE [dbo].[INCTV_TXN_IncentiveFractionItem] ADD  CONSTRAINT [DEF_Inctv_FractionItem_IsReturn]  DEFAULT ((0)) FOR [IsReturnTxn]
GO
ALTER TABLE [dbo].[INS_CFG_InsuranceProviders] ADD  CONSTRAINT [IsActiveInsuranceProvider]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[INS_TXN_PatientInsurancePackages] ADD  CONSTRAINT [IsCompletedPackageTransaction]  DEFAULT ((0)) FOR [IsCompleted]
GO
ALTER TABLE [dbo].[INS_TXN_PatientInsurancePackages] ADD  CONSTRAINT [IsActivePackageTransaction]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[INV_MST_Terms] ADD  CONSTRAINT [DF_INV_MST_Terms_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems] ADD  DEFAULT ((1)) FOR [StoreId]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisition] ADD  CONSTRAINT [DF__INV_TXN_FixedAssetRequisition_IsCancel]  DEFAULT ((0)) FOR [IsCancel]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisition] ADD  CONSTRAINT [DF__INV_TXN_FixedAssetRequisition_RequisitionNo]  DEFAULT ((0)) FOR [RequisitionNo]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems] ADD  CONSTRAINT [DF__INV_TXN_FixedAssetRequisitionItems_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt] ADD  CONSTRAINT [DF_GoodsReceiptNo]  DEFAULT ((0)) FOR [GoodsReceiptNo]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt] ADD  DEFAULT ((0)) FOR [IsPaymentDoneFromAcc]
GO
ALTER TABLE [dbo].[INV_TXN_Requisition] ADD  DEFAULT ((1)) FOR [RequestFromStoreId]
GO
ALTER TABLE [dbo].[INV_TXN_Requisition] ADD  DEFAULT ((0)) FOR [IsCancel]
GO
ALTER TABLE [dbo].[INV_TXN_Requisition] ADD  DEFAULT ((0)) FOR [RequisitionNo]
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems] ADD  DEFAULT ((1)) FOR [isActive]
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems] ADD  DEFAULT ((0)) FOR [RequisitionNo]
GO
ALTER TABLE [dbo].[LAB_LabTests] ADD  DEFAULT (NULL) FOR [SmsApplicable]
GO
ALTER TABLE [dbo].[Lab_MST_LabVendors] ADD  CONSTRAINT [DEF_IsExternal]  DEFAULT ((0)) FOR [IsExternal]
GO
ALTER TABLE [dbo].[Lab_MST_LabVendors] ADD  CONSTRAINT [DEF_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Lab_MST_LabVendors] ADD  CONSTRAINT [DEF_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[LAB_TestCategory] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[LAB_TestRequisition] ADD  CONSTRAINT [DEFAULT_LAB_TestRequisition_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[LAB_TestRequisition] ADD  DEFAULT (NULL) FOR [IsSmsSend]
GO
ALTER TABLE [dbo].[LAB_TestRequisition] ADD  DEFAULT ((0)) FOR [IsFileUploadedToTeleMedicine]
GO
ALTER TABLE [dbo].[LAB_TXN_LabReports] ADD  CONSTRAINT [IsPrinted_LAB_TXN_LabReports]  DEFAULT ((1)) FOR [IsPrinted]
GO
ALTER TABLE [dbo].[LAB_TXN_LabReports] ADD  CONSTRAINT [IsActive_LAB_TXN_LabReports]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[LAB_TXN_LabReports] ADD  CONSTRAINT [DEF_Printcount]  DEFAULT ('0') FOR [PrintCount]
GO
ALTER TABLE [dbo].[LAB_TXN_TestComponentResult] ADD  CONSTRAINT [DF_LabCompResult_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[MST_LabTypes] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[MST_LabTypes] ADD  DEFAULT ((0)) FOR [IsDefault]
GO
ALTER TABLE [dbo].[MST_Municipality] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[MST_Tax] ADD  CONSTRAINT [IsActiveTax]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[OPPatients] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[OPPatients] ADD  DEFAULT ((0)) FOR [IsEMRPatient]
GO
ALTER TABLE [dbo].[OT_TXN_BookingDetails] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[OT_TXN_CheckListInfo] ADD  DEFAULT ((0)) FOR [ItemValue]
GO
ALTER TABLE [dbo].[PAT_CFG_MembershipType] ADD  CONSTRAINT [IsActiveMembershipType]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[PAT_Patient] ADD  DEFAULT (NULL) FOR [MunicipalityId]
GO
ALTER TABLE [dbo].[PAT_PatientMembership] ADD  CONSTRAINT [IsActivePatientMembership]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[PAT_PatientVisits] ADD  CONSTRAINT [IsVisitContinued]  DEFAULT ((0)) FOR [IsVisitContinued]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt] ADD  DEFAULT ((0)) FOR [IsPacking]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt] ADD  DEFAULT ((0)) FOR [IsItemDiscountApplicable]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt] ADD  DEFAULT ((0)) FOR [IsPaymentDoneFromAcc]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems] ADD  DEFAULT ((0)) FOR [IsPacking]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems] ADD  DEFAULT ((0)) FOR [IsItemDiscountApplicable]
GO
ALTER TABLE [dbo].[PHRM_MST_Item] ADD  DEFAULT ((0)) FOR [IsNarcotic]
GO
ALTER TABLE [dbo].[PHRM_MST_Store] ADD  DEFAULT ((0)) FOR [PermissionId]
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems] ADD  CONSTRAINT [D_PHRM_StockTxnItems_DispensaryId]  DEFAULT ((0)) FOR [DispensaryId]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock] ADD  CONSTRAINT [DF_PHRM_TXN_DispensaryStock]  DEFAULT ((0)) FOR [UnConfirmedQuantity]
GO
ALTER TABLE [dbo].[RAD_MST_FilmType] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem] ADD  CONSTRAINT [IsActiveImagingItem]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem] ADD  CONSTRAINT [defVal]  DEFAULT ((1)) FOR [IsValidForReporting]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingType] ADD  CONSTRAINT [IsActiveImagintType]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition] ADD  DEFAULT ('TRUE') FOR [IsActive]
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition] ADD  DEFAULT ((0)) FOR [IsReportSaved]
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors] ADD  CONSTRAINT [IsActiveReportingDoctor]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RBAC_Application] ADD  CONSTRAINT [IsActiveApplication]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RBAC_MAP_RolePermission] ADD  CONSTRAINT [IsActiveRolePermission]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RBAC_MAP_UserRole] ADD  CONSTRAINT [IsActiveUserRole]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RBAC_Permission] ADD  CONSTRAINT [DF_RBAC_Permission_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RBAC_Role] ADD  CONSTRAINT [DF_ROLES_IsSysAdmin]  DEFAULT ((0)) FOR [IsSysAdmin]
GO
ALTER TABLE [dbo].[RBAC_Role] ADD  CONSTRAINT [DF_RBAC_Role_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RBAC_Role] ADD  CONSTRAINT [df_RoleType]  DEFAULT ('custom') FOR [RoleType]
GO
ALTER TABLE [dbo].[RBAC_User] ADD  CONSTRAINT [DF_USERS_IsActive]  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[TXN_PrintInformation] ADD  DEFAULT ((0)) FOR [PrintCount]
GO
ALTER TABLE [dbo].[TXN_Verification] ADD  DEFAULT ((0)) FOR [ParentVerificationId]
GO
ALTER TABLE [dbo].[TXN_Verification] ADD  CONSTRAINT [DF_CurrentVerificationLevelCount]  DEFAULT ((1)) FOR [CurrentVerificationLevelCount]
GO
ALTER TABLE [dbo].[WARD_INV_Stock] ADD  CONSTRAINT [DF_WARD_INV_NewStock]  DEFAULT ((0)) FOR [UnConfirmedQty]
GO
ALTER TABLE [dbo].[ACC_FiscalYear_Log]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_FiscalYear_Log_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_FiscalYear_Log] CHECK CONSTRAINT [FK_ACC_FiscalYear_Log_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_Ledger]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_Ledger_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_Ledger] CHECK CONSTRAINT [FK_ACC_Ledger_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_Ledger_Mapping]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_Ledger_Mapping_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_Ledger_Mapping] CHECK CONSTRAINT [FK_ACC_Ledger_Mapping_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_LedgerBalanceHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_LedgerBalanceHistory_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_LedgerBalanceHistory] CHECK CONSTRAINT [FK_ACC_LedgerBalanceHistory_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_LedgerBalanceHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_LedgerBalanceHistory_FiscalYear] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[ACC_MST_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[ACC_LedgerBalanceHistory] CHECK CONSTRAINT [FK_ACC_LedgerBalanceHistory_FiscalYear]
GO
ALTER TABLE [dbo].[ACC_LedgerBalanceHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_LedgerBalanceHistory_Ledger] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[ACC_Ledger] ([LedgerId])
GO
ALTER TABLE [dbo].[ACC_LedgerBalanceHistory] CHECK CONSTRAINT [FK_ACC_LedgerBalanceHistory_Ledger]
GO
ALTER TABLE [dbo].[ACC_Map_TxnItemCostCenterItem]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_Map_TxnItemCostCenterItem_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_Map_TxnItemCostCenterItem] CHECK CONSTRAINT [FK_ACC_Map_TxnItemCostCenterItem_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_MST_CostCenterItems]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_CostCenterItems_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_MST_CostCenterItems] CHECK CONSTRAINT [FK_ACC_MST_CostCenterItems_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_MST_FiscalYears]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_FiscalYears_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_MST_FiscalYears] CHECK CONSTRAINT [FK_ACC_MST_FiscalYears_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_MST_LedgerGroup]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_LedgerGroup_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_MST_LedgerGroup] CHECK CONSTRAINT [FK_ACC_MST_LedgerGroup_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_MST_MappingDetail]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_MappingDetail_ACC_MST_GroupMapping] FOREIGN KEY([GroupMappingId])
REFERENCES [dbo].[ACC_MST_GroupMapping] ([GroupMappingId])
GO
ALTER TABLE [dbo].[ACC_MST_MappingDetail] CHECK CONSTRAINT [FK_ACC_MST_MappingDetail_ACC_MST_GroupMapping]
GO
ALTER TABLE [dbo].[ACC_MST_MappingDetail]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_MappingDetail_ACC_MST_LedgerGroup] FOREIGN KEY([LedgerGroupId])
REFERENCES [dbo].[ACC_MST_LedgerGroup] ([LedgerGroupId])
GO
ALTER TABLE [dbo].[ACC_MST_MappingDetail] CHECK CONSTRAINT [FK_ACC_MST_MappingDetail_ACC_MST_LedgerGroup]
GO
ALTER TABLE [dbo].[ACC_MST_SectionList]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_SectionList_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_MST_SectionList] CHECK CONSTRAINT [FK_ACC_MST_SectionList_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_MST_VoucherHead]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_MST_VoucherHead_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_MST_VoucherHead] CHECK CONSTRAINT [FK_ACC_MST_VoucherHead_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_ReverseTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_ReverseTransaction_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_ReverseTransaction] CHECK CONSTRAINT [FK_ACC_ReverseTransaction_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_TransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_TransactionItems_ACC_Ledger] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[ACC_Ledger] ([LedgerId])
GO
ALTER TABLE [dbo].[ACC_TransactionItems] CHECK CONSTRAINT [FK_ACC_TransactionItems_ACC_Ledger]
GO
ALTER TABLE [dbo].[ACC_TransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_TransactionItems_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_TransactionItems] CHECK CONSTRAINT [FK_ACC_TransactionItems_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_TransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_TransactionItems_ACC_Transactions] FOREIGN KEY([TransactionId])
REFERENCES [dbo].[ACC_Transactions] ([TransactionId])
GO
ALTER TABLE [dbo].[ACC_TransactionItems] CHECK CONSTRAINT [FK_ACC_TransactionItems_ACC_Transactions]
GO
ALTER TABLE [dbo].[ACC_Transactions]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_Transactions_Acc_MST_Hospital] FOREIGN KEY([HospitalId])
REFERENCES [dbo].[ACC_MST_Hospital] ([HospitalId])
GO
ALTER TABLE [dbo].[ACC_Transactions] CHECK CONSTRAINT [FK_ACC_Transactions_Acc_MST_Hospital]
GO
ALTER TABLE [dbo].[ACC_Transactions]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_Transactions_ACC_MST_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[ACC_MST_Vouchers] ([VoucherId])
GO
ALTER TABLE [dbo].[ACC_Transactions] CHECK CONSTRAINT [FK_ACC_Transactions_ACC_MST_Vouchers]
GO
ALTER TABLE [dbo].[ACC_TXN_Link]  WITH NOCHECK ADD  CONSTRAINT [FK_ACC_TXN_Link_ACC_Transactions] FOREIGN KEY([TransactionId])
REFERENCES [dbo].[ACC_Transactions] ([TransactionId])
GO
ALTER TABLE [dbo].[ACC_TXN_Link] CHECK CONSTRAINT [FK_ACC_TXN_Link_ACC_Transactions]
GO
ALTER TABLE [dbo].[ACC_TXN_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_Acc_TXN_Payment_ACC_Transactions] FOREIGN KEY([TransactionId])
REFERENCES [dbo].[ACC_Transactions] ([TransactionId])
GO
ALTER TABLE [dbo].[ACC_TXN_Payment] CHECK CONSTRAINT [FK_Acc_TXN_Payment_ACC_Transactions]
GO
ALTER TABLE [dbo].[ADT_BabyBirthDetails]  WITH NOCHECK ADD  CONSTRAINT [fk_BirthConditionId_birthDetails_birthCondition] FOREIGN KEY([BirthConditionId])
REFERENCES [dbo].[ADT_MST_BabyBirthCondition] ([BabyBirthConditionId])
GO
ALTER TABLE [dbo].[ADT_BabyBirthDetails] CHECK CONSTRAINT [fk_BirthConditionId_birthDetails_birthCondition]
GO
ALTER TABLE [dbo].[ADT_Bed]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_Bed_ADT_Ward] FOREIGN KEY([WardId])
REFERENCES [dbo].[ADT_MST_Ward] ([WardID])
GO
ALTER TABLE [dbo].[ADT_Bed] CHECK CONSTRAINT [FK_ADT_Bed_ADT_Ward]
GO
ALTER TABLE [dbo].[ADT_Bed]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_Bed_Created_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_Bed] CHECK CONSTRAINT [FK_ADT_Bed_Created_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_Bed]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_Bed_Modified_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_Bed] CHECK CONSTRAINT [FK_ADT_Bed_Modified_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD FOREIGN KEY([NotesId])
REFERENCES [dbo].[CLN_Notes] ([NotesId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_ADT_DischargeType] FOREIGN KEY([DischargeTypeId])
REFERENCES [dbo].[ADT_DischargeType] ([DischargeTypeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_ADT_DischargeType]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_Anaesthetists_EMP_Employee] FOREIGN KEY([AnaesthetistsId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_Anaesthetists_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_Consultant_EMP_Employee] FOREIGN KEY([ConsultantId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_Consultant_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_DoctorIncharge_EMP_Employee] FOREIGN KEY([DoctorInchargeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_DoctorIncharge_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[ADT_DischargeSummary]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummary_ResidenceDr_EMP_Employee] FOREIGN KEY([ResidenceDrId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummary] CHECK CONSTRAINT [FK_ADT_DischargeSummary_ResidenceDr_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeSummaryMedication]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeSummaryMedication_ADT_DischargeSummaryMedication] FOREIGN KEY([DischargeSummaryMedicationId])
REFERENCES [dbo].[ADT_DischargeSummaryMedication] ([DischargeSummaryMedicationId])
GO
ALTER TABLE [dbo].[ADT_DischargeSummaryMedication] CHECK CONSTRAINT [FK_ADT_DischargeSummaryMedication_ADT_DischargeSummaryMedication]
GO
ALTER TABLE [dbo].[ADT_DischargeType]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeType_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeType] CHECK CONSTRAINT [FK_ADT_DischargeType_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_DischargeType]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeType_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_DischargeType] CHECK CONSTRAINT [FK_ADT_DischargeType_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_BedFeaturesMap_Created_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap] CHECK CONSTRAINT [FK_ADT_BedFeaturesMap_Created_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_BedFeaturesMap_Modified_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap] CHECK CONSTRAINT [FK_ADT_BedFeaturesMap_Modified_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_MAP_BedFeaturesMap_ADT_Bed] FOREIGN KEY([BedId])
REFERENCES [dbo].[ADT_Bed] ([BedID])
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap] CHECK CONSTRAINT [FK_ADT_MAP_BedFeaturesMap_ADT_Bed]
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_MAP_BedFeaturesMap_ADT_BedFeature] FOREIGN KEY([BedFeatureId])
REFERENCES [dbo].[ADT_MST_BedFeature] ([BedFeatureId])
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap] CHECK CONSTRAINT [FK_ADT_MAP_BedFeaturesMap_ADT_BedFeature]
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_MAP_BedFeaturesMap_ADT_Ward] FOREIGN KEY([WardId])
REFERENCES [dbo].[ADT_MST_Ward] ([WardID])
GO
ALTER TABLE [dbo].[ADT_MAP_BedFeaturesMap] CHECK CONSTRAINT [FK_ADT_MAP_BedFeaturesMap_ADT_Ward]
GO
ALTER TABLE [dbo].[ADT_MST_BedFeature]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_BedFeature_Created_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_MST_BedFeature] CHECK CONSTRAINT [FK_ADT_BedFeature_Created_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_MST_BedFeature]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_BedFeature_Modified_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_MST_BedFeature] CHECK CONSTRAINT [FK_ADT_BedFeature_Modified_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_MST_DeathType]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DeathType_DischargeType] FOREIGN KEY([DischargeTypeId])
REFERENCES [dbo].[ADT_DischargeType] ([DischargeTypeId])
GO
ALTER TABLE [dbo].[ADT_MST_DeathType] CHECK CONSTRAINT [FK_ADT_DeathType_DischargeType]
GO
ALTER TABLE [dbo].[ADT_MST_DeliveryType]  WITH NOCHECK ADD  CONSTRAINT [FK_DeliveryType_DischargeConditionType] FOREIGN KEY([DischargeConditionId])
REFERENCES [dbo].[ADT_MST_DischargeConditionType] ([DischargeConditionId])
GO
ALTER TABLE [dbo].[ADT_MST_DeliveryType] CHECK CONSTRAINT [FK_DeliveryType_DischargeConditionType]
GO
ALTER TABLE [dbo].[ADT_MST_DischargeConditionType]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_DischargeConditionType_DischargeType] FOREIGN KEY([DischargeTypeId])
REFERENCES [dbo].[ADT_DischargeType] ([DischargeTypeId])
GO
ALTER TABLE [dbo].[ADT_MST_DischargeConditionType] CHECK CONSTRAINT [FK_ADT_DischargeConditionType_DischargeType]
GO
ALTER TABLE [dbo].[ADT_MST_Ward]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_Ward_Created_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_MST_Ward] CHECK CONSTRAINT [FK_ADT_Ward_Created_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_MST_Ward]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_Ward_Modified_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_MST_Ward] CHECK CONSTRAINT [FK_ADT_Ward_Modified_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_PatientAdmission_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] CHECK CONSTRAINT [FK_ADT_PatientAdmission_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_PatientAdmission_DischargedBy_EMP_Employee] FOREIGN KEY([DischargedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] CHECK CONSTRAINT [FK_ADT_PatientAdmission_DischargedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_PatientAdmission_EMP_Employee] FOREIGN KEY([AdmittingDoctorId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] CHECK CONSTRAINT [FK_ADT_PatientAdmission_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_PatientAdmission_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] CHECK CONSTRAINT [FK_ADT_PatientAdmission_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_PatientAdmission_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] CHECK CONSTRAINT [FK_ADT_PatientAdmission_PAT_Patient]
GO
ALTER TABLE [dbo].[ADT_PatientAdmission]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_PatientAdmission_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[ADT_PatientAdmission] CHECK CONSTRAINT [FK_ADT_PatientAdmission_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_TXN_PatientBedInfo_ADT_Bed] FOREIGN KEY([BedId])
REFERENCES [dbo].[ADT_Bed] ([BedID])
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo] CHECK CONSTRAINT [FK_ADT_TXN_PatientBedInfo_ADT_Bed]
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_TXN_PatientBedInfo_ADT_BedFeature] FOREIGN KEY([BedFeatureId])
REFERENCES [dbo].[ADT_MST_BedFeature] ([BedFeatureId])
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo] CHECK CONSTRAINT [FK_ADT_TXN_PatientBedInfo_ADT_BedFeature]
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_ADT_TXN_PatientBedInfo_ADT_MST_Ward] FOREIGN KEY([WardId])
REFERENCES [dbo].[ADT_MST_Ward] ([WardID])
GO
ALTER TABLE [dbo].[ADT_TXN_PatientBedInfo] CHECK CONSTRAINT [FK_ADT_TXN_PatientBedInfo_ADT_MST_Ward]
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_BillItemRequisition_BIL_MST_ServiceDepartment] FOREIGN KEY([ServiceDepartmentId])
REFERENCES [dbo].[BIL_MST_ServiceDepartment] ([ServiceDepartmentId])
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition] CHECK CONSTRAINT [FK_BIL_BillItemRequisition_BIL_MST_ServiceDepartment]
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_BillItemRequisition_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition] CHECK CONSTRAINT [FK_BIL_BillItemRequisition_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_BillItemRequisition_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition] CHECK CONSTRAINT [FK_BIL_BillItemRequisition_PAT_Patient]
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_BillItemRequisition_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition] CHECK CONSTRAINT [FK_BIL_BillItemRequisition_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_BillItemRequisition_ProviderId_EMP_Employee] FOREIGN KEY([ProviderId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_BillItemRequisition] CHECK CONSTRAINT [FK_BIL_BillItemRequisition_ProviderId_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_CFG_BillItemPrice_MST_ServiceDepartment] FOREIGN KEY([ServiceDepartmentId])
REFERENCES [dbo].[BIL_MST_ServiceDepartment] ([ServiceDepartmentId])
GO
ALTER TABLE [dbo].[BIL_CFG_BillItemPrice] CHECK CONSTRAINT [FK_BIL_CFG_BillItemPrice_MST_ServiceDepartment]
GO
ALTER TABLE [dbo].[BIL_CFG_Counter]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_CFG_Counter_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_CFG_Counter] CHECK CONSTRAINT [FK_BIL_CFG_Counter_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_CFG_Packages]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_CFG_Packages_EMP_Employee_CreatedBy] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_CFG_Packages] CHECK CONSTRAINT [FK_BIL_CFG_Packages_EMP_Employee_CreatedBy]
GO
ALTER TABLE [dbo].[BIL_CFG_Packages]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_CFG_Packages_EMP_Employee_ModifiedBy] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_CFG_Packages] CHECK CONSTRAINT [FK_BIL_CFG_Packages_EMP_Employee_ModifiedBy]
GO
ALTER TABLE [dbo].[BIL_History_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_History_BillingTransactionItems_BIL_TXN_BillingTransactionItems] FOREIGN KEY([BillingTransactionItemId])
REFERENCES [dbo].[BIL_TXN_BillingTransactionItems] ([BillingTransactionItemId])
GO
ALTER TABLE [dbo].[BIL_History_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_History_BillingTransactionItems_BIL_TXN_BillingTransactionItems]
GO
ALTER TABLE [dbo].[BIL_MST_ServiceDepartment]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_MST_ServiceDepartment_MST_Department] FOREIGN KEY([DepartmentId])
REFERENCES [dbo].[MST_Department] ([DepartmentId])
GO
ALTER TABLE [dbo].[BIL_MST_ServiceDepartment] CHECK CONSTRAINT [FK_BIL_MST_ServiceDepartment_MST_Department]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransaction_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransaction_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransaction_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransaction_PAT_Patient]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransaction_Settlements] FOREIGN KEY([SettlementId])
REFERENCES [dbo].[BIL_TXN_Settlements] ([SettlementId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransaction] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransaction_Settlements]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_BillingTransactionItems_BIL_CFG_Packages] FOREIGN KEY([BillingPackageId])
REFERENCES [dbo].[BIL_CFG_Packages] ([BillingPackageId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_BillingTransactionItems_BIL_CFG_Packages]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_BIL_MST_ServiceDepartment] FOREIGN KEY([ServiceDepartmentId])
REFERENCES [dbo].[BIL_MST_ServiceDepartment] ([ServiceDepartmentId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_BIL_MST_ServiceDepartment]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_BIL_TXN_BillingTransaction] FOREIGN KEY([BillingTransactionId])
REFERENCES [dbo].[BIL_TXN_BillingTransaction] ([BillingTransactionId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_BIL_TXN_BillingTransaction]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_RequestedByProvider_EMP_Employee] FOREIGN KEY([RequestedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_BillingTransactionItems] CHECK CONSTRAINT [FK_BIL_TXN_BillingTransactionItems_RequestedByProvider_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_TXN_CashHandover]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_CashHandover_CounterId_BIL_CFG_Counter_CounterId] FOREIGN KEY([CounterId])
REFERENCES [dbo].[BIL_CFG_Counter] ([CounterId])
GO
ALTER TABLE [dbo].[BIL_TXN_CashHandover] CHECK CONSTRAINT [FK_BIL_TXN_CashHandover_CounterId_BIL_CFG_Counter_CounterId]
GO
ALTER TABLE [dbo].[BIL_TXN_CashHandover]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_CashHandover_HandoverByEmpId_EMP_Employee_EmployeeId] FOREIGN KEY([HandoverByEmpId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_CashHandover] CHECK CONSTRAINT [FK_BIL_TXN_CashHandover_HandoverByEmpId_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[BIL_TXN_Denomination]  WITH NOCHECK ADD FOREIGN KEY([HandoverId])
REFERENCES [dbo].[BIL_MST_Handover] ([HandoverId])
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_Deposit_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit] CHECK CONSTRAINT [FK_BIL_TXN_Deposit_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_Deposit_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[BIL_TXN_Deposit] CHECK CONSTRAINT [FK_BIL_TXN_Deposit_PAT_Patient]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturn_CFG_Counter] FOREIGN KEY([CounterId])
REFERENCES [dbo].[BIL_CFG_Counter] ([CounterId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturn_CFG_Counter]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturn_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[BIL_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturn_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturn_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturn_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturn_Pat_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturn_Pat_Patient]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturn_TXN_BillingTransaction] FOREIGN KEY([BillingTransactionId])
REFERENCES [dbo].[BIL_TXN_BillingTransaction] ([BillingTransactionId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturn_TXN_BillingTransaction]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_BIL_CFG_Counter] FOREIGN KEY([RetCounterId])
REFERENCES [dbo].[BIL_CFG_Counter] ([CounterId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_BIL_CFG_Counter]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_BIL_MST_ServiceDepartment] FOREIGN KEY([ServiceDepartmentId])
REFERENCES [dbo].[BIL_MST_ServiceDepartment] ([ServiceDepartmentId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_BIL_MST_ServiceDepartment]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_BIL_TXN_InvoiceReturn] FOREIGN KEY([BillReturnId])
REFERENCES [dbo].[BIL_TXN_InvoiceReturn] ([BillReturnId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_BIL_TXN_InvoiceReturn]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_EMP_Employee]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_PAT_Patient]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_TXN_BillingTransaction] FOREIGN KEY([BillingTransactionId])
REFERENCES [dbo].[BIL_TXN_BillingTransaction] ([BillingTransactionId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_TXN_BillingTransaction]
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_TXN_BillingTransactionItems] FOREIGN KEY([BillingTransactionItemId])
REFERENCES [dbo].[BIL_TXN_BillingTransactionItems] ([BillingTransactionItemId])
GO
ALTER TABLE [dbo].[BIL_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_BIL_TXN_InvoiceReturnItems_TXN_BillingTransactionItems]
GO
ALTER TABLE [dbo].[CLN_ActiveMedicals]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientProblems_MST_ICD10] FOREIGN KEY([ICD10Code])
REFERENCES [dbo].[MST_ICD10] ([ICD10Code])
GO
ALTER TABLE [dbo].[CLN_ActiveMedicals] CHECK CONSTRAINT [FK_PAT_PatientProblems_MST_ICD10]
GO
ALTER TABLE [dbo].[CLN_ActiveMedicals]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientProblems_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_ActiveMedicals] CHECK CONSTRAINT [FK_PAT_PatientProblems_PAT_Patient]
GO
ALTER TABLE [dbo].[CLN_Allergies]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientAllergies_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_Allergies] CHECK CONSTRAINT [FK_PAT_PatientAllergies_PAT_Patient]
GO
ALTER TABLE [dbo].[CLN_FamilyHistory]  WITH NOCHECK ADD  CONSTRAINT [FK__PAT_Patient__PAT_FamilyHistory] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_FamilyHistory] CHECK CONSTRAINT [FK__PAT_Patient__PAT_FamilyHistory]
GO
ALTER TABLE [dbo].[CLN_FamilyHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_FamilyHistory_MST_ICD10] FOREIGN KEY([ICD10Code])
REFERENCES [dbo].[MST_ICD10] ([ICD10Code])
GO
ALTER TABLE [dbo].[CLN_FamilyHistory] CHECK CONSTRAINT [FK_PAT_FamilyHistory_MST_ICD10]
GO
ALTER TABLE [dbo].[CLN_HomeMedications]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_HomeMedication_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_HomeMedications] CHECK CONSTRAINT [FK_PAT_HomeMedication_PAT_Patient]
GO
ALTER TABLE [dbo].[CLN_InputOutput]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_InputOutput_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[CLN_InputOutput] CHECK CONSTRAINT [FK_CLN_InputOutput_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[CLN_MedicationPrescription]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_Medication_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_MedicationPrescription] CHECK CONSTRAINT [FK_CLN_Medication_PAT_Patient]
GO
ALTER TABLE [dbo].[CLN_MedicationPrescription]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_MedicationPrescription_EMP_Employee] FOREIGN KEY([ProviderId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CLN_MedicationPrescription] CHECK CONSTRAINT [FK_CLN_MedicationPrescription_EMP_Employee]
GO
ALTER TABLE [dbo].[CLN_MST_NoteType]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CLN_Notes]  WITH NOCHECK ADD FOREIGN KEY([NoteTypeId])
REFERENCES [dbo].[CLN_MST_NoteType] ([NoteTypeId])
GO
ALTER TABLE [dbo].[CLN_Notes]  WITH NOCHECK ADD FOREIGN KEY([SecondaryDoctorId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CLN_Notes]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_Notes_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[CLN_Notes] CHECK CONSTRAINT [FK_CLN_Notes_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[CLN_Notes_Emergency]  WITH NOCHECK ADD FOREIGN KEY([NotesId])
REFERENCES [dbo].[CLN_Notes] ([NotesId])
GO
ALTER TABLE [dbo].[CLN_Notes_Emergency]  WITH NOCHECK ADD FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_Notes_Emergency]  WITH NOCHECK ADD FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[CLN_Notes_Objective]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_Notes_Objective_CLN_Notes] FOREIGN KEY([NotesId])
REFERENCES [dbo].[CLN_Notes] ([NotesId])
GO
ALTER TABLE [dbo].[CLN_Notes_Objective] CHECK CONSTRAINT [FK_CLN_Notes_Objective_CLN_Notes]
GO
ALTER TABLE [dbo].[CLN_Notes_Subjective]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_Notes_Subjective_CLN_Notes] FOREIGN KEY([NotesId])
REFERENCES [dbo].[CLN_Notes] ([NotesId])
GO
ALTER TABLE [dbo].[CLN_Notes_Subjective] CHECK CONSTRAINT [FK_CLN_Notes_Subjective_CLN_Notes]
GO
ALTER TABLE [dbo].[CLN_PastMedicals]  WITH NOCHECK ADD  CONSTRAINT [FK__PAT_PastMedical__PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_PastMedicals] CHECK CONSTRAINT [FK__PAT_PastMedical__PAT_Patient]
GO
ALTER TABLE [dbo].[CLN_PastMedicals]  WITH NOCHECK ADD  CONSTRAINT [FK__PAT_Patient__MST_ICD10] FOREIGN KEY([ICD10Code])
REFERENCES [dbo].[MST_ICD10] ([ICD10Code])
GO
ALTER TABLE [dbo].[CLN_PastMedicals] CHECK CONSTRAINT [FK__PAT_Patient__MST_ICD10]
GO
ALTER TABLE [dbo].[CLN_PatientNotes]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_PatientNotes_CLN_PatientNotes] FOREIGN KEY([PatientNoteId])
REFERENCES [dbo].[CLN_PatientNotes] ([PatientNoteId])
GO
ALTER TABLE [dbo].[CLN_PatientNotes] CHECK CONSTRAINT [FK_CLN_PatientNotes_CLN_PatientNotes]
GO
ALTER TABLE [dbo].[CLN_PatientNotes]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_PatientNotes_PAT_PatientVisit] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[CLN_PatientNotes] CHECK CONSTRAINT [FK_CLN_PatientNotes_PAT_PatientVisit]
GO
ALTER TABLE [dbo].[CLN_PatientVitals]  WITH NOCHECK ADD  CONSTRAINT [FK_CLN_PatientVitals_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[CLN_PatientVitals] CHECK CONSTRAINT [FK_CLN_PatientVitals_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[CLN_SocialHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_SocialHistory_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_SocialHistory] CHECK CONSTRAINT [FK_PAT_SocialHistory_PAT_Patient]
GO
ALTER TABLE [dbo].[CLN_SurgicalHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_SurgicalHistory_MST_ICD10] FOREIGN KEY([ICD10Code])
REFERENCES [dbo].[MST_ICD10] ([ICD10Code])
GO
ALTER TABLE [dbo].[CLN_SurgicalHistory] CHECK CONSTRAINT [FK_PAT_SurgicalHistory_MST_ICD10]
GO
ALTER TABLE [dbo].[CLN_SurgicalHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_SurgicalHistory_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[CLN_SurgicalHistory] CHECK CONSTRAINT [FK_PAT_SurgicalHistory_PAT_Patient]
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Option]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_DYNTMP_Option_CORE_DYNTMP_Question] FOREIGN KEY([QuestionId])
REFERENCES [dbo].[CORE_DYNTMP_Question] ([QuestionId])
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Option] CHECK CONSTRAINT [FK_CORE_DYNTMP_Option_CORE_DYNTMP_Question]
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Question]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_DYNTMP_Question_CORE_DYNTMP_Questionnaire] FOREIGN KEY([QnairId])
REFERENCES [dbo].[CORE_DYNTMP_Questionnaire] ([QnairId])
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Question] CHECK CONSTRAINT [FK_CORE_DYNTMP_Question_CORE_DYNTMP_Questionnaire]
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Questionnaire]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_DYNTMP_Questionnaire_CORE_DYNTMP_Template] FOREIGN KEY([TemplateId])
REFERENCES [dbo].[CORE_DYNTMP_Template] ([TemplateId])
GO
ALTER TABLE [dbo].[CORE_DYNTMP_Questionnaire] CHECK CONSTRAINT [FK_CORE_DYNTMP_Questionnaire_CORE_DYNTMP_Template]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_CreatedBy_EMP_Emoloyee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_CreatedBy_EMP_Emoloyee]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_DisinfectedBy_EMP_Emoloyee] FOREIGN KEY([DisinfectedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_DisinfectedBy_EMP_Emoloyee]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_DispatchedBy_EMP_Emoloyee] FOREIGN KEY([DispatchedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_DispatchedBy_EMP_Emoloyee]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_INV_MST_Item]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_INV_TXN_FixedAssetStock] FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_INV_TXN_FixedAssetStock]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_CSSD_TXN_ItemTransaction_RequestedBy_EMP_Emoloyee] FOREIGN KEY([RequestedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[CSSD_TXN_ItemTransaction] CHECK CONSTRAINT [FK_CSSD_TXN_ItemTransaction_RequestedBy_EMP_Emoloyee]
GO
ALTER TABLE [dbo].[EMP_Employee]  WITH NOCHECK ADD  CONSTRAINT [FK__EMP_Emplo__Depar__24285DB4] FOREIGN KEY([DepartmentId])
REFERENCES [dbo].[MST_Department] ([DepartmentId])
GO
ALTER TABLE [dbo].[EMP_Employee] CHECK CONSTRAINT [FK__EMP_Emplo__Depar__24285DB4]
GO
ALTER TABLE [dbo].[EMP_Employee]  WITH NOCHECK ADD  CONSTRAINT [FK_EMP_Employee_EMP_EmployeeRole] FOREIGN KEY([EmployeeRoleId])
REFERENCES [dbo].[EMP_EmployeeRole] ([EmployeeRoleId])
GO
ALTER TABLE [dbo].[EMP_Employee] CHECK CONSTRAINT [FK_EMP_Employee_EMP_EmployeeRole]
GO
ALTER TABLE [dbo].[EMP_Employee]  WITH NOCHECK ADD  CONSTRAINT [FK_EMP_Employee_EMP_EmployeeType] FOREIGN KEY([EmployeeTypeId])
REFERENCES [dbo].[EMP_EmployeeType] ([EmployeeTypeId])
GO
ALTER TABLE [dbo].[EMP_Employee] CHECK CONSTRAINT [FK_EMP_Employee_EMP_EmployeeType]
GO
ALTER TABLE [dbo].[EMP_Employee]  WITH NOCHECK ADD  CONSTRAINT [FK_EMP_Employee_MST_Department] FOREIGN KEY([DepartmentId])
REFERENCES [dbo].[MST_Department] ([DepartmentId])
GO
ALTER TABLE [dbo].[EMP_Employee] CHECK CONSTRAINT [FK_EMP_Employee_MST_Department]
GO
ALTER TABLE [dbo].[EMP_EmployeePreferences]  WITH NOCHECK ADD  CONSTRAINT [FK_EMP_EmployeePreferences_EMP_Employee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[EMP_EmployeePreferences] CHECK CONSTRAINT [FK_EMP_EmployeePreferences_EMP_Employee]
GO
ALTER TABLE [dbo].[EMP_EmployeePreferences]  WITH NOCHECK ADD  CONSTRAINT [fk_EMP_EmployeePreferences_EMP_EmployeeTable] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[EMP_EmployeePreferences] CHECK CONSTRAINT [fk_EMP_EmployeePreferences_EMP_EmployeeTable]
GO
ALTER TABLE [dbo].[ER_FileUploads]  WITH NOCHECK ADD  CONSTRAINT [FK_ER_File_ER_Patient] FOREIGN KEY([ERPatientId])
REFERENCES [dbo].[ER_Patient] ([ERPatientId])
GO
ALTER TABLE [dbo].[ER_FileUploads] CHECK CONSTRAINT [FK_ER_File_ER_Patient]
GO
ALTER TABLE [dbo].[ER_FileUploads]  WITH NOCHECK ADD  CONSTRAINT [FK_ER_File_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[ER_FileUploads] CHECK CONSTRAINT [FK_ER_File_PAT_Patient]
GO
ALTER TABLE [dbo].[ER_Patient]  WITH NOCHECK ADD  CONSTRAINT [FK_ER_Pat_ModeOfArrival] FOREIGN KEY([ModeOfArrival])
REFERENCES [dbo].[ER_ModeOfArrival] ([ModeOfArrivalId])
GO
ALTER TABLE [dbo].[ER_Patient] CHECK CONSTRAINT [FK_ER_Pat_ModeOfArrival]
GO
ALTER TABLE [dbo].[ER_Patient]  WITH NOCHECK ADD  CONSTRAINT [FK_ER_PATIENT_PAT_PATIENT] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[ER_Patient] CHECK CONSTRAINT [FK_ER_PATIENT_PAT_PATIENT]
GO
ALTER TABLE [dbo].[ER_Patient]  WITH NOCHECK ADD  CONSTRAINT [FK_ER_PATIENTVISIT_PAT_PATIENTVISIT] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[ER_Patient] CHECK CONSTRAINT [FK_ER_PATIENTVISIT_PAT_PATIENTVISIT]
GO
ALTER TABLE [dbo].[ER_Patient_Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Case_ERPatient] FOREIGN KEY([ERPatientId])
REFERENCES [dbo].[ER_Patient] ([ERPatientId])
GO
ALTER TABLE [dbo].[ER_Patient_Cases] CHECK CONSTRAINT [FK_Case_ERPatient]
GO
ALTER TABLE [dbo].[FRC_FractionCalculation]  WITH NOCHECK ADD FOREIGN KEY([BillTxnItemId])
REFERENCES [dbo].[BIL_TXN_BillingTransactionItems] ([BillingTransactionItemId])
GO
ALTER TABLE [dbo].[FRC_FractionCalculation]  WITH NOCHECK ADD FOREIGN KEY([DesignationId])
REFERENCES [dbo].[FRC_Designation] ([DesignationId])
GO
ALTER TABLE [dbo].[FRC_FractionCalculation]  WITH NOCHECK ADD FOREIGN KEY([DoctorId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[FRC_FractionCalculation]  WITH NOCHECK ADD FOREIGN KEY([PercentSettingId])
REFERENCES [dbo].[FRC_PercentSetting] ([PercentSettingId])
GO
ALTER TABLE [dbo].[FRC_PercentSetting]  WITH NOCHECK ADD FOREIGN KEY([BillItemPriceId])
REFERENCES [dbo].[BIL_CFG_BillItemPrice] ([BillItemPriceId])
GO
ALTER TABLE [dbo].[ICD_DiseaseGroup]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[ICD_DiseaseGroup]  WITH NOCHECK ADD FOREIGN KEY([ReportingGroupId])
REFERENCES [dbo].[ICD_ReportingGroup] ([ReportingGroupId])
GO
ALTER TABLE [dbo].[ICD_ReportingGroup]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INCTV_BillItems_Profile_Map]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_BillItems_Profile_Map_BIL_CFG_BillItemPrice] FOREIGN KEY([BillItemPriceId])
REFERENCES [dbo].[BIL_CFG_BillItemPrice] ([BillItemPriceId])
GO
ALTER TABLE [dbo].[INCTV_BillItems_Profile_Map] CHECK CONSTRAINT [FK_INCTV_BillItems_Profile_Map_BIL_CFG_BillItemPrice]
GO
ALTER TABLE [dbo].[INCTV_BillItems_Profile_Map]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_BillItems_Profile_Map_INCTV_MST_Profile] FOREIGN KEY([ProfileId])
REFERENCES [dbo].[INCTV_MST_Profile] ([ProfileId])
GO
ALTER TABLE [dbo].[INCTV_BillItems_Profile_Map] CHECK CONSTRAINT [FK_INCTV_BillItems_Profile_Map_INCTV_MST_Profile]
GO
ALTER TABLE [dbo].[INCTV_CFG_ItemGroupDistribution]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_CFG_ItemGroupDistribution_EMP_EMployee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INCTV_CFG_ItemGroupDistribution] CHECK CONSTRAINT [FK_INCTV_CFG_ItemGroupDistribution_EMP_EMployee]
GO
ALTER TABLE [dbo].[INCTV_CFG_ItemGroupDistribution]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_CFG_ItemGroupDistribution_INCTV_MAP_EmployeeBillItemsMap] FOREIGN KEY([EmployeeBillItemsMapId])
REFERENCES [dbo].[INCTV_MAP_EmployeeBillItemsMap] ([EmployeeBillItemsMapId])
GO
ALTER TABLE [dbo].[INCTV_CFG_ItemGroupDistribution] CHECK CONSTRAINT [FK_INCTV_CFG_ItemGroupDistribution_INCTV_MAP_EmployeeBillItemsMap]
GO
ALTER TABLE [dbo].[INCTV_MAP_EmployeeBillItemsMap]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_BillItems_Employee_Map_BIL_CFG_BillItemPrice] FOREIGN KEY([BillItemPriceId])
REFERENCES [dbo].[BIL_CFG_BillItemPrice] ([BillItemPriceId])
GO
ALTER TABLE [dbo].[INCTV_MAP_EmployeeBillItemsMap] CHECK CONSTRAINT [FK_INCTV_BillItems_Employee_Map_BIL_CFG_BillItemPrice]
GO
ALTER TABLE [dbo].[INCTV_MAP_EmployeeBillItemsMap]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_BillItems_Employee_Map_EMP_EMployee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INCTV_MAP_EmployeeBillItemsMap] CHECK CONSTRAINT [FK_INCTV_BillItems_Employee_Map_EMP_EMployee]
GO
ALTER TABLE [dbo].[INCTV_MST_Profile]  WITH NOCHECK ADD  CONSTRAINT [FK_INCTV_MST_Profile_INCTV_MST_PriceCategory] FOREIGN KEY([PriceCategoryId])
REFERENCES [dbo].[BIL_CFG_PriceCategory] ([PriceCategoryId])
GO
ALTER TABLE [dbo].[INCTV_MST_Profile] CHECK CONSTRAINT [FK_INCTV_MST_Profile_INCTV_MST_PriceCategory]
GO
ALTER TABLE [dbo].[INS_InsuranceBalanceAmount_History]  WITH NOCHECK ADD  CONSTRAINT [FK_INS_InsuranceBalanceAmounHistory_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INS_InsuranceBalanceAmount_History] CHECK CONSTRAINT [FK_INS_InsuranceBalanceAmounHistory_EMP_Employee]
GO
ALTER TABLE [dbo].[INV_AssetConditionCheckList]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetConditionCheckList]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_AssetConditionCheckList]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetContractFileInfo]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetContractFileInfo]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_AssetContractFileInfo]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetFaultHistory]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetFaultHistory]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_AssetFaultHistory]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetInsurance]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetInsurance]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_AssetInsurance]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetLocationHistory]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetLocationHistory]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_AssetServiceHistory]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_AssetServiceHistory]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_AssetServiceHistory]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_FiscalYearStock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_FiscalYearStock_INV_CFG_FiscalYear] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[INV_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[INV_FiscalYearStock] CHECK CONSTRAINT [FK_INV_FiscalYearStock_INV_CFG_FiscalYear]
GO
ALTER TABLE [dbo].[INV_MST_AccountHead]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_ItemUsage_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_AccountHead] CHECK CONSTRAINT [FK_INV_MST_ItemUsage_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_MST_AssetCategory]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_AssetCategory]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_AssetCategory]  WITH NOCHECK ADD FOREIGN KEY([SubCategoryId])
REFERENCES [dbo].[INV_MST_ItemSubCategory] ([SubCategoryId])
GO
ALTER TABLE [dbo].[INV_MST_AssetDepreciationMethod]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Company]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Company_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Company] CHECK CONSTRAINT [FK_INV_MST_Company_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[INV_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Item_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Item] CHECK CONSTRAINT [FK_INV_MST_Item_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Item_INV_MST_ItemCategory] FOREIGN KEY([ItemCategoryId])
REFERENCES [dbo].[INV_MST_ItemCategory] ([ItemCategoryId])
GO
ALTER TABLE [dbo].[INV_MST_Item] CHECK CONSTRAINT [FK_INV_MST_Item_INV_MST_ItemCategory]
GO
ALTER TABLE [dbo].[INV_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Item_INV_MST_PackagingType] FOREIGN KEY([PackagingTypeId])
REFERENCES [dbo].[INV_MST_PackagingType] ([PackagingTypeId])
GO
ALTER TABLE [dbo].[INV_MST_Item] CHECK CONSTRAINT [FK_INV_MST_Item_INV_MST_PackagingType]
GO
ALTER TABLE [dbo].[INV_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Item_INV_MST_UOM] FOREIGN KEY([UnitOfMeasurementId])
REFERENCES [dbo].[INV_MST_UnitOfMeasurement] ([UOMId])
GO
ALTER TABLE [dbo].[INV_MST_Item] CHECK CONSTRAINT [FK_INV_MST_Item_INV_MST_UOM]
GO
ALTER TABLE [dbo].[INV_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Item_MaintenanceOwnerRoleId_RBAC_Role] FOREIGN KEY([MaintenanceOwnerRoleId])
REFERENCES [dbo].[RBAC_Role] ([RoleId])
GO
ALTER TABLE [dbo].[INV_MST_Item] CHECK CONSTRAINT [FK_INV_MST_Item_MaintenanceOwnerRoleId_RBAC_Role]
GO
ALTER TABLE [dbo].[INV_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Item_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_MST_Item] CHECK CONSTRAINT [FK_INV_MST_Item_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[INV_MST_ItemCategory]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_ItemCategory_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_ItemCategory] CHECK CONSTRAINT [FK_INV_MST_ItemCategory_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_MST_PackagingType]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_PackagingType_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_PackagingType] CHECK CONSTRAINT [FK_INV_MST_PackagingType_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Stock_EMP_Employee_CreatedBy] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Stock] CHECK CONSTRAINT [FK_INV_MST_Stock_EMP_Employee_CreatedBy]
GO
ALTER TABLE [dbo].[INV_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Stock_EMP_Employee_ModifiedBy] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Stock] CHECK CONSTRAINT [FK_INV_MST_Stock_EMP_Employee_ModifiedBy]
GO
ALTER TABLE [dbo].[INV_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Stock_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_MST_Stock] CHECK CONSTRAINT [FK_INV_MST_Stock_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_MST_Terms]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Terms_EMP_Employee] FOREIGN KEY([TermsId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Terms] CHECK CONSTRAINT [FK_INV_MST_Terms_EMP_Employee]
GO
ALTER TABLE [dbo].[INV_MST_UnitOfMeasurement]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_UnitOfMeasurement_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_UnitOfMeasurement] CHECK CONSTRAINT [FK_INV_MST_UnitOfMeasurement_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_MST_Vendor]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Vendor_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_MST_Vendor] CHECK CONSTRAINT [FK_INV_MST_Vendor_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_MST_Vendor]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_Vendor_INV_MST_Currency] FOREIGN KEY([DefaultCurrencyId])
REFERENCES [dbo].[INV_MST_Currency] ([CurrencyID])
GO
ALTER TABLE [dbo].[INV_MST_Vendor] CHECK CONSTRAINT [FK_INV_MST_Vendor_INV_MST_Currency]
GO
ALTER TABLE [dbo].[INV_RequestForQuotation]  WITH NOCHECK ADD FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_RequestForQuotationVendors]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_RequestForQuotationVendors_INV_MST_Vendor] FOREIGN KEY([VendorId])
REFERENCES [dbo].[INV_MST_Vendor] ([VendorId])
GO
ALTER TABLE [dbo].[INV_RequestForQuotationVendors] CHECK CONSTRAINT [FK_INV_RequestForQuotationVendors_INV_MST_Vendor]
GO
ALTER TABLE [dbo].[INV_RequestForQuotationVendors]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_RequestForQuotationVendors_INV_RequestForQuotation] FOREIGN KEY([ReqForQuotationId])
REFERENCES [dbo].[INV_RequestForQuotation] ([ReqForQuotationId])
GO
ALTER TABLE [dbo].[INV_RequestForQuotationVendors] CHECK CONSTRAINT [FK_INV_RequestForQuotationVendors_INV_RequestForQuotation]
GO
ALTER TABLE [dbo].[INV_TXN_AssetDepreciation]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_AssetDepreciation]  WITH NOCHECK ADD FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_TXN_AssetDepreciation]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_DispatchItems_INV_TXN_RequisitionItems] FOREIGN KEY([RequisitionItemId])
REFERENCES [dbo].[INV_TXN_RequisitionItems] ([RequisitionItemId])
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems] CHECK CONSTRAINT [FK_INV_TXN_DispatchItems_INV_TXN_RequisitionItems]
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_DispatchItems_SourceStoreId_PHRM_MST_Store] FOREIGN KEY([SourceStoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems] CHECK CONSTRAINT [FK_INV_TXN_DispatchItems_SourceStoreId_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_DispatchItems_TargetStoreId_PHRM_MST_Store] FOREIGN KEY([TargetStoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_DispatchItems] CHECK CONSTRAINT [FK_INV_TXN_DispatchItems_TargetStoreId_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetRequisition_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisition] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetRequisition_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetRequisition_INV_TXN_FixedAssetRequisition] FOREIGN KEY([RequisitionId])
REFERENCES [dbo].[INV_TXN_FixedAssetRequisition] ([RequisitionId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisition] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetRequisition_INV_TXN_FixedAssetRequisition]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetRequisitionItems_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetRequisitionItems_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetRequisitionItems_FixedAssetRequisition_ID] FOREIGN KEY([RequisitionId])
REFERENCES [dbo].[INV_TXN_FixedAssetRequisition] ([RequisitionId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetRequisitionItems_FixedAssetRequisition_ID]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetRequisitionItems_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetRequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetRequisitionItems_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetReturn_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturn] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetReturn_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_FixedAssetReturnItems_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturnItems] CHECK CONSTRAINT [FK_INV_TXN_FixedAssetReturnItems_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturnItems]  WITH NOCHECK ADD  CONSTRAINT [Fk_INV_TXN_FixedAssetReturnItems_INV_TXN_FixedAssetReturn] FOREIGN KEY([ReturnId])
REFERENCES [dbo].[INV_TXN_FixedAssetReturn] ([ReturnId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturnItems] CHECK CONSTRAINT [Fk_INV_TXN_FixedAssetReturnItems_INV_TXN_FixedAssetReturn]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturnItems]  WITH NOCHECK ADD  CONSTRAINT [Fk_INV_TXN_FixedAssetReturnItems_INV_TXN_FixedAssetStock] FOREIGN KEY([FixedAssetStockId])
REFERENCES [dbo].[INV_TXN_FixedAssetStock] ([FixedAssetStockId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetReturnItems] CHECK CONSTRAINT [Fk_INV_TXN_FixedAssetReturnItems_INV_TXN_FixedAssetStock]
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetStock]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetStock]  WITH NOCHECK ADD FOREIGN KEY([GoodsReceiptItemId])
REFERENCES [dbo].[INV_TXN_GoodsReceiptItems] ([GoodsReceiptItemId])
GO
ALTER TABLE [dbo].[INV_TXN_FixedAssetStock]  WITH NOCHECK ADD FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt]  WITH NOCHECK ADD FOREIGN KEY([DonationId])
REFERENCES [dbo].[INV_MST_Donation] ([DonationId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt]  WITH NOCHECK ADD FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_MST_GoodsReceipt_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt] CHECK CONSTRAINT [FK_INV_MST_GoodsReceipt_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_GoodsReceipt_INV_MST_Vendor] FOREIGN KEY([VendorId])
REFERENCES [dbo].[INV_MST_Vendor] ([VendorId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt] CHECK CONSTRAINT [FK_INV_TXN_GoodsReceipt_INV_MST_Vendor]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_GoodsReceipt_INV_TXN_PurchaseOrder] FOREIGN KEY([PurchaseOrderId])
REFERENCES [dbo].[INV_TXN_PurchaseOrder] ([PurchaseOrderId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceipt] CHECK CONSTRAINT [FK_INV_TXN_GoodsReceipt_INV_TXN_PurchaseOrder]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceiptItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_GoodsReceiptItems_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceiptItems] CHECK CONSTRAINT [FK_INV_TXN_GoodsReceiptItems_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceiptItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_GoodsReceiptItems_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceiptItems] CHECK CONSTRAINT [FK_INV_TXN_GoodsReceiptItems_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceiptItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_GoodsReceiptItems_INV_TXN_GoodsReceipt] FOREIGN KEY([GoodsReceiptId])
REFERENCES [dbo].[INV_TXN_GoodsReceipt] ([GoodsReceiptID])
GO
ALTER TABLE [dbo].[INV_TXN_GoodsReceiptItems] CHECK CONSTRAINT [FK_INV_TXN_GoodsReceiptItems_INV_TXN_GoodsReceipt]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder]  WITH NOCHECK ADD FOREIGN KEY([InvoiceHeaderId])
REFERENCES [dbo].[MST_InvoiceHeaders] ([InvoiceHeaderId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder]  WITH NOCHECK ADD FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrder_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrder_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrder_INV_MST_Currency] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[INV_MST_Currency] ([CurrencyID])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrder_INV_MST_Currency]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrder_INV_MST_Vendor] FOREIGN KEY([VendorId])
REFERENCES [dbo].[INV_MST_Vendor] ([VendorId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrder] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrder_INV_MST_Vendor]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_Emp_Employee_AuthorizeBy] FOREIGN KEY([AuthorizedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_Emp_Employee_AuthorizeBy]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_INV_TXN_PurchaseOrder] FOREIGN KEY([PurchaseOrderId])
REFERENCES [dbo].[INV_TXN_PurchaseOrder] ([PurchaseOrderId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseOrderItems] CHECK CONSTRAINT [FK_INV_TXN_PurchaseOrderItems_INV_TXN_PurchaseOrder]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseRequest]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_purchase_request_StoreId] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseRequest] CHECK CONSTRAINT [FK_INV_TXN_purchase_request_StoreId]
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseRequestItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_PurchaseRequestItems_PurchaseRequest] FOREIGN KEY([PurchaseRequestId])
REFERENCES [dbo].[INV_TXN_PurchaseRequest] ([PurchaseRequestId])
GO
ALTER TABLE [dbo].[INV_TXN_PurchaseRequestItems] CHECK CONSTRAINT [FK_INV_TXN_PurchaseRequestItems_PurchaseRequest]
GO
ALTER TABLE [dbo].[INV_TXN_Requisition]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_Requisition_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_Requisition] CHECK CONSTRAINT [FK_INV_TXN_Requisition_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_Requisition]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_Requisition_MST_Department] FOREIGN KEY([DepartmentId])
REFERENCES [dbo].[MST_Department] ([DepartmentId])
GO
ALTER TABLE [dbo].[INV_TXN_Requisition] CHECK CONSTRAINT [FK_INV_TXN_Requisition_MST_Department]
GO
ALTER TABLE [dbo].[INV_TXN_Requisition]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_Verification_TXN_Verification] FOREIGN KEY([VerificationId])
REFERENCES [dbo].[TXN_Verification] ([VerificationId])
GO
ALTER TABLE [dbo].[INV_TXN_Requisition] CHECK CONSTRAINT [FK_INV_TXN_Verification_TXN_Verification]
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_RequestedItems_AuthorizedBy_Emp_Employee_EmployeeId] FOREIGN KEY([AuthorizedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_RequestedItems_AuthorizedBy_Emp_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_RequestedItems_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_RequestedItems_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_RequestedItems_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_RequestedItems_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_RequestedItems_INV_TXN_Requisition] FOREIGN KEY([RequisitionId])
REFERENCES [dbo].[INV_TXN_Requisition] ([RequisitionId])
GO
ALTER TABLE [dbo].[INV_TXN_RequisitionItems] CHECK CONSTRAINT [FK_INV_TXN_RequestedItems_INV_TXN_Requisition]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendor]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_ReturnToVendor_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendor] CHECK CONSTRAINT [FK_INV_TXN_ReturnToVendor_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendor]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_ReturnToVendor_VendorId_INV_MST_Vendor_VendorId] FOREIGN KEY([VendorId])
REFERENCES [dbo].[INV_MST_Vendor] ([VendorId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendor] CHECK CONSTRAINT [FK_INV_TXN_ReturnToVendor_VendorId_INV_MST_Vendor_VendorId]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendor]  WITH NOCHECK ADD  CONSTRAINT [FK_returnTovendor_Phrm_mst_store_storeId] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendor] CHECK CONSTRAINT [FK_returnTovendor_Phrm_mst_store_storeId]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems]  WITH NOCHECK ADD FOREIGN KEY([ReturnToVendorId])
REFERENCES [dbo].[INV_TXN_ReturnToVendor] ([ReturnToVendorId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_ReturnToVendorItems_Emp_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems] CHECK CONSTRAINT [FK_INV_TXN_ReturnToVendorItems_Emp_Employee]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems]  WITH NOCHECK ADD  CONSTRAINT [Fk_INV_TXN_ReturnToVendorItems_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems] CHECK CONSTRAINT [Fk_INV_TXN_ReturnToVendorItems_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems]  WITH NOCHECK ADD  CONSTRAINT [Fk_INV_TXN_ReturnToVendorItems_INV_MST_Vendor] FOREIGN KEY([VendorId])
REFERENCES [dbo].[INV_MST_Vendor] ([VendorId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems] CHECK CONSTRAINT [Fk_INV_TXN_ReturnToVendorItems_INV_MST_Vendor]
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems]  WITH NOCHECK ADD  CONSTRAINT [INV_TXN_ReturnToVendorItems_INV_MST_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[INV_MST_Stock] ([StockId])
GO
ALTER TABLE [dbo].[INV_TXN_ReturnToVendorItems] CHECK CONSTRAINT [INV_TXN_ReturnToVendorItems_INV_MST_Stock]
GO
ALTER TABLE [dbo].[INV_TXN_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_Stock_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_Stock] CHECK CONSTRAINT [FK_INV_TXN_Stock_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[INV_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_StockTransaction_INV_TXN_StoreStock] FOREIGN KEY([StoreStockId])
REFERENCES [dbo].[INV_TXN_StoreStock] ([StoreStockId])
GO
ALTER TABLE [dbo].[INV_TXN_StockTransaction] CHECK CONSTRAINT [FK_INV_TXN_StockTransaction_INV_TXN_StoreStock]
GO
ALTER TABLE [dbo].[INV_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_StockTransaction_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_StockTransaction] CHECK CONSTRAINT [FK_INV_TXN_StockTransaction_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[INV_TXN_StoreStock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_StoreStock_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_StoreStock] CHECK CONSTRAINT [FK_INV_TXN_StoreStock_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_StoreStock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_StoreStock_INV_MST_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[INV_MST_Stock] ([StockId])
GO
ALTER TABLE [dbo].[INV_TXN_StoreStock] CHECK CONSTRAINT [FK_INV_TXN_StoreStock_INV_MST_Stock]
GO
ALTER TABLE [dbo].[INV_TXN_StoreStock]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_StoreStock_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_StoreStock] CHECK CONSTRAINT [FK_INV_TXN_StoreStock_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[INV_TXN_WriteOffItems]  WITH NOCHECK ADD  CONSTRAINT [FK_INV_TXN_WriteOffItems_INV_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[INV_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[INV_TXN_WriteOffItems] CHECK CONSTRAINT [FK_INV_TXN_WriteOffItems_INV_MST_Item]
GO
ALTER TABLE [dbo].[INV_TXN_WriteOffItems]  WITH NOCHECK ADD  CONSTRAINT [FK_WriteOffItems_Phrm_mst_store_storeId] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[INV_TXN_WriteOffItems] CHECK CONSTRAINT [FK_WriteOffItems_Phrm_mst_store_storeId]
GO
ALTER TABLE [dbo].[Lab_Gov_Report_Mapping]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_Gov_ReportMapping_Gov_Report_Items] FOREIGN KEY([ReportItemId])
REFERENCES [dbo].[Lab_Mst_Gov_Report_Items] ([ReportItemId])
GO
ALTER TABLE [dbo].[Lab_Gov_Report_Mapping] CHECK CONSTRAINT [FK_LAB_Gov_ReportMapping_Gov_Report_Items]
GO
ALTER TABLE [dbo].[LAB_LabTests]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_Tests_Lab_Report_Template] FOREIGN KEY([ReportTemplateID])
REFERENCES [dbo].[Lab_ReportTemplate] ([ReportTemplateID])
GO
ALTER TABLE [dbo].[LAB_LabTests] CHECK CONSTRAINT [FK_LAB_Tests_Lab_Report_Template]
GO
ALTER TABLE [dbo].[LAB_LIS_ComponentMap]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_LIS_ComponentMap_LAB_MST_Component] FOREIGN KEY([ComponentId])
REFERENCES [dbo].[Lab_MST_Components] ([ComponentId])
GO
ALTER TABLE [dbo].[LAB_LIS_ComponentMap] CHECK CONSTRAINT [FK_LAB_LIS_ComponentMap_LAB_MST_Component]
GO
ALTER TABLE [dbo].[Lab_MAP_TestComponents]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_MST_COMPONENTS_MAPTESTCOMPONENT] FOREIGN KEY([ComponentId])
REFERENCES [dbo].[Lab_MST_Components] ([ComponentId])
GO
ALTER TABLE [dbo].[Lab_MAP_TestComponents] CHECK CONSTRAINT [FK_LAB_MST_COMPONENTS_MAPTESTCOMPONENT]
GO
ALTER TABLE [dbo].[Lab_MAP_TestComponents]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TEST_MAPTESTCOMPONENT] FOREIGN KEY([LabTestId])
REFERENCES [dbo].[LAB_LabTests] ([LabTestId])
GO
ALTER TABLE [dbo].[Lab_MAP_TestComponents] CHECK CONSTRAINT [FK_LAB_TEST_MAPTESTCOMPONENT]
GO
ALTER TABLE [dbo].[LAB_TestRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TestRequisition_CLN_Disgnosis] FOREIGN KEY([DiagnosisId])
REFERENCES [dbo].[CLN_Diagnosis] ([DiagnosisId])
GO
ALTER TABLE [dbo].[LAB_TestRequisition] CHECK CONSTRAINT [FK_LAB_TestRequisition_CLN_Disgnosis]
GO
ALTER TABLE [dbo].[LAB_TestRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TestRequisition_EMP_Employee] FOREIGN KEY([ProviderId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[LAB_TestRequisition] CHECK CONSTRAINT [FK_LAB_TestRequisition_EMP_Employee]
GO
ALTER TABLE [dbo].[LAB_TestRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TESTREQUISITION_LAB_BARCODE] FOREIGN KEY([BarCodeNumber])
REFERENCES [dbo].[LAB_BarCode] ([BarCodeNumber])
GO
ALTER TABLE [dbo].[LAB_TestRequisition] CHECK CONSTRAINT [FK_LAB_TESTREQUISITION_LAB_BARCODE]
GO
ALTER TABLE [dbo].[LAB_TestRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TestRequisition_LAB_LabTests] FOREIGN KEY([LabTestId])
REFERENCES [dbo].[LAB_LabTests] ([LabTestId])
GO
ALTER TABLE [dbo].[LAB_TestRequisition] CHECK CONSTRAINT [FK_LAB_TestRequisition_LAB_LabTests]
GO
ALTER TABLE [dbo].[LAB_TestRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TestRequisition_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[LAB_TestRequisition] CHECK CONSTRAINT [FK_LAB_TestRequisition_PAT_Patient]
GO
ALTER TABLE [dbo].[LAB_TestRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TestRequisition_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[LAB_TestRequisition] CHECK CONSTRAINT [FK_LAB_TestRequisition_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[LAB_TXN_TestComponentResult]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TXN_TestComponentResult_LAB_LabTests] FOREIGN KEY([LabTestId])
REFERENCES [dbo].[LAB_LabTests] ([LabTestId])
GO
ALTER TABLE [dbo].[LAB_TXN_TestComponentResult] CHECK CONSTRAINT [FK_LAB_TXN_TestComponentResult_LAB_LabTests]
GO
ALTER TABLE [dbo].[LAB_TXN_TestComponentResult]  WITH NOCHECK ADD  CONSTRAINT [FK_LAB_TXN_TestComponentResult_LAB_TestRequisition] FOREIGN KEY([RequisitionId])
REFERENCES [dbo].[LAB_TestRequisition] ([RequisitionId])
GO
ALTER TABLE [dbo].[LAB_TXN_TestComponentResult] CHECK CONSTRAINT [FK_LAB_TXN_TestComponentResult_LAB_TestRequisition]
GO
ALTER TABLE [dbo].[MAT_FileUploads]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_File_Maternity_Patient] FOREIGN KEY([MaternityPatientId])
REFERENCES [dbo].[MAT_Patient] ([MaternityPatientId])
GO
ALTER TABLE [dbo].[MAT_FileUploads] CHECK CONSTRAINT [FK_MAT_File_Maternity_Patient]
GO
ALTER TABLE [dbo].[MAT_FileUploads]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_File_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MAT_FileUploads] CHECK CONSTRAINT [FK_MAT_File_PAT_Patient]
GO
ALTER TABLE [dbo].[MAT_MaternityANC]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_ANC_Maternity_Patient] FOREIGN KEY([MaternityPatientId])
REFERENCES [dbo].[MAT_Patient] ([MaternityPatientId])
GO
ALTER TABLE [dbo].[MAT_MaternityANC] CHECK CONSTRAINT [FK_MAT_ANC_Maternity_Patient]
GO
ALTER TABLE [dbo].[MAT_MaternityANC]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_ANC_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MAT_MaternityANC] CHECK CONSTRAINT [FK_MAT_ANC_PAT_Patient]
GO
ALTER TABLE [dbo].[MAT_Patient]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_Patient_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MAT_Patient] CHECK CONSTRAINT [FK_MAT_Patient_PAT_Patient]
GO
ALTER TABLE [dbo].[MAT_Register]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_Register_Maternity_Patient] FOREIGN KEY([MaternityPatientId])
REFERENCES [dbo].[MAT_Patient] ([MaternityPatientId])
GO
ALTER TABLE [dbo].[MAT_Register] CHECK CONSTRAINT [FK_MAT_Register_Maternity_Patient]
GO
ALTER TABLE [dbo].[MAT_Register]  WITH NOCHECK ADD  CONSTRAINT [FK_MAT_Register_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MAT_Register] CHECK CONSTRAINT [FK_MAT_Register_PAT_Patient]
GO
ALTER TABLE [dbo].[MAT_TXN_PatientPayments]  WITH NOCHECK ADD  CONSTRAINT [MAT_TXN_PatientPayments_BIL_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[BIL_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[MAT_TXN_PatientPayments] CHECK CONSTRAINT [MAT_TXN_PatientPayments_BIL_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[MAT_TXN_PatientPayments]  WITH NOCHECK ADD  CONSTRAINT [MAT_TXN_PatientPayments_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[MAT_TXN_PatientPayments] CHECK CONSTRAINT [MAT_TXN_PatientPayments_EMP_Employee]
GO
ALTER TABLE [dbo].[MAT_TXN_PatientPayments]  WITH NOCHECK ADD  CONSTRAINT [MAT_TXN_PatientPayments_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MAT_TXN_PatientPayments] CHECK CONSTRAINT [MAT_TXN_PatientPayments_PAT_Patient]
GO
ALTER TABLE [dbo].[MR_TXN_Inpatient_Diagnosis]  WITH NOCHECK ADD FOREIGN KEY([ICD10ID])
REFERENCES [dbo].[MST_ICD10] ([ICD10ID])
GO
ALTER TABLE [dbo].[MR_TXN_Inpatient_Diagnosis]  WITH NOCHECK ADD FOREIGN KEY([MedicalRecordId])
REFERENCES [dbo].[MR_RecordSummary] ([MedicalRecordId])
GO
ALTER TABLE [dbo].[MR_TXN_Inpatient_Diagnosis]  WITH NOCHECK ADD FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MR_TXN_Inpatient_Diagnosis]  WITH NOCHECK ADD FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[MR_TXN_Outpatient_FinalDiagnosis]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[MR_TXN_Outpatient_FinalDiagnosis]  WITH NOCHECK ADD FOREIGN KEY([ICD10ID])
REFERENCES [dbo].[MST_ICD10] ([ICD10ID])
GO
ALTER TABLE [dbo].[MR_TXN_Outpatient_FinalDiagnosis]  WITH NOCHECK ADD FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[MR_TXN_Outpatient_FinalDiagnosis]  WITH NOCHECK ADD FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[MR_TXN_Outpatient_FinalDiagnosis]  WITH NOCHECK ADD FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[MST_CountrySubDivision]  WITH NOCHECK ADD  CONSTRAINT [FK_MST_CountrySubDivision_MST_Country] FOREIGN KEY([CountryId])
REFERENCES [dbo].[MST_Country] ([CountryId])
GO
ALTER TABLE [dbo].[MST_CountrySubDivision] CHECK CONSTRAINT [FK_MST_CountrySubDivision_MST_Country]
GO
ALTER TABLE [dbo].[MST_Department]  WITH NOCHECK ADD  CONSTRAINT [FK_MST_Department_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[MST_Department] CHECK CONSTRAINT [FK_MST_Department_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[MST_Department]  WITH NOCHECK ADD  CONSTRAINT [FK_MST_Department_FK_MST_Departmnet] FOREIGN KEY([ParentDepartmentId])
REFERENCES [dbo].[MST_Department] ([DepartmentId])
GO
ALTER TABLE [dbo].[MST_Department] CHECK CONSTRAINT [FK_MST_Department_FK_MST_Departmnet]
GO
ALTER TABLE [dbo].[MST_Department]  WITH NOCHECK ADD  CONSTRAINT [FK_MST_Department_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[MST_Department] CHECK CONSTRAINT [FK_MST_Department_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[MST_ICD10]  WITH NOCHECK ADD FOREIGN KEY([DiseaseGroupId])
REFERENCES [dbo].[ICD_DiseaseGroup] ([DiseaseGroupId])
GO
ALTER TABLE [dbo].[MST_MAP_StoreVerification]  WITH NOCHECK ADD  CONSTRAINT [FK_MST_MAP_StoreVerification_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[MST_MAP_StoreVerification] CHECK CONSTRAINT [FK_MST_MAP_StoreVerification_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[MST_Municipality]  WITH NOCHECK ADD FOREIGN KEY([CountryId])
REFERENCES [dbo].[MST_Country] ([CountryId])
GO
ALTER TABLE [dbo].[MST_Municipality]  WITH NOCHECK ADD FOREIGN KEY([CountrySubDivisionId])
REFERENCES [dbo].[MST_CountrySubDivision] ([CountrySubDivisionId])
GO
ALTER TABLE [dbo].[MST_RPT_DynamicReportingItems]  WITH NOCHECK ADD  CONSTRAINT [FK_reportingItems_dynamicReportId] FOREIGN KEY([DynamicReportId])
REFERENCES [dbo].[MST_RPT_DynamicReportName] ([DynamicReportId])
GO
ALTER TABLE [dbo].[MST_RPT_DynamicReportingItems] CHECK CONSTRAINT [FK_reportingItems_dynamicReportId]
GO
ALTER TABLE [dbo].[OT_TXN_BookingDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_Patient_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[OT_TXN_BookingDetails] CHECK CONSTRAINT [FK_PAT_Patient_PatientId]
GO
ALTER TABLE [dbo].[OT_TXN_BookingDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientVisits_PatientVisitId] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[OT_TXN_BookingDetails] CHECK CONSTRAINT [FK_PAT_PatientVisits_PatientVisitId]
GO
ALTER TABLE [dbo].[OT_TXN_CheckListInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_OT_TXN_BookingDetails_BookingId] FOREIGN KEY([OTBookingId])
REFERENCES [dbo].[OT_TXN_BookingDetails] ([OTBookingId])
GO
ALTER TABLE [dbo].[OT_TXN_CheckListInfo] CHECK CONSTRAINT [FK_OT_TXN_BookingDetails_BookingId]
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_EMP_Employee_EmployeeId] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo] CHECK CONSTRAINT [FK_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_OT_BookingDetails_BookingId] FOREIGN KEY([OTBookingId])
REFERENCES [dbo].[OT_TXN_BookingDetails] ([OTBookingId])
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo] CHECK CONSTRAINT [FK_OT_BookingDetails_BookingId]
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_OT_Teams_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo] CHECK CONSTRAINT [FK_OT_Teams_PatientId]
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_OT_Teams_PatientVisitId] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[OT_TXN_OtTeamsInfo] CHECK CONSTRAINT [FK_OT_Teams_PatientVisitId]
GO
ALTER TABLE [dbo].[OT_TXN_Summary]  WITH NOCHECK ADD  CONSTRAINT [FK_OT_TXN_BookingDetails_OTBookingId] FOREIGN KEY([OTBookingId])
REFERENCES [dbo].[OT_TXN_BookingDetails] ([OTBookingId])
GO
ALTER TABLE [dbo].[OT_TXN_Summary] CHECK CONSTRAINT [FK_OT_TXN_BookingDetails_OTBookingId]
GO
ALTER TABLE [dbo].[PAT_Appointment]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_Appointment_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PAT_Appointment] CHECK CONSTRAINT [FK_PAT_Appointment_EMP_Employee]
GO
ALTER TABLE [dbo].[PAT_Appointment]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_Appointment_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_Appointment] CHECK CONSTRAINT [FK_PAT_Appointment_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_CFG_MembershipType]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_CFG_MembershipType_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PAT_CFG_MembershipType] CHECK CONSTRAINT [FK_PAT_CFG_MembershipType_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PAT_CFG_MembershipType]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_CFG_MembershipType_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PAT_CFG_MembershipType] CHECK CONSTRAINT [FK_PAT_CFG_MembershipType_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PAT_HealthCardInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_HealthCardInfo_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_HealthCardInfo] CHECK CONSTRAINT [FK_PAT_HealthCardInfo_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_Patient]  WITH NOCHECK ADD  CONSTRAINT [FK_Pat_Patients_MembershipType] FOREIGN KEY([MembershipTypeId])
REFERENCES [dbo].[PAT_CFG_MembershipType] ([MembershipTypeId])
GO
ALTER TABLE [dbo].[PAT_Patient] CHECK CONSTRAINT [FK_Pat_Patients_MembershipType]
GO
ALTER TABLE [dbo].[PAT_PatientAddress]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientAddress_MST_Country] FOREIGN KEY([CountryId])
REFERENCES [dbo].[MST_Country] ([CountryId])
GO
ALTER TABLE [dbo].[PAT_PatientAddress] CHECK CONSTRAINT [FK_PAT_PatientAddress_MST_Country]
GO
ALTER TABLE [dbo].[PAT_PatientAddress]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientAddress_PAT_Patient] FOREIGN KEY([PatientID])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_PatientAddress] CHECK CONSTRAINT [FK_PAT_PatientAddress_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_PatientGurantorInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientGurantorInfo_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_PatientGurantorInfo] CHECK CONSTRAINT [FK_PAT_PatientGurantorInfo_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_PatientInsuranceInfo]  WITH NOCHECK ADD FOREIGN KEY([InsuranceProviderId])
REFERENCES [dbo].[INS_CFG_InsuranceProviders] ([InsuranceProviderId])
GO
ALTER TABLE [dbo].[PAT_PatientInsuranceInfo]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientInsuranceInfo_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_PatientInsuranceInfo] CHECK CONSTRAINT [FK_PAT_PatientInsuranceInfo_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_PatientKinOrEmergencyContacts]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientKinOrEmergencyContacts_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_PatientKinOrEmergencyContacts] CHECK CONSTRAINT [FK_PAT_PatientKinOrEmergencyContacts_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_PatientMembership]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientMembership_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PAT_PatientMembership] CHECK CONSTRAINT [FK_PAT_PatientMembership_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PAT_PatientMembership]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientMembership_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PAT_PatientMembership] CHECK CONSTRAINT [FK_PAT_PatientMembership_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PAT_PatientMembership]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientMembership_PAT_CFG_MembershipType] FOREIGN KEY([MembershipTypeId])
REFERENCES [dbo].[PAT_CFG_MembershipType] ([MembershipTypeId])
GO
ALTER TABLE [dbo].[PAT_PatientMembership] CHECK CONSTRAINT [FK_PAT_PatientMembership_PAT_CFG_MembershipType]
GO
ALTER TABLE [dbo].[PAT_PatientMembership]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientMembership_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_PatientMembership] CHECK CONSTRAINT [FK_PAT_PatientMembership_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_PatientVisits]  WITH NOCHECK ADD  CONSTRAINT [FK_Pat_PatientVisits_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PAT_PatientVisits] CHECK CONSTRAINT [FK_Pat_PatientVisits_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PAT_PatientVisits]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientVisits_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PAT_PatientVisits] CHECK CONSTRAINT [FK_PAT_PatientVisits_PAT_Patient]
GO
ALTER TABLE [dbo].[PAT_PatientVisits]  WITH NOCHECK ADD  CONSTRAINT [FK_PAT_PatientVisits_Self] FOREIGN KEY([ParentVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[PAT_PatientVisits] CHECK CONSTRAINT [FK_PAT_PatientVisits_Self]
GO
ALTER TABLE [dbo].[PAT_SSU_Information]  WITH NOCHECK ADD FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_BIL_Transaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_Transaction_CounterId_PHRM_MST_Counter_CounterId] FOREIGN KEY([CounterId])
REFERENCES [dbo].[PHRM_MST_Counter] ([CounterId])
GO
ALTER TABLE [dbo].[PHRM_BIL_Transaction] CHECK CONSTRAINT [FK_PHRM_BIL_Transaction_CounterId_PHRM_MST_Counter_CounterId]
GO
ALTER TABLE [dbo].[PHRM_BIL_Transaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_Transaction_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_BIL_Transaction] CHECK CONSTRAINT [FK_PHRM_BIL_Transaction_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_BIL_Transaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_Transaction_PatientId_PAT_Patient_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_BIL_Transaction] CHECK CONSTRAINT [FK_PHRM_BIL_Transaction_PatientId_PAT_Patient_PatientId]
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_TransactionItem_BilTransactionId_PHRM_BIL_Transaction_BilTransactionId] FOREIGN KEY([BilTransactionId])
REFERENCES [dbo].[PHRM_BIL_Transaction] ([BilTransactionId])
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem] CHECK CONSTRAINT [FK_PHRM_BIL_TransactionItem_BilTransactionId_PHRM_BIL_Transaction_BilTransactionId]
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_TransactionItem_CounterId_PHRM_MST_Counter_CounterId] FOREIGN KEY([CounterId])
REFERENCES [dbo].[PHRM_MST_Counter] ([CounterId])
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem] CHECK CONSTRAINT [FK_PHRM_BIL_TransactionItem_CounterId_PHRM_MST_Counter_CounterId]
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_TransactionItem_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem] CHECK CONSTRAINT [FK_PHRM_BIL_TransactionItem_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_BIL_TransactionItem_PatientId_PAT_Patient_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_BIL_TransactionItem] CHECK CONSTRAINT [FK_PHRM_BIL_TransactionItem_PatientId_PAT_Patient_PatientId]
GO
ALTER TABLE [dbo].[PHRM_Deposit]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_Deposit_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_Deposit] CHECK CONSTRAINT [FK_PHRM_Deposit_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_ExpiryDate_BatchNo_History]  WITH NOCHECK ADD  CONSTRAINT [FK_Phrm_Exp_Batch_History_StoreStockId_PHRM_StoreStock_StoreStockId] FOREIGN KEY([StoreStockId])
REFERENCES [dbo].[PHRM_StoreStock] ([StoreStockId])
GO
ALTER TABLE [dbo].[PHRM_ExpiryDate_BatchNo_History] CHECK CONSTRAINT [FK_Phrm_Exp_Batch_History_StoreStockId_PHRM_StoreStock_StoreStockId]
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_FiscalYearStock_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock] CHECK CONSTRAINT [FK_PHRM_FiscalYearStock_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_FiscalYearStock_PHRM_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[PHRM_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock] CHECK CONSTRAINT [FK_PHRM_FiscalYearStock_PHRM_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_FiscalYearStock_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock] CHECK CONSTRAINT [FK_PHRM_FiscalYearStock_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_FiscalYearStock_PHRM_TXN_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_TXN_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_FiscalYearStock] CHECK CONSTRAINT [FK_PHRM_FiscalYearStock_PHRM_TXN_Stock]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_GoodsReceipt_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt] CHECK CONSTRAINT [FK_PHRM_GoodsReceipt_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_GoodsReceipt_PurchaseOrderId_PHRM_PurchaseOrder_PurchaseOrderId] FOREIGN KEY([PurchaseOrderId])
REFERENCES [dbo].[PHRM_PurchaseOrder] ([PurchaseOrderId])
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt] CHECK CONSTRAINT [FK_PHRM_GoodsReceipt_PurchaseOrderId_PHRM_PurchaseOrder_PurchaseOrderId]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_GoodsReceipt_SupplierId_PHRM_MST_Supplier_SupplierId] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[PHRM_MST_Supplier] ([SupplierId])
GO
ALTER TABLE [dbo].[PHRM_GoodsReceipt] CHECK CONSTRAINT [FK_PHRM_GoodsReceipt_SupplierId_PHRM_MST_Supplier_SupplierId]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_GoodsReceiptItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems] CHECK CONSTRAINT [FK_PHRM_GoodsReceiptItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_GoodsReceiptItems_GoodreceiptId_PHRM_GoodsReceipt_GoodReceiptId] FOREIGN KEY([GoodReceiptId])
REFERENCES [dbo].[PHRM_GoodsReceipt] ([GoodReceiptId])
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems] CHECK CONSTRAINT [FK_PHRM_GoodsReceiptItems_GoodreceiptId_PHRM_GoodsReceipt_GoodReceiptId]
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems]  WITH NOCHECK ADD  CONSTRAINT [PHRM_GoodsReceiptItems_PHRM_TXN_StoreStock] FOREIGN KEY([StoreStockId])
REFERENCES [dbo].[PHRM_TXN_StoreStock] ([StoreStockId])
GO
ALTER TABLE [dbo].[PHRM_GoodsReceiptItems] CHECK CONSTRAINT [PHRM_GoodsReceiptItems_PHRM_TXN_StoreStock]
GO
ALTER TABLE [dbo].[PHRM_History_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_History_Item_CompanyId_PHRM_MST_Company_CompanyId] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[PHRM_MST_Company] ([CompanyId])
GO
ALTER TABLE [dbo].[PHRM_History_Item] CHECK CONSTRAINT [FK_PHRM_History_Item_CompanyId_PHRM_MST_Company_CompanyId]
GO
ALTER TABLE [dbo].[PHRM_History_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_History_Item_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_History_Item] CHECK CONSTRAINT [FK_PHRM_History_Item_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_History_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_History_Item_ItemTypeId_PHRM_MST_ItemType_ItemTypeId] FOREIGN KEY([ItemTypeId])
REFERENCES [dbo].[PHRM_MST_ItemType] ([ItemTypeId])
GO
ALTER TABLE [dbo].[PHRM_History_Item] CHECK CONSTRAINT [FK_PHRM_History_Item_ItemTypeId_PHRM_MST_ItemType_ItemTypeId]
GO
ALTER TABLE [dbo].[PHRM_History_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_History_Item_SupplierId_PHRM_MST_Supplier_SupplierId] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[PHRM_MST_Supplier] ([SupplierId])
GO
ALTER TABLE [dbo].[PHRM_History_Item] CHECK CONSTRAINT [FK_PHRM_History_Item_SupplierId_PHRM_MST_Supplier_SupplierId]
GO
ALTER TABLE [dbo].[PHRM_History_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_History_Item_UOMId_PHRM_MST_UnitOfMeasurement_UOMId] FOREIGN KEY([UOMId])
REFERENCES [dbo].[PHRM_MST_UnitOfMeasurement] ([UOMId])
GO
ALTER TABLE [dbo].[PHRM_History_Item] CHECK CONSTRAINT [FK_PHRM_History_Item_UOMId_PHRM_MST_UnitOfMeasurement_UOMId]
GO
ALTER TABLE [dbo].[PHRM_History_StockBatchExpiry]  WITH NOCHECK ADD  CONSTRAINT [PHRM_History_StockBatchExpiry_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_History_StockBatchExpiry] CHECK CONSTRAINT [PHRM_History_StockBatchExpiry_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_History_StockBatchExpiry]  WITH NOCHECK ADD  CONSTRAINT [PHRM_History_StockBatchExpiry_PHRM_MST_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_MST_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_History_StockBatchExpiry] CHECK CONSTRAINT [PHRM_History_StockBatchExpiry_PHRM_MST_Stock]
GO
ALTER TABLE [dbo].[PHRM_History_StockMRP]  WITH NOCHECK ADD  CONSTRAINT [PHRM_History_StockMRP_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_History_StockMRP] CHECK CONSTRAINT [PHRM_History_StockMRP_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_History_StockMRP]  WITH NOCHECK ADD  CONSTRAINT [PHRM_History_StockMRP_PHRM_MST_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_MST_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_History_StockMRP] CHECK CONSTRAINT [PHRM_History_StockMRP_PHRM_MST_Stock]
GO
ALTER TABLE [dbo].[PHRM_MST_Category]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Category_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Category] CHECK CONSTRAINT [FK_PHRM_MST_Category_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Company]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Company_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Company] CHECK CONSTRAINT [FK_PHRM_MST_Company_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Counter]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Counter_StoerId_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Counter] CHECK CONSTRAINT [FK_PHRM_MST_Counter_StoerId_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Counter]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Counter_StoerId_PHRM_MST_Store_StoreId] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_MST_Counter] CHECK CONSTRAINT [FK_PHRM_MST_Counter_StoerId_PHRM_MST_Store_StoreId]
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD FOREIGN KEY([PackingTypeId])
REFERENCES [dbo].[PHRM_MST_PackingType] ([PackingTypeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Item_CompanyId_PHRM_MST_Company_CompanyId] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[PHRM_MST_Company] ([CompanyId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item] CHECK CONSTRAINT [FK_PHRM_MST_Item_CompanyId_PHRM_MST_Company_CompanyId]
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Item_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item] CHECK CONSTRAINT [FK_PHRM_MST_Item_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Item_ItemTypeId_PHRM_MST_ItemType_ItemTypeId] FOREIGN KEY([ItemTypeId])
REFERENCES [dbo].[PHRM_MST_ItemType] ([ItemTypeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item] CHECK CONSTRAINT [FK_PHRM_MST_Item_ItemTypeId_PHRM_MST_ItemType_ItemTypeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Item_ModifiedBy_EMP_Employee_EmployeeId] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item] CHECK CONSTRAINT [FK_PHRM_MST_Item_ModifiedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Item_MST_Generic] FOREIGN KEY([GenericId])
REFERENCES [dbo].[PHRM_MST_Generic] ([GenericId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item] CHECK CONSTRAINT [FK_PHRM_MST_Item_MST_Generic]
GO
ALTER TABLE [dbo].[PHRM_MST_Item]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Item_UOMId_PHRM_MST_UnitOfMeasurement_UOMId] FOREIGN KEY([UOMId])
REFERENCES [dbo].[PHRM_MST_UnitOfMeasurement] ([UOMId])
GO
ALTER TABLE [dbo].[PHRM_MST_Item] CHECK CONSTRAINT [FK_PHRM_MST_Item_UOMId_PHRM_MST_UnitOfMeasurement_UOMId]
GO
ALTER TABLE [dbo].[PHRM_MST_ItemType]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_ItemType_CategoryId_PHRM_MST_Category_CategoryId] FOREIGN KEY([CategoryId])
REFERENCES [dbo].[PHRM_MST_Category] ([CategoryId])
GO
ALTER TABLE [dbo].[PHRM_MST_ItemType] CHECK CONSTRAINT [FK_PHRM_MST_ItemType_CategoryId_PHRM_MST_Category_CategoryId]
GO
ALTER TABLE [dbo].[PHRM_MST_ItemType]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_ItemType_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_ItemType] CHECK CONSTRAINT [FK_PHRM_MST_ItemType_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Rack]  WITH NOCHECK ADD FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Stock_EMP_Employee_CreatedBy] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Stock] CHECK CONSTRAINT [FK_PHRM_MST_Stock_EMP_Employee_CreatedBy]
GO
ALTER TABLE [dbo].[PHRM_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Stock_EMP_Employee_ModifiedBy] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Stock] CHECK CONSTRAINT [FK_PHRM_MST_Stock_EMP_Employee_ModifiedBy]
GO
ALTER TABLE [dbo].[PHRM_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Stock_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_MST_Stock] CHECK CONSTRAINT [FK_PHRM_MST_Stock_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_MST_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Stock_PHRM_MST_StockBarcode] FOREIGN KEY([BarcodeId])
REFERENCES [dbo].[PHRM_MST_StockBarcode] ([BarcodeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Stock] CHECK CONSTRAINT [FK_PHRM_MST_Stock_PHRM_MST_StockBarcode]
GO
ALTER TABLE [dbo].[PHRM_MST_StockBarcode]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_StockBarcode_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_MST_StockBarcode] CHECK CONSTRAINT [FK_PHRM_MST_StockBarcode_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_MST_Store]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Store_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Store] CHECK CONSTRAINT [FK_PHRM_MST_Store_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_Supplier]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Supplier_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_Supplier] CHECK CONSTRAINT [FK_PHRM_MST_Supplier_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_TAX]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_TAX_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_TAX] CHECK CONSTRAINT [FK_PHRM_MST_TAX_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_MST_UnitOfMeasurement]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_UnitOfMeasurement_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_MST_UnitOfMeasurement] CHECK CONSTRAINT [FK_PHRM_MST_UnitOfMeasurement_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_Prescription]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_Prescription_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_Prescription] CHECK CONSTRAINT [FK_PHRM_Prescription_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_Prescription]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_Prescription_PatientId_PAT_Patient_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_Prescription] CHECK CONSTRAINT [FK_PHRM_Prescription_PatientId_PAT_Patient_PatientId]
GO
ALTER TABLE [dbo].[PHRM_Prescription]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_Prescription_ProviderId_EMP_Employee_EmployeeId] FOREIGN KEY([ProviderId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_Prescription] CHECK CONSTRAINT [FK_PHRM_Prescription_ProviderId_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_PrescriptionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_PrescriptionItems_CLN_Disgnosis] FOREIGN KEY([DiagnosisId])
REFERENCES [dbo].[CLN_Diagnosis] ([DiagnosisId])
GO
ALTER TABLE [dbo].[PHRM_PrescriptionItems] CHECK CONSTRAINT [FK_PHRM_PrescriptionItems_CLN_Disgnosis]
GO
ALTER TABLE [dbo].[PHRM_PrescriptionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_PrescriptionItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_PrescriptionItems] CHECK CONSTRAINT [FK_PHRM_PrescriptionItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrder]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_Purchaseorder_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrder] CHECK CONSTRAINT [FK_PHRM_Purchaseorder_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrder]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_PurchaseOrder_SupplierId_PHRM_MST_Supplier_SupplierId] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[PHRM_MST_Supplier] ([SupplierId])
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrder] CHECK CONSTRAINT [FK_PHRM_PurchaseOrder_SupplierId_PHRM_MST_Supplier_SupplierId]
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrder]  WITH NOCHECK ADD  CONSTRAINT [PHRM_PurchaseOrder_PHRM_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[PHRM_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrder] CHECK CONSTRAINT [PHRM_PurchaseOrder_PHRM_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_PurchaseOrderItems_AuthorizedBy_EMP_Employee_EmployeeId] FOREIGN KEY([AuthorizedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrderItems] CHECK CONSTRAINT [FK_PHRM_PurchaseOrderItems_AuthorizedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_PurchaseOrderItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrderItems] CHECK CONSTRAINT [FK_PHRM_PurchaseOrderItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_PurchaseOrderItems_PurchaseOrderId_PHRM_PurchaseOrder_PurchaseOrderId] FOREIGN KEY([PurchaseOrderId])
REFERENCES [dbo].[PHRM_PurchaseOrder] ([PurchaseOrderId])
GO
ALTER TABLE [dbo].[PHRM_PurchaseOrderItems] CHECK CONSTRAINT [FK_PHRM_PurchaseOrderItems_PurchaseOrderId_PHRM_PurchaseOrder_PurchaseOrderId]
GO
ALTER TABLE [dbo].[PHRM_Requisition]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_Requisition_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_Requisition] CHECK CONSTRAINT [FK_PHRM_Requisition_PAT_Patient]
GO
ALTER TABLE [dbo].[PHRM_RequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_RequisitionItems_PHRM_Requisition] FOREIGN KEY([RequisitionId])
REFERENCES [dbo].[PHRM_Requisition] ([RequisitionId])
GO
ALTER TABLE [dbo].[PHRM_RequisitionItems] CHECK CONSTRAINT [FK_PHRM_RequisitionItems_PHRM_Requisition]
GO
ALTER TABLE [dbo].[PHRM_RequisitionItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_RequisitionItems_PHRM_RequisitionItems] FOREIGN KEY([RequisitionItemId])
REFERENCES [dbo].[PHRM_RequisitionItems] ([RequisitionItemId])
GO
ALTER TABLE [dbo].[PHRM_RequisitionItems] CHECK CONSTRAINT [FK_PHRM_RequisitionItems_PHRM_RequisitionItems]
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplier]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_ReturnToSupplier_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplier] CHECK CONSTRAINT [FK_PHRM_ReturnToSupplier_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplier]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_ReturnToSupplier_GoodReceiptId_PHRM_GoodsReceipt_GoodReceiptId] FOREIGN KEY([GoodReceiptId])
REFERENCES [dbo].[PHRM_GoodsReceipt] ([GoodReceiptId])
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplier] CHECK CONSTRAINT [FK_PHRM_ReturnToSupplier_GoodReceiptId_PHRM_GoodsReceipt_GoodReceiptId]
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplier]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_ReturnToSupplier_SupplierId_PHRM_MST_Supplier_SupplierId] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[PHRM_MST_Supplier] ([SupplierId])
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplier] CHECK CONSTRAINT [FK_PHRM_ReturnToSupplier_SupplierId_PHRM_MST_Supplier_SupplierId]
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplierItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_ReturnToSupplierItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplierItems] CHECK CONSTRAINT [FK_PHRM_ReturnToSupplierItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplierItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_ReturnToSupplierItems_GoodReceiptItemId_PHRM_GoodsReceiptItems_GoodReceiptItemId] FOREIGN KEY([GoodReceiptItemId])
REFERENCES [dbo].[PHRM_GoodsReceiptItems] ([GoodReceiptItemId])
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplierItems] CHECK CONSTRAINT [FK_PHRM_ReturnToSupplierItems_GoodReceiptItemId_PHRM_GoodsReceiptItems_GoodReceiptItemId]
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplierItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_ReturnToSupplierItems_ReturnToSupplierId_PHRM_ReturnToSupplier_ReturnToSupplierId] FOREIGN KEY([ReturnToSupplierId])
REFERENCES [dbo].[PHRM_ReturnToSupplier] ([ReturnToSupplierId])
GO
ALTER TABLE [dbo].[PHRM_ReturnToSupplierItems] CHECK CONSTRAINT [FK_PHRM_ReturnToSupplierItems_ReturnToSupplierId_PHRM_ReturnToSupplier_ReturnToSupplierId]
GO
ALTER TABLE [dbo].[PHRM_SaleItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_SaleItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_SaleItems] CHECK CONSTRAINT [FK_PHRM_SaleItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_SaleItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_SaleItems_PatientId_PAT_Patient_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_SaleItems] CHECK CONSTRAINT [FK_PHRM_SaleItems_PatientId_PAT_Patient_PatientId]
GO
ALTER TABLE [dbo].[PHRM_SaleItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_SaleItems_PrescriptionItemsId_PHRM_PrescriptionItems_PrescriptionItemsId] FOREIGN KEY([PrescriptionItemsId])
REFERENCES [dbo].[PHRM_PrescriptionItems] ([PrescriptionItemId])
GO
ALTER TABLE [dbo].[PHRM_SaleItems] CHECK CONSTRAINT [FK_PHRM_SaleItems_PrescriptionItemsId_PHRM_PrescriptionItems_PrescriptionItemsId]
GO
ALTER TABLE [dbo].[PHRM_SaleItemsReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_SaleItemsReturn_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_SaleItemsReturn] CHECK CONSTRAINT [FK_PHRM_SaleItemsReturn_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_SaleItemsReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_SaleItemsReturn_PatientId_PAT_Patient_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_SaleItemsReturn] CHECK CONSTRAINT [FK_PHRM_SaleItemsReturn_PatientId_PAT_Patient_PatientId]
GO
ALTER TABLE [dbo].[PHRM_SaleItemsReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_SaleItemsReturn_SaleItemId_PHRM_SaleItems_SaleItemId] FOREIGN KEY([SaleItemId])
REFERENCES [dbo].[PHRM_SaleItems] ([SaleItemId])
GO
ALTER TABLE [dbo].[PHRM_SaleItemsReturn] CHECK CONSTRAINT [FK_PHRM_SaleItemsReturn_SaleItemId_PHRM_SaleItems_SaleItemId]
GO
ALTER TABLE [dbo].[PHRM_StockManage]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StockManage_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_StockManage] CHECK CONSTRAINT [FK_PHRM_StockManage_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_StockManage]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StockManage_StockTxnItemId_PHRM_StockTxnItems_StockTxnItemId] FOREIGN KEY([StockTxnItemId])
REFERENCES [dbo].[PHRM_StockTxnItems] ([StockTxnItemId])
GO
ALTER TABLE [dbo].[PHRM_StockManage] CHECK CONSTRAINT [FK_PHRM_StockManage_StockTxnItemId_PHRM_StockTxnItems_StockTxnItemId]
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StockTxnItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems] CHECK CONSTRAINT [FK_PHRM_StockTxnItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StockTxnItems_GoodsReceiptItemId_PHRM_GoodsReceiptItems_GoodsReceiptItemId] FOREIGN KEY([GoodsReceiptItemId])
REFERENCES [dbo].[PHRM_GoodsReceiptItems] ([GoodReceiptItemId])
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems] CHECK CONSTRAINT [FK_PHRM_StockTxnItems_GoodsReceiptItemId_PHRM_GoodsReceiptItems_GoodsReceiptItemId]
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems_MRPHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StockTxnItems_MRPHistory_StoreStockId_PHRM_StoreStock_StoreStockId] FOREIGN KEY([StoreStockId])
REFERENCES [dbo].[PHRM_StoreStock] ([StoreStockId])
GO
ALTER TABLE [dbo].[PHRM_StockTxnItems_MRPHistory] CHECK CONSTRAINT [FK_PHRM_StockTxnItems_MRPHistory_StoreStockId_PHRM_StoreStock_StoreStockId]
GO
ALTER TABLE [dbo].[PHRM_StoreDispatchItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StoreDispatchedItems_PHRM_StoreRequisition] FOREIGN KEY([RequisitionId])
REFERENCES [dbo].[PHRM_StoreRequisition] ([RequisitionId])
GO
ALTER TABLE [dbo].[PHRM_StoreDispatchItems] CHECK CONSTRAINT [FK_PHRM_StoreDispatchedItems_PHRM_StoreRequisition]
GO
ALTER TABLE [dbo].[PHRM_StoreDispatchItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StoreDispatchItems_SourceStoreId_PHRM_MST_Store] FOREIGN KEY([SourceStoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_StoreDispatchItems] CHECK CONSTRAINT [FK_PHRM_StoreDispatchItems_SourceStoreId_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_StoreDispatchItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StoreDispatchItems_TargetStoreId_PHRM_MST_Store] FOREIGN KEY([TargetStoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_StoreDispatchItems] CHECK CONSTRAINT [FK_PHRM_StoreDispatchItems_TargetStoreId_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_StoreRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_StoreRequisition_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_StoreRequisition] CHECK CONSTRAINT [FK_PHRM_StoreRequisition_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_StoreRequisition]  WITH NOCHECK ADD  CONSTRAINT [PHRM_StoreRequisition_PHRM_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[PHRM_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[PHRM_StoreRequisition] CHECK CONSTRAINT [PHRM_StoreRequisition_PHRM_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStock_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStock_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStock_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStock_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStock_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStock_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStock_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStock_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStock_PHRM_TXN_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_TXN_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStock] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStock_PHRM_TXN_Stock]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[PHRM_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_TXN_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_TXN_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_TXN_DispensaryStockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_DispensaryStockTransaction_PHRM_TXN_Stock]
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Invoice_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice] CHECK CONSTRAINT [FK_PHRM_TXN_Invoice_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Invoice_PatientId_PAT_Patient_Patientid] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice] CHECK CONSTRAINT [FK_PHRM_TXN_Invoice_PatientId_PAT_Patient_Patientid]
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Invoice_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice] CHECK CONSTRAINT [FK_PHRM_TXN_Invoice_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceItems_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Invoice] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceItems_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_MST_Company_CompanyId_PHRM_MST_Company_CompanyId] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[PHRM_MST_Company] ([CompanyId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceItems] CHECK CONSTRAINT [FK_PHRM_MST_Company_CompanyId_PHRM_MST_Company_CompanyId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceItems_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceItems_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceItems_InvoiceId_PHRM_TXN_Invoice_InvoiceId] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[PHRM_TXN_Invoice] ([InvoiceId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceItems_InvoiceId_PHRM_TXN_Invoice_InvoiceId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturn_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturn_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturn_InvoiceId_PHRM_TXN_Invoice_InvoiceId] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[PHRM_TXN_Invoice] ([InvoiceId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturn_InvoiceId_PHRM_TXN_Invoice_InvoiceId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturn]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturn_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturn] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturn_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_InvoiceId_PHRM_TXN_Invoice_InvoiceId] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[PHRM_TXN_Invoice] ([InvoiceId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_InvoiceId_PHRM_TXN_Invoice_InvoiceId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_InvoiceItemId_PHRM_TXN_InvoiceItems_InvoiceItemId] FOREIGN KEY([InvoiceItemId])
REFERENCES [dbo].[PHRM_TXN_InvoiceItems] ([InvoiceItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_InvoiceItemId_PHRM_TXN_InvoiceItems_InvoiceItemId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_InvoiceReturnId_PHRM_TXN_InvoiceReturn_InvoiceReturnId] FOREIGN KEY([InvoiceReturnId])
REFERENCES [dbo].[PHRM_TXN_InvoiceReturn] ([InvoiceReturnId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_InvoiceReturnId_PHRM_TXN_InvoiceReturn_InvoiceReturnId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_ItemId_PHRM_MST_Item_ItemId] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_ItemId_PHRM_MST_Item_ItemId]
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_InvoiceReturnItems] CHECK CONSTRAINT [FK_PHRM_TXN_InvoiceReturnItems_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_Settlement]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Settlement_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Settlement] CHECK CONSTRAINT [FK_PHRM_TXN_Settlement_PAT_Patient]
GO
ALTER TABLE [dbo].[PHRM_TXN_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Stock_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Stock] CHECK CONSTRAINT [FK_PHRM_TXN_Stock_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_TXN_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Stock_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Stock] CHECK CONSTRAINT [FK_PHRM_TXN_Stock_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_TXN_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_Stock_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_Stock] CHECK CONSTRAINT [FK_PHRM_TXN_Stock_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StockTransaction_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_StockTransaction_EMP_Employee]
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[PHRM_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_MST_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_MST_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_MST_Stock]
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_TXN_StoreStock] FOREIGN KEY([StoreStockId])
REFERENCES [dbo].[PHRM_TXN_StoreStock] ([StoreStockId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StockTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_StockTransaction_PHRM_TXN_StoreStock]
GO
ALTER TABLE [dbo].[PHRM_TXN_StoreStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StoreStock_PHRM_MST_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[PHRM_MST_Item] ([ItemId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StoreStock] CHECK CONSTRAINT [FK_PHRM_TXN_StoreStock_PHRM_MST_Item]
GO
ALTER TABLE [dbo].[PHRM_TXN_StoreStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StoreStock_PHRM_MST_Stock] FOREIGN KEY([StockId])
REFERENCES [dbo].[PHRM_MST_Stock] ([StockId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StoreStock] CHECK CONSTRAINT [FK_PHRM_TXN_StoreStock_PHRM_MST_Stock]
GO
ALTER TABLE [dbo].[PHRM_TXN_StoreStock]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_StoreStock_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_TXN_StoreStock] CHECK CONSTRAINT [FK_PHRM_TXN_StoreStock_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedger]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_SupplierLedger_PHRM_MST_Supplier] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[PHRM_MST_Supplier] ([SupplierId])
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedger] CHECK CONSTRAINT [FK_PHRM_TXN_SupplierLedger_PHRM_MST_Supplier]
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_SupplierLedgerTransaction_PHRM_CFG_FiscalYears] FOREIGN KEY([FiscalYearId])
REFERENCES [dbo].[PHRM_CFG_FiscalYears] ([FiscalYearId])
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_SupplierLedgerTransaction_PHRM_CFG_FiscalYears]
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_SupplierLedgerTransaction_PHRM_MST_Supplier] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[PHRM_MST_Supplier] ([SupplierId])
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_SupplierLedgerTransaction_PHRM_MST_Supplier]
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_TXN_SupplierLedgerTransaction_PHRM_TXN_SupplierLedger] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[PHRM_TXN_SupplierLedger] ([LedgerId])
GO
ALTER TABLE [dbo].[PHRM_TXN_SupplierLedgerTransaction] CHECK CONSTRAINT [FK_PHRM_TXN_SupplierLedgerTransaction_PHRM_TXN_SupplierLedger]
GO
ALTER TABLE [dbo].[PHRM_WriteOff]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_WriteOff_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_WriteOff] CHECK CONSTRAINT [FK_PHRM_WriteOff_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_WriteOff]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_WriteOff_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[PHRM_WriteOff] CHECK CONSTRAINT [FK_PHRM_WriteOff_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[PHRM_WriteOffItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_WriteOffItems_CreatedBy_EMP_Employee_EmployeeId] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[PHRM_WriteOffItems] CHECK CONSTRAINT [FK_PHRM_WriteOffItems_CreatedBy_EMP_Employee_EmployeeId]
GO
ALTER TABLE [dbo].[PHRM_WriteOffItems]  WITH NOCHECK ADD  CONSTRAINT [FK_PHRM_WriteOffItems_WriteOffId_PHRM_WriteOff_WriteOffId] FOREIGN KEY([WriteOffId])
REFERENCES [dbo].[PHRM_WriteOff] ([WriteOffId])
GO
ALTER TABLE [dbo].[PHRM_WriteOffItems] CHECK CONSTRAINT [FK_PHRM_WriteOffItems_WriteOffId_PHRM_WriteOff_WriteOffId]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem]  WITH NOCHECK ADD  CONSTRAINT [FK_MST_ImagingItem_MST_ImagingType] FOREIGN KEY([ImagingTypeId])
REFERENCES [dbo].[RAD_MST_ImagingType] ([ImagingTypeId])
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem] CHECK CONSTRAINT [FK_MST_ImagingItem_MST_ImagingType]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_MST_ImagingItem__ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem] CHECK CONSTRAINT [FK_RAD_MST_ImagingItem__ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_MST_ImagingItem_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RAD_MST_ImagingItem] CHECK CONSTRAINT [FK_RAD_MST_ImagingItem_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingType]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_MST_ImagingType_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RAD_MST_ImagingType] CHECK CONSTRAINT [FK_RAD_MST_ImagingType_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[RAD_MST_ImagingType]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_MST_ImagingType_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RAD_MST_ImagingType] CHECK CONSTRAINT [FK_RAD_MST_ImagingType_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingReport_MST_ImagingItem] FOREIGN KEY([ImagingItemId])
REFERENCES [dbo].[RAD_MST_ImagingItem] ([ImagingItemId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport] CHECK CONSTRAINT [FK_RAD_PatientImagingReport_MST_ImagingItem]
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingReport_PAT_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport] CHECK CONSTRAINT [FK_RAD_PatientImagingReport_PAT_Patient]
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingReport_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport] CHECK CONSTRAINT [FK_RAD_PatientImagingReport_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingReport_RAD_PatientImagingRequest] FOREIGN KEY([ImagingRequisitionId])
REFERENCES [dbo].[RAD_PatientImagingRequisition] ([ImagingRequisitionId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingReport] CHECK CONSTRAINT [FK_RAD_PatientImagingReport_RAD_PatientImagingRequest]
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingRequest_MST_Item] FOREIGN KEY([ImagingItemId])
REFERENCES [dbo].[RAD_MST_ImagingItem] ([ImagingItemId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition] CHECK CONSTRAINT [FK_RAD_PatientImagingRequest_MST_Item]
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingRequest_PAT_PatientVisits] FOREIGN KEY([PatientVisitId])
REFERENCES [dbo].[PAT_PatientVisits] ([PatientVisitId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition] CHECK CONSTRAINT [FK_RAD_PatientImagingRequest_PAT_PatientVisits]
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_PatientImagingRequisition_CLN_Disgnosis] FOREIGN KEY([DiagnosisId])
REFERENCES [dbo].[CLN_Diagnosis] ([DiagnosisId])
GO
ALTER TABLE [dbo].[RAD_PatientImagingRequisition] CHECK CONSTRAINT [FK_RAD_PatientImagingRequisition_CLN_Disgnosis]
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_ReportingDoctors_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors] CHECK CONSTRAINT [FK_RAD_ReportingDoctors_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_ReportingDoctors_ImagingType_RAD_MST_ImagingType] FOREIGN KEY([ImagingTypeId])
REFERENCES [dbo].[RAD_MST_ImagingType] ([ImagingTypeId])
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors] CHECK CONSTRAINT [FK_RAD_ReportingDoctors_ImagingType_RAD_MST_ImagingType]
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors]  WITH NOCHECK ADD  CONSTRAINT [FK_RAD_ReportingDoctors_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RAD_ReportingDoctors] CHECK CONSTRAINT [FK_RAD_ReportingDoctors_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[RBAC_MAP_RolePermission]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_MAP_RolePermission_RBAC_Permission] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[RBAC_Permission] ([PermissionId])
GO
ALTER TABLE [dbo].[RBAC_MAP_RolePermission] CHECK CONSTRAINT [FK_RBAC_MAP_RolePermission_RBAC_Permission]
GO
ALTER TABLE [dbo].[RBAC_MAP_RolePermission]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_MAP_RolePermission_RBAC_Role] FOREIGN KEY([RoleId])
REFERENCES [dbo].[RBAC_Role] ([RoleId])
GO
ALTER TABLE [dbo].[RBAC_MAP_RolePermission] CHECK CONSTRAINT [FK_RBAC_MAP_RolePermission_RBAC_Role]
GO
ALTER TABLE [dbo].[RBAC_MAP_UserRole]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_MAP_UserRole_RBAC_Role] FOREIGN KEY([RoleId])
REFERENCES [dbo].[RBAC_Role] ([RoleId])
GO
ALTER TABLE [dbo].[RBAC_MAP_UserRole] CHECK CONSTRAINT [FK_RBAC_MAP_UserRole_RBAC_Role]
GO
ALTER TABLE [dbo].[RBAC_MAP_UserRole]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_MAP_UserRole_RBAC_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[RBAC_User] ([UserId])
GO
ALTER TABLE [dbo].[RBAC_MAP_UserRole] CHECK CONSTRAINT [FK_RBAC_MAP_UserRole_RBAC_User]
GO
ALTER TABLE [dbo].[RBAC_Permission]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_Permission_RBAC_Application] FOREIGN KEY([ApplicationId])
REFERENCES [dbo].[RBAC_Application] ([ApplicationId])
GO
ALTER TABLE [dbo].[RBAC_Permission] CHECK CONSTRAINT [FK_RBAC_Permission_RBAC_Application]
GO
ALTER TABLE [dbo].[RBAC_Role]  WITH NOCHECK ADD FOREIGN KEY([ApplicationId])
REFERENCES [dbo].[RBAC_Application] ([ApplicationId])
GO
ALTER TABLE [dbo].[RBAC_Role]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_Role_Rbac_RouteConfig] FOREIGN KEY([DefaultRouteId])
REFERENCES [dbo].[RBAC_RouteConfig] ([RouteId])
GO
ALTER TABLE [dbo].[RBAC_Role] CHECK CONSTRAINT [FK_RBAC_Role_Rbac_RouteConfig]
GO
ALTER TABLE [dbo].[RBAC_RouteConfig]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_RouteConfig_RBAC_Permission] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[RBAC_Permission] ([PermissionId])
GO
ALTER TABLE [dbo].[RBAC_RouteConfig] CHECK CONSTRAINT [FK_RBAC_RouteConfig_RBAC_Permission]
GO
ALTER TABLE [dbo].[RBAC_User]  WITH NOCHECK ADD  CONSTRAINT [FK_RBAC_User_EMP_Employee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[RBAC_User] CHECK CONSTRAINT [FK_RBAC_User_EMP_Employee]
GO
ALTER TABLE [dbo].[SCH_EmpDayWiseAvailability]  WITH NOCHECK ADD  CONSTRAINT [FK_SCH_EmpDayWiseAvailability_EMP_Employee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[SCH_EmpDayWiseAvailability] CHECK CONSTRAINT [FK_SCH_EmpDayWiseAvailability_EMP_Employee]
GO
ALTER TABLE [dbo].[SCH_EmployeeSchedules]  WITH NOCHECK ADD  CONSTRAINT [FK_SCH_EmployeeSchedules_EMP_Employee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[SCH_EmployeeSchedules] CHECK CONSTRAINT [FK_SCH_EmployeeSchedules_EMP_Employee]
GO
ALTER TABLE [dbo].[SCH_EmployeeShifts]  WITH NOCHECK ADD  CONSTRAINT [FK_SCH_EmployeeShifts_EMP_Employee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[SCH_EmployeeShifts] CHECK CONSTRAINT [FK_SCH_EmployeeShifts_EMP_Employee]
GO
ALTER TABLE [dbo].[SCH_MAP_EmployeeShift]  WITH NOCHECK ADD  CONSTRAINT [FK_SCH_MAP_EmployeeShift_EMP_Employee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[SCH_MAP_EmployeeShift] CHECK CONSTRAINT [FK_SCH_MAP_EmployeeShift_EMP_Employee]
GO
ALTER TABLE [dbo].[SCH_MAP_EmployeeShift]  WITH NOCHECK ADD  CONSTRAINT [FK_SCH_MAP_EmployeeShift_SCH_MST_Shifts] FOREIGN KEY([ShiftId])
REFERENCES [dbo].[SCH_MST_Shifts] ([ShiftId])
GO
ALTER TABLE [dbo].[SCH_MAP_EmployeeShift] CHECK CONSTRAINT [FK_SCH_MAP_EmployeeShift_SCH_MST_Shifts]
GO
ALTER TABLE [dbo].[TXN_EmpCashTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_TXN_EmpCashTransactions_EMP_EMployee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[TXN_EmpCashTransaction] CHECK CONSTRAINT [FK_TXN_EmpCashTransactions_EMP_EMployee]
GO
ALTER TABLE [dbo].[TXN_EmpDueAmount]  WITH NOCHECK ADD  CONSTRAINT [FK_TXN_EmpDueAmount_EMP_EMployee] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[TXN_EmpDueAmount] CHECK CONSTRAINT [FK_TXN_EmpDueAmount_EMP_EMployee]
GO
ALTER TABLE [dbo].[TXN_Verification]  WITH NOCHECK ADD  CONSTRAINT [FK_ParentVerificationId] FOREIGN KEY([ParentVerificationId])
REFERENCES [dbo].[TXN_Verification] ([VerificationId])
GO
ALTER TABLE [dbo].[TXN_Verification] CHECK CONSTRAINT [FK_ParentVerificationId]
GO
ALTER TABLE [dbo].[VACC_PatientVaccineDetail]  WITH NOCHECK ADD  CONSTRAINT [FK_VACC_Patient_VaccineDetail_VACC_Vaccine] FOREIGN KEY([VaccineId])
REFERENCES [dbo].[VACC_Vaccines] ([VaccineId])
GO
ALTER TABLE [dbo].[VACC_PatientVaccineDetail] CHECK CONSTRAINT [FK_VACC_Patient_VaccineDetail_VACC_Vaccine]
GO
ALTER TABLE [dbo].[WARD_INV_Consumption]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_Consumption_WARD_INV_ConsumptionReceipt] FOREIGN KEY([ConsumptionReceiptId])
REFERENCES [dbo].[WARD_INV_ConsumptionReceipt] ([ConsumptionReceiptId])
GO
ALTER TABLE [dbo].[WARD_INV_Consumption] CHECK CONSTRAINT [FK_WARD_INV_Consumption_WARD_INV_ConsumptionReceipt]
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_CreatedBy_EMP_Employee] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt] CHECK CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_CreatedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_ModifiedBy_EMP_Employee] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[EMP_Employee] ([EmployeeId])
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt] CHECK CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_ModifiedBy_EMP_Employee]
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_PAT_PatientId] FOREIGN KEY([PatientId])
REFERENCES [dbo].[PAT_Patient] ([PatientId])
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt] CHECK CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_PAT_PatientId]
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_PHRM_MST_Store] FOREIGN KEY([StoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[WARD_INV_ConsumptionReceipt] CHECK CONSTRAINT [FK_WARD_INV_ConsumptionReceipt_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[WARD_INV_Stock]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_Stock_SubstoreId_PHRM_MST_Store] FOREIGN KEY([SubstoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[WARD_INV_Stock] CHECK CONSTRAINT [FK_WARD_INV_Stock_SubstoreId_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[WARD_INV_Transaction]  WITH NOCHECK ADD  CONSTRAINT [FK_WARD_INV_Transaction_SubstoreId_PHRM_MST_Store] FOREIGN KEY([SubstoreId])
REFERENCES [dbo].[PHRM_MST_Store] ([StoreId])
GO
ALTER TABLE [dbo].[WARD_INV_Transaction] CHECK CONSTRAINT [FK_WARD_INV_Transaction_SubstoreId_PHRM_MST_Store]
GO
ALTER TABLE [dbo].[WARD_Transaction]  WITH NOCHECK ADD FOREIGN KEY([StockId])
REFERENCES [dbo].[WARD_Stock] ([StockId])
GO
/****** Object:  StoredProcedure [dbo].[INV_TXN_VIEW_GetRequisitionItemsInfoForView]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure [dbo].[INV_TXN_VIEW_GetRequisitionItemsInfoForView] 
	  @RequisitionId INT
	AS
	/*
	FileName: INV_TXN_VIEW_GetRequisitionItemsInfoForView -- EXEC INV_TXN_VIEW_GetRequisitionItemsInfoForView  8
	Author: Sud/19Feb'20 
	Description: to get details of Requisition items along with Employee Information.
	Remarks: We're returning two tables, one for Requisition details and another for Dispatch Details.
	ChangeHistory:
	--------------------------------------------------
	S.No    Author/Date                  Remarks
	-------------------------------------------------
	1.      Sud/19Feb'20                Initial Draft
	2.      Sud/4Mar'20					added RequisitionItemId in select query. Needed for Cancellation.
	3.		sanjit/9Apr'20				added IssueNo and RequisitionNo in SP
	4.		sanjit/17Apr'20				added cancel details in the sp.
	5.		sanjit/6May'20				added RequisitionRemarks in the sp.(immediate solution,must refactor properly)
	6.		sanjit/12Jun'20				removed withdrawn items from the query
	-----------------------------------------------------
	*/
	BEGIN
 
	  Select reqItm.ItemId, itm.ItemName, itm.Code, reqItm.Quantity, 
		reqItm.ReceivedQuantity, reqItm.PendingQuantity, reqItm.RequisitionItemStatus,
		reqItm.Remark,   reqItm.ReceivedQuantity AS 'DispatchedQuantity', 
		reqItm.RequisitionNo,reqItm.IssueNo, reqItm.RequisitionId,
		reqItm.CreatedOn, reqItm.CreatedBy, reqEmp.FullName 'CreatedByName',
		reqItm.RequisitionItemId,reqItm.isActive,reqItm.CancelOn,reqItm.CancelRemarks,
		(select FullName from EMP_Employee where EmployeeId = reqItm.CancelBy) 'CancelBy',
		NULL AS 'ReceivedBy', -- receive item feature is not yet implemented, correct this later : sud-19Feb'20,
		(select Remarks from INV_TXN_Requisition where RequisitionId = @RequisitionId) 'Remarks'

		from 

		INV_TXN_RequisitionItems reqItm  
		INNER JOIN INV_MST_Item itm 
		   ON reqItm.ItemId=itm.ItemId
		INNER JOIN EMP_Employee reqEmp
		   ON reqItm.CreatedBy = reqEmp.EmployeeId

	  Where reqItm.RequisitionId=@RequisitionId  and reqItm.RequisitionItemStatus != 'withdrawn'


	  Select dispItm.RequisitionItemId, dispItm.DispatchedQuantity, dispItm.CreatedOn 'DispatchedOn', 
	  dispItm.CreatedBy 'DispatchedBy', emp.FullName 'DispatchedByName' 
	   from INV_TXN_DispatchItems dispItm
	  INNER JOIN EMP_Employee emp
		 ON dispItm.CreatedBy = emp.EmployeeId 
	  where RequisitionItemId IN (Select RequisitionItemId from INV_TXN_RequisitionItems  where RequisitionId=@RequisitionId)
	  ORder by dispItm.CreatedOn
	END
GO
/****** Object:  StoredProcedure [dbo].[LIVE_HAMS_DanpheEMR]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[LIVE_HAMS_DanpheEMR]--- [SP_PHRM_StockClosingtest] '03/01/2018','01/14/2019'
@FromDate datetime=null,
 @ToDate datetime=null
 AS
 /*
FileName: [[SP_PHRM_UserwiseCollectionReport]]
CreatedBy/date: Nagesh/Vikas/2018-07-31
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Nagesh/Vikas/2018-07-31                       created the script
2      Abhishek/2018-08-06					 Return and NetAmount calculation  select round(4.584406, 1, 1)
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
    BEGIN
	select  ItemName,MRP, sum(TotalQuantity-ReturnQuantity) as TotalQuantity
	from ( 
          SELECT item.ItemName, round(instock.MRP,2,1)as MRP,sum(instock.Quantity)as TotalQuantity, 0 as ReturnQuantity
            FROM [dbo].[PHRM_StockTxnItems] instock
              INNER JOIN [dbo].[PHRM_MST_Item] item
             on instock.ItemId=item.ItemId          
              where  convert(datetime, instock.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and inout='in'
              group by ItemName, MRP
			  
			  union all
			 
			  select  item.ItemName,round(outstock.MRP,2,1)as MRP, 0 as TotalAmount,sum(outstock.Quantity ) as ReturnQuantity
			  From[PHRM_StockTxnItems] outstock
			  INNER JOIN [dbo].[PHRM_MST_Item] item
             on outstock.ItemId=item.ItemId 
			  where convert(datetime, outstock.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and inout='out'
			  group by ItemName,MRP
			  )	  tabletotal
			  Group BY  ItemName, MRP
      End
End
End: Abhishek/2018-08-06 Changes :StoredProcedure for userwise collection rectified--
GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_INS_PATIENT_BIMA]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PHRM_RPT_INS_PATIENT_BIMA]
    @FromDate DATE,
    @ToDate DATE,
    @CounterId INT = NULL,
    @UserId INT = NULL,
    @ClaimCode NVARCHAR(100) = '',
    @NSHINumber NVARCHAR(100) = ''
AS
 =============================================
 Author:    Sanjit
 Create date: 18/06/2021
 Description: generated insurance patient bima report
 example to execute the stored procedure we just created
 EXECUTE dbo.PHRM_RPT_INS_PATIENT_BIMA '2021-06-15','2022-07-15',null,null,'',''
 =============================================
/* Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.    sanjit/sud/2021-08-10    checked for insurance store
2.    Sud/Sanjit: 5Sept'21     Convert DateTime to Date Comparison on Invoice>CreteOn 
------------------------------------------------------
*/
BEGIN
     body of the stored procedure
    SELECT Convert(Date, I.CreateOn) 'Date', I.InvoiceId, I.InvoicePrintId, PAT.PatientCode 'HospitalNo', 
		PAT.ShortName 'PatientName', PAT.ShortName, 
		PAT.Ins_NshiNumber, 
		I.ClaimCode, 
		I.SubTotal, 
		I.TotalAmount, 
		E.FullName 'CreatedByName', 
		C.CounterName
    FROM PHRM_TXN_Invoice I
        JOIN PAT_Patient PAT ON I.PatientId = PAT.PatientId
        JOIN EMP_Employee E ON I.CreatedBy = E.EmployeeId
        JOIN PHRM_MST_Counter C ON I.CounterId = C.CounterId
        JOIN PHRM_MST_Store STORE ON I.StoreId = STORE.StoreId
    WHERE I.ClaimCode IS NOT NULL AND I.PatientId > 0 -- INSURANCE PATIENT FILTER
        AND COnvert(Date, I.CreateOn) BETWEEN @FromDate AND @ToDate
        AND (I.CounterId = @CounterId OR ISNULL(@CounterId,0)=0)
        AND (I.CreatedBy = @UserId OR ISNULL(@UserId,0)=0)
        AND (I.ClaimCode = @ClaimCode OR ISNULL(@ClaimCode,'') = '')
        AND (PAT.Ins_NshiNumber = @NSHINumber OR ISNULL(@NSHINumber,'') = '')
        AND STORE.SubCategory = 'insurance'
END

GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_PatientSalesDetail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create the stored procedure in the specified schema
CREATE PROCEDURE [dbo].[PHRM_RPT_PatientSalesDetail]
    @FromDate DATETIME = '2021-01-01',
    @ToDate DATETIME = '2022-01-01',
    @CounterId INT = NULL,
    @UserId INT = NULL,
    @StoreId INT = NULL,
    @PatientId INT = NULL
AS
BEGIN
     body of the stored procedure
    SELECT X.*
    FROM (
            SELECT 'Sale' as Type,
                I.CreateOn 'Date',
                I.InvoiceId,
                I.InvoicePrintId,
                PAT.PatientCode 'HospitalNo',
                PAT.FirstName + ' ' + ISNULL(PAT.MiddleName + ' ','') + PAT.LastName 'PatientName',
                PAT.ShortName,
                GEN.GenericName,
                ITM.ItemCode,
                ITM.ItemName,
                II.BatchNo,
                II.ExpiryDate,
                II.Price,
                II.MRP,
                II.Quantity,
                PAT.Ins_NshiNumber,
                I.ClaimCode,
                II.SubTotal,
                II.TotalAmount,
                E.FullName 'CreatedByName',
                C.CounterName
            FROM PHRM_TXN_InvoiceItems II
                JOIN PHRM_MST_Item ITM ON II.ItemId = ITM.ItemId
                JOIN PHRM_MST_Generic GEN ON ITM.GenericId = GEN.GenericId
                JOIN PHRM_TXN_Invoice I ON II.InvoiceId = I.InvoiceId
                JOIN PAT_Patient PAT ON I.PatientId = PAT.PatientId
                JOIN EMP_Employee E ON I.CreatedBy = E.EmployeeId
                JOIN PHRM_MST_Counter C ON I.CounterId = C.CounterId
            WHERE I.CreateOn BETWEEN @FromDate AND @ToDate
                AND ( I.PatientId = @PatientId OR @PatientId IS NULL)
                AND (I.CounterId = @CounterId OR @CounterId IS NULL)
                AND (I.CreatedBy = @UserId OR @UserId IS NULL)
                AND (I.StoreId = @StoreId OR @StoreId IS NULL)

        UNION ALL

            SELECT  'Sales Refund' as Type, 
                I.CreatedOn 'Date',
                I.InvoiceId,
                I.CreditNoteID,
                PAT.PatientCode 'HospitalNo',
                PAT.FirstName + ' ' + ISNULL(PAT.MiddleName + ' ','') + PAT.LastName 'PatientName',
                PAT.ShortName,
                GEN.GenericName,
                ITM.ItemCode,
                ITM.ItemName,
                II.BatchNo,
                IITM.ExpiryDate,
                II.Price,
                II.MRP,
                II.ReturnedQty as Quantity,
                PAT.Ins_NshiNumber,
                I.ClaimCode,
                II.SubTotal,
                II.TotalAmount,
                E.FullName 'CreatedByName',
                C.CounterName
            FROM PHRM_TXN_InvoiceReturnItems II
                JOIN PHRM_MST_Item ITM ON II.ItemId = ITM.ItemId
                JOIN PHRM_MST_Generic GEN ON ITM.GenericId = GEN.GenericId
                JOIN PHRM_TXN_InvoiceReturn I ON II.InvoiceReturnId = I.InvoiceReturnId
                JOIN PHRM_TXN_InvoiceItems IITM ON II.InvoiceItemId = IITM.InvoiceItemId
                JOIN PAT_Patient PAT ON I.PatientId = PAT.PatientId
                JOIN EMP_Employee E ON I.CreatedBy = E.EmployeeId
                JOIN PHRM_MST_Counter C ON I.CounterId = C.CounterId
            WHERE I.CreatedOn BETWEEN @FromDate AND @ToDate
                AND (I.PatientId = @PatientId OR @PatientId IS NULL)
                AND (I.CounterId = @CounterId OR @CounterId IS NULL)
                AND (I.CreatedBy = @UserId OR @UserId IS NULL)
                AND (I.StoreId = @StoreId OR @StoreId IS NULL)
    ) X
    ORDER BY X.[Date]
END
 example to execute the stored procedure we just created
 EXECUTE dbo.PHRM_RPT_PatientSalesDetail  '2021-01-01','2022-01-01',NULL,NULL,NULL,NULL

GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_PurchaseSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create the stored procedure in the specified schema
CREATE PROCEDURE [dbo].[PHRM_RPT_PurchaseSummary]
    @FromDate DATETIME  = '2021-01-01',
    @ToDate DATETIME = '2022-01-01',
    @StoreId INT = NULL
AS
 =============================================
 Author:		Sanjit
 Create date: 18/06/2021
 Description: generated purchase summary report
 =============================================
/* Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.
------------------------------------------------------
*/
BEGIN
     body of the stored procedure
    SELECT ISNULL(purchase.Purchase,0) 'Purchase', ISNULL(purchaseReturn.PurchaseReturn,0) 'PurchaseReturn', ISNULL(purchase.Purchase,0) - ISNULL(purchaseReturn.PurchaseReturn,0) 'Balance'
    FROM (
        SELECT CONVERT(money,SUM(ISNULL(STXN.InQty,0) * ISNULL(STXN.CostPrice,0))) - CONVERT(money,SUM(ISNULL(STXN.OutQty,0) * ISNULL(STXN.CostPrice,0))) 'Purchase'
        FROM PHRM_TXN_StockTransaction STXN
        WHERE TransactionType IN ('gr-item','cancel-gr-item')
            AND (StoreId = @StoreId OR @StoreId IS NULL)
            AND STXN.CreatedOn BETWEEN @FromDate AND @ToDate
    ) purchase,
    (
        SELECT CONVERT(money,SUM(ISNULL(STXN.OutQty,0) * ISNULL(STXN.CostPrice,0))) 'PurchaseReturn'
        FROM PHRM_TXN_StockTransaction STXN
        WHERE TransactionType IN ('rts-item')
            AND (StoreId = @StoreId OR @StoreId IS NULL)
            AND STXN.CreatedOn BETWEEN @FromDate AND @ToDate
    ) purchaseReturn
END
 example to execute the stored procedure we just created
EXECUTE dbo.PHRM_RPT_PurchaseSummary '2021-01-01','2022-01-01'

GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_SalesStatementReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 Create the stored procedure in the specified schema
CREATE PROCEDURE [dbo].[PHRM_RPT_SalesStatementReport]
    @FromDate DATETIME = GETDATE,
    @ToDate DATETIME = GETDATE
AS
 =============================================
 Author:		Sanjit
 Create date: 17/06/2021
 Description: generated sales statement report
 =============================================
/* Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.       sanjit/ramesh/26thJuly'21           total amount mismatch corrected
------------------------------------------------------
*/
BEGIN
     body of the stored procedure
            SELECT str.Name,
            CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.MRP,0))) 'SalesValue',
            CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.CostPrice,0))) 'SalesCostValue',
            CONVERT(money,SUM(ISNULL(Stk.InQty,0) * ISNULL(stk.MRP,0))) 'SalesReturnValue',
            CONVERT(money,SUM(ISNULL(Stk.InQty,0) * ISNULL(Stk.CostPrice,0))) 'SalesReturnCostValue',
            (CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.MRP,0))) - CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.CostPrice,0)))) - (CONVERT(money,SUM(ISNULL(stk.InQty,0) * ISNULL(stk.MRP,0))) -  CONVERT(money,SUM(ISNULL(Stk.InQty,0) * ISNULL(Stk.CostPrice,0)))) 'Balance'
        FROM PHRM_TXN_StockTransaction stk
            INNER JOIN PHRM_MST_Store str
            ON str.StoreId = stk.StoreId
        WHERE stk.IsActive = 1 AND stk.TransactionType IN ('sale-item','sale-returned-item','manual-sales-return','provisional-sale-item','provisiona-cancel-item') AND stk.CreatedOn BETWEEN @FromDate AND @ToDate
        GROUP BY stk.StoreId, str.Name

    UNION

        SELECT 'Total',
            CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.MRP,0))) 'SalesValue',
            CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.CostPrice,0))) 'SalesCostValue',
            CONVERT(money,SUM(ISNULL(Stk.InQty,0) * ISNULL(stk.MRP,0))) 'SalesReturnValue',
            CONVERT(money,SUM(ISNULL(Stk.InQty,0) * ISNULL(Stk.CostPrice,0))) 'SalesReturnCostValue',
            CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.MRP,0))) - CONVERT(money,SUM(ISNULL(stk.OutQty,0) * ISNULL(stk.CostPrice,0))) - (CONVERT(money,SUM(ISNULL(stk.InQty,0) * ISNULL(stk.MRP,0))) -  CONVERT(money,SUM(ISNULL(Stk.InQty,0) * ISNULL(Stk.CostPrice,0)))) 'Balance'
        FROM PHRM_TXN_StockTransaction stk
            INNER JOIN PHRM_MST_Store str
            ON str.StoreId = stk.StoreId
        WHERE stk.IsActive = 1 AND stk.TransactionType IN ('sale-item','sale-returned-item','manual-sales-return','provisional-sale-item','provisiona-cancel-item') AND stk.CreatedOn BETWEEN @FromDate AND @ToDate

END
 example to execute the stored procedure we just created
EXECUTE dbo.PHRM_RPT_SalesStatementReport '2021-01-01','2022-01-01'

GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_SalesSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

END: Rohit -12th Dec'21 --Main SP changed as per new Requirement--

START: Ramesh/Rohit--13th Dec'21 -- Sales Summary Report Altered as per Userr Collection Report to Equalize Net Sales---

 Create the stored procedure in the specified schema
CREATE PROCEDURE [dbo].[PHRM_RPT_SalesSummary]
    @FromDate DATETIME = null,
    @ToDate DATETIME = null
AS
 =============================================
 Author:		Sanjit
 Create date: 18/06/2021
 Description: generated sales analysis report
 =============================================
/* Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.		sanjit/ramesh/28Jul21		total summation mismatch issue fixed
2.      ramesh/rohit/12Dec'21       altered as per user collection report
------------------------------------------------------
*/
BEGIN
     body of the stored procedure
    SELECT X.StoreName, X.CashSales, X.CashSalesRefund, X.TotalCashSales, X.CashInHand, X.CreditSales, X.CreditSalesRefund, X.TotalCreditSales, X.TotalCashSales + X.TotalCreditSales 'NetTotalSales'
    FROM
        (
            SELECT store.StoreId, store.Name 'StoreName', ISNULL(SUM(cashsales.TotalCashSales),0) 'CashSales', ISNULL(SUM(cashsalesRefund.TotalCashRefund),0) 'CashSalesRefund',
                ISNULL(SUM(cashsales.TotalCashSales),0) - ISNULL(SUM(cashsalesRefund.TotalCashRefund),0) 'TotalCashSales',
                ISNULL(SUM(cashsales.TotalCashSales),0) - ISNULL(SUM(cashsalesRefund.TotalCashRefund),0) 'CashInHand',
                ISNULL(SUM(creditsales.TotalCreditSales),0) 'CreditSales', ISNULL(SUM(creditsalesRefund.TotalCreditRefund),0) 'CreditSalesRefund',
                ISNULL(SUM(creditsales.TotalCreditSales),0) - ISNULL(SUM(creditsalesRefund.TotalCreditRefund),0) 'TotalCreditSales',
                0 AS orderFilter

            FROM PHRM_MST_Store store
                LEFT JOIN (
                    SELECT I.StoreId, SUM(I.TotalAmount) 'TotalCashSales'
                    FROM PHRM_TXN_Invoice I
                    WHERE I.PaymentMode = 'cash' AND I.BilStatus = 'paid' AND ISNULL(I.IsReturn,0) != 1
                        AND I.CreateOn BETWEEN @FromDate AND @ToDate
                    GROUP BY I.StoreId
                ) cashsales
                ON store.StoreId = cashSales.StoreId
                LEFT JOIN (
                    SELECT I.StoreId, SUM(I.TotalAmount) 'TotalCashRefund'
                    FROM PHRM_TXN_InvoiceReturn I
                    WHERE I.PaymentMode = 'cash'
                        AND I.CreatedOn BETWEEN @FromDate AND @ToDate
                    GROUP BY I.StoreId
                ) cashsalesRefund
                ON store.StoreId = cashsalesRefund.StoreId
                LEFT JOIN (
                    SELECT I.StoreId, SUM(I.TotalAmount) 'TotalCreditSales'
                    FROM PHRM_TXN_Invoice I
                    WHERE I.PaymentMode = 'credit' AND ISNULL(I.IsReturn,0) != 1
                        AND I.CreateOn BETWEEN @FromDate AND @ToDate
                    GROUP BY I.StoreId
                ) creditsales
                ON store.StoreId = creditsales.StoreId
                LEFT JOIN (
                    SELECT I.StoreId, SUM(I.TotalAmount) 'TotalCreditRefund'
                    FROM PHRM_TXN_InvoiceReturn I
                    WHERE I.PaymentMode = 'credit'
                        AND I.CreatedOn BETWEEN @FromDate AND @ToDate
                    GROUP BY I.StoreId
                ) creditsalesRefund
                ON store.StoreId = creditsalesRefund.StoreId
            WHERE store.Category = 'dispensary'
            GROUP BY store.StoreId, store.Name

        UNION

            SELECT NULL AS StoreId, 'Total' AS StoreName, ISNULL(SUM(cashsales.TotalCashSales),0) 'CashSales', ISNULL(SUM(cashsalesRefund.TotalCashRefund),0) 'CashSalesRefund',
                ISNULL(SUM(cashsales.TotalCashSales),0) - ISNULL(SUM(cashsalesRefund.TotalCashRefund),0) 'TotalCashSales',
                ISNULL(SUM(cashsales.TotalCashSales),0) - ISNULL(SUM(cashsalesRefund.TotalCashRefund),0) 'CashInHand',
                ISNULL(SUM(creditsales.TotalCreditSales),0) 'CreditSales', ISNULL(SUM(creditsalesRefund.TotalCreditRefund),0) 'CreditSalesRefund',
                ISNULL(SUM(creditsales.TotalCreditSales),0) - ISNULL(SUM(creditsalesRefund.TotalCreditRefund),0) 'TotalCreditSales',
                1 AS orderFilter
            FROM(
                    SELECT SUM(I.TotalAmount) 'TotalCashSales'
                    FROM PHRM_TXN_Invoice I
                    WHERE I.PaymentMode = 'cash' AND I.BilStatus = 'paid' AND ISNULL(I.IsReturn,0) != 1
                        AND I.CreateOn BETWEEN @FromDate AND @ToDate
                ) cashsales
                LEFT JOIN (
                    SELECT SUM(I.TotalAmount) 'TotalCashRefund'
                    FROM PHRM_TXN_InvoiceReturn I
                    WHERE I.PaymentMode = 'cash'
                        AND I.CreatedOn BETWEEN @FromDate AND @ToDate
                ) cashsalesRefund
                ON 1 = 1
                LEFT JOIN
                (
                    SELECT SUM(I.TotalAmount) 'TotalCreditSales'
                    FROM PHRM_TXN_Invoice I
                    WHERE I.PaymentMode = 'credit'  AND ISNULL(I.IsReturn,0) != 1
                        AND I.CreateOn BETWEEN @FromDate AND @ToDate
                ) creditsales
                ON 1=1
                LEFT JOIN (
                    SELECT SUM(I.TotalAmount) 'TotalCreditRefund'
                    FROM PHRM_TXN_InvoiceReturn I
                    WHERE I.PaymentMode = 'credit'
                        AND I.CreatedOn BETWEEN @FromDate AND @ToDate
                ) creditsalesRefund
                ON 1 = 1  
            ) X
    ORDER BY X.orderFilter
END
 example to execute the stored procedure we just created
EXECUTE dbo.PHRM_RPT_SalesSummary '2021-01-01','2022-01-01'

GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_StockSummary2]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create the stored procedure in the specified schema
CREATE PROCEDURE [dbo].[PHRM_RPT_StockSummary2]
    @TillDate DATE = NULL
AS
 =============================================
 Author:		Sanjit
 Create date: 18/06/2021
 Description: generated stock summary (2nd) report
 Example : EXECUTE dbo.PHRM_RPT_StockSummary2 '2021-06-20'
 =============================================
/* Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.		Sanjit/02/09/2021		converted datetime to date for @TillDate
--
*/
BEGIN
     body of the stored procedure
    SELECT store.Name AS StoreName, stxn.PurchaseValue, stxn.SalesValue
    FROM PHRM_MST_Store store
    LEFT JOIN 
    (
        SELECT str.StoreId, 
        CONVERT(money, SUM(ISNULL(stxn.InQty,0) * ISNULL(stxn.CostPrice,0)) - sum(ISNULL(stxn.OutQty,0) * ISNULL(stxn.CostPrice,0))) 'PurchaseValue',
        CONVERT(money, SUM(ISNULL(stxn.InQty,0) * ISNULL(stxn.MRP,0)) - sum(ISNULL(stxn.OutQty,0) * ISNULL(stxn.MRP,0))) 'SalesValue'
        FROM PHRM_TXN_StockTransaction stxn
            JOIN PHRM_MST_Store str ON stxn.StoreId = str.StoreId
            JOIN PHRM_MST_Item itm ON itm.ItemId = stxn.ItemId
        WHERE ISNULL(stxn.IsActive,0) = 1 AND CONVERT(DATE,stxn.TransactionDate) < @TillDate
        GROUP BY str.StoreId
    ) stxn
    ON store.StoreId = stxn.StoreId
    WHERE store.Category IN ('dispensary') OR store.SubCategory = 'pharmacy'
    
    UNION

    SELECT 'Total' AS StoreName, stxn.PurchaseValue, stxn.SalesValue
    FROM 
    (
        SELECT 
        CONVERT(money, SUM(ISNULL(stxn.InQty,0) * ISNULL(stxn.CostPrice,0)) - sum(ISNULL(stxn.OutQty,0) * ISNULL(stxn.CostPrice,0))) 'PurchaseValue',
        CONVERT(money, SUM(ISNULL(stxn.InQty,0) * ISNULL(stxn.MRP,0)) - sum(ISNULL(stxn.OutQty,0) * ISNULL(stxn.MRP,0))) 'SalesValue'
        FROM PHRM_TXN_StockTransaction stxn
        WHERE ISNULL(stxn.IsActive,0) = 1 AND CONVERT(DATE,stxn.TransactionDate) < @TillDate
    ) stxn
END

GO
/****** Object:  StoredProcedure [dbo].[PHRM_RPT_StockTransfers]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 /*
FileName: PHRM_RPT_StockTransfers
CreatedBy/date: Sanjit/ 1st July, 2021
Description:
Remarks:  
Execute Query:
    EXECUTE dbo.PHRM_RPT_StockTransfers '2021-07-01','2021-07-03',NULL,NULL,NULL,0
Change History
----------------------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
----------------------------------------------------------------------------------------------------
1.      Sanjit/ 7th Sep, 2021           Changed the date format to all the dates in YYYY-MM-DD HH:MM
-----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[PHRM_RPT_StockTransfers]
    @FromDate DATE = NULL,
    @ToDate DATE = NULL,
    @ItemId INT = NULL,
    @SourceStoreId INT = NULL,
    @TargetStoreId INT = NULL,
    @NotReceivedStocks BIT = NULL
AS
BEGIN
     body of the stored procedure
    SELECT I.ItemName,
        D.BatchNo,
        D.CostPrice,
        D.MRP,
         to get date in the format of YYYY-MM-DD HH:MM
        CONVERT( CHAR(16), D.CreatedOn , 21) 'TransferredOn',
        D.DispatchedQuantity 'TransferQuantity',
        DE.FullName 'TransferredBy',
        SS.Name 'TransferredFrom',
        TS.Name 'TransferredTo',
        RE.FullName 'ReceivedBy',
        CONVERT( CHAR(16), D.ReceivedOn , 21) 'ReceivedOn',
        AE.FullName 'ApprovedBy',
        CONVERT( CHAR(16), R.ApprovedOn , 21) 'ApprovedOn',
        ISNULL((D.CostPrice * D.DispatchedQuantity),0) 'PurchaseValue',
        ISNULL((D.MRP * D.DispatchedQuantity),0) 'SalesValue'
    FROM PHRM_StoreDispatchItems AS D INNER JOIN
        PHRM_MST_Item AS I ON D.ItemId = I.ItemId INNER JOIN
        PHRM_MST_Store AS SS ON D.SourceStoreId = SS.StoreId INNER JOIN
        PHRM_MST_Store AS TS ON D.TargetStoreId = TS.StoreId LEFT OUTER JOIN
        PHRM_StoreRequisition AS R ON D.RequisitionId = R.RequisitionId INNER JOIN
        EMP_Employee AS DE ON D.CreatedBy = DE.EmployeeId LEFT OUTER JOIN
        EMP_Employee AS AE ON R.ApprovedBy = AE.EmployeeId LEFT OUTER JOIN
        EMP_Employee AS RE ON D.ReceivedById = RE.EmployeeId
    WHERE D.CreatedOn BETWEEN @FromDate AND @ToDate
        AND (D.ItemId = @ItemId OR @ItemId IS NULL)
        AND (D.SourceStoreId = @SourceStoreId OR @SourceStoreId IS NULL)
        AND (D.TargetStoreId = @TargetStoreId OR @TargetStoreId IS NULL)
        AND (D.ReceivedById IS NULL OR @NotReceivedStocks IS NULL OR @NotReceivedStocks = 0)
    ORDER BY D.DispatchItemsId DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_AccountClosure]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_ACC_AccountClosure]
			@CurrentFiscalYearId int,
			@NextFiscalYearId int,
			@HospitalId int
	AS
	EXEC [dbo].[SP_ACC_AccountClosure] @CurrentFiscalYearId = 2, @NextFiscalYearId =3, @HospitalId=3
	
	/************************************************************************
	FileName: [SP_ACC_AccountClosure]
	CreatedBy/date: Nagesh /19'June2020
	Description: sp will close current fiscal year. add closing balance and forward closing for next fiscal year as opening balance
	Change History
	-----------------------------------------------------------------------
	S.No.    UpdatedBy/Date                        Remarks
	-----------------------------------------------------------------------
	1       Nagesh /19'June2020						created script for account closure task
	2.      Sud/Nagesh:20Jun'20						HospitalId added for Phrm-Acc Separation
	3.		Nagesh/02Jul'20							sp changes for account closure task working
	4.		Nagesh/12Jul'2020						sp changes for next fiscal year opening balance Dr to cr issue resolution AND Retain Earning balance updation
													we will forward NetProfit into Retain Earning
    5.		Vikas/NageshBB:14th Jul 2020:			added ledgers into current fiscal year if not existed.
	6.		Nagesh: 15 Jul 2020						fix for account close NetProfit forward to Retain Earning logic 
													Normally Expense always Dr and Revenue always Cr but in some case expenses may be Cr and Revenue Dr
													Now i've fixed for this case . This knoledge and conditions explained by Sagar sir
    7.		NageshBB: 17July2021					get codeDetails table values using function. added function here
	*************************************************************************/
	BEGIN
	
		IF(@CurrentFiscalYearId IS NOT NULL AND @NextFiscalYearId IS NOT NULL) 
		BEGIN				  
	    step 0 - check ledger balance history has ledgers for current fiscal year.
				 if there is no ledger for current fiscal year then we need to insert.
		declare @ledgercount int=0
		set @ledgercount =(select COUNT(LedgerId) from ACC_LedgerBalanceHistory where HospitalId=@HospitalId and FiscalYearId=@CurrentFiscalYearId)		
		if(@ledgercount=0)
		begin
			insert into ACC_LedgerBalanceHistory (FiscalYearId,LedgerId,OpeningBalance,OpeningDrCr,ClosingBalance,ClosingDrCr,CreatedBy,CreatedOn,HospitalId)
			select @CurrentFiscalYearId, LedgerId,OpeningBalance,DrCr,0,1,1,GETDATE(),@HospitalId from ACC_Ledger
		end
		Step 1- delete all ledger list from Ledger_BalanceHistory table for NextFiscalYearId		
		delete from ACC_LedgerBalanceHistory 
		where FiscalYearId=@NextFiscalYearId and HospitalId=@HospitalId
		
		Step 2- Update closing balance of CurrentFiscalYear as 0
		Update ACC_LedgerBalanceHistory 
		set ClosingBalance=0, ClosingDrCr=1 
		where FiscalYearId=@CurrentFiscalYearId  and HospitalId=@HospitalId

		Step 3-calculate current fiscal year closing balance with ledgerid
		DECLARE @TBLCurrentFiscalYearCloseBalance TABLE (LedgerId INT Not null unique, Balance float, DrCr bit, hospitalId int)
		Insert into @TBLCurrentFiscalYearCloseBalance(LedgerId, Balance, DrCr, hospitalId)
		select 		
		 LedgerId,
		 Case WHEN Dr>Cr THEN Dr-Cr  ELSE Cr-Dr END AS Balance,
		 Case WHEN Dr>Cr THEN 1  ELSE 0 END AS DrCr	,
		 HospitalId	
		 from 
		 (
			 select l.LedgerId,
			 Case WHEN DrCr=1 THEN isnull(OpeningBalance,0)+isnull(DrAmount,0)  ELSE isnull(DrAmount,0) END AS Dr,
			 Case WHEN DrCr=0 THEN  isnull(OpeningBalance,0)+IsNULL(CrAmount,0) ELSE IsNULL(CrAmount,0) END AS Cr,
			 l.HospitalId
			 from ACC_Ledger l 
			 left join
			 (
						 select LedgerId, sum(DrAmount) DrAmount, sum(CrAmount) CrAmount
						 from 
						 (
								 select LedgerId, Case WHEN DrCr=1 THEN Amount ELSE 0 END AS DrAmount, Case WHEN DrCr=0 THEN Amount ELSE 0 END AS CrAmount
								 from ACC_TransactionItems ti join ACC_Transactions t on t.TransactionId=ti.TransactionId  
								 where t.FiscalYearId=@CurrentFiscalYearId and  t.HospitalId=@HospitalId
						 ) ledTxn group by LedgerId
			  )TxnDetails 
			  on TxnDetails.LedgerId=l.LedgerId and l.HospitalId=@HospitalId

			) a			
		Step 4 --Update closing balance of current fiscal Year
		Update ACC_LedgerBalanceHistory 
		set ClosingBalance=bt.Balance, ClosingDrCr=bt.DrCr		
		from @TBLCurrentFiscalYearCloseBalance bt join ACC_LedgerBalanceHistory bh on bt.LedgerId=bh.LedgerId and bt.hospitalId = bh.HospitalId	
		where FiscalYearId=@CurrentFiscalYearId	and  bh.HospitalId = @HospitalId 

		Step 5- Insert all Ledgers with Next FiscalYearId into ACC_LedgerBalanceHistory, Here default opening balance is 0
		Insert into  ACC_LedgerBalanceHistory (FiscalYearId, LedgerId, OpeningBalance, OpeningDrCr,CreatedBy, CreatedOn, HospitalId)		
		select @NextFiscalYearId, LedgerId,0,1,1 as CreatedBy, GETDATE() as CreatedOn, hospitalId
		from @TBLCurrentFiscalYearCloseBalance where HospitalId=@HospitalId

		Step 6 - Update Next fiscal year assets and liability opening balance from current fiscal year closing balance
		 declare @Assets varchar(50)=(select dbo.FN_ACC_GetNameByCode('008',@HospitalId)'008')	
		 declare @Liabilities varchar(50)=(select dbo.FN_ACC_GetNameByCode('009',@HospitalId))
		
		 update ACC_LedgerBalanceHistory
		 set OpeningBalance=bt.Balance, OpeningDrCr=bt.DrCr
		 from @TBLCurrentFiscalYearCloseBalance bt join ACC_LedgerBalanceHistory bh on bt.LedgerId=bh.LedgerId and bt.hospitalId=bh.HospitalId
		 where FiscalYearId=@NextFiscalYearId  
		 and bt.LedgerId in
		 (
			   select LedgerId from ACC_Ledger l where LedgerGroupId in ( select LedgerGroupId from ACC_MST_LedgerGroup
			   where HospitalId=@HospitalId and PrimaryGroup in (@Assets, @Liabilities)) and l.HospitalId=@HospitalId			                       
		 )		
		 
		 Step 7 -Forward Net Profit as Retain Earning for next fiscal year
		 declare @RetainEarnLedgerName varchar(50)=(select dbo.FN_ACC_GetNameByCode('016',@HospitalId))		
		 declare @Revenue varchar(50)=(select dbo.FN_ACC_GetNameByCode('001',@HospitalId))
		 declare @Expenses varchar(50)=(dbo.FN_ACC_GetNameByCode('002',@HospitalId))
		 revenue always Cr and Expenses alway Dr
		 Declare @TblNetProfit TABLE (NetProfit float, DrCr bit)
		 
			 insert into @TblNetProfit(NetProfit, DrCr)				
			 select case when ExpDr > RevCr then ExpDr-RevCr else RevCr-ExpDr end NetProfit,
			 case when ExpDr > RevCr then 1 else 0 end DrCr from
			 (
			select (ExpDr-ExpCr)as ExpDr, (RevCr-RevDr) RevCr from (
			select  
			isnull((select sum(balance) as Expense from @TBLCurrentFiscalYearCloseBalance where DrCr=1 and  LedgerId in  
				(
					select l1.Ledgerid from   ACC_Ledger l1 
					join ACC_MST_LedgerGroup lg on l1.LedgerGroupId=lg.LedgerGroupId
					where l1.HospitalId=@HospitalId AND lg.HospitalId=@HospitalId AND PrimaryGroup in ('Expenses')
				) 
			),0) as ExpDr,
			isnull((select sum(balance) as Expense from @TBLCurrentFiscalYearCloseBalance where DrCr=0 and  LedgerId in  
				(
					select l1.Ledgerid from   ACC_Ledger l1 
					join ACC_MST_LedgerGroup lg on l1.LedgerGroupId=lg.LedgerGroupId
					where l1.HospitalId=@HospitalId AND lg.HospitalId=@HospitalId AND PrimaryGroup in ('Expenses')
				) 
			),0) as ExpCr,
			Isnull((select sum(balance) as Revenue	from @TBLCurrentFiscalYearCloseBalance  where DrCr=1 and  LedgerId in  
				(
					select l.Ledgerid from   ACC_Ledger l 
					join ACC_MST_LedgerGroup lg on l.LedgerGroupId=lg.LedgerGroupId
					where l.HospitalId=@HospitalId AND lg.HospitalId=@HospitalId AND PrimaryGroup in ('Revenue')
				)
			),0) as RevDr,
			isnull((select sum(balance) as Revenue	from @TBLCurrentFiscalYearCloseBalance  where DrCr=0 and  LedgerId in  
				(
					select l.Ledgerid from   ACC_Ledger l 
					join ACC_MST_LedgerGroup lg on l.LedgerGroupId=lg.LedgerGroupId
					where l.HospitalId=@HospitalId AND lg.HospitalId=@HospitalId AND PrimaryGroup in ('Revenue')
				)
			),0) as RevCr
			)a) b
		

		 Declare @RetainEarnLedId int= (select LedgerId from ACC_Ledger where LedgerName=@RetainEarnLedgerName)	
		 Declare @TblRetainEarningOpening  table (OpeningBalance float, DrCr bit)

		 insert into @TblRetainEarningOpening (OpeningBalance, DrCr)
		 select OpeningBalance,OpeningDrCr from ACC_LedgerBalanceHistory where FiscalYearId=@NextFiscalYearId and HospitalId=@HospitalId and LedgerId=@RetainEarnLedId
		 
		 Declare @RetainEarnDrCr bit, @RetainEarnBalance float
			IF((select top 1 DrCr from @TblNetProfit) = (select top 1 DrCr from @TblRetainEarningOpening))				
				BEGIN  
				  set @RetainEarnDrCr=(select top 1 DrCr from @TblNetProfit)
				  set @RetainEarnBalance=(select top 1 NetProfit from @TblNetProfit)+ (select top 1 OpeningBalance from @TblRetainEarningOpening)				   
				END  
				ELSE IF((select top 1 NetProfit from @TblNetProfit) > (select top 1 OpeningBalance from @TblRetainEarningOpening))									
				BEGIN  
					set @RetainEarnDrCr=(select top 1 DrCr from @TblNetProfit)
					set @RetainEarnBalance=(select top 1 NetProfit from @TblNetProfit)- (select top 1 OpeningBalance from @TblRetainEarningOpening)				   
				END
				ELSE
				BEGIN
					set @RetainEarnDrCr=(select top 1 DrCr from @TblRetainEarningOpening)
					set @RetainEarnBalance=(select top 1 OpeningBalance from @TblRetainEarningOpening)-(select top 1 NetProfit from @TblNetProfit)
				END		 
		update ACC_LedgerBalanceHistory 
		set OpeningBalance= @RetainEarnBalance, OpeningDrCr=@RetainEarnDrCr
		where LedgerId=@RetainEarnLedId
		and FiscalYearId=@NextFiscalYearId AND HospitalId=@HospitalId
				
		Step 8- Update LedgerOpening Balance of Ledger table 
		update ACC_Ledger set OpeningBalance=bh.OpeningBalance, DrCr=bh.OpeningDrCr
		from ACC_LedgerBalanceHistory bh join ACC_Ledger l on l.LedgerId=bh.LedgerId
		where bh.FiscalYearId=@NextFiscalYearId and bh.HospitalId=@HospitalId

	 Step 9- Update current fiscal year make IsClosed=true
       update ACC_MST_FiscalYears set IsClosed=1
       where FiscalYearId=@CurrentFiscalYearId
		END		
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_Bill_GetBillingDataForAccTransfer]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[SP_ACC_Bill_GetBillingDataForAccTransfer]
		@TransactionDate DATE, @HospitalId INT
	AS

	/**************************************************
	Stored Procedure Name:Exec SP_ACC_Bill_GetBillingDataForAccTransfer 	
	Details:
	-This stored procedure will get billing module data for transfer to accounting by date
	-We are getting billing records, deposit records, etc
		

		Change History:
		--------------------------------------------------------------------------------
		S.No.   Author					Date               Remarks
		--------------------------------------------------------------------------------
		1.      NageshBB & Sud sir		16/03/2020       Stored procedure created
		2.      Nagesh/Sud               8May'20        Paymentmode=card handled in billingtransaction
		3.		 Sud/NageshBB			16 Jul 2020		 Payment mode=card handle in all cases 
		4.      Sud/10Aug'20                            BugFix-CreditInvoice date issue resolved..
		5.		 Vikas					20thDec'20		 added function for get ledgerId.
		6.      NageshBB & Pratik sir	12July2021       changed script for cash & credit return bill
		--------------------------------------------------------------------------------

	**********************************************/
	BEGIN

		IF((select top 1 CONVERT(bit, ParameterValue) from CORE_CFG_Parameters where ParameterGroupName='accounting'and ParameterName='GetBillingFromSyncTable')=1) 
		BEGIN
		  
		SELECT * from BIL_SYNC_BillingAccounting 
		WHERE IsTransferedToAcc IS NULL AND CONVERT(date, TransactionDate) BETWEEN CONVERT(date, @TransactionDate) AND CONVERT(date, @TransactionDate)
		END
		ELSE
		BEGIN    
		Note:-BillingAccountingSyncId added for temporary pupose because code mapping model has this column , later we need to remove this 
	----Cash Bill----------CashBill->BIL_TXN_BillingTransactionItems->BillingTransactionItemId  (TransactionType->TableName->ReferenceId Column Name)
					Select 
					BillingTransactionItemId as BillingAccountingSyncId,
					BillingTransactionItemId 'ReferenceId',
					'BillingTransactionItem' AS ReferenceModelName,
					ServiceDepartmentId,
					ItemId,
					itm.PatientId,
					'CashBill' TransactionType,
					'cash' As PaymentMode, 
					txn.PaymentMode As PaymentMode, 
					itm.SubTotal,
					Tax 'TaxAmount',
					itm.DiscountAmount,
					itm.TotalAmount,
					0 AS IsTransferedToAcc,
					itm.PaidDate 'TransactionDate',
					GetDate() 'CreatedOn',
					itm.PaymentReceivedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					txn.OrganizationId AS CreditOrganizationId  ,
					(SELECT dbo.FN_ACC_GetIncomeLedgerId(ServiceDepartmentId,ItemId, @HospitalId)) LedgerId
				from BIL_TXN_BillingTransactionItems  itm, BIL_TXN_BillingTransaction txn
					
				Where 
					txn.BillingTransactionId = itm.BillingTransactionId
					AND Convert(Date,itm.PaidDate) = @TransactionDate
					and itm.BillingTransactionId IS NOT NULL
					- sud/nagesh:8may'20-- below case should be separated for card and cheque after requirement comes for this..
					and ( txn.PaymentMode='cash' OR txn.PaymentMode='card' OR txn.PaymentMode='cheque')
					AND ISNULL(itm.IsCashBillSync,0) = 0  -- Include only Not-Synced Data for CashBill Case--
					
									
				UNION ALL
					
	-------Credit Bill----------------------------------------------CreditBill-BillingTransactionItemId-BIL_TXN_BillingTransactionItems
				Select 
					BillingTransactionItemId as BillingAccountingSyncId,
					BillingTransactionItemId 'ReferenceId',
					'BillingTransactionItem' AS ReferenceModelName,
					ServiceDepartmentId,
					ItemId,
					itm.PatientId,
					'CreditBill' TransactionType,
					txn.PaymentMode As PaymentMode, 
					itm.SubTotal,
					Tax 'TaxAmount',
					itm.DiscountAmount,
					itm.TotalAmount,
					0 AS IsTransferedToAcc,
					txn.CreatedOn 'TransactionDate', -- this is credit date.. 
					GetDate() 'CreatedOn',
					itm.CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					txn.OrganizationId AS CreditOrganizationId  ,
					(SELECT dbo.FN_ACC_GetIncomeLedgerId(ServiceDepartmentId,ItemId, @HospitalId)) LedgerId
				from BIL_TXN_BillingTransactionItems  itm, BIL_TXN_BillingTransaction txn
					
				Where 
					txn.BillingTransactionId = itm.BillingTransactionId
					AND Convert(Date,txn.CreatedOn)=@TransactionDate--changed: sud-10Aug'20--Corrected to TransactionCreatedOn from ItemCreatedOn
					and itm.BillingTransactionId IS NOT NULL
					and txn.PaymentMode='credit'
					AND ISNULL(itm.IsCreditBillSync,0) = 0  -- Include only Not-Synced Data for CreditBill Case--
							

				UNION ALL	
	---------------------Cash Bill Return---CashBillReturn-BillingTransactionItemId-BIL_TXN_BillingTransactionItems
				Select 
					BillingTransactionItemId as BillingAccountingSyncId,
					BillingTransactionItemId 'ReferenceId',
					'BillingTransactionItem' AS ReferenceModelName,
					ServiceDepartmentId,
					ItemId,
					itm.PatientId,
					'CashBillReturn' TransactionType,
					--txn.PaymentMode As PaymentMode, --NBB: 16Jul20-card payment not handle yet
					'cash' As PaymentMode, 			
					itm.SubTotal,
					Tax 'TaxAmount',
					itm.DiscountAmount,
					itm.TotalAmount,
					0 AS IsTransferedToAcc,
					ret.CreatedOn 'TransactionDate',
					GetDate() 'CreatedOn',
					ret.CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					NULL AS CreditOrganizationId  ,
					(SELECT dbo.FN_ACC_GetIncomeLedgerId(ServiceDepartmentId,ItemId, @HospitalId)) LedgerId
				from BIL_TXN_BillingTransactionItems  itm, BIL_TXN_BillingTransaction txn, BIL_TXN_InvoiceReturn ret
					
				Where 
					txn.BillingTransactionId = itm.BillingTransactionId
					and ret.BillingTransactionId=txn.BillingTransactionId
					and Convert(Date,ret.CreatedOn) = @TransactionDate--sud-19March this should've been createdon of return table..
					and ISNULL(itm.ReturnStatus,0) != 0  
					and itm.BillingTransactionId IS NOT NULL
					and  ( txn.PaymentMode='cash' OR txn.PaymentMode='card' OR txn.PaymentMode='cheque')  ---we considering all payment mode as cash , except credit
					AND ISNULL(itm.IsCashBillReturnSync,0) = 0  -- Include only Not-Synced Data for CashBill Return Case--
					Select 
					BillReturnItemId as BillingAccountingSyncId,
					itm.BillReturnItemId 'ReferenceId',
					'InvoiceReturnItem' AS ReferenceModelName,
					ServiceDepartmentId,
					ItemId,
					itm.PatientId,
					'CashBillReturn' TransactionType,					
					'cash' As PaymentMode, 			
					itm.RetSubTotal as SubTotal,
					itm.RetTaxAmount 'TaxAmount',
					itm.RetDiscountAmount as DiscountAmount,
					itm.RetTotalAmount as TotalAmount,
					0 AS IsTransferedToAcc,
					txn.CreatedOn 'TransactionDate',
					GetDate() 'CreatedOn',
					txn.CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					NULL AS CreditOrganizationId  ,
					(SELECT dbo.FN_ACC_GetIncomeLedgerId(ServiceDepartmentId,ItemId, @HospitalId)) LedgerId
				from BIL_TXN_InvoiceReturnItems  itm, BIL_TXN_InvoiceReturn txn
					
				Where 
					txn.BillReturnId= itm.BillReturnId					
					and Convert(Date,txn.CreatedOn) = @TransactionDate										
					and  ( txn.PaymentMode='cash' OR txn.PaymentMode='card' OR txn.PaymentMode='cheque')  ---we considering all payment mode as cash , except credit
					and txn.BillStatus='paid'
					AND ISNULL(itm.IsCashBillSyncToAcc,0) = 0  -- Include only Not-Synced Data for CashBill Return Case--					
				
				UNION ALL
					
	----------CreditBillReturn--- done with join from Transaction, TransactionItem and InvoiceReturn Table--CreditBillReturn-BillingTransactionItemId-BIL_TXN_BillingTransactionItems
				Select 
				BillingTransactionItemId as BillingAccountingSyncId,
					BillingTransactionItemId 'ReferenceId',
					'BillingTransactionItem' AS ReferenceModelName,
					ServiceDepartmentId,
					ItemId,
					itm.PatientId,
					'CreditBillReturn' TransactionType,
					txn.PaymentMode As PaymentMode, 
					itm.SubTotal,
					Tax 'TaxAmount',
					itm.DiscountAmount,
					itm.TotalAmount,
					0 AS IsTransferedToAcc,
					ret.CreatedOn 'TransactionDate',
					GetDate() 'CreatedOn',
					ret.CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					txn.OrganizationId AS CreditOrganizationId  ,
					(SELECT dbo.FN_ACC_GetIncomeLedgerId(ServiceDepartmentId,ItemId, @HospitalId)) LedgerId
				from BIL_TXN_BillingTransactionItems  itm, BIL_TXN_BillingTransaction txn, BIL_TXN_InvoiceReturn ret
					
				Where 
					txn.BillingTransactionId = itm.BillingTransactionId
					and ret.BillingTransactionId=txn.BillingTransactionId
					and Convert(Date,ret.CreatedOn) = @TransactionDate
					and ISNULL(itm.ReturnStatus,0) != 0  -- take only returned items..
					and itm.BillingTransactionId IS NOT NULL
					and txn.PaymentMode='credit'
					AND ISNULL(itm.IsCreditBillReturnSync,0) = 0  -- Include only Not-Synced Data for Credit Return Case--
					
				    Select 
				    itm.BillReturnItemId as BillingAccountingSyncId,
					BillReturnItemId 'ReferenceId',
					'InvoiceReturnItem' AS ReferenceModelName,
					ServiceDepartmentId,
					ItemId,
					itm.PatientId,
					'CreditBillReturn' TransactionType,
					txn.PaymentMode As PaymentMode, 
					itm.RetSubTotal as SubTotal,
					itm.RetTaxAmount 'TaxAmount',
					itm.RetDiscountAmount as  DiscountAmount,
					itm.RetTotalAmount as TotalAmount,
					0 AS IsTransferedToAcc,
					txn.CreatedOn 'TransactionDate',
					GetDate() 'CreatedOn',
					txn.CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					bilTxn.OrganizationId AS CreditOrganizationId  ,
					(SELECT dbo.FN_ACC_GetIncomeLedgerId(ServiceDepartmentId,ItemId, @HospitalId)) LedgerId
				from BIL_TXN_InvoiceReturnItems  itm, BIL_TXN_InvoiceReturn txn , BIL_TXN_BillingTransaction bilTxn
					
				Where 
					txn.BillReturnId = itm.BillReturnId
					and txn.BillingTransactionId=bilTxn.BillingTransactionId
					and Convert(Date,txn.CreatedOn) = @TransactionDate										
					and txn.PaymentMode='credit'
					AND ISNULL(itm.IsCreditBillSyncToAcc,0) = 0  -- Include only Not-Synced Data for Credit Return Case--
					
					UNION ALL
					
	----------------Deposit Add---DepositAdd-DepositId-BIL_TXN_Deposit
				Select 
					DepositId as BillingAccountingSyncId,
					DepositId 'ReferenceId',
					'Deposit' AS ReferenceModelName,
					NULL AS ServiceDepartmentId,
					NULL AS ItemId,
					PatientId,
					'DepositAdd' TransactionType,
					'cash' As PaymentMode, 
					PaymentMode As PaymentMode, --NBB: 16Jul20-card payment not handle yet
					NULL AS SubTotal,
					NULL AS 'TaxAmount',
					NULL AS DiscountAmount,
					Amount AS TotalAmount,
					0 AS IsTransferedToAcc,
					CreatedOn 'TransactionDate',
					GetDate() 'CreatedOn',
					CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					NULL AS CreditOrganizationId,
					NULL as LedgerId
				from BIL_TXN_Deposit
					
				Where 
				Convert(Date,CreatedOn)=@TransactionDate
				and DepositType ='Deposit'
				AND ISNULL(IsDepositSync,0) = 0  -- Include only Not-Synced Data
					
				UNION ALL
					
	-----Deposit Return/Deduct---DepositReturn-DepositId-BIL_TXN_Deposit
				Select 
				DepositId as BillingAccountingSyncId,
					DepositId 'ReferenceId',
					'Deposit' AS ReferenceModelName,
					NULL AS ServiceDepartmentId,
					NULL AS ItemId,
					PatientId,
					'DepositReturn' TransactionType,
						 PaymentMode As PaymentMode, --NBB: 16Jul20-card payment not handle yet
					'cash' As PaymentMode, 		 
					NULL AS SubTotal,
					NULL AS 'TaxAmount',
					NULL AS DiscountAmount,
					Amount AS TotalAmount,
					0 AS IsTransferedToAcc,
					CreatedOn 'TransactionDate',
					GetDate() 'CreatedOn',
					CreatedBy AS CreatedBy,
					NULL AS SettlementDiscountAmount,
					NULL AS Remark,
					NULL AS CreditOrganizationId  ,
					NULL as LedgerId
				from BIL_TXN_Deposit
					
				Where 
					
				Convert(Date,CreatedOn)=@TransactionDate
				and DepositType IN ('ReturnDeposit', 'depositdeduct')
					AND ISNULL(IsDepositSync,0) = 0  -- Include only Not-Synced Data
					
		END			  					
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_DailyTransactionReportDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[SP_ACC_DailyTransactionReportDetails] 
	@VoucherNumber varchar(50), @HospitalId INT	
AS
/************************************************************************
FileName: [SP_ACC_DailyTransactionReportDetails]
Author  : NageshBB
Created date: 12July2021
Description:			
-------------------------------------------------------------------------
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       NageshBB /12July2021		  updated script for return bill changes
2		Aniket /21Sep2021			  updated script for bill return changes 

*************************************************************************************/

BEGIN
 Declare @TransactionType varchar(max),@ReferenceIds varchar(200)
 SET @TransactionType = (Select STRING_AGG(TransactionType, ',') as 'TrasactionType' 
						 From ACC_Transactions 
						 Where HospitalId= @HospitalId AND	 VoucherNumber = @VoucherNumber )
 
 SET @ReferenceIds =(Select STRING_AGG(ReferenceId, ',') as 'TrasactionType' 
					 From ACC_Transactions txn 
					 JOIN ACC_TXN_Link txnLink on txn.TransactionId= txnLink.TransactionId
					 WHERE  txn.HospitalId= @HospitalId AND txn.VoucherNumber =@VoucherNumber ) 



 IF(('DepositAdd') IN(select * from STRING_SPLIT(@TransactionType, ','))
   OR ('DepositReturn') IN(select * from STRING_SPLIT(@TransactionType, ',')) )
		SELECT 
			pat.FirstName + ' ' + ISNULL(pat.MiddleName,'') + ' ' + pat.LastName  as 'PatientName',
			dep.ReceiptNo as 'ReceiptNo',
			SUM(dep.Amount) as 'TotalAmount',
			dep.PaymentMode as 'PaymentMode'
		FROM BIL_TXN_Deposit dep 	
		join PAT_Patient pat on dep.PatientId = pat.PatientId
		WHERE dep.DepositId in (select * from STRING_SPLIT(@ReferenceIds, ',')) 

		GROUP BY
			pat.FirstName,pat.MiddleName,pat.LastName,
			dep.ReceiptNo ,
			dep.PaymentMode 

 IF( ('CashBill') IN(select * from STRING_SPLIT(@TransactionType, ','))
	OR ('CreditBill') IN(select * from STRING_SPLIT(@TransactionType, ','))
	OR ('CashBillReturn') IN(select * from STRING_SPLIT(@TransactionType, ','))
	OR ('CreditBillReturn') IN(select * from STRING_SPLIT(@TransactionType, ','))
   )
		SELECT 
				txn.InvoiceCode + cast(txn.InvoiceNo as varchar) as InvoiceNo,
				pat.FirstName + ' ' + ISNULL(pat.MiddleName,'') + ' ' + pat.LastName  as 'PatientName',
				itm.*
		FROM BIL_TXN_BillingTransactionItems itm 
				join BIL_TXN_BillingTransaction txn on itm.BillingTransactionId= txn.BillingTransactionId
				join PAT_Patient pat on itm.PatientId = pat.PatientId 
		WHERE itm.BillingTransactionItemId in (select * from STRING_SPLIT(@ReferenceIds, ','))

 IF( ('CashBill') IN(select * from STRING_SPLIT(@TransactionType, ','))
	OR ('CreditBill') IN(select * from STRING_SPLIT(@TransactionType, ','))
   )
		SELECT 
				txn.InvoiceCode + cast(txn.InvoiceNo as varchar) as InvoiceNo,
				pat.FirstName + ' ' + ISNULL(pat.MiddleName,'') + ' ' + pat.LastName  as 'PatientName',
				itm.*
		FROM BIL_TXN_BillingTransactionItems itm 
				join BIL_TXN_BillingTransaction txn on itm.BillingTransactionId= txn.BillingTransactionId
				join PAT_Patient pat on itm.PatientId = pat.PatientId 
		WHERE itm.BillingTransactionItemId in (select * from STRING_SPLIT(@ReferenceIds, ','))

IF(('CashBillReturn') IN(select * from STRING_SPLIT(@TransactionType, ','))
	OR ('CreditBillReturn') IN(select * from STRING_SPLIT(@TransactionType, ','))
   )
		SELECT 
				retTxn.InvoiceCode + cast(retTxn.CreditNoteNumber as varchar) as InvoiceNo,
				pat.FirstName + ' ' + ISNULL(pat.MiddleName,'') + ' ' + pat.LastName  as 'PatientName',
				retItm.*
		FROM BIL_TXN_InvoiceReturnItems retItm 
				join BIL_TXN_InvoiceReturn retTxn on retItm.BillReturnId= retTxn.BillReturnId
				join PAT_Patient pat on retItm.PatientId = pat.PatientId 
		WHERE retItm.BillReturnItemId  in (select * from STRING_SPLIT(@ReferenceIds, ','))
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetAllEmployee_LedgerList]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* ***********************************************************************
FileName: [SP_ACC_GetAllEmployee_LedgerList]  
CreatedBy/date: Anish/Apr-2020
Description: To get ledger details for Consultant ledgers from acc-mapping table 
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1.      Sud/Nagesh:20Jun'20                    HospitalId added for Phrm-Acc Separation
************************************************************************ */

CREATE PROCEDURE [dbo].[SP_ACC_GetAllEmployee_LedgerList]  
  @HospitalId INT
AS
BEGIN
  Select led.LedgerId, consLedMap.ReferenceId 'EmployeeId',
  led.LedgerName, led.Code 'LedgerCode', ledGrp.LedgerGroupName
  from ACC_Ledger led, ACC_MST_LedgerGroup ledGrp, 
  (Select * from ACC_Ledger_Mapping where LedgerType='consultant' and HospitalId=@HospitalId) consLedMap
  Where led.LedgerGroupId=ledGrp.LedgerGroupId
    and led.LedgerId=consLedMap.LedgerId 
    and led.HospitalId = @HospitalId and ledGrp.HospitalId=@HospitalId
END
GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetIncomeLedgerName_Updated]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author: <Ashish>
 Create date: <10th Jan 2020>
 Description: <get income ledgers>
This function gets servicedeptid and itemid and return ledgerid from BillingIncome Ledger Mapping table
this is used in trigger for save billing data into sync table 
logic is like 
    if(find Ledger id from mapping talbe  for servDeptId && ItemId) 
        Yes got it=> return LedgerId
    else if (find Ledger id from mapping talbe  for servDeptId && ItemId is null )  
        Yes got it=> return LedgerId
    else (means don't have entry into mapping table or there is no ledger created)
        If(check Ledger is exist or not for ServiceDepartment into ACC_Ledger table)    
          Yes got it ==>Means Ledger is there but mapping table don'at have entry
                => so, do entry into mapping table like ServiceDeptId && ItemId as NULL, LedgerId
                => return LedgerId
          NO not there=> Means Ledger not created for Service Dep and also there is no entry into mapping table
            =>Then First insert Ledger with matching ledgergroup for billing income ledger
            =>do entry into mapping table like ServiceDeptId && ItemId as NULL, LedgerId
            =>return LedgerId
 =============================================
	CREATE PROCEDURE [dbo].[SP_ACC_GetIncomeLedgerName_Updated]
	  @ServiceDepartmentId int  , @ItemId int	-- Add the parameters for the stored procedure here
	AS
	BEGIN

	DECLARE @LedgerId int, @LedgerName varchar(100), @NewLedgerName varchar(500),@LedgerGroupId int
		if Exists (SELECT   LedgerId FROM ACC_Bill_LedgerMapping where ServiceDepartmentId=@ServiceDepartmentId and ItemId=@ItemId)
			Begin
				set @LedgerId= (Select  LedgerId from ACC_Bill_LedgerMapping where ServiceDepartmentId=@ServiceDepartmentId and ItemId=@ItemId)

		End
		Else if Exists (SELECT 1 LedgerId FROM ACC_Bill_LedgerMapping where ServiceDepartmentId=@ServiceDepartmentId and ItemId is null)

		Begin
				set @LedgerId= (Select  LedgerId from ACC_Bill_LedgerMapping where ServiceDepartmentId=@ServiceDepartmentId and ItemId is null)
		End
		Else 
			Begin
	 
				 set @LedgerGroupId=(select top 1 Ledgergroupid  from ACC_MST_LedgerGroup where  [Name] ='RDI_SALES')
				 Set  @NewLedgerName=(select top 1 ServiceDepartmentName from BIL_MST_ServiceDepartment where ServiceDepartmentId=@ServiceDepartmentId)
				if Exists (select top 1 LedgerName from ACC_Ledger where LedgerGroupId=@LedgerGroupId and LedgerName=(select top 1 ServiceDepartmentName from BIL_MST_ServiceDepartment where ServiceDepartmentId=@ServiceDepartmentId))
				 if Exists (select  LedgerId from ACC_Ledger where  LedgerName=(select top 1 ServiceDepartmentName from BIL_MST_ServiceDepartment where ServiceDepartmentId=@ServiceDepartmentId))
	
				 Begin
					 set @LedgerId = (select  LedgerId from ACC_Ledger where  LedgerName=@NewLedgerName)
	 				insert into acc_bill_ledgermapping(ServiceDepartmentId, ItemId, LedgerId) values(@ServiceDepartmentId,@ItemId,@LedgerId)
				End

				else
					Begin
					  create new ledger for billing income sales ledger group
			
					insert into acc_ledger(LedgerGroupId, LedgerName, CreatedOn, CreatedBy, IsActive) 
					values(@LedgerGroupId, @NewLedgerName, GETDATE(), 1, 1)
					
					 set @LedgerId = (select  LedgerId from ACC_Ledger where LedgerName= @NewLedgerName)
					add mapping table entry for newly created ledger

					insert into acc_bill_ledgermapping(ServiceDepartmentId, ItemId, LedgerId) values(@ServiceDepartmentId,@ItemId,@LedgerId)
				
				End			
		END
	return @LedgerId
	End
GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetInventoryTransactions]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_ACC_GetInventoryTransactions]			
@TransactionDate DATE, @HospitalId INT
AS

/************************************************************************
FileName: [SP_ACC_GetInventoryTransactions]
CreatedBy/date: Ajay/05Jul'19
Description: getting records of inventory transactions for accounting
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       Ajay/05Jul'19						created the script
2.		Vikas / 01-Jun-2020					update table 1 data -> exculde 'Capital Goods' Item type from table1
3.		NageshBB 23 Jul 2020				replaced createdOn by GoodsReceiptDate column
4.		Vikas 11th Aug 2020					replaced parameter @FromDate and @ToDate into @TransactionDate
5.      Sud:11Aug'20                        Date changed to GoodsReceiptDate. Voucher should be created on this date.
6.		NageshBB: 12Aug2020					Changes for get Consumed and dispatched items for accounting
											Now dispatch and consumption records taking from WARD_INV_Transaction table
7.		NageshBB: 19Aug2020					changes for inventory Consumption TotalAmount ,new tranfer rule which record get for StockManageOut
											, exclude cancel good receipt
8.		NageshBB: 20Aug2020					StockManageOut transaction get only on fiscal Year END date
9.      Vikas: 5th Oct 2020				    Added GoodsReceiptNo for remarks.
10.	    NageshBB/Sanjit sir: 13 July 2021   updated as per new inventory table structure
11		Aniket 21Sept2021					added allias for costprice in DispatchToDept as Price
*************************************************************************/
BEGIN
	Declare @FYStartDate datetime=(select top 1 StartDate from ACC_MST_FiscalYears where convert(date,@TransactionDate)
	between convert(date,Startdate) and convert(date,EndDate)),
	@FYEndDate datetime=(select top 1 EndDate from ACC_MST_FiscalYears where convert(date,@TransactionDate)
	between convert(date,Startdate) and convert(date,EndDate))
	Table1: GoodReceipt
		SELECT 
			gr.CreatedOn,
			gr.GoodsReceiptDate as 'CreatedOn',
			v.VendorName,
			gr.VendorId,
			 gr.PaymentMode,
			 itm.ItemCategoryId,
			 itm.ItemType,
			 itm.ItemName,
			 gr.TDSAmount,
			 gr.BillNo,									-- 26 March 2020:Vikas: added for invetory integration, mapping with accounting as per charak requirements.
			 gr.GoodsReceiptID,							-- 30 march 2020:Vikas: added GoodsReceiptID column
			 gritm.*,
			 gr.GoodsReceiptNo							-- 5th Oct 2020: Vikas: Added GoodsReceiptNo for remarks.
		FROM
			INV_TXN_GoodsReceipt gr 
			join INV_TXN_GoodsReceiptItems gritm on gr.GoodsReceiptID = gritm.GoodsReceiptId
			JOIN INV_MST_Vendor v ON gr.VendorId = v.VendorId 
			join INV_MST_Item itm on gritm.ItemId = itm.ItemId
		WHERE
			(gritm.IsTransferredToACC IS NULL OR gritm.IsTransferredToACC = 0) 
			-sud:11Aug'20--changed to gr.GoodsReceiptDate from gr.CreatedOn
			AND (CONVERT(DATE, gr.GoodsReceiptDate)= CONVERT(DATE, @TransactionDate))  -- BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
			AND itm.ItemType !='Capital Goods' and gr.IsCancel!=1 --excluded cancel gr	
	Table2: WriteOffItems
		SELECT * 
		FROM
			INV_TXN_WriteOffItems 
		WHERE
			(IsTransferredToACC IS NULL OR IsTransferredToACC = 0)
			AND (CONVERT(DATE, CreatedOn)= CONVERT(DATE, @TransactionDate))-- BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
	Table3: ReturnToVendor
		SELECT
			rv.*, 
			v.VendorName, 
			gr.PaymentMode 
		FROM
			INV_TXN_ReturnToVendorItems rv 
			JOIN INV_MST_Vendor v ON rv.VendorId = v.VendorId 
			JOIN INV_TXN_GoodsReceipt gr ON rv.GoodsReceiptId = gr.GoodsReceiptID 
		WHERE
			(rv.IsTransferredToACC IS NULL OR rv.IsTransferredToACC = 0)
			AND (CONVERT(DATE, rv.CreatedOn)= CONVERT(DATE, @TransactionDate))-- BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
	
	Table4: DispatchToDept
	NageshBB: 12Aug2020: changed table name for get dispatched records StockTransaction to WARD_INV_Transaction						
			Select 
			wardTxn.TransactionId,
			CreatedOn=convert(date, wardTxn.TransactionDate),
			TransactionType='INVDispatchToDept',					
			wardTxn.Price, 
			wardTxn.Quantity					
			from WARD_INV_Transaction wardTxn join INV_MST_Item itm 
			on wardTxn.ItemId=itm.ItemId
			where (wardTxn.IsTransferToAcc IS NULL OR wardTxn.IsTransferToAcc =0) 
			AND wardTxn.TransactionType='dispatched-items' AND itm.ItemType='consumables'
			and (convert(date, wardTxn.TransactionDate)= convert(date, @TransactionDate))	
			Select 
			stkTxn.StockTransactionId as TransactionId,
			CreatedOn=convert(date, stkTxn.TransactionDate),
			TransactionType='INVDispatchToDept',					
			stkTxn.CostPrice as Price, 
			stkTxn.OutQty as Quantity
			from INV_TXN_StockTransaction stkTxn join INV_MST_Item itm 
			on stkTxn.ItemId=itm.ItemId
			where (stkTxn.IsTransferredToACC IS NULL OR stkTxn.IsTransferredToACC =0) 
			AND stkTxn.TransactionType='dispatched-item-from' AND itm.ItemType='consumables'
			and (convert(date, stkTxn.TransactionDate)= convert(date, @TransactionDate))

	 Table 5 :INVDeptConsumedGoods
	NageshBB: 12Aug2020: changed table name for get consumed records. WARD_INV_Consumption to WARD_INV_Transaction
		SELECT 
				wardTxn.TransactionId,
				sb.SubCategoryId,
				sb.SubCategoryName,   
				CreatedOn=convert(date,wardTxn.TransactionDate),											
				TotalAmount= wardTxn.Quantity * wardTxn.Price
			FROM WARD_INV_Transaction wardTxn
				join INV_MST_Item itm on wardTxn.ItemId= itm.ItemId
				join INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
			WHERE (wardTxn.IsTransferToAcc IS NULL OR wardTxn.IsTransferToAcc=0)  
			AND wardTxn.TransactionType='consumption-items' AND itm.ItemType='consumables'
		    AND (CONVERT(DATE, wardTxn.TransactionDate)= CONVERT(DATE, @TransactionDate))	
		SELECT 
				stkTxn.StockTransactionId as  TransactionId,
				sb.SubCategoryId,
				sb.SubCategoryName,   
				CreatedOn=convert(date,stkTxn.TransactionDate),											
				TotalAmount= stkTxn.OutQty * stkTxn.CostPrice
			FROM INV_TXN_StockTransaction stkTxn
				join INV_MST_Item itm on stkTxn.ItemId= itm.ItemId
				join INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
			WHERE (stkTxn.IsTransferredToACC IS NULL OR stkTxn.IsTransferredToACC=0)  
			AND stkTxn.TransactionType='consumption-items' AND itm.ItemType='consumables'
		    AND (CONVERT(DATE, stkTxn.TransactionDate)= CONVERT(DATE, @TransactionDate))
		 Table 6 :INVStockManageOut	
		NageshBB: asper discussion we need single voucher for whole year txn items 
		so here we will get data as per fiscal year enddate and transaction date will be fiscal year end date		
		Declare @TransactionDate datetime='2020-05-13 12:59:22.307'

		-StockManage-Out from MainStore---
		SELECT 
					0 'TransactionId',
					StkTxn.StockTxnId,
					sb.SubCategoryId,
					sb.SubCategoryName, 
					TransactionType='INVStockManageOut',
					CreatedOn=  convert(date,@FYEndDate),											
					TotalAmount= StkTxn.Quantity * StkTxn.Price
			FROM INV_TXN_StockTransaction StkTxn
					join INV_MST_Item itm on StkTxn.ItemId= itm.ItemId
					join INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
				WHERE (StkTxn.IsTransferredToACC IS NULL OR StkTxn.IsTransferredToACC=0)  
				AND StkTxn.TransactionType in ('fy-managed-items','stockmanaged-items') and InOut='out'
			    AND ((CONVERT(DATE, StkTxn.TransactionDate) between CONVERT(DATE, @FYStartDate) and CONVERT(DATE, @FYEndDate) )) 
				AND convert(date,@FYEndDate)=convert(date,@TransactionDate)
				AND itm.ItemType='consumables'
				SELECT 					
					StkTxn.StockTransactionId as TransactionId,
					sb.SubCategoryId,
					sb.SubCategoryName, 
					TransactionType='INVStockManageOut',
					CreatedOn=  convert(date,@FYEndDate),											
					TotalAmount= StkTxn.OutQty * StkTxn.CostPrice
			FROM INV_TXN_StockTransaction StkTxn
					join INV_MST_Item itm on StkTxn.ItemId= itm.ItemId
					join INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
				WHERE (StkTxn.IsTransferredToACC IS NULL OR StkTxn.IsTransferredToACC=0)  
				AND StkTxn.TransactionType in ('fy-managed-item','stock-managed-item') and StkTxn.OutQty >0
			    AND ((CONVERT(DATE, StkTxn.TransactionDate) between CONVERT(DATE, @FYStartDate) and CONVERT(DATE, @FYEndDate) )) 
				AND convert(date,@FYEndDate)=convert(date,@TransactionDate)
				AND itm.ItemType='consumables'
		-StockManage-Out from SubStore---
		temp update date '2020-08-09 07:49:19.017' to '2020-08-09 07:49:19.017'
		update WARD_INV_Transaction set TransactionDate='2020-05-06 07:49:19.017'
		where TransactionType in ('fy-stock-manage') and InOut='out'
		union
		SELECT 
					wardTxn.TransactionId,
					--0  'StockTxnId',
					sb.SubCategoryId,
					sb.SubCategoryName,  
					TransactionType='INVStockManageOut',
					CreatedOn= convert(date,@FYEndDate),											
					TotalAmount= wardTxn.Quantity * wardTxn.Price
				FROM WARD_INV_Transaction wardTxn
					join INV_MST_Item itm on wardTxn.ItemId= itm.ItemId
					join INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
				WHERE (wardTxn.IsTransferToAcc IS NULL OR wardTxn.IsTransferToAcc=0)  
				AND wardTxn.TransactionType in ('fy-stock-manage') and InOut='out'
			    AND ((CONVERT(DATE, wardTxn.TransactionDate) between CONVERT(DATE, @FYStartDate) and CONVERT(DATE, @FYEndDate) )) 					
				AND convert(date,@FYEndDate)=convert(date,@TransactionDate)
				AND itm.ItemType='consumables'
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetINVGoodsReceiptData]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Proc  [dbo].[SP_ACC_GetINVGoodsReceiptData]
As
/*
FileName: [[SP_ACC_GetINVGoodsReceiptData]]
CreatedBy/date: NageshBB/2018 July 03
Description:GEt all inventory goods receipt records group by date for transfer to accounting
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    CreatedBy/UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       NageshBB/2018 July 03							created the script
----------------------------------------------------------------------------------------
*/
Begin

select Round(sum(gri.TotalAmount-gri.VATAmount),2) as TotalAmount
,sum(gri.VATAmount)as VAT
,convert(date,gri.CreatedOn) as CreatedOn,
'Inventory Goods Receipt entries to accounting on '+convert(varchar(100),convert(date,gri.CreatedOn)) as Remarks
,STUFF((SELECT ',' + convert(varchar(100),GoodsReceiptId)        
       FROM   dbo.INV_TXN_GoodsReceipt AS g
       WHERE (convert(date, gri.CreatedOn)= convert(date,g.CreatedOn))           
       FOR XML PATH('')), 1, 1, '') as ReferenceIds
 from INV_TXN_GoodsReceipt gr
join INV_TXN_GoodsReceiptItems gri
on gr.GoodsReceiptID=gri.GoodsReceiptId
where gr.istransferredToACC !=1 or gr.istransferredToACC is null
group by convert(date,gri.CreatedOn)
End
GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetLedgerList]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* ***********************************************************************
FileName: [SP_ACC_GetLedgerList]  
CreatedBy/date: NageshBB/22 Dec 2020
Description: Get Ledger list with correct closing balance of every ledger
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1.      Nagesh:20Jun'20                   created sp for get ledger list with closing balance or opening balance as per need
************************************************************************ */
Exec [dbo].[SP_ACC_GetLedgerList] 3,2,1
Create PROCEDURE [dbo].[SP_ACC_GetLedgerList]  
  @HospitalId INT,@FiscalYearIdForOpeningBal int=null ,@GetClosingBal bit=null
AS
BEGIN
if @GetClosingBal =1 then we will calculate closing balance from txn table and return with every ledger
else closing balance will be 0 
 
	If(@GetClosingBal=1)
	Begin
	
	Declare @FromDate datetime=(select top 1 StartDate from ACC_MST_FiscalYears where FiscalYearId=@FiscalYearIdForOpeningBal)
	Declare @ToDate datetime=(select GETDATE())	
	
		ledger with ledgergroup and all other details
		select 
		led.HospitalId,		led.LedgerId,		led.LedgerGroupId,		ledGroup.PrimaryGroup,		ledGroup.COA,		ledGroup.LedgerGroupName,
		led.LedgerName,		led.LedgerReferenceId,		led.SectionId,		led.Description,		IsActive = led.IsActive,		led.OpeningBalance,
		led.DrCr,		led.CreatedBy,		led.CreatedOn,		led.Name,		led.Code,		led.LedgerType,		led.PANNo,		led.MobileNo,
		led.Address,		led.TDSPercent,		led.CreditPeriod,		led.LandlineNo,			closeBalTbl.DrAmount-closeBalTbl.CrAmount as ClosingBalance 
		from ACC_Ledger led join ACC_MST_LedgerGroup  ledGroup on led.LedgerGroupId=ledGroup.LedgerGroupId		
		join  (
		Select  T.LedgerId, Sum(OpeningDrAmount) + sum(TxnDrAmount) as DrAmount,Sum(OpeningCrAmount)+Sum(TxnCrAmount) as CrAmount
		from (
		get ledger opening balance from ledger balance history table
	    select 
		led.LedgerId,
		case when ISNULL(lbh.OpeningDrCr, 1)=1 then IsNULL(lbh.OpeningBalance,0) else 0 end as OpeningDrAmount,
		case when lbh.OpeningDrCr=0 then IsNULL(lbh.OpeningBalance,0) else 0 end as OpeningCrAmount,		
		0 as TxnDrAmount,0 as TxnCrAmount
	    from ACC_Ledger led join ACC_LedgerBalanceHistory lbh on led.LedgerId=lbh.LedgerId and led.HospitalId=lbh.HospitalId
		where lbh.HospitalId=@HospitalId and lbh.FiscalYearId=@FiscalYearIdForOpeningBal and
		led.IsActive=1  
		Union
	  get transaction calculation amount with ledger
		select 
		ti.LedgerId, 0 as OpeningDrAmount, 0 as OpeningCrAmount, 
		case when ti.DrCr=1 then ISNULL(ti.Amount,0) else 0 end as TxnDrAmount,
		case when ti.DrCr=0 then ISNULL(ti.Amount,0) else 0 end as TxnCrAmount
	    from ACC_Transactions t join ACC_TransactionItems ti on t.TransactionId=ti.TransactionId
		where t.HospitalId=@HospitalId and (convert(date,t.TransactionDate) between convert(date,@FromDate) and convert(date,@ToDate))
		) as T  Group by T.LedgerId
		) as closeBalTbl  on closeBalTbl.LedgerId=led.LedgerId
		where led.HospitalId=@HospitalId and ledGroup.HospitalId=@HospitalId 
		and led.IsActive=1 and ledGroup.IsActive=1  
		order by led.LedgerId
	End
	Else
	Begin
	mainly for accounting ledger setting page where IsActive false and true both Ledger r there
		select 
		led.HospitalId,		led.LedgerId,		led.LedgerGroupId,		ledGroup.PrimaryGroup,		ledGroup.COA,		ledGroup.LedgerGroupName,
		led.LedgerName,		led.LedgerReferenceId,		led.SectionId,		led.Description,		IsActive = led.IsActive,		led.OpeningBalance,
		led.DrCr,		led.CreatedBy,		led.CreatedOn,		led.Name,		led.Code,		led.LedgerType,		led.PANNo,		led.MobileNo,
		led.Address,		led.TDSPercent,		led.CreditPeriod,		led.LandlineNo,			0 as ClosingBalance 
		from ACC_Ledger led join ACC_MST_LedgerGroup  ledGroup on led.LedgerGroupId=ledGroup.LedgerGroupId
		where led.HospitalId=@HospitalId and ledGroup.HospitalId=@HospitalId
		order by led.LedgerId
	End
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetPharmacyTransactions]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:    Vikas
 Create date: 1stjuly 2019 
 =============================================
CREATE PROCEDURE [dbo].[SP_ACC_GetPharmacyTransactions]
    @FromDate Datetime=null ,
    @ToDate DateTime=null
	@TransactionDate DATE, @HospitalId INT
AS

/************************************************************************
FileName: [SP_ACC_GetPharmacyTransactions]
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       Ajay/07Jul'19						getting GrDiscountAmount,GrVATAmount,GrCOGSAmount
2.		Vikas 11th Aug 2020					replaced parameter @FromDate and @ToDate into @TransactionDate
*************************************************************************/
BEGIN
  IF(@FromDate IS NOT NULL AND @ToDate IS NOT NULL) 
  BEGIN
   Table1: CashInvoice
	 SELECT * from PHRM_TXN_Invoice inv WHERE inv.IsTransferredToACC IS NULL AND CONVERT(date, inv.CreateOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
   Table2: PHRM_TXN_InvoiceItems
	 SELECT * from PHRM_TXN_InvoiceItems inv WHERE  CONVERT(date, inv.CreatedOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
   Table3: CashInvoiceReturn
	 SELECT * from  PHRM_TXN_InvoiceReturnItems invRet WHERE invRet.IsTransferredToACC IS NULL AND CONVERT(date, CreatedOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)  
   Table4: goodsReceipt
	 select * from PHRM_GoodsReceipt gr WHERE gr.IsTransferredToACC IS NULL AND gr.IsCancel=0  AND CONVERT(date, CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
	 select CreatedOn, SupplierId, TransactionType, TotalAmount, SubTotal, VATAmount, ISNULL(DiscountAmount, 0) as DiscountAmount, GoodReceiptId from PHRM_GoodsReceipt gr WHERE gr.IsTransferredToACC IS NULL AND gr.IsCancel=0  AND CONVERT(date, CreatedOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
  
   Table5: writeoff
    select * from PHRM_WriteOff wrOff WHERE wrOff.IsTransferredToACC IS NULL AND CONVERT(date, CreatedOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
 
   Table6: dispatchToDept && dispatchToDeptRet
   select * from PHRM_StockTxnItems stkItm WHERE stkItm.IsTransferredToACC IS NULL AND  CONVERT(date, CreatedOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
  
   Table7: GrDiscountAmount,GrVATAmount,GrCOGSAmount
	SELECT
		invoice1.InvoiceId, 
		CASE 
			WHEN invoice1.DiscountAmount IS NULL THEN 0 
			ELSE CONVERT(DECIMAL(16, 4), invoice1.DiscountAmount) 
		END AS GrDiscountAmount, 
		CASE 
			WHEN invoice1.VATAmount IS NULL THEN 0 
			ELSE CONVERT(DECIMAL(16, 4), invoice1.VATAmount) 
		END AS GrVATAmount, 
		CASE 
			WHEN invoice1.GrCOGS IS NULL THEN 0 
			ELSE CONVERT(DECIMAL(16, 4), invoice1.GrCOGS) 
		END AS GrCOGSAmount  
	FROM (
		SELECT
			invitem.invid AS InvoiceId, 
			SUM(invitem.GrItemDisAmt) AS DiscountAmount, 
			SUM(invitem.GrItemVATAmt) AS VATAmount,
			SUM(GrItemTotalAmount) - SUM(invitem.GrItemDisAmt) AS GrCOGS 
			FROM (
				SELECT
					invitm.InvoiceId AS invid, 
					gri.GrPerItemDisAmt * invitm.Quantity AS GrItemDisAmt, 
					gri.GrPerItemVATAmt * invitm.Quantity AS GrItemVATAmt,
					invitm.GrItemPrice * invitm.Quantity AS GrItemTotalAmount 
				FROM
					PHRM_TXN_InvoiceItems invitm
					JOIN PHRM_GoodsReceiptItems gri ON invitm.GrItemId = gri.GoodReceiptItemId) AS invitem 
			JOIN PHRM_TXN_Invoice inv ON invitem.invid = inv.InvoiceId
			WHERE
				inv.IsTransferredToACC IS NULL 
				AND CONVERT(date, inv.CreateOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
			GROUP BY invid) AS invoice1
			RIGHT JOIN (
				SELECT
					invIt.InvoiceId AS InvoiceId 
				FROM
					PHRM_TXN_InvoiceItems invIt 
					JOIN PHRM_TXN_Invoice inv ON invIt.InvoiceId = inv.InvoiceId 
				WHERE  inv.IsTransferredToACC IS NULL 
				AND CONVERT(date, inv.CreateOn)= CONVERT(DATE, @TransactionDate)-- BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
				GROUP  BY invIt.InvoiceId) AS invoice2 
			ON invoice1.InvoiceId = invoice2.InvoiceId 
			Where invoice1.InvoiceId is not null
 END
  
  ELSE
  BEGIN  
   --Table1: CashInvoice
	 SELECT * from PHRM_TXN_Invoice inv WHERE inv.IsTransferredToACC IS NULL 
   --Table2: CashInvoiceReturn
	 SELECT * from  PHRM_TXN_InvoiceReturnItems invRet WHERE invRet.IsTransferredToACC IS NULL
   --Table3: goodsReceiptItems
	 select * from PHRM_GoodsReceipt gr WHERE gr.IsTransferredToACC IS NULL AND gr.IsCancel=0 
   --Table4: returnToSupplier
	 select * from PHRM_ReturnToSupplier grRet WHERE grRet.IsTransferredToACC IS NULL 
   --Table5: writeoff
    select * from PHRM_WriteOff wrOff WHERE wrOff.IsTransferredToACC IS NULL 
   --Table6: dispatchToDept && dispatchToDeptRet
   select * from PHRM_StockTxnItems stkItm WHERE stkItm.IsTransferredToACC IS NULL 
  --Table7: GrDiscountAmount,GrVATAmount
 	SELECT
		invoice1.InvoiceId, 
		CASE 
			WHEN invoice1.DiscountAmount IS NULL THEN 0 
			ELSE CONVERT(DECIMAL(16, 4), invoice1.DiscountAmount) 
		END AS GrDiscountAmount, 
		CASE 
			WHEN invoice1.VATAmount IS NULL THEN 0 
			ELSE CONVERT(DECIMAL(16, 4), invoice1.VATAmount) 
		END AS GrVATAmount, 
		CASE 
			WHEN invoice1.GrCOGS IS NULL THEN 0 
			ELSE CONVERT(DECIMAL(16, 4), invoice1.GrCOGS) 
		END AS GrCOGSAmount  
	FROM (
		SELECT
			invitem.invid AS InvoiceId, 
			SUM(invitem.GrItemDisAmt) AS DiscountAmount, 
			SUM(invitem.GrItemVATAmt) AS VATAmount,
			SUM(GrItemTotalAmount) - SUM(invitem.GrItemDisAmt) AS GrCOGS 
			FROM (
				SELECT
					invitm.InvoiceId AS invid, 
					gri.GrPerItemDisAmt * invitm.Quantity AS GrItemDisAmt, 
					gri.GrPerItemVATAmt * invitm.Quantity AS GrItemVATAmt,
					invitm.GrItemPrice * invitm.Quantity AS GrItemTotalAmount 
				FROM
					PHRM_TXN_InvoiceItems invitm
					JOIN PHRM_GoodsReceiptItems gri ON invitm.GrItemId = gri.GoodReceiptItemId) AS invitem 
			JOIN PHRM_TXN_Invoice inv ON invitem.invid = inv.InvoiceId
			WHERE
				inv.IsTransferredToACC IS NULL 
			GROUP BY invid) AS invoice1
			RIGHT JOIN (
				SELECT
					invIt.InvoiceId AS InvoiceId 
				FROM
					PHRM_TXN_InvoiceItems invIt 
					JOIN PHRM_TXN_Invoice inv ON invIt.InvoiceId = inv.InvoiceId 
				WHERE  inv.IsTransferredToACC IS NULL 
				GROUP  BY invIt.InvoiceId) AS invoice2 
			ON invoice1.InvoiceId = invoice2.InvoiceId 
			Where invoice1.InvoiceId is not null
  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_GetTransactionDates]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------
	
	CREATE PROCEDURE [dbo].[SP_ACC_GetTransactionDates]
		@FromDate DATETIME = null ,
		@ToDate DATETIME = null,
		@HospitalId INT = null,
		@SectionId INT = null
	AS
	/************************************************************************
	FileName: [SP_ACC_GetTransactionDates]
	CreatedBy/date: 
	Description: Get section wise all transactions date which is not synced with accounting
	Change History

	NOTE: All sections records table depends on their main transactions loading sp
		  For Inventory => SP_ACC_GetInventoryTransactions
			  Billing   => SP_ACC_Bill_GetBillingDataForAccTransfer
			  Pharmacy  => SP_ACC_GetPharmacyTransactions
			  Incentive => SP_INCTV_ACC_GetTransactionInfoForAccTransfer

		 - use tables which is used in above sectionwise stored procedure to get below section wise transaction dates.
		   If table modify in above stored procedure also modify in this sp.
	-----------------------------------------------------------------------
	S.No.    UpdatedBy/Date                        Remarks
	-----------------------------------------------------------------------
	1.      Vikas:25th Sep 2020				changed table for consumptions transactions from WARD_INV_Consumption to WARD_INV_Transaction
	2.      Vikas:30 Sep 2020				transaction dates mismatched and some other bugs correction from all tables.
	3.      Nagesh:01 Oct 2020              stockmanag out record date logic changed . Stock ManageOut only once in year on Fiscal Year end date and whole year data will show fiscal year enddate as transaction date
	4.		Nagesh:25 Dec 2020				Credit bill date gets wrong. Because here we taken CreatedOn from Item table but correct from Transaction table
	5.		NageshBB/Sanjit sir: 13July2021 updated after pharmacy, billing, inventory changes done in accounting 
	*************************************************************************/
	BEGIN
		 check rules are mapped or not with transaction types
		DECLARE @Rules TABLE (GroupMappingId INT, Description varchar(200),TransferRuleId INT)
		Insert into @Rules(GroupMappingId, Description, TransferRuleId)
		select [GroupMappingId], [Description],[TransferRuleId]
		from (select gm.GroupMappingId,gm.Description,TransferRuleId from ACC_MST_GroupMapping gm
		join ACC_MST_MappingDetail mp on gm.GroupMappingId = mp.GroupMappingId
		join ACC_MST_Hospital_TransferRules_Mapping r on mp.GroupMappingId = r.TransferRuleId
		group by gm.GroupMappingId ,gm.Description,TransferRuleId) x
		
		Declare 
		@FYStartDate datetime=(select top 1 StartDate from ACC_MST_FiscalYears where convert(date,@FromDate)
		between convert(date,Startdate) and convert(date,EndDate)),
		@FYEndDate datetime=(select top 1 EndDate from ACC_MST_FiscalYears where convert(date,@FromDate)
		between convert(date,Startdate) and convert(date,EndDate))
		IF(@FromDate IS NOT NULL AND @ToDate IS NOT NULL AND @HospitalId IS NOT NULL AND @SectionId IS NOT NULL) 
		BEGIN
			IF(@SectionId=1) -- Inventory Section 
			BEGIN
			  Table1: GoodReceipt
				SELECT 
					CONVERT(DATE, gr.GoodsReceiptDate) as 'TransactionDate'		
				FROM INV_TXN_GoodsReceipt gr 
					JOIN INV_TXN_GoodsReceiptItems gritm on gr.GoodsReceiptID = gritm.GoodsReceiptId
					JOIN INV_MST_Vendor v ON gr.VendorId = v.VendorId 
					JOIN INV_MST_Item itm on gritm.ItemId = itm.ItemId
				WHERE (gritm.IsTransferredToACC IS NULL OR gritm.IsTransferredToACC = 0) 
					AND (CONVERT(DATE, gr.GoodsReceiptDate) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))	
					AND itm.ItemType !='Capital Goods' and gr.IsCancel!=1 --excluded cancel gr		
					AND ((select count([Description]) from @Rules where [Description]='INVCashGoodReceiptFixedAsset1' 
					OR [Description]='INVCashGoodReceipt1' or [Description]='INVCreditGoodReceiptFixedAsset' or [Description]='INVCreditGoodReceipt') > 0)
				UNION
				 Table2: WriteOffItems
					SELECT 
						CONVERT(DATE, wr.CreatedOn) as 'TransactionDate'
					FROM INV_TXN_WriteOffItems wr
					WHERE (IsTransferredToACC IS NULL OR IsTransferredToACC = 0)
					AND (CONVERT(DATE, CreatedOn) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
					AND ((select count([Description]) from @Rules where [Description]='INVWriteOff') > 0)
				UNION
				Table3: ReturnToVendor
					SELECT CONVERT(DATE,rv.CreatedOn) as 'TransactionDate'
					FROM INV_TXN_ReturnToVendorItems rv 
					WHERE (rv.IsTransferredToACC IS NULL OR rv.IsTransferredToACC = 0)
					AND (CONVERT(DATE, rv.CreatedOn) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
					AND ((select count([Description]) from @Rules where [Description]='INVReturnToVendorCashGR' OR [Description]='INVReturnToVendorCreditGR') > 0)
			   UNION
			   Table4: DispatchToDept			 
					SELECT CONVERT(DATE,wardTxn.TransactionDate) AS 'TransactionDate'				
					FROM WARD_INV_Transaction wardTxn JOIN INV_MST_Item itm on wardTxn.ItemId=itm.ItemId
					WHERE (wardTxn.IsTransferToAcc IS NULL OR wardTxn.IsTransferToAcc =0) 
					AND wardTxn.TransactionType='dispatched-items' AND itm.ItemType='consumables'
					AND (convert(date, wardTxn.TransactionDate) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
					AND ((select count([Description]) from @Rules where [Description]='INVDispatchToDept') > 0)	
					SELECT CONVERT(DATE,stkTxn.TransactionDate) AS 'TransactionDate'				
					FROM INV_TXN_StockTransaction stkTxn JOIN INV_MST_Item itm on stkTxn.ItemId=itm.ItemId
					WHERE (stkTxn.IsTransferredToACC IS NULL OR stkTxn.IsTransferredToACC=0) 
					AND stkTxn.TransactionType='dispatched-item-from' AND itm.ItemType='consumables'
					AND (convert(date, stkTxn.TransactionDate) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate))
					AND ((select count([Description]) from @Rules where [Description]='INVDispatchToDept') > 0)	
			   UNION
				 Table 5 :INVDeptConsumedGoods
					SELECT CONVERT(DATE,wardTxn.TransactionDate) as 'TransactionDate'
					FROM WARD_INV_Transaction wardTxn
					JOIN INV_MST_Item itm on wardTxn.ItemId= itm.ItemId					
					WHERE (wardTxn.IsTransferToAcc IS NULL OR wardTxn.IsTransferToAcc=0)  
					AND wardTxn.TransactionType='consumption-items' AND itm.ItemType='consumables'
					AND (CONVERT(DATE, wardTxn.TransactionDate) BETWEEN  CONVERT(DATE, @FromDate) AND  CONVERT(DATE, @ToDate))	
					AND ((select count([Description]) from @Rules where [Description]='INVDeptConsumedGoods') > 0)
					SELECT CONVERT(DATE,stkTxn.TransactionDate) as 'TransactionDate'
					FROM INV_TXN_StockTransaction stkTxn
					JOIN INV_MST_Item itm on stkTxn.ItemId= itm.ItemId					
					WHERE (stkTxn.IsTransferredToACC IS NULL OR stkTxn.IsTransferredToACC=0)  
					AND stkTxn.TransactionType='consumption-items' AND itm.ItemType='consumables'
					AND (CONVERT(DATE, stkTxn.TransactionDate) BETWEEN  CONVERT(DATE, @FromDate) AND  CONVERT(DATE, @ToDate))	
					AND ((select count([Description]) from @Rules where [Description]='INVDeptConsumedGoods') > 0)
						
			   UNION
			    Table 6 :INVStockManageOut	
					-StockManage-Out from MainStore---
					SELECT X.TransactionDate
					FROM (
							SELECT CONVERT(DATE,@FYEndDate) 
							--CONVERT(DATE,StkTxn.TransactionDate) 
							as 'TransactionDate'
							FROM INV_TXN_StockTransaction StkTxn
							JOIN INV_MST_Item itm on StkTxn.ItemId= itm.ItemId
							JOIN INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
							WHERE (StkTxn.IsTransferredToACC IS NULL OR StkTxn.IsTransferredToACC=0)  
							AND StkTxn.TransactionType in ('fy-managed-items','stockmanaged-items') and InOut='out'
							AND 
							(
							(CONVERT(DATE, StkTxn.TransactionDate) between CONVERT(DATE, @FYStartDate) AND  CONVERT(DATE, @FYEndDate) 
							) and convert(date,@FYEndDate)=convert(date,@ToDate)
							) 							 
							AND itm.ItemType='consumables'
						SELECT X.TransactionDate
					    FROM (
							SELECT CONVERT(DATE,@FYEndDate) 							
							as 'TransactionDate'
							FROM INV_TXN_StockTransaction StkTxn
							JOIN INV_MST_Item itm on StkTxn.ItemId= itm.ItemId
							JOIN INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
							WHERE (StkTxn.IsTransferredToACC IS NULL OR StkTxn.IsTransferredToACC=0)  
							AND StkTxn.TransactionType in ('fy-managed-item','stock-managed-item') and StkTxn.OutQty >0
							AND 
							(
							(CONVERT(DATE, StkTxn.TransactionDate) between CONVERT(DATE, @FYStartDate) AND  CONVERT(DATE, @FYEndDate) 
							) and convert(date,@FYEndDate)=convert(date,@ToDate)
							) 							 
							AND itm.ItemType='consumables'
					
							-StockManage-Out from SubStore---
							UNION
							SELECT CONVERT(DATE,@FYEndDate) 
							--CONVERT(DATE,wardTxn.TransactionDate) 
							as 'TransactionDate'
							FROM WARD_INV_Transaction wardTxn
							JOIN INV_MST_Item itm on wardTxn.ItemId= itm.ItemId
							JOIN INV_MST_ItemSubCategory sb on itm.SubCategoryId= sb.SubCategoryId						
							WHERE (wardTxn.IsTransferToAcc IS NULL OR wardTxn.IsTransferToAcc=0)  
							AND wardTxn.TransactionType in ('fy-stock-manage') and InOut='out'
							AND 
							(
							(CONVERT(DATE, wardTxn.TransactionDate) between CONVERT(DATE, @FYStartDate) AND  CONVERT(DATE, @FYEndDate) )
							and convert(date,@FYEndDate)=convert(date,@ToDate)
							) 	
							AND itm.ItemType='consumables'
						) AS X		
						WHERE (select count([Description]) from @Rules where [Description]='INVStockManageOut') > 0

			END
			-------------- 			
			IF(@SectionId=2) -- Billing Section
			BEGIN
				IF((select top 1 CONVERT(bit, ParameterValue) from CORE_CFG_Parameters where ParameterGroupName='accounting'and ParameterName='GetBillingFromSyncTable')=1) 
					BEGIN 
						SELECT CONVERT(date, TransactionDate) as 'TransactionDate'
						FROM BIL_SYNC_BillingAccounting 
						WHERE IsTransferedToAcc IS NULL AND CONVERT(date, TransactionDate) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
					END

				ELSE
					BEGIN 
						Cash Bill--
							SELECT CONVERT(date, itm.PaidDate) as 'TransactionDate'  
							FROM BIL_TXN_BillingTransactionItems itm, BIL_TXN_BillingTransaction txn
							WHERE txn.BillingTransactionId = itm.BillingTransactionId
							AND Convert(Date,itm.PaidDate) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
							AND itm.BillingTransactionId IS NOT NULL
							AND ( txn.PaymentMode='cash' OR txn.PaymentMode='card' OR txn.PaymentMode='cheque')
							AND ISNULL(itm.IsCashBillSync,0) = 0  
							AND ((select count([Description]) from @Rules where [Description]='CashBill') > 0)
						UNION 			
						Credit Bill--
							Select CONVERT(date, txn.CreatedOn) as 'TransactionDate'
							from BIL_TXN_BillingTransactionItems  itm, BIL_TXN_BillingTransaction txn
							Where txn.BillingTransactionId = itm.BillingTransactionId
							AND Convert(Date,itm.CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
							and itm.BillingTransactionId IS NOT NULL
							and txn.PaymentMode='credit'
							AND ISNULL(itm.IsCreditBillSync,0) = 0  
							AND ((select count([Description]) from @Rules where [Description]='CreditBill') > 0)

						UNION 
			
						Cash Bill Return--
							Select	CONVERT(date, txn.CreatedOn) as 'TransactionDate'
							from BIL_TXN_InvoiceReturnItems  itm, BIL_TXN_InvoiceReturn txn							
							Where txn.BillReturnId = itm.BillReturnId							
							AND Convert(Date,txn.CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)														
							AND  ( txn.PaymentMode='cash' OR txn.PaymentMode='card' OR txn.PaymentMode='cheque') 
							AND ISNULL(itm.IsCashBillSyncToAcc ,0) = 0 
							and txn.BillStatus='paid'
							AND ((select count([Description]) from @Rules where [Description]='CashBill') > 0) 
						UNION 
			
						CreditBillReturn--
							Select CONVERT(date, txn.CreatedOn) as 'TransactionDate'
							from BIL_TXN_InvoiceReturnItems  itm, BIL_TXN_InvoiceReturn txn , BIL_TXN_BillingTransaction bilTxn
							Where 
							txn.BillReturnId = itm.BillReturnId
							and txn.BillingTransactionId=bilTxn.BillingTransactionId					
							AND CONVERT(Date,txn.CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
							and txn.PaymentMode='credit'
							AND ISNULL(itm.IsCreditBillSyncToAcc,0) = 0  -- Include only Not-Synced Data for Credit Return Case--
							AND ((select count([Description]) from @Rules where [Description]='CreditBillReturn') > 0)
														
						UNION 
			
						Deposit Add--
							Select	CONVERT(date, CreatedOn) as 'TransactionDate'
							from BIL_TXN_Deposit
							Where CONVERT(Date,CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
							and DepositType ='Deposit'AND ISNULL(IsDepositSync,0) = 0 
							AND ((select count([Description]) from @Rules where [Description]='DepositAdd') > 0)
						UNION 
			
						Deposit Return/Deduct--
							Select	CONVERT(date, CreatedOn) as 'TransactionDate'
							from BIL_TXN_Deposit
							Where CONVERT(Date,CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
							AND DepositType IN ('ReturnDeposit', 'depositdeduct') AND ISNULL(IsDepositSync,0) = 0  	
							AND ((select count([Description]) from @Rules where [Description]='DepositReturn') > 0)	
			
					END
			END
			--------------
			IF(@SectionId=3) -- Pharmacy Section			
			BEGIN
				Table1: CashInvoice
					SELECT CONVERT(DATE, inv.CreateOn) AS 'TransactionDate' 
					FROM PHRM_TXN_Invoice inv 
					WHERE inv.IsTransferredToACC IS NULL 
					AND CONVERT(DATE, inv.CreateOn)BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate) 
					AND ((select count([Description]) from @Rules where [Description]='PHRMCreditInvoice1'OR [Description]='PHRMCashInvoice1') > 0)
				UNION
				Table3: CashInvoiceReturn
					SELECT CONVERT(DATE, CreatedOn) AS 'TransactionDate' 
					FROM  PHRM_TXN_InvoiceReturnItems invRet 
					WHERE invRet.IsTransferredToACC IS NULL 
					AND CONVERT(DATE, CreatedOn) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate) 
					AND ((select count([Description]) from @Rules where [Description]='PHRMCreditInvoiceReturn1'OR [Description]='PHRMCashInvoiceReturn1') > 0)
				UNION
				Table4: goodsReceipt
					SELECT CONVERT(DATE, CreatedOn) AS 'TransactionDate' 
					FROM PHRM_GoodsReceipt gr 
					WHERE gr.IsTransferredToACC IS NULL 
					AND gr.IsCancel=0  AND CONVERT(DATE, CreatedOn) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate) 					
					AND ((select count([Description]) from @Rules where [Description]='PHRMCreditGoodReceipt'OR [Description]='PHRMCashGoodReceipt') > 0)
				UNION
				Table5: writeoff
					SELECT CONVERT(DATE, CreatedOn) AS 'TransactionDate' 
					FROM PHRM_WriteOff wrOff 
					WHERE wrOff.IsTransferredToACC IS NULL 
					AND CONVERT(DATE, CreatedOn) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate)  
					AND ((select count([Description]) from @Rules where [Description]='PHRMWriteOff') > 0)
				UNION
				Table6: dispatchToDept && dispatchToDeptRet
					SELECT CONVERT(DATE,CreatedOn) AS 'TransactionDate' 
					FROM PHRM_StockTxnItems stkItm 
					WHERE stkItm.IsTransferredToACC IS NULL 
					AND  CONVERT(DATE, CreatedOn) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate) 
					AND ((select count([Description]) from @Rules where [Description]='PHRMDispatchToDept'OR [Description]='PHRMDispatchToDeptReturn') > 0)
  		
			END
			-------------- 
			IF(@SectionId=5) -- Incetives Section
			BEGIN
				SELECT CONVERT(DATE, TransactionDate) AS 'TransactionDate'
				FROM INCTV_TXN_IncentiveFractionItem outerTbl 
				WHERE Convert(DATE,outerTbl.TransactionDate) BETWEEN CONVERT(DATE, @FromDate) AND CONVERT(DATE, @ToDate) 
				AND ISNULL(IsTransferToAcc,0) = 0 AND ISNULL(outerTbl.IsActive,0) = 1
				AND ((select count([Description]) from @Rules where [Description]='ConsultantIncentive') > 0)
				GROUP BY Convert(DATE, TransactionDate)				
			END
  		END			
	END


GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_ReopenFiscalYear]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[SP_ACC_ReopenFiscalYear]
		@FiscalYearId int,
		@EmployeeId int,
		@HospitalId INT,
		@Remark varchar(300)
	AS
	EXEC [dbo].[SP_ACC_ReopenFiscalYear] @FiscalYearId = 2, @EmployeeId =1,@HospitalId=3
	
	/************************************************************************
	FileName: [SP_ACC_ReopenFiscalYear]
	CreatedBy/date: Nagesh /22'June2020
	Description: reopen fiscal year, add log into fiscalYearLog table and update ledger balance as per opened fiscalYear
	Change History
	-----------------------------------------------------------------------
	S.No.    UpdatedBy/Date                        Remarks
	-----------------------------------------------------------------------
	1       Nagesh /22'June2020						created script for reopen fiscal year, add log and update ledger balance
	
	*************************************************************************/
	BEGIN	
		IF(@FiscalYearId IS NOT NULL AND @EmployeeId IS NOT NULL AND @HospitalId IS NOT NULL) 
		BEGIN				  
		   BEGIN TRANSACTION;
				SAVE TRANSACTION MySavePoint;  
				BEGIN TRY
					code is here
					update fiscal year closed to open 
					Update ACC_MST_FiscalYears set IsClosed=0
					where FiscalYearId=@FiscalYearId and HospitalId=@HospitalId
					
					add log into ACC_FiscalYear_Log table
					Insert into ACC_FiscalYear_Log(FiscalYearId, LogType, LogDetails, CreatedOn, CreatedBy,HospitalId)
					values(@FiscalYearId,'reopened',@Remark,GETDATE(),@EmployeeId,@HospitalId)
					
					update ACC_Ledger opening balance by opened fiscal year opening balance from LedgerBalanceHistory table					
					Update ACC_Ledger
					set OpeningBalance=lbh.OpeningBalance,
					DrCr=lbh.OpeningDrCr from ACC_LedgerBalanceHistory lbh
					join ACC_Ledger l on lbh.LedgerId=l.LedgerId and lbh.FiscalYearId=@FiscalYearId and lbh.HospitalId=@HospitalId
					
					select *from ACC_MST_FiscalYears where FiscalYearId=@FiscalYearId and HospitalId=@HospitalId
				COMMIT TRANSACTION 
				END TRY
				BEGIN CATCH
					IF @@TRANCOUNT > 0
					BEGIN
						ROLLBACK TRANSACTION MySavePoint; -- rollback to MySavePoint
					END
				END CATCH	
		END		
	END
GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_RPT_GetBalanceSheetData]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_ACC_RPT_GetBalanceSheetData]   
    @ToDate DATETIME, 
	@HospitalId INT,
    @FiscalYearId INT
  AS
  EXEC [dbo].[SP_ACC_RPT_GetBalanceSheetData] @FromDate = '2020-06-11 18:00:21.657', @ToDate ='2020-06-11 18:00:21.657'
  
  /************************************************************************
  FileName: [SP_ACC_RPT_GetBalanceSheetData]
  CreatedBy/date: Nagesh /12'June2020
  Description: get records for balance sheet report of accounting
  Change History
  -----------------------------------------------------------------------
  S.No.    UpdatedBy/Date                        Remarks
  -----------------------------------------------------------------------
  1     Nagesh /12'June2020           created script for get balance sheet report records
  2     Sud sir/13'June 2020          updated for get table 2 with NetProfit details
  3.	NageshBB: 17July2021		  get codeDetails table values using function. added function here
  *************************************************************************/
  BEGIN  
    IF( @ToDate IS NOT NULL) 
    BEGIN  
        Declare @FromDate DATETIME
        
        Set @FromDate= ( Select StartDate from ACC_MST_FiscalYears where HospitalId=@HospitalId AND IsActive=1 AND FiscalYearId=@FiscalYearId)
    
        Table:1 Get Balance Sheet Details---          
        Select 
				ledInfo.LedgerId,PrimaryGroup, LedgerName,COA,LedgerGroupName,Code
				, OpeningBalanceDr, OpeningBalanceCr, ISNULL(Led_TotDr,0) AS 'DRAmount', ISNULL(Led_TotCr,0) AS 'CRAmount' 
          from
          (
					Select l.LedgerId, l.LedgerName, l.Code,  l.ledgergroupid, lg.PrimaryGroup, lg.COA, lg.LedgerGroupName , 
					case when lbh.OpeningDrCr=1 then lbh.OpeningBalance else 0 END AS 'OpeningBalanceDr',
					case when lbh.OpeningDrCr=0 then lbh.OpeningBalance else 0 END AS 'OpeningBalanceCr' 
					from ACC_Ledger  l INNER JOIN ACC_MST_LedgerGroup lg  --NageshBB-03Jul updated for opening balance as per fiscal year
                    from ACC_LedgerBalanceHistory lbh join ACC_Ledger l on lbh.LedgerId=l.LedgerId INNER JOIN ACC_MST_LedgerGroup lg
					ON l.LedgerGroupId = lg.LedgerGroupId
					WHERE  lbh.HospitalId=@HospitalId  and lbh.FiscalYearId=@FiscalYearId
          ) ledInfo
          LEFT JOIN
          ( 
            Select LedgerId,SUM(DrAmount) AS 'Led_TotDr', SUM(CrAmount) 'Led_TotCr' from
            (
					Select  txn.TransactionId, LedgerId,
                    Case WHEN DrCr=1 THEN Amount ELSE 0 END AS DrAmount,
					Case WHEN DrCr=0 THEN Amount ELSE 0 END AS CrAmount
					from  ACC_TransactionItems txnItm INNER JOIN ACC_Transactions txn
					ON txnItm.TransactionId = txn.TransactionId
					WHERE 
					txn.HospitalId= @HospitalId AND
					convert(date, txn.TransactionDate) BETWEEN convert(date,@FromDate) and  convert(date,@ToDate) 
              ) A
              Group By LedgerId
          ) ledTxnDetails 
			ON ledInfo.LedgerId= ledTxnDetails.LedgerId
			Order by ledInfo.LedgerName


  
  Table2: Get NetProfit and Loss ---
        declare @Revenue varchar(50)=(select  dbo.FN_ACC_GetNameByCode('001',@HospitalId))
        declare @Expenses varchar(50)=(select dbo.FN_ACC_GetNameByCode('002',@HospitalId))
		Select SUM(RevenueBalance) - SUM(ExpenseBalance)   'NetProfitNLoss'
          FROM
        ( 
          Select 
            Case When PrimaryGroup=@Revenue THEN TotalDrAmount - TotalCrAmount ELSE 0 END AS 'ExpenseBalance',
            Case When PrimaryGroup=@Expenses THEN TotalCrAmount - TotalDrAmount  ELSE 0 END AS 'RevenueBalance'
            from 
          (
              -Query2.1: P&L on Opening Balance----
              - ideally Opening balances of P&L accounts will be zero. It'll give correct  results even in that case---
               Select ledGrp.PrimaryGroup, SUM(led.DrAmount) 'TotalDrAmount', SUM(led.CrAmount) 'TotalCrAmount'
 
                from
                  (		Select   LedgerId,LedgergroupId,
				 		Case WHEN DrCr=1 THEN OpeningBalance ELSE 0 END AS DrAmount,
				 		Case WHEN DrCr=0 THEN OpeningBalance ELSE 0 END AS CrAmount,
				 		HospitalId 
				 		from  ACC_Ledger  where HospitalId=@HospitalId)   led 
                 (		Select   lbh.LedgerId,l.LedgergroupId,
						Case WHEN lbh.OpeningDrCr=1 THEN lbh.OpeningBalance ELSE 0 END AS DrAmount,
						Case WHEN lbh.OpeningDrCr=0 THEN lbh.OpeningBalance ELSE 0 END AS CrAmount,
						lbh.HospitalId 
						from  ACC_LedgerBalanceHistory lbh join  ACC_Ledger l on lbh.LedgerId=l.LedgerId
                        where lbh.HospitalId=@HospitalId and lbh.FiscalYearId=@FiscalYearId )   led 
						INNER  JOIN ACC_MST_LedgerGroup ledGrp
						ON led.LedgerGroupId = ledGrp.LedgerGroupId           
						Where led.HospitalId= @HospitalId 
						 AND ledGrp.hospitalid=@HospitalId 
						 AND ledGrp.PrimaryGroup IN (@Revenue,@Expenses)
						Group by ledGrp.PrimaryGroup
               UNION ALL  
              Query:2.2-- Get Profit&Loss on Transaction Amounts
						Select lg.PrimaryGroup,  SUM(txnItm.DrAmount) 'TotalDrAmount',SUM(txnItm.CrAmount) 'TotalCrAmount'
                        FROM ACC_Transactions  txn
						INNER JOIN 
                        (		Select  
								TransactionId, LedgerId,
								Case WHEN DrCr=1 THEN Amount ELSE 0 END AS DrAmount,
								Case WHEN DrCr=0 THEN Amount ELSE 0 END AS CrAmount
								from  ACC_TransactionItems  where HospitalId=@HospitalId ) txnItm 
        
						ON txn.TransactionId = txnItm.TransactionId
						INNER JOIN ACC_Ledger l
						ON txnItm.LedgerId = l.LedgerId
						INNER JOIN ACC_MST_LedgerGroup lg
						ON l.LedgerGroupId = lg.LedgerGroupId   and lg.PrimaryGroup IN (@Revenue,@Expenses)        
                  WHERE
				  txn.HospitalId= @HospitalId AND l.HospitalId = @HospitalId AND
                    convert(date, txn.TransactionDate) BETWEEN convert(date,@FromDate) and  convert(date,@ToDate) 
                  Group by lg.PrimaryGroup
          ) A
        ) B
                
    END    
  END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_RPT_GetGroupStatementData]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* ***********************************************************************
FileName: [SP_ACC_RPT_GetGroupStatementData]  
CreatedBy/date: NageshBB/03 Jan 2021
Description: This sp return group statement reprot data. All are ledgers under selected ledgergroup
with opening, txn, closing balance details. 
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1.      NageshBB:03Jan2021               SP Script created for get group statement report data
************************************************************************ */
Exec [dbo].[SP_ACC_RPT_GetGroupStatementData] 3,2,1
Create PROCEDURE [dbo].[SP_ACC_RPT_GetGroupStatementData] 
		@FromDate DATETIME,
		@ToDate DATETIME,
		@HospitalId INT,
		@OpeningFiscalYearId INT, 
		@LedgerGroupId INT   
AS
BEGIN	
	Declare @OpeningBalanceFromDate datetime=(select top 1 StartDate from ACC_MST_FiscalYears where FiscalYearId=@OpeningFiscalYearId)
	Declare @OpeningBalanceToDate datetime=(select @FromDate-1)
	
	select led.LedgerName as Particular, led.LedgerId, led.Code,
		OuterTable.OpeningDr,OuterTable.OpeningCr,OuterTable.TransactionDr, OuterTable.TransactionCr
		,0 as OpeningTotal, '' as OpeningType, (OpeningDr + TransactionDr) as ClosingDr,(OpeningCr+ TransactionCr ) as ClosingCr, 0 as ClosingTotal, '' as ClosingType
		from ACC_Ledger led
		join ACC_LedgerBalanceHistory lbh on lbh.LedgerId=led.LedgerId
		join 
		(
		here we will get actual opening balance for every ledger from below query (Opening bal + Txn as Openign Balance)
		also we will get transaction dr and cr balance within date
		Select LedgerId,sum(OpeningDrAmount) + sum(OpeningTxnDrAmount) as OpeningDr, sum(OpeningCrAmount)+ sum(OpeningCrAmount) as OpeningCr 
		,sum(TxnDrAmount) as TransactionDr, sum(TxnCrAmount) as TransactionCr
		from (
			get ledger opening balance from ledger balance history table
				select 
				led1.LedgerId,
				case when ISNULL(lbh1.OpeningDrCr, 1)=1 then IsNULL(lbh1.OpeningBalance,0) else 0 end as OpeningDrAmount,
				case when lbh1.OpeningDrCr=0 then IsNULL(lbh1.OpeningBalance,0) else 0 end as OpeningCrAmount,		
				0 as OpeningTxnDrAmount,0 as OpeningTxnCrAmount,0 as TxnDrAmount,0 as TxnCrAmount
				from ACC_Ledger led1 join ACC_LedgerBalanceHistory lbh1 on led1.LedgerId=lbh1.LedgerId and led1.HospitalId=lbh1.HospitalId				
				where lbh1.HospitalId=@HospitalId and lbh1.FiscalYearId=@OpeningFiscalYearId and
				led1.IsActive=1  and led1.LedgerGroupId=@LedgerGroupId
			
				union
			get balance from transaction table from opening fiscal year start date to FromDate-1
				select 
				ti.LedgerId, 0 as OpeningDrAmount, 0 as OpeningCrAmount, 
				case when ti.DrCr=1 then ISNULL(ti.Amount,0) else 0 end as OpeningTxnDrAmount,
				case when ti.DrCr=0 then ISNULL(ti.Amount,0) else 0 end as OpeningTxnCrAmount,
				0 as TxnDrAmount,0 as TxnCrAmount
				from ACC_Transactions t join ACC_TransactionItems ti on t.TransactionId=ti.TransactionId
				join ACC_Ledger led2 on led2.LedgerId=ti.LedgerId				
				where t.HospitalId=@HospitalId and (convert(date,t.TransactionDate) between convert(date,@OpeningBalanceFromDate) and convert(date,@OpeningBalanceToDate))
				and led2.IsActive=1 and led2.LedgerGroupId=@LedgerGroupId

				union
				get transaction dr and cr amount between from date and to date
				select 
				ti1.LedgerId, 0 as OpeningDrAmount, 0 as OpeningCrAmount, 
				0 as OpeningTxnDrAmount,
				0 as OpeningTxnCrAmount,
				case when ti1.DrCr=1 then ISNULL(ti1.Amount,0) else 0 end as TxnDrAmount,
				case when ti1.DrCr=0 then ISNULL(ti1.Amount,0) else 0 end as TxnCrAmount
				from ACC_Transactions t1 join ACC_TransactionItems ti1 on t1.TransactionId=ti1.TransactionId
				join ACC_Ledger led3 on led3.LedgerId=ti1.LedgerId				
				where t1.HospitalId=@HospitalId and (convert(date,t1.TransactionDate) between convert(date,@FromDate) and convert(date,@ToDate))
				and led3.IsActive=1 and led3.LedgerGroupId=@LedgerGroupId

				) 
		as innerTbl group by LedgerId
		) as OuterTable on OuterTable.LedgerId=led.LedgerId
		where  lbh.HospitalId=@HospitalId
		and led.IsActive=1 and led.LedgerGroupId=@LedgerGroupId
		order by led.LedgerId		
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_RPT_GetProfitAndLossData]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_ACC_RPT_GetProfitAndLossData]
    @FromDate DATETIME,
    @ToDate DATETIME,
    @HospitalId INT
  AS
  
  /************************************************************************
  FileName: [[SP_ACC_RPT_GetProfitAndLossData]]
  CreatedBy/date: Nagesh /12'June2020
  Description: get records for profit & Loss report of accounting
  Change History
  -----------------------------------------------------------------------
  S.No.    UpdatedBy/Date                        Remarks
  -----------------------------------------------------------------------
  1       Nagesh /12'June2020            created script for get profit and loss report records
  2.      Sud/Nagesh: 20Jun'20                   Added HospitalId for Phrm-Separation
  3.      Sud/Nagesh: 25Feb'21           Added Mid-FiscalYear logic for P&L Report Correction
                                      If our software started from Mid-Fisc Year, we need to take also the
								     Opening Balance of Revenue and Expenses Ledgers.
  4.	  NageshBB: 17July2021					get codeDetails table values using function. added function here
  5.	  NageshBB: 06Aug2021			added query to get all revenue and expense ledger. client side logic will show or hide records with 0 amount
  *************************************************************************/
  BEGIN
  
    IF(@FromDate IS NOT NULL AND @ToDate IS NOT NULL) 
    BEGIN          
    

				declare @Revenue varchar(50)=(select dbo.FN_ACC_GetNameByCode('001',@HospitalId))
				declare @Expenses varchar(50)=(select dbo.FN_ACC_GetNameByCode('002',@HospitalId))
 
				Declare @FiscalYearId INT = (
								Select Top(1) FiscalYearId from ACC_MST_FiscalYears where HospitalId=@HospitalId 
									and @FromDate Between Convert(Date,StartDate) and Convert(Date,EndDate)
									)    
				Declare @HospitalShortName Varchar(200) = (Select Top (1) HospitalShortName from ACC_MST_Hospital)
				Declare @HospIdForOpening INT=0
 
                Mid fiscal year Logic only for Charak as of 25thFeb2021--
				 we can add other hospital in below IF-Condition as required--
				This will work properly for all hospitals, we just have to add more hospitalname and fiscalyear ids. 
				-Later this logic will be moved to proper place---
				IF((@HospitalShortName='CHARAK' and @FiscalYearId=2))
				BEGIN
				SET @HospIdForOpening = @HospitalId
				END
				-----

				Select A.LedgerId, A.PrimaryGroup, A.LedgerName, A.COA, A.LedgerGroupName, A.Code,
				SUM(ISNULL(A.DrAmount,0)) 'DRAmount', SUM(ISNULL(A.CRAmount,0)) 'CRAmount'
				FROM
				(
						Select l.LedgerId, 
						pg.PrimaryGroupName As PrimaryGroup,
						l.LedgerName,
						lg.COA, 
						lg.LedgerGroupName, 
						l.Code, 
						SUM(txnItm.DrAmount) 'DRAmount', 
						SUM(txnItm.CrAmount) 'CRAmount'
						FROM ACC_Transactions  txn
						INNER JOIN 
						(Select  
						TransactionId, LedgerId,
						Case WHEN DrCr=1 THEN Amount ELSE 0 END AS DrAmount,
						Case WHEN DrCr=0 THEN Amount ELSE 0 END AS CrAmount
						from  ACC_TransactionItems where HospitalId=@HospitalId ) txnItm 
						ON txn.TransactionId = txnItm.TransactionId
						INNER JOIN ACC_Ledger l
						ON txnItm.LedgerId = l.LedgerId
						INNER JOIN ACC_MST_LedgerGroup lg
						ON l.LedgerGroupId = lg.LedgerGroupId  
						inner join ACC_MST_ChartOfAccounts coa on coa.ChartOfAccountId=lg.COAId
						inner join ACC_MST_PrimaryGroup pg on pg.PrimaryGroupId=coa.PrimaryGroupId
						and pg.PrimaryGroupName IN (@Revenue, @Expenses)
						WHERE  l.HospitalId=@HospitalId  and lg. HospitalId=@HospitalId and
						convert(date, txn.TransactionDate) BETWEEN convert(date,@FromDate) and  convert(date,@ToDate) 
						Group by l.LedgerId, pg.PrimaryGroupName, l.LedgerName,lg.COA, lg.LedgerGroupName, l.Code
   
						Union ALL

						-added for Opening issues in P&L---
						 below function gives exact same columns as above select query--
						- it will not return anything if hospitalid doesn't match----
						Select * from [FN_ACC_GetOpeningBalanceForPnL_MidYear] ( @HospIdForOpening, @FiscalYearId, @Revenue, @Expenses)

						NageshBB:06 aug 2021: get all revenue and expense ledgers for show on client
						client side we have logic to shwo 0 amount ledger or not
					    union all

						select  l.LedgerId,pg.PrimaryGroupName as PrimaryGroup, l.LedgerName,coa.ChartOfAccountName as COA,
						lg.LedgerGroupName,l.Code,0 as DRAmount,0 as CRAmount  from ACC_Ledger l						
						INNER JOIN ACC_MST_LedgerGroup lg
						ON l.LedgerGroupId = lg.LedgerGroupId  
						inner join ACC_MST_ChartOfAccounts coa on coa.ChartOfAccountId=lg.COAId
						inner join ACC_MST_PrimaryGroup pg on pg.PrimaryGroupId=coa.PrimaryGroupId
						and pg.PrimaryGroupName IN (@Revenue, @Expenses)
						and l.HospitalId=@HospitalId
				) A
				Group BY A.LedgerId, A.PrimaryGroup, A.LedgerName, A.COA, A.LedgerGroupName, A.Code


    END  -- end of IF

  END -- end of SP


GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_RPT_GetReverseTranactionDetail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[SP_ACC_RPT_GetReverseTranactionDetail]			
@ReverseTransactionId int
AS
EXEC [dbo].[SP_ACC_RPT_GetReverseTranactionDetail] @TransactionDate = '2019-07-05 12:07:31.170'

/************************************************************************
FileName: [SP_ACC_RPT_GetReverseTranactionDetail]
CreatedBy/date: NageshBB/18Aug2020
Description: get details of reversed transaction to show in report
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       NageshBB / 18Aug2020						 scriptcreated 
*************************************************************************/
BEGIN
	Table1
		select distinct rtxn.SectionId, rtxn.VoucherId,rtxn.FiscalYearId,rtxn.CreatedBy, rtxn.ReversedBy  
		,sec.SectionName,fy.FiscalYearName,emp.FullName as ReversedByName,rtxn.ReversedOn,rtxn.Reason,rtxn.TransactionDate,--common section
		rtxn.VoucherNumber,vcr.VoucherName,rtxn.CreatedOn,emp1.FullName as CreatedByName, IsRecreated= 0 --table records
		from FN_ACC_Get_Reverse_Transaction_Records() rtxn 
		join ACC_MST_SectionList sec on rtxn.SectionId=sec.SectionId
		join ACC_MST_FiscalYears fy on fy.FiscalYearId=rtxn.FiscalYearId
		join EMP_Employee emp on emp.EmployeeId=rtxn.ReversedBy
		join ACC_MST_Vouchers vcr on vcr.VoucherId=rtxn.VoucherId
		join EMP_Employee emp1 on emp1.EmployeeId=rtxn.CreatedBy
		where rtxn.ReverseTransactionId=@ReverseTransactionId
	Table2
		select distinct rtxn.SectionId,rtxn.FiscalYearId,rtxn.VoucherNumber
		from FN_ACC_Get_Reverse_Transaction_Records() rtxn 
		join ACC_Transactions txn on rtxn.SectionId=txn.SectionId and rtxn.FiscalYearId=txn.FiscalYearId
		and rtxn.VoucherNumber=txn.VoucherNumber
		where rtxn.ReverseTransactionId=@ReverseTransactionId			
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Acc_RPT_GetSystemAduitReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Acc_RPT_GetSystemAduitReport]
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@voucherReportType varchar(50)=null,
		@SectionId int=null
AS
/*
FileName: [SP_ACC_RPT_GetSystemAduitReport]
CreatedBy/date:
Description: 
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date         Remarks
-----------------------------------------------------
1       Vikas/24 June 2020      Get report for system log records of edit voucher, reversal transaction, back date entry for accounting.
2		NageshBB/ 19Aug 2020	added sectionId check for all records
-----------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)  
	BEGIN
	IF (@voucherReportType='EditVoucher')  
	BEGIN
	 START: Edit Voucher Logs Details
	select
		fs.FiscalYearName,
		lg.SectionId,
		sc.SectionName,
		lg.TransactionDate,
		lg.VoucherNumber,
		lg.Reason,
		lg.CreatedOn,
		lg.CreatedBy,
		lg.LogId,
		usr.FullName
	from ACC_Log_EditVoucher lg
		left join ACC_MST_FiscalYears fs on lg.FiscalYearId = fs.FiscalYearId
		left join ACC_MST_SectionList sc on lg.SectionId = sc.SectionId
		left join EMP_Employee usr on lg.CreatedBy = usr.EmployeeId
    where CONVERT(date, lg.CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) and lg.SectionId=@SectionId
	 END: Edit Voucher Logs Details
	END
	ELSE IF (@voucherReportType='VoucherReversal')  
	BEGIN
	 START: Reversal voucher txn Logs Details
	select
		accR.ReverseTransactionId,
		fs.FiscalYearName,
		sc.SectionName,
		accR.TransactionDate,
		accR.Reason,
		accR.CreatedOn,
		accR.CreatedBy,
		usr.FullName
	from ACC_ReverseTransaction accR
		left join ACC_MST_FiscalYears fs on accR.FiscalYearId = fs.FiscalYearId
		left join ACC_MST_SectionList sc on accR.Section = sc.SectionId
		left join EMP_Employee usr on accR.CreatedBy = usr.EmployeeId
	where CONVERT(date, accR.CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
   and accR.Section=@SectionId
	 END: Reversal voucher txn Logs Details
	END
	ELSE IF (@voucherReportType='BackDateEntry')  
	BEGIN
	 START: Back Date Entry txn Logs Details
	select 
		txn.TransactionId,
		txn.SectionId,
		sc.SectionName,
		txn.TransactionDate,
		txn.VoucherNumber,
		txn.CreatedOn,
		txn.CreatedBy,
		usr.FullName
	from ACC_Transactions txn
		left join ACC_MST_SectionList sc on txn.SectionId = sc.SectionId
		left join EMP_Employee usr on txn.CreatedBy = usr.EmployeeId
	where CONVERT(date, txn.CreatedOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate) 
    and txn.SectionId=@SectionId
	 END: Back Date Entry txn Logs Details
	END

	END
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_ACC_RPT_GetTrialBalanceData]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_ACC_RPT_GetTrialBalanceData]
		@FromDate DATETIME,
		@ToDate DATETIME,
		@HospitalId INT,
		@OpeningFiscalYearId INT
	AS
	EXEC [dbo].[SP_ACC_RPT_GetTrialBalanceData] @FromDate = '2020-07-08  18:00:21.657', @ToDate ='2020-07-09 18:00:21.657', @HospitalId=3, @OpeningFiscalYearId=3
	
	/************************************************************************
	FileName: [SP_ACC_RPT_GetTrialBalanceData]
	CreatedBy/date: Nagesh /11'June2020
	Description: get records for trail balance report of accounting
	Change History
	-----------------------------------------------------------------------
	S.No.    UpdatedBy/Date                        Remarks
	-----------------------------------------------------------------------
	1       Nagesh /11'June2020						created script for get trial balance records
	2.      Sud/Nagesh: 20Jun'20					Added HospitalId for Phrm separation
	3.		Nagesh/Vikas: 07Jul'20					changed script for opening balance as per fiscalYearId and input openingFiscalYearId 
	4.		Nagesh: 09 Jul 2020						fixed issue of opening balance after fiscal year closed and reopened
	*************************************************************************/
	BEGIN
	
		IF(@FromDate IS NOT NULL AND @ToDate IS NOT NULL) 
		BEGIN
		here we are getting plain records all grouping and data modification as per need we will do in controller 
		using linq we will do all modification this will return plain records only
		Now we are getting ledger opening balance from ledger table later we will update sp
		and we will get data from ledger balance history table 
		 Declare @fiscalYearStartDate datetime		 
		 set @fiscalYearStartDate= (select top 1 StartDate from ACC_MST_FiscalYears where HospitalId=@HospitalId and FiscalYearId=@OpeningFiscalYearId )   		     	
				 Select 
					ledInfo.PrimaryGroup,ledInfo.COA,ledInfo.LedgerGroupName,ledInfo.LedgerName,ledInfo.LedgerId, ledInfo.Code,OpeningBalDr, OpeningBalCr
					,ISNULL(OpeningDr,0) AS 'OpeningDr', ISNULL(OpeningCr,0) AS 'OpeningCr' , ISNULL(CurrentDr,0) AS 'CurrentDr', ISNULL(CurrentCr,0) AS 'CurrentCr' 
				from(
				    Select l.LedgerId, l.LedgerName, l.Code, lg.PrimaryGroup, lg.COA, lg.LedgerGroupName , 
					case when lbh.OpeningDrCr=1 then lbh.OpeningBalance else 0 END AS 'OpeningBalDr',
					case when lbh.OpeningDrCr=0 then lbh.OpeningBalance else 0 END AS 'OpeningBalCr' 				
                    from ACC_LedgerBalanceHistory lbh join ACC_Ledger l on lbh.LedgerId=l.LedgerId INNER JOIN ACC_MST_LedgerGroup lg
					ON l.LedgerGroupId = lg.LedgerGroupId
					WHERE  lbh.HospitalId=@HospitalId  
					and lbh.FiscalYearId=@OpeningFiscalYearId
					) 
				ledInfo
				LEFT JOIN
					( 						
						Select LedgerId,SUM(OpeningDr) AS 'OpeningDr', SUM(OpeningCr) 'OpeningCr',SUM(CurrentDr) AS 'CurrentDr', SUM(CurrentCr) 'CurrentCr' 
						from
						(														
							Select   ti.LedgerId
							,(case when ti.DrCr=1 and convert(date,t.TransactionDate) < convert(date,@FromDate) 
							then ISNULL(ti.Amount,0) else 0 END) as OpeningDr
							,(case when ti.DrCr=0 and convert(date,t.TransactionDate) < convert(date,@FromDate) 
							then ISNULL(ti.Amount,0) else 0 END) as OpeningCr
							,(case when ti.DrCr=1 and convert(date,t.TransactionDate) >=convert(date,@FromDate)  
							then ISNULL(ti.Amount,0) else 0 END)  CurrentDr
							,(case when ti.DrCr=0 and convert(date,t.TransactionDate) >=convert(date,@FromDate)  
							then ISNULL(ti.Amount,0) else 0 END)  CurrentCr	
							from  ACC_TransactionItems ti INNER JOIN ACC_Transactions t
							ON ti.TransactionId = t.TransactionId
							WHERE 
							t.HospitalId=@HospitalId  and 
							convert(date, t.TransactionDate) BETWEEN convert(date,@fiscalYearStartDate) and  convert(date,@ToDate) 							
						) A Group By LedgerId
					) ledTxnDetails 
				ON ledInfo.LedgerId= ledTxnDetails.LedgerId				
				Order by ledInfo.LedgerName           		  							
		END		
	END
GO
/****** Object:  StoredProcedure [dbo].[SP_ADT_AllBedsWithPatientsInfo]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[SP_ADT_AllBedsWithPatientsInfo]
AS
/*
File: [SP_ADT_AllBedsWithPatientsInfo]
Created: Sud:16Sep'21
Description: To get all beds info along with the Patient's Info of occupying patient.

---------Change History:--------------------------------------------------------------------------
SN    User/Date              Remarks
-------------------------------------------------------------------------------------
1.    Sud/16Sep'21          Needed new functionality containing all information of Beds.
-------------------------------------------------------------------------------------

 */
BEGIN
  SELECT W.WardId, W.WardName, B.BedID, B.BedNumber,B.BedCode, F.BedFeatureName,
  F.BedPrice,B.IsOccupied, B.IsReserved,
patAdm.PatientId, patAdm.PatientName, patAdm.Gender, patAdm.DateOfBirth 'PatientDob',
Convert(Date,patAdm.AdmissionDate) 'AdmissionDate',patAdm.PatientVisitId, patAdm.VisitCode
FROM ADT_Bed B 
   INNER JOIN
ADT_MST_Ward W ON B.WardId = W.WardID and W.IsActive='true'
   INNER JOIN
ADT_MAP_BedFeaturesMap Map ON Map.BedId = B.BedID
   INNER JOIN
ADT_MST_BedFeature F ON F.BedFeatureId = Map.BedFeatureId
 LEFT JOIN 
  (
       select  adm.PatientId, pat.ShortName 'PatientName',
	   adm.PatientVisitId,visit.VisitCode,pat.DateOfBirth, pat.Gender,
		 ward.WardName,  bed.BedID,  bed.BedCode, bed.BedNumber, adm.AdmissionDate
		 from ADT_PatientAdmission adm
		 inner join (select * from PAT_PatientVisits) visit
			on  adm.PatientVisitId= visit.PatientVisitId
		 inner join (Select * from ADT_TXN_PatientBedInfo 
					where IsActive=1 and OutAction is null) bedInfo
		   ON adm.PatientVisitId=bedInfo.PatientVisitId
		     INNER JOIN ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
		   inner join ADT_Bed bed on bedInfo.BedId = bed.BedID
		   INNER JOIN PAT_Patient pat on adm.PatientId=pat.PatientId
		      Where adm.AdmissionStatus='admitted'
  )patAdm
 
  on B.BedID=patAdm.BedID
  Where B.IsActive=1

  order by B.BedNumber
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ADT_GetAllAdmittedPatients]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create the stored procedure in the specified schema
CREATE PROCEDURE [dbo].[SP_ADT_GetAllAdmittedPatients]
    @AdmissionStatus VARCHAR(20) = 'admitted',
	@PatientVisitId INT NULL
AS
/*
SP Name:	SP_ADT_GetAllAdmittedPatients
Author:		Krishna Bogati/Sanjit Raj Shakya
CreatedOn:	2021-12-22
Remarks:	Created SP to Replace Linq Query from API in Admission Controller
Exec Example: EXEC SP_ADT_GetAllAdmittedPatients @@AdmissionStatus = 'admitted', @PatientVisitId = 0
CHANGE/HISTORY:
--------------------------------------------------------------------------
1. Krishna 13th,JAN'22				AdmissionDate changed to AdmittedDate(EMR:4762)

*/
BEGIN
     body of the stored procedure
    IF OBJECT_ID('tempdb.dbo.#latestBedInfos', 'U') IS NOT NULL
	DROP TABLE #latestBedInfos

	SELECT 
		PBI.PatientVisitId, 
		MAX(PBI.PatientBedInfoId) as LatestPatientBedInfoId
	INTO #latestBedInfos
	FROM 
		ADT_TXN_PatientBedInfo PBI
	GROUP BY PBI.PatientVisitId

	SELECT 
		visit.VisitCode,
		visit.PatientVisitId,
		adm.PatientId,
		adm.PatientAdmissionId,
		adm.AdmissionDate AS AdmittedDate,
		adm.DischargeDate,
		adm.DischargedBy,
		pat.PatientCode,
		adm.AdmittingDoctorId,
		ISNULL(doc.FullName, '') as AdmittingDoctorName,
		ISNULL(pat.Address,'') as Address,
		adm.AdmissionStatus,
		adm.BillStatusOnDischarge,
		pat.ShortName AS [NAME],
		pat.DateOfBirth,
		ISNULL(pat.PhoneNumber,'') as PhoneNumber,
		pat.Gender,
		summary.IsSubmitted,
		ISNULL(summary.DischargeSummaryId, 0) DischargeSummaryId,
		dep.DepartmentId,
		dep.DepartmentName AS Department,
		adm.CareOfPersonName AS GuardianName,
		adm.CareOfPersonRelation AS GuardianRelation,
		CASE
			WHEN adm.AdmissionCase = 'Police Case' Then 1
			ELSE 0
		END as IsPoliceCase,
		CASE WHEN adm.IsInsurancePatient IS NULL THEN 0 ELSE adm.IsInsurancePatient END as IsInsurancePatient,
		Patient Bed Infos--
		PBI.BedId,
		PBI.PatientBedInfoId,
		PBI.WardId,
		PBI.BedFeatureId,
		PBI.StartedOn,
		PBI.BedOnHoldEnabled,
		PBI.ReceivedBy,
		WD.WardName AS Ward,
		B.BedFeatureName AS BedFeature,
		BED.BedCode,
		BED.BedNumber,
		UPPER(LEFT(PBI.Action,1))+LOWER(SUBSTRING(PBI.Action,2,LEN(PBI.Action))) AS Action

	FROM
		ADT_PatientAdmission adm
		INNER JOIN PAT_PatientVisits visit ON adm.PatientVisitId = visit.PatientVisitId
		INNER JOIN PAT_Patient pat ON pat.PatientId = adm.PatientId
		INNER JOIN MST_Department dep ON visit.DepartmentId = dep.DepartmentId
		INNER JOIN #latestBedInfos LBI ON visit.PatientVisitId = LBI.PatientVisitId
		INNER JOIN ADT_TXN_PatientBedInfo PBI ON LBI.LatestPatientBedInfoId = PBI.PatientBedInfoId AND visit.PatientVisitId = PBI.PatientVisitId
		INNER JOIN ADT_Bed BED ON PBI.BedId = BED.BedID
		INNER JOIN ADT_MST_Ward WD ON PBI.WardId = WD.WardID
		INNER JOIN ADT_MST_BedFeature B ON B.BedFeatureId = PBI.BedFeatureId
		LEFT JOIN ADT_DischargeSummary summary ON adm.PatientVisitId = summary.PatientVisitId
		LEFT JOIN EMP_Employee doc ON adm.AdmittingDoctorId = doc.EmployeeId
	WHERE 
		LOWER(adm.AdmissionStatus) = LOWER(@AdmissionStatus) AND
		(@PatientVisitId = 0 OR adm.PatientVisitId = @PatientVisitId)
	ORDER BY adm.AdmissionDate DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_ADT_GetBedOccupanciesOfAllWards]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[SP_ADT_GetBedOccupanciesOfAllWards]
AS
/*
File: ADT_GetBedOccupanciesOfAllWards
Created: Sud:16Sep'21
Description: To get Occupied, Reserved and Vacant beds per Ward.
Remarks: This may give incorrect data because of IsActive-Checks in different tables.
       Needs proper revision on this.. 

---------Change History:--------------------------------------------------------------------------
SN    User/Date              Remarks
-------------------------------------------------------------------------------------
1.    Sud/16Sep'21          Added Comments, Renamed from Last SP: ADT_BedFeature
-------------------------------------------------------------------------------------

 */
BEGIN
select x.WardName,x.WardId,x.Occupied,x.Vacant, x.Reserved, (x.Occupied + x.Vacant+ x.Reserved) AS Total  from 
(	
	select  y.WardID,y.WardName,
		 count( CASE When y.IsOccupied=1 and y.bdIA='true' and y.wIA='true' and y.bfIA='true' then 1 END) AS Occupied,
		 count( CASE When y.IsOccupied=0  and y.bdIA='true' and y.wIA='true' and y.bfIA='true' then 1 END) AS Vacant,
		 (0) AS Reserved
			
	from (
	select distinct bd.BedId,bd.BedCode, ward.WardID,bd.IsOccupied,ward.WardName,bd.IsActive as bdIA,ward.IsActive as wIA,bf.IsActive as bfIA from
	ADT_Bed bd		 
	 inner join	ADT_MAP_BedFeaturesMap Map ON Map.BedId = bd.BedID
	 inner join ADT_MST_Ward ward on ward.WardID = Map.WardId 	
	 inner join ADT_MST_BedFeature bf on map.BedFeatureId=bf.BedFeatureId
	 where ward.IsActive=1
	) as y group by WardName,WardID
	
	
	) as x	
 order by X.WardName
END

GO
/****** Object:  StoredProcedure [dbo].[SP_APPT_GetPatientVisitStickerInfo]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_APPT_GetPatientVisitStickerInfo]  
    
@PatientVisitId INT=null
AS
/*
FileName: SP_APPT_GetPatientVisitStickerInfo
CreatedBy/date: Yubraj / 2019-06-23
Description: Get patient's current visit details. 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Yubraj/23rd June'19                     Created.
2.       Narayan/21st Jan'20                     added CountrName and Age
3.       Pratik/11March 2020					added Visit QueueNo
4.		Anjana/4th Feb, 2021					added Department Room Number
5.		Anjana/17 May, 2021						added MunicipalityName
---------------------------------------------------------------------------------------
*/
BEGIN
select 
  visit.AppointmentType 'AppointmentType',
  visit.VisitType 'VisitType',
  visit.VisitCode 'VisitCode',
  visit.ProviderName 'DoctorName',
  visit.VisitDate 'VisitDate',
  visit.VisitTime 'VisitTime',
  CONCAT_WS(' ',pat.FirstName,pat.MiddleName,pat.LastName) 'PatientName',
  pat.PatientCode 'PatientCode',
  pat.DateOfBirth 'DateOfBrith',
  pat.Gender 'Gender',
  pat.Address 'Address',
  pat.Age 'Age',
  mun.MunicipalityName,
  pat.PhoneNumber 'PhoneNumber',
  subCounty.CountrySubDivisionName 'District',
  dep.DepartmentName 'Department',
  dep.RoomNumber 'DeptRoomNumber',
  doc.RoomNo 'RoomNo',
  usr.UserName 'User',
  cnty.CountryName 'CountryName',
  bilTxnItms.ServiceDepartmentName,
  ISNULL(bilTxnItms.TotalAmount,0) 'OpdTicketCharge',
  visit.QueueNo
   
  from PAT_PatientVisits visit join PAT_Patient pat on pat.PatientId=visit.PatientId
            join MST_CountrySubDivision subCounty on subCounty.CountrySubDivisionId=pat.CountrySubDivisionId
            join MST_Department dep on dep.DepartmentId= visit.DepartmentId
            join RBAC_User usr on usr.EmployeeId=visit.CreatedBy
            join MST_Country cnty on cnty.CountryId = pat.CountryId
            left join EMP_Employee doc on doc.EmployeeId=visit.ProviderId
			left join MST_Municipality mun on pat.MunicipalityId = mun.MunicipalityId
            left join (Select * from BIL_TXN_BillingTransactionItems where PatientVisitId=@PatientVisitId
                           and ServiceDepartmentName IN ('OPD'
                                   , 'Department OPD'
                                   ,'Department Followup Charges'
                                   ,'Doctor Followup Charges'
                                   ,'Department OPD Old Patient'
                                   ,'Doctor OPD Old Patient')) bilTxnItms  
                              on  visit.PatientVisitId = bilTxnItms.PatientVisitId        

            where visit.PatientVisitId=@PatientVisitId 
            
END 

GO
/****** Object:  StoredProcedure [dbo].[SP_APPT_GetVisitListOfValidDays]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[SP_APPT_GetVisitListOfValidDays]
	@SearchTxt VARCHAR(200) = '', 
	@RowCounts INT = 200,
	@DaysLimit INT = 7

	AS 
	/*
	 FileName: [SP_APPT_GetVisitListOfValidDays] 
	 Created: 21-Dec'21/Krishna
	 Description: To Get the Patients visit list
				 Returns upto 200 patients
				Match fields: ShortName, PatientCode (HospitalNo), PhoneNumber
	 Remarks:   
	 -----------------------------------------------------------------------
	 Change History
	 -----------------------------------------------------------------------
	 S.No.    Date/User              Change          Remarks
	 -----------------------------------------------------------------------
	 1.       21-Dec'21/Krishna                          inital draft 
	 -----------------------------------------------------------------------
	*/
	DECLARE @Now DATE
		SET @Now = GETDATE()
	DECLARE @ValidDate DATE
		SET @ValidDate = DATEADD(DAY, -@DaysLimit, @Now) --takes date @Dayslimit(eg: 7 days) days less than the current date.
		
	BEGIN 
		IF(@SearchTxt = 'null') 
	BEGIN 
		SET @SearchTxt = null 
	END 
		SET @RowCounts = ISNULL(@RowCounts, 200) --default rowscount=200

 
	SELECT TOP (@RowCounts) 
	  visit.PatientVisitId, 
	  visit.ParentVisitId, 
	  dept.DepartmentId,
	  dept.DepartmentName,
	  visit.ProviderId, 
	  visit.ProviderName, 
	  visit.VisitDate, 
	  visit.VisitTime, 
	  visit.VisitType, 
	  visit.AppointmentType, 
	  pat.PatientId, 
	  pat.PatientCode, 
	  pat.FirstName, 
	  pat.MiddleName, 
	  pat.LastName, 
	  pat.ShortName, 
	  pat.PhoneNumber, 
	  pat.DateOfBirth, 
	  pat.Gender, 
	  pat.CountryId, 
	  pat.PANNumber, 
	  pat.MembershipTypeId, 
	  pat.[Address], 
	  pat.Email, 
	  pat.LandLineNumber, 
	  visit.QueueNo, 
	  visit.BillingStatus AS BillStatus


	FROM PAT_PatientVisits AS visit
		INNER JOIN MST_Department AS dept ON visit.DepartmentId = dept.DepartmentId
		INNER JOIN PAT_Patient AS pat ON visit.PatientId = pat.PatientId
	WHERE 
	  pat.IsActive = 1
	  AND visit.IsActive=1
	  AND CONVERT(DATE,visit.VisitDate) BETWEEN CONVERT(DATE,@ValidDate) AND CONVERT(DATE,@Now)
	  AND LOWER(visit.VisitType) != 'inpatient'
	  AND LOWER(visit.BillingStatus) != 'returned'
	  AND (
		pat.PatientCode LIKE '%' + ISNULL(@SearchTxt, '') + '%' 
		OR pat.ShortName LIKE '%' + ISNULL(@SearchTxt, '') + '%' 
		OR ISNULL(pat.PhoneNumber, '') LIKE '%' + ISNULL(@SearchTxt, '') + '%'
	  ) 
	  AND visit.Ins_HasInsurance IS NULL
	ORDER BY 
	  visit.PatientVisitId DESC --Show recent visit at top.. 
	  END

GO
/****** Object:  StoredProcedure [dbo].[SP_APPT_PatientListForNewVisit]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END--Insurance Search Patient SP altered---

START: Appointement Search patient SP---
CREATE PROCEDURE [dbo].[SP_APPT_PatientListForNewVisit] 
   @SearchTxt varchar(200) = '',
   @RowCounts INT = NULL
AS

/*
 FileName: [SP_APPT_PatientListForNewVisit] 
 Created: 10-Oct'21/Sud
 Description: To Get the Patients Info + IsAdmitted for patient matching given search conditions.
             Returns upto 200 patients
			Match fields: ShortName, PatientCode (HospitalNo), PhoneNumber
 Remarks:  Remove Insurance related informations if not required.. 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.       10-Oct'21/Sud                          inital draft 
 -----------------------------------------------------------------------
*/
BEGIN  

IF(@SearchTxt='null')
BEGIN
  SET @SearchTxt=null
END
SET @RowCounts=ISNULL(@RowCounts,200)--default rowscount=200

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

Select top (@RowCounts)
  pat.PatientId,
  pat.PatientCode,
  pat.ShortName,
  pat.FirstName,
  pat.LastName,
  pat.MiddleName,
  pat.Age,
  cntry.CountryName,
  pat.Gender,
  pat.PhoneNumber,
  pat.DateOfBirth,
  pat.Address,
  pat.IsOutdoorPat,  pat.CreatedOn,
  pat.CountryId,  pat.CountrySubDivisionId,  sub.CountrySubDivisionName,
  pat.MembershipTypeId,  memb.MembershipTypeName,
  memb.DiscountPercent 'MembershipDiscountPercent',
  pat.PANNumber,  pat.BloodGroup,  pat.DialysisCode,
  case when adm.PatientId is not null then 1
     else 0 END as IsAdmitted,
  pat.Ins_HasInsurance,
  pat.Ins_NshiNumber,
  pat.Ins_InsuranceBalance,
  pat.MunicipalityId,
  munc.MunicipalityName

from PAT_Patient pat
 INNER JOIN  MST_Country cntry on pat.CountryId=cntry.CountryId
 inner join MST_CountrySubDivision sub
    on pat.CountrySubDivisionId=sub.CountrySubDivisionId
  inner join PAT_CFG_MembershipType memb on pat.MembershipTypeId=memb.MembershipTypeId
  LEFT JOIN 
  (
   Select distinct PatientId from ADT_PatientAdmission
   Where AdmissionStatus='admitted'
  ) adm
  on pat.PatientId=adm.PatientId

Left join MST_Municipality munc
  ON pat.MunicipalityId=munc.MunicipalityId

where pat.IsActive=1 
and (
       pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%'
       or pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%'  
	   OR ISNULL(pat.PhoneNumber,'') LIKE '%' + ISNULL(@SearchTxt,'') + '%'
	 )
Order by PatientId DESC --Show recent patient at top.. 

END

GO
/****** Object:  StoredProcedure [dbo].[sp_BedInformation]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_BedInformation]

AS
BEGIN
SELECT * FROM 
	(SELECT COUNT(distinct b.BedID) Total FROM ADT_Bed b 
	 inner join	ADT_MAP_BedFeaturesMap Map ON Map.BedId = b.BedID and b.IsActive='true'
	 inner join ADT_MST_Ward ward on ward.WardID = Map.WardId and ward.IsActive='true'
	 inner join ADT_MST_BedFeature bf on map.BedFeatureId=bf.BedFeatureId and bf.IsActive='true') AS Total,
	(SELECT COUNT( distinct b.BedID) Available FROM ADT_Bed b
	 inner join	ADT_MAP_BedFeaturesMap Map ON Map.BedId = b.BedID and b.IsActive='true'
	 inner join ADT_MST_Ward ward on ward.WardID = Map.WardId and ward.IsActive='true'
	 inner join ADT_MST_BedFeature bf on map.BedFeatureId=bf.BedFeatureId and bf.IsActive='true' and b.IsOccupied = 'false') AS Available,
	(SELECT COUNT( distinct b.BedID) Occupied FROM ADT_Bed b 
	 inner join	ADT_MAP_BedFeaturesMap Map ON Map.BedId = b.BedID and b.IsActive='true'
	 inner join ADT_MST_Ward ward on ward.WardID = Map.WardId and ward.IsActive='true'
	 inner join ADT_MST_BedFeature bf on map.BedFeatureId=bf.BedFeatureId and bf.IsActive='true' and b.IsOccupied = 'true') AS Occupied

SELECT B.BedNumber,F.BedFeatureName,F.BedPrice,B.IsOccupied,W.WardName FROM ADT_Bed B 
INNER JOIN
ADT_MST_Ward W ON B.WardId = W.WardID and W.IsActive='true'
INNER JOIN
ADT_MAP_BedFeaturesMap Map ON Map.BedId = B.BedID
INNER JOIN
ADT_MST_BedFeature F ON F.BedFeatureId = Map.BedFeatureId

END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetAllBillingInfoOfPatientForSettlement]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BIL_GetAllBillingInfoOfPatientForSettlement] 
	@PatientId INT = 0
		
AS
/*
FileName: [SP_BIL_GetAllBillingInfoOfPatientForSettlement]
CreatedBy/date: KRISHNA/2021-11-17
Description: To get the billing information of patient for settlement like (credit,deposit,provisional.....)
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.		Krishna/2021-11-17						created SP to get the billing information for settlement.
---------------------------------------------------------------------------------------
*/
BEGIN

-table:1--Patient Informations---
	SELECT
		PatientID,
		PatientCode AS HospitalNo,
		ShortName AS PatientName,
		Gender,
		DateOfBirth

	FROM PAT_Patient
	WHERE PatientId=@PatientId


-Table:2 --- Credit Invoices and there Return Information-----
	SELECT 
		PatientId, 
		inv.BillingTransactionId,
		inv.InvoiceNo,
		inv.InvoiceCode,
		Convert(Date,inv.CreatedOn) 'InvoiceDate',
		ISNULL(inv.TotalAmount,0) 'SalesAmount', ISNULL(ret.ReturnAmount,0) 'ReturnAmount',
		ISNULL(inv.TotalAmount,0) - ISNULL(ret.ReturnAmount,0) 'NetAmount',
		BillReturnIdsCSV

	FROM 
		BIL_TXN_BillingTransaction inv
	LEFT JOIN 
		(SELECT BillingTransactionId, 
		SUM(TotalAmount) 'ReturnAmount',
		STRING_AGG(BillReturnId, ',') 'BillReturnIdsCSV'
	FROM 
		BIL_TXN_InvoiceReturn
	WHERE PatientId=@PatientId
	GROUP BY 
		BillingTransactionId) ret ON inv.BillingTransactionId=ret.BillingTransactionId
	WHERE
		inv.PatientId=@PatientId AND
		inv.PaymentMode='credit' and inv.BillStatus != 'paid' 
		and ISNULL(inv.IsInsuranceBilling,0) = 0 --excluding insurances invoices.

-table:3: Deposit Information---
	SELECT 
		SUM(ISNULL(Deposit_In,0)) Deposit_In,
		SUM(ISNULL(Deposit_Out,0)) Deposit_Out,
		SUM(ISNULL(Deposit_In,0))-SUM(ISNULL(Deposit_Out,0)) 'Deposit_Balance'
	FROM
	(
		SELECT PatientId, Deposittype,
		CASE WHEN DepositType='Deposit' THEN Amount
		ELSE 0 END AS 'Deposit_In',
		CASE WHEN DepositType IN ('ReturnDeposit','depositdeduct') THEN Amount
		ELSE 0 END AS 'Deposit_Out'
		FROM BIL_TXN_Deposit
		WHERE PatientId=@PatientId
	) a

-table:4: Provisional Information---
	SELECT 
		PatientId,
		SUM(ISNULL(TotalAmount,0)) 'ProvisionalTotal'
	FROM 
		BIL_TXN_BillingTransactionItems
	WHERE LOWER(BillStatus)='provisional'
		AND ISNULL(IsInsurance,0)=0
		AND LOWER(BillingType) != 'inpatient'
		AND PatientId = @PatientId
	GROUP BY PatientId
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetBillingInvoicesBetweenDateRange]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-start: sud-29March'21--for Billing Duplicate Print--
CREATE PROCEDURE [dbo].[SP_BIL_GetBillingInvoicesBetweenDateRange] 
		@FromDate Date=NULL,
		@ToDate DATE=NULL
AS
/*
FileName: SP_BIL_GetBillingInvoicesBetweenDateRange
CreatedBy/date: Sud/29Mar'21
Description:Get Invoice Details for Billing-> Duplicate Print 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Sud/29Mar'21                         Initial Draft
---------------------------------------------------------------------------------------
*/
BEGIN
SET @FromDate= ISNULL(@FromDate,Convert(Date,GetDate()))
SET @ToDate= ISNULL(@ToDate,Convert(Date,GetDate()))

Select  pat.PatientId, 
		pat.PatientCode, 
		pat.ShortName, 
		pat.Gender, 
		pat.DateOfBirth,
		txn.PaidDate AS 'PaidDate',
		txn.CreatedOn AS 'TransactionDate',
		txn.TotalAmount,
		txn.BillingTransactionId,
		txn.InvoiceNo 'InvoiceNumber',
		txn.InvoiceCode,
		fy.FiscalYearFormatted AS FiscalYear,
		txn.FiscalYearId,
		txn.InvoiceCode+Convert(Varchar(20),txn.InvoiceNo) AS 'InvoiceNumFormatted',
		pat.PhoneNumber,
		txn.IsInsuranceBilling,
		txn.OrganizationId,
		crOrg.OrganizationName,
		txn.PaymentMode

from BIL_TXN_BillingTransaction txn INNER JOIN PAT_Patient pat
     on txn.PatientId=pat.PatientId
inner join BIL_CFG_FiscalYears fy
     on txn.FiscalYearId = fy.FiscalYearId
left join BIL_MST_Credit_Organization crOrg 
    on txn.OrganizationId = crOrg.OrganizationId

WHERE 
Convert(Date,txn.CreatedOn) BETWEEN @FromDate and @ToDate 
Order by txn.FiscalYearId DESC, txn.InvoiceNo DESC 
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetBillTxnItemsBetnDateRange_ForDepartment]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BIL_GetBillTxnItemsBetnDateRange_ForDepartment]
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@SearchText varchar(100)=null,
		@SrvDptIntegrationName varchar(50)
AS
/*
FileName: [SP_BIL_GetBillTxnItemsBetnDateRange_ForDepartment]
CreatedBy/date: Anjana/sud/2020-05-26
Description: to get billing txn item details for selected integration name(Service Department)
Remarks:  
    Returned Items are Excluded.
    Cancelled+adtCancelled Items are Excluded.
    If Search Text is Empty then returning all.
    If Date is Empty the returning today's tranisaction.
    if integrationname is empty then returing all.


Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Anjana/sud/2020-05-26              Initial Draft
---------------------------------------------------------------------------------------
*/
BEGIN
 
 
Select 
	txnItem.CreatedOn as 'Date'
	, txnItem.ServiceDepartmentId,
	txnItem.ServiceDepartmentName,
	txnItem.ItemId,
	txnItem.ItemName,
	txnItem.ProviderId,
	txnItem.ProviderName,
	txnItem.BillingTransactionItemId,
	txnItem.BillStatus,
	txnItem.RequestedBy as 'ReferredById',
	txnItem.BillingTransactionId,
	txnItem.RequisitionId,
	bilTxn.InvoiceCode + convert(varchar(20),bilTxn.InvoiceNo) as 'ReceiptNo',
	pat.PatientId,
	pat.ShortName as 'PatientName',
	pat.DateOfBirth,
	pat.Gender,
	pat.PhoneNumber,
	pat.PatientCode,
	cfg.IsDoctorMandatory as 'DoctorMandatory',
	emp.FullName as 'ReferredByName'

from BIL_TXN_BillingTransactionItems txnItem INNER JOIN
     BIL_MST_ServiceDepartment srv  
	    ON srv.ServiceDepartmentId = txnItem.ServiceDepartmentId 
	INNER JOIN PAT_Patient pat
	  ON txnItem.PatientId = pat.PatientId
	INNER JOIN BIL_CFG_BillItemPrice cfg
	 
	     ON txnItem.ServiceDepartmentId = cfg.ServiceDepartmentId and txnItem.ItemId=cfg.ItemId
	LEFT JOIN BIL_TXN_BillingTransaction bilTxn ON txnItem.BillingTransactionId = bilTxn.BillingTransactionId
	LEFT JOIN EMP_Employee emp ON txnItem.RequestedBy = emp.EmployeeId

Where 
ISNULL(srv.IntegrationName, '') like '%' + ISNULL(@SrvDptIntegrationName,'') + '%'
AND txnItem.BillStatus != 'cancel'
AND txnItem.BillStatus != 'adtCancel'
AND ISNULL(txnItem.ReturnStatus,0) != 1   -- Null Handling..  NULL OR 0 => Take this, 1 =>   Don't Take this. 
REturn Today's data if null.. 
and Convert(Date, txnItem.CreatedOn) between ISNULL(@FromDate,Convert(Date, GETDATE())) AND ISNULL(@ToDate, Convert(Date, GETDATE()))  

and (pat.ShortName + pat.PatientCode + ISNUll(pat.PhoneNumber, '') + srv.ServiceDepartmentName + txnItem.ItemName) Like  '%'+ISNULL(@SearchText,'')+'%'


ORder by txnItem.Billingtransactionitemid DESC

END
GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetCreditNoteListBetweenDateRange]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[SP_BIL_GetCreditNoteListBetweenDateRange] 
		@FromDate Date=NULL,
		@ToDate DATE=NULL
AS
/*
FileName: SP_BIL_GetCreditNoteListBetweenDateRange
Description: To get list of credit notes for duplicate print.

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Sud,Pratik/1May'21                 Initial Draft
---------------------------------------------------------------------------------------
*/
BEGIN
Select  pat.PatientId, 
		pat.PatientCode, 
		pat.ShortName, 
		pat.Gender, 
		pat.DateOfBirth,
		pat.PhoneNumber,
		crn.CreatedOn AS 'CRNDate',
		crn.RefInvoiceNum,
		crn.TotalAmount,
		crn.InvoiceCode,
		fy.FiscalYearFormatted AS FiscalYear,
		crn.FiscalYearId,
		crn.CreditNoteNumber,
		crn.Remarks,
		crn.BillingTransactionId,
		crn.BillReturnId

from  BIL_TXN_InvoiceReturn crn INNER JOIN PAT_Patient pat
     on crn.PatientId=pat.PatientId
inner join BIL_CFG_FiscalYears fy
     on crn.FiscalYearId = fy.FiscalYearId

WHERE 
Convert(Date,crn.CreatedOn) BETWEEN @FromDate and @ToDate 
Order by crn.BillReturnId DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetInvoiceAndPatientDetailsForCreditNote]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_BIL_GetInvoiceAndPatientDetailsForCreditNote]
   @InvoiceNumber INT, 
   @FiscalYearId INT
AS
/*
FileName: SP_BIL_GetInvoiceAndPatientDetailsForCreditNote
Description: 
 * To get PatientInformation, InvoiceInformation, RemainingInvoiceItems Information 
    and AlreadyReturned Items information for Credit Note.
 * Remaining Invoice items is needed since we can only return the remaining qty if some qty is already returned.
 * Returns Four tables
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Sud/1May'21                 Initial Draft
2.		Krishna/19thNOV'21			made changes to get the SettlementId and CashDisocunt from Settlement Table.
---------------------------------------------------------------------------------------
*/
BEGIN
 
 Declare @PatientId INT, @PatientVisitId INT, @BillTxnId INT

Select @PatientId=PatientId,@PatientVisitId=PatientVisitId, @BillTxnId=BillingTransactionId
from BIL_TXN_BillingTransaction 
where InvoiceNo=@InvoiceNumber and FiscalYearId=@FiscalYearId

Select @PatientId, @PatientVisitId, @BillTxnId

--Table-1: For Patient Information---
Select  
pat.PatientId, pat.PatientCode, pat.ShortName,
pat.DateOfBirth,pat.Gender, cont.CountryName, dist.CountrySubDivisionName, pat.Address
from PAT_Patient pat INNER JOIN MST_CountrySubDivision dist
                         ON pat.CountrySubDivisionId=dist.CountrySubDivisionId
                     INNER JOIN MST_Country cont
					   ON dist.CountryId=cont.CountryId
where PatientId=@PatientId

-Table:2--For BillingTransaction information----
Select txn.PatientId, txn.BillingTransactionId, txn.InvoiceCode, txn.InvoiceNo, txn.PaymentMode
, txn.CreatedOn 'InvoiceDate',  
fy.FiscalYearFormatted+'-'+txn.InvoiceCode+Convert(varchar(20),txn.InvoiceNo) 'InvoiceNoFormatted',
txn.SubTotal, txn.DiscountAmount, txn.TaxTotal, txn.TotalAmount, txn.BillStatus,
txn.TransactionType, txn.InvoiceType, txn.IsInsuranceBilling, txn.InsuranceProviderId,
usr.UserName,ISNULL(txn.SettlementId,0) 'SettlementId',
ISNULL(stl.DiscountAmount,0) 'CashDiscount'

from BIL_TXN_BillingTransaction txn LEFT JOIN BIL_MST_Credit_Organization crOrg
                ON txn.OrganizationId=crOrg.OrganizationId
           LEFT JOIN RBAC_User usr on txn.CreatedBy=usr.EmployeeId
		   INNER JOIN BIL_CFG_FiscalYears fy on txn.FiscalYearId=fy.FiscalYearId
		   LEFT JOIN BIL_TXN_Settlements stl on txn.SettlementId = stl.SettlementId

where BillingTransactionId = @BillTxnId

-Table:3 --Returns BillingTransactionItems with Remaining Items Information---
Select  
	itm.BillingTransactionItemId,
	itm.BillingTransactionId,
	itm.PatientId,
	itm.ServiceDepartmentId,
	itm.ItemId,
	itm.ItemName,
	itm.Price,
	itm.Quantity-ISNULL(ret.RetQuantity,0) 'RemainingQty',
	itm.Price*(itm.Quantity-ISNULL(ret.RetQuantity,0))  'SubTotal',
    itm.DiscountAmount/itm.Quantity 'DiscountAmtPerUnit',
	Remaining DiscountAmt= DiscPerUnit * RemainingQty
    (itm.DiscountAmount/itm.Quantity)*(itm.Quantity-ISNULL(ret.RetQuantity,0)) 'DiscountAmount',
	ISNULL(itm.Tax,0)/itm.Quantity  'TaxAmtPerUnit',
	(ISNULL(itm.Tax,0)/itm.Quantity)*(itm.Quantity-ISNULL(ret.RetQuantity,0)) 'TaxAmount',
    itm.TotalAmount/itm.Quantity 'TotalAmtPerUnit',
	(itm.TotalAmount/itm.Quantity) * (itm.Quantity-ISNULL(ret.RetQuantity,0)) 'TotalAmount',
	itm.DiscountPercent,
	itm.ProviderId,
	itm.BillStatus,
	itm.RequisitionId,
	itm.RequisitionDate,
	itm.RequestedBy,
	itm.PatientVisitId,
	itm.BillingPackageId,
	itm.CreatedBy,
	itm.CreatedOn,
	itm.BillingType,
	itm.RequestingDeptId,
	itm.VisitType,
	itm.PriceCategory,
	itm.PatientInsurancePackageId,
	itm.IsInsurance,
	itm.DiscountSchemeId,
	itm.LabTypeName,
	itm.OrderStatus

from BIL_TXN_BillingTransactionItems itm
  LEFT JOIN ( Select BillingTransactionItemId, SUM(RetQuantity) 'RetQuantity' 
	  from  BIL_TXN_InvoiceReturnItems 
	  group by BillingTransactionItemId
	  ) ret

 ON itm.BillingTransactionItemId=ret.BillingTransactionItemId
Where itm.BillingTransactionId=@BillTxnId
AND (itm.Quantity-ISNULL(ret.RetQuantity,0)) > 0  --RemainingQty more than Zero

 
 -Table:4--Already returned Invoice Items---
 
Select crNote.BillReturnId,
  crNote.CreatedOn 'CreditNoteDate',
 crNote.CreditNoteNumber,
 crNote.FiscalYearId,
 fy.FiscalYearFormatted+'-CR-'+Convert(varchar(20),crNote.CreditNoteNumber) 'CreditNoteNumFormatted',

 retItm.BillingTransactionItemId,
 retItm.BillingTransactionId,
 retItm.ServiceDepartmentId,
 retItm.ItemId,
 retItm.ItemName,
 retItm.RetQuantity,
 retItm.RetSubTotal,
 retItm.RetDiscountAmount,
 retItm.RetTotalAmount

from BIL_TXN_InvoiceReturnItems retItm INNER JOIN BIL_TXN_InvoiceReturn crNote
   ON retItm.BillReturnId=crNote.BillReturnId
 INNER JOIN BIL_CFG_FiscalYears fy
 on crNote.FiscalYearId = fy.FiscalYearId
Where retItm.BillingTransactionId = @BillTxnId


END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetInvoiceDetailsForPrint]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_BIL_GetInvoiceDetailsForPrint]
   @InvoiceNumber INT, 
   @FiscalYearId INT,
   @BillingTxnIdInput INT=NULL
AS
/*
FileName: SP_BIL_GetInvoiceDetailsForPrint
-SP_BIL_GetInvoiceDetailsForPrint 676, 4
Description: 
 * To get PatientInformation, InvoiceInformation, InvoiceItemsInformation, 
  VisitInformation and Deposit Lists for Duplicate Print of all types of Invoices 
  generated from billing [Normal Billing, InsuranceBilling, IP/OP, all..]
 * Returns Five tables
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Sud/18May'21                        Initial Draft
2.      Sud/15Sep'21                        New input parameter BillingTxnId is also passed, 
                                            There are duplicate FiscalYear+InvoiceNumber Combinations in big hospitals having many counters..
											BillingTxnId is unique, so we'll pass that from Client>Server>DB so that we'll get only one record.
3.    Sud/20Dec'21              Added With(Nolock) so that this thread doesn't wait to complete other transaction.
                                Nolock added only in the transaction tables, not required in Master/configuration tables.
4.    Pratik/27Dec'2021          Added price category in item select (Used to show in invoice print)
5.    Dev /30Jan' 2022           Added Municipality Name in patient info section.
---------------------------------------------------------------------------------------
*/
BEGIN
-Declare Local Variables to be used further--- 
 Declare @PatientId INT, @PatientVisitId INT, @BillTxnId INT

-Check directly by BillingTxnId if it's supplied from Client side--
-Else check by FiscalYearId+InvoiceNumber
IF (ISNULL(@BillingTxnIdInput,0)!=0)
BEGIN
	-Assign values to all the local variables--- 
	Select @PatientId=PatientId, @BillTxnId=BillingTransactionId, @PatientVisitId=PatientVisitId
	from BIL_TXN_BillingTransaction with(nolock)
	Where BillingTransactionId=@BillingTxnIdInput
END
ELSE
BEGIN
	-Assign values to all the local variables--- 
	Select @PatientId=PatientId, @BillTxnId=BillingTransactionId, @PatientVisitId=PatientVisitId
	from BIL_TXN_BillingTransaction with(nolock)
	Where FiscalYearId=@FiscalYearId and InvoiceNo=@InvoiceNumber
END


Table:1--Patient Information-----
select PatientId, PatientCode, ShortName, Gender, DateOfBirth, Age,
		pat.CountryId, 
		cont.CountryName,
		pat.CountrySubDivisionId,
		dist.CountrySubDivisionName,
		pat.Address,
		munc.MunicipalityName,
		pat.PhoneNumber,
		pat.MembershipTypeId,
		memb.MembershipTypeName,
		PANNumber,
		PatientNameLocal,
		Ins_NshiNumber 
from PAT_Patient  pat with(nolock) INNER JOIN MST_CountrySubDivision dist
                         ON pat.CountrySubDivisionId=dist.CountrySubDivisionId
                     INNER JOIN MST_Country cont 
					     ON dist.CountryId=cont.CountryId
                     INNER JOIN PAT_CFG_MembershipType memb
					     ON pat.MembershipTypeId=memb.MembershipTypeId
				     left JOIN MST_Municipality munc
					      ON pat.MunicipalityId = munc.MunicipalityId
Where PatientId=@PatientId

Table:2--Invoice Information-----
Select  txn.InvoiceNo 'InvoiceNumber',
        txn.InvoiceCode,
        fy.FiscalYearFormatted+'-'+  txn.InvoiceCode+Convert(Varchar(20),txn.InvoiceNo) AS 'InvoiceNumFormatted',
		txn.CreatedOn 'TransactionDate',
		txn.FiscalYearId,
		fy.FiscalYearFormatted AS FiscalYear,
		txn.PaymentMode,
		txn.BillStatus,
		txn.TransactionType,
		txn.InvoiceType,
		ISNULL(txn.PrintCount,0) 'PrintCount',
		txn.SubTotal,
		txn.DiscountAmount,
		txn.TaxableAmount,
		txn.NonTaxableAmount,
		txn.TotalAmount,
        txn.BillingTransactionId,
		txn.PaidDate AS 'PaidDate',	
		txn.Tender,
		txn.Change,
		txn.Remarks,
		ISNULL(txn.IsInsuranceBilling,0) AS 'IsInsuranceBilling',
		txn.ClaimCode,
		txn.OrganizationId 'CrOrganizationId',
		crOrg.OrganizationName 'CrOrganizationName',
		usr.UserName,
		cntr.CounterId,
		cntr.CounterName,
		txn.LabTypeName,
		txn.PackageId, 
		pkg.BillingPackageName AS 'PackageName',
		ISNULL(txn.DepositAvailable,0) AS 'DepositAvailable',
		ISNULL(txn.DepositUsed,0) AS 'DepositUsed',
		ISNULL(txn.DepositReturnAmount,0) AS 'DepositReturnAmount',
		ISNULL(txn.DepositBalance,0) AS 'DepositBalance'
from BIL_TXN_BillingTransaction txn with(nolock)
inner join BIL_CFG_FiscalYears fy
     ON txn.FiscalYearId = fy.FiscalYearId
INNER JOIN RBAC_User usr
    ON txn.CreatedBy = usr.EmployeeId

 INNER JOIN BIL_CFG_Counter cntr
  ON txn.CounterId=cntr.CounterId

left join BIL_MST_Credit_Organization crOrg 
    ON txn.OrganizationId = crOrg.OrganizationId
LEFT JOIN BIL_CFG_Packages pkg
 on txn.PackageId = pkg.BillingPackageId
WHERE BillingTransactionId = @BillTxnId

Table:3--InvoiceItems Information-----
Select 
BillingTransactionItemId, ServiceDepartmentId, ItemId,
ServiceDepartmentName, ItemName, Price, Quantity, SubTotal, DiscountAmount, TotalAmount,
ProviderId, ProviderName, item.RequestedBy, CASE WHEN item.RequestedBy IS NULL THEN '' ELSE emp.FullName END as RequestedByName,
item.PriceCategory
from BIL_TXN_BillingTransactionItems item with(nolock)
left join EMP_Employee emp on item.RequestedBy = emp.EmployeeId
Where BillingTransactionId = @BillTxnId

Table:4--Visit Information-----
Select vis.PatientVisitId,
	vis.VisitCode,
	vis.ProviderId as ConsultingDoctorId,
	vis.ProviderName as ConsultingDoctor,
	adm.AdmissionDate,
	adm.DischargeDate,
	bedInfo.WardName,
	bedInfo.BedNumber,
	bedInfo.BedCode

from PAT_PatientVisits vis with(nolock)
   left join ADT_PatientAdmission adm with(nolock)
        on vis.PatientVisitId=adm.PatientVisitId
   left join (
				 Select top (1)  bi.PatientVisitId, ward.WardName, bed.BedNumber, bed.BedCode
				 from ADT_TXN_PatientBedInfo  bi with(nolock)
				 INNER JOIN ADT_MST_Ward ward 
				   on bi.WardId=ward.WardID
				 INNER JOIN ADT_Bed bed 
				   on bi.BedId=bed.BedID
				 where PatientVisitId=@PatientVisitId
				 order by PatientBedInfoId desc
		 )bedInfo  on vis.PatientVisitId = bedInfo.PatientVisitId

where vis.PatientVisitId = @PatientVisitId

Table:5--Deposits List -----
Select 
  dep.DepositId, dep.ReceiptNo, fy.FiscalYearFormatted,
  fy.FiscalYearFormatted+'-DR'+CONVERT(varchar(20),ReceiptNo) 'DepositReceiptNoFormattted',
  dep.DepositType, dep.Amount, dep.CreatedOn, usr.UserName
  2077/2078 - 49
from BIL_TXN_Deposit dep with(nolock)
 INNER JOIN BIL_CFG_FiscalYears fy on dep.FiscalYearId=fy.FiscalYearId
 INNER JOIN RBAC_User usr on dep.CreatedBy = usr.EmployeeId

where PatientVisitId=@PatientVisitId
END
--------END : Dev, 30 Jan, 2022 : Alter procedure to get municipality Name in patient info section ------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetItems_ForIPBillingReceipt]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[SP_BIL_GetItems_ForIPBillingReceipt]  
  @PatientId INT,  
  @BillTxnId INT=NULL,
  @BillStatus Varchar(50) = NULL
AS
/*
FileName: [SP_BIL_GetItems_ForIPBillingReceipt]
CreatedBy/date: sud/14Sept'18
Description: 
Remarks:  Need to handle provisional etc carefully, else number of items could be more.. 
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1       sud/14Sept'18            Initial draft
2       sud/13Mar'19             Adding Salutation in DoctorName
3		Nagesh/04 June 2019  	 Getting correct bed quantity for estimated bill of adt patient
4		Nagesh/15 Aug 2019		Get quantity if manually added any bed charges item
-----------------------------------------------------------------------------
*/

BEGIN
;with a as(
Select Convert(DATE, itm.CreatedOn) 'BillDate',dbo.[FN_BIL_GetSrvDeptFormattedName_ForBillingReceipts](ServiceDepartmentName,ItemName) 'ItemGroupName',
	   itm.ItemName, emp.EmployeeId 'DoctorId',IsNull(emp.Salutation+'. ','')+  emp.FirstName+ ISNULL(' '+emp.MiddleName, '')+' ' + emp.LastName 'DoctorName',itm.Price,
	    case when (@BillTxnId >0 or itm.ModifiedOn is not null ) 
		then itm.Quantity 
		else 
		case WHEN ((select ParameterValue from CORE_CFG_Parameters where ParameterGroupName='ADT' and ParameterName='Bed_Charges_SevDeptId')= itm.ServiceDepartmentId  and (select count(*) from ADT_TXN_PatientBedInfo pbi where pbi.PatientId=@PatientId and pbi.PatientVisitId=itm.PatientVisitId and pbi.BedFeatureId=itm.ItemId) >0 )
		then  (SELECT Sum(Quantity)FROM (select ([dbo].[FN_Ip_Billing_Bed_Quantity_Calculation](pbi.StartedOn,pbi.EndedOn,adt.AdmissionDate)) as Quantity	   FROM      ADT_TXN_PatientBedInfo pbi join ADT_PatientAdmission adt on pbi.PatientVisitId = adt.PatientVisitId 
		where pbi.PatientId=itm.PatientId and pbi.PatientVisitId=itm.PatientVisitId and  pbi.BedFeatureId=itm.ItemId) AS TOTALS)		   			
		else (itm.Quantity)  
		END		
	   end as Quantity	  
	    ,itm.SubTotal  
	    ,itm.DiscountAmount
	    ,itm.Tax 
		,itm.TotalAmount
	  ,itm.ServiceDepartmentId, itm.ItemId
	  ,case when (itm.ModifiedOn is not null) then 
	    1 else 0 end as IsEdited		   
	FROM BIL_TXN_BillingTransactionItems itm
	left join EMP_Employee emp on itm.ProviderId = emp.EmployeeId
	WHERE PatientId=@PatientId 
	  AND ISNULL(itm.BillingTransactionId,0) =  ISNULL(@BillTxnId, ISNULL(itm.BillingTransactionId,0))
	  AND itm.BillStatus= ISNULL(@BillStatus,itm.BillStatus) --AND Quantity >0
	  ) select BillDate,ItemGroupName, ItemName,DoctorId,DoctorName,Price,Quantity, Price*Quantity as SubTotal, DiscountAmount,Tax,((Price * Quantity - DiscountAmount)+Tax)as TotalAmount,ServiceDepartmentId,ItemId ,IsEdited from a
END
GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetPatientPastBills]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BIL_GetPatientPastBills]  --- SP_BIL_GetPatientPastBills 77235, 15
		
		@PatientId INT=null,
		@maxPastDays INT=null
AS
/*
FileName: SP_BIL_GetPatientPastBills
CreatedBy/date: Sud/Anish/2019-06-19
Description: Get patient's Billing Items of Last N days, Exclude Cancelled Items. 
Used in Billing Transaction page (for Checkbox)

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Sud/Anish/19June'19                     Created.
2.      pratik/Sud: 17 April'20                  Added ItemId and ServiceDepartmentId in select, 
                                               excluded returned items, correction in username(now taking from emp.FullName 
3.      Dev Narayan /1 Oct'21                   Alter procedure so that it will not show the returned bills.
---------------------------------------------------------------------------------------------------------------------------
*/
BEGIN

IF( @maxPastDays IS NULL)
   SET @maxPastDays=7 -- we're taking past 7 days entry for now..

  SELECT 
	itm.CreatedOn,
	txn.InvoiceCode + COnvert(varchar(20), txn.InvoiceNo) 'InvoiceNumber',
	itm.ItemId,
	itm.ServiceDepartmentId,
    itm.ServiceDepartmentName,
	itm.ItemName,
	itm.TotalAmount,
	itm.BillStatus,
	emp.FirstName 'UserFirstName',
	emp.FullName 'User'
  FROM BIL_TXN_BillingTransactionItems itm 
	left join BIL_TXN_BillingTransaction txn
    ON itm.BillingTransactionId=txn.BillingTransactionId
    Join EMP_Employee emp 
    ON itm.CreatedBy=emp.EmployeeId
   WHERE  itm.PatientId=@PatientId
	and itm.BillStatus !='cancel'
	and itm.Quantity!=ISNULL((select sum(RetQuantity) from BIL_TXN_InvoiceReturnItems where BillingTransactionItemId = itm.BillingTransactionItemId),0)
	 and  DATEDIFF(DAY,itm.CreatedOn,getdate())  <= @maxPastDays
  Order by itm.CreatedOn DESC
END -- end of SP

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetSettlementDetailReportOfPatient]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BIL_GetSettlementDetailReportOfPatient] @FromDate Date , @ToDate Date , @PatientId int = 0
AS
/*
FileName: [SP_BIL_GetSettlementDetailReportOfPatient]
CreatedBy/date: KRISHNA/2021-11-23
Description: To get the credit settlement Detail View.
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.		Krishna/2021-11-23						created SP to get the credit settlement View Detail
---------------------------------------------------------------------------------------
*/
BEGIN
PATIENT INFORMATION--
SELECT PatientId,
		ShortName 'PatientName',
		PatientCode 'HospitalNo',
		Gender,
		DateOfBirth
from PAT_Patient 
WHERE PatientId = @PatientId

COLLECTION FROM RECEIVABLE--
SELECT 
	sett.PatientId, 
	CONVERT(DATE,sett.SettlementDate) 'SettlementDate',
	sett.SettlementReceiptNo,
	txn.InvoiceNo,
	txn.InvoiceCode,
	CONVERT(DATE,txn.CreatedOn) 'InvoiceDate',
	ISNULL(txn.TotalAmount,0) 'SalesAmount',
	ISNULL(ret.RetTotalAmount,0) 'ReturnTotalAmount',
	ISNULL(txn.TotalAmount,0) - ISNULL(ret.RetTotalAmount,0) 'Receivable',
	ISNULL(sett.DiscountAmount,0) 'CashDiscount'

FROM BIL_TXN_Settlements sett INNER JOIN PAT_Patient pat
	ON sett.PatientId = pat.PatientId
	left join BIL_TXN_BillingTransaction txn ON sett.SettlementId = txn.SettlementId
	left join 
			(SELECT SettlementId, BillingTransactionId, 
			SUM(ISNULL(TotalAmount,0)) 'RetTotalAmount'
			FROM BIL_TXN_InvoiceReturn 
			WHERE SettlementId Is Not Null
			where PatientId = @PatientId
			GROUP BY SettlementId , BillingTransactionId) ret
			ON sett.SettlementId = ret.SettlementId and txn.BillingTransactionId = ret.BillingTransactionId
WHERE CONVERT(DATE,sett.CreatedOn) Between @FromDate and @ToDate and sett.PatientId = @PatientId
		and ISNULL(sett.CollectionFromReceivable,0) != 0 -- need only settlement

RETURN TO RECEIVABLE--
SELECT 
	sett.SettlementReceiptNo, 
	CONVERT(DATE, sett.CreatedOn) 'SettlementDate',
	ret.CreditNoteNumber,
	CONVERT(DATE, ret.CreatedOn) 'ReturnDate',
	ISNULL(ret.TotalAmount,0) 'ReturnTotalAmount',
	ret.RefInvoiceNum,
	ret.InvoiceCode,
	sett.DiscountReturnAmount
FROM BIL_TXN_Settlements sett inner join
BIL_TXN_InvoiceReturn ret ON sett.SettlementId = ret.SettlementId
WHERE CONVERT(DATE,sett.CreatedOn) Between @FromDate and @ToDate and sett.PatientId = @PatientId
	and LOWER(ret.BillStatus) = 'paid' -- need only returns done after settlement

GET CASH DISCOUNT--
SELECT SUM(ISNULL(DiscountAmount,0)) 'CashDiscount' FROM BIL_TXN_Settlements 
WHERE CONVERT(DATE,CreatedOn) Between @FromDate and @ToDate and PatientId = @PatientId
		and ISNULL(CollectionFromReceivable,0) != 0

END



GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_GetSettlementSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BIL_GetSettlementSummaryReport] @FromDate DATE, @ToDate DATE
AS
/*
FileName: [SP_BIL_GetSettlementSummaryReport]
CreatedBy/date: KRISHNA/2021-11-22
Description: To get the credit settlement summary.
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.		Krishna/2021-11-22						created SP to get the credit settlement summary
---------------------------------------------------------------------------------------
*/
BEGIN

SELECT 
	sett.PatientId, 
	pat.ShortName AS 'PatientName', 
	pat.PatientCode AS 'HospitalNo',
	pat.Gender,
	pat.PhoneNumber AS 'ContactNo',
	pat.DateOfBirth,
	SUM(ISNULL(CollectionFromReceivable,0)) 'CollnFromReceivable',
	SUM(ISNULL(DiscountAmount,0)) 'CashDiscountGiven',
	SUM(ISNULL(DiscountReturnAmount,0)) 'CashDiscReturn'
FROM BIL_TXN_Settlements sett INNER JOIN PAT_Patient pat
	ON sett.PatientId = pat.PatientId
WHERE CONVERT(Date,sett.CreatedOn) Between @FromDate and @ToDate
	GROUP BY sett.PatientId,pat.ShortName, pat.PatientCode,
			pat.Gender,pat.PhoneNumber, pat.DateOfBirth
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_RPT_GetDepositTransations]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[SP_BIL_RPT_GetDepositTransations]
	@FromDate Date=NULL, 
	@ToDate Date=NULL, 
	@PatSearchText varchar(100)=null,
	@employeeId INT=null
AS
/*
 File: SP_BIL_RPT_GetDepositTransations
 CreatedBy: Sud/10Sep'21
 Description: To get the details of deposit in a given date range for given patient(optional), for given user(optional)
 Remarks: 
   If Single patient's data is required then Pass the patientid, else pass NULL or ZERO
   if single User's data is required then pass the UserId (EmployeeId) else pas NULL/Zero.

 Example: SP_BIL_RPT_GetDepositTransations '2021-06-15','2021-09-10','ram',NULL

Change History:
-------------------------------------------------------------------------------
SN   User/Date                                Remarks
-------------------------------------------------------------------------------
1.   Sud/10Sep'21                              Created
-------------------------------------------------------------------------------
*/
BEGIN
  -get all necessary data from the function----
  Select 
	    DepositDate, ReceiptNo, 
	  PatientId, PatientCode, PatientName, DateOfBirth, Gender, PhoneNumber, 
	  DepositReceived,  DepositDeducted,  DepositReturned, 
	  UserName, CounterName, Remarks 
  from FN_RPT_BIL_GetDepositTransationsInDatRange (@FromDate,@ToDate,@PatSearchText,@employeeId)
  order by DepositId
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_Settlement_GetBillAndReturnItemsOfInvoiceForPreview]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BIL_Settlement_GetBillAndReturnItemsOfInvoiceForPreview] 
		@BillingTransactionId INT = 0
		
AS
/*
FileName: [SP_BIL_Settlement_GetBillAndReturnItemsOfInvoiceForPreview]
CreatedBy/date: Sud/2021-11-18
Description: Gets InvoiceInfo, CreditNote Info, InvoiceItems and CreditNoteItems for Preview in settlement page. 
Notes      : We're returning 4 tables with individual informations, these will be filtered in Client side as required.
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.		Sud/2021-11-18   					  Initial Draft
---------------------------------------------------------------------------------------
*/
BEGIN

	-Table:1--Get 'Invoice' Information---
	select txn.InvoiceNo,txn.InvoiceCode, CONVERT(Date,txn.CreatedOn) 'InvoiceDate',
		 txn.SubTotal, txn.DiscountAmount, txn.TotalAmount
		from BIL_TXN_BillingTransaction txn
	where txn.BillingTransactionId = @BillingTransactionId

	-Table:2--Get 'InvoiceItems' Information---
	select txnItm.ItemId, txnItm.ItemName, txnItm.Quantity, txnItm.Price,
	   txnItm.SubTotal,txnItm.DiscountAmount,txnItm.TotalAmount
		from BIL_TXN_BillingTransactionItems txnItm 
	where txnItm.BillingTransactionId = @BillingTransactionId

	-Table:3--Get 'Credit Note' Information---
	select BillReturnId, CreditNoteNumber, CONVERT(date,CreatedOn) 'ReturnDate' 
	from  BIL_TXN_InvoiceReturn 
	where BillingTransactionId = @BillingTransactionId

	-Table:4--Get 'Credit Note Items' Information---
	select BillReturnId, ItemId, ItemName, RetQuantity, Price, RetSubTotal, RetDiscountAmount, RetTotalAmount
	from BIL_TXN_InvoiceReturnItems 
	where BillingTransactionId = @BillingTransactionId
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_TXN_GetHandoverCalculationDateWise]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-End--Sud: 17Feb'20---For Incentive Load and Incentive From Invoice Level---	

-Start--Pratik: 17Feb'20---for Handover--

Create PRocedure [dbo].[SP_BIL_TXN_GetHandoverCalculationDateWise] --EXEC SP_BIL_TXN_GetHandoverCalculationDateWise '2020-02-16','2020-02-16'
(@FromDate DATE, @ToDate DATE)
AS
/*
 File: SP_BIL_TXN_GetHandoverCalculationDateWise
 Details: To get total handover given amount and received amount by user on particular date range.
 Change History:
 ---------------------------------------
 S.No.   Date/Author           Remarks
 -------------------------------------
 1.      16Feb'20/Sud          Initial Draft (Needs Revision)
 -------------------------------------
*/
BEGIN

Select EmployeeId, HandOverDate, SUM(GivenAmount) 'GivenAmount', SUM(ReceivedAmount) 'ReceivedAmount'
FROM

(
 Select EmployeeID, HandoverDate 
, Case WHEN HandOverType='HandoverGiven' THEN HandoverAmount
   ELSE 0 END AS GivenAmount
,  Case WHEN HandOverType='HandoverReceived' THEN HandoverAmount
   ELSE 0 END AS ReceivedAmount

From 
(
SELECT 'HandoverGiven' AS 'HandOverType', Convert(Date,CreatedOn) 'HandoverDate', UserId 'EmployeeID', SUM(HandoverAmount) 'HandoverAmount'
FROM BIL_MST_Handover
Group By Convert(Date,CreatedOn),UserId 
UNION ALL
SELECT 'HandoverReceived' AS 'HandOverType', Convert(Date,CreatedOn) 'HandoverDate', HandoverUserId 'EmployeeID', SUM(HandoverAmount) 'HandoverAmount'
FROM BIL_MST_Handover
Group By Convert(Date,CreatedOn),HandoverUserId 
) b
Where HandoverAmount !=0
 AND HandoverDate BETWEEN Convert(Date,@FromDate) and Convert(Date,@ToDate)

) overall

Group By EmployeeId, HandOverDate

Order by HandoverDate, EmployeeID

END
GO
/****** Object:  StoredProcedure [dbo].[SP_BIL_Update_Duplicate_Invoice_If_Exists]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <15 July, 2021>
 Description:	<Temporary Solution to handle Issue of same Invoice Number by Checking for Duplication and Updating after Transaction is Committed>
 =============================================
CREATE PROCEDURE [dbo].[SP_BIL_Update_Duplicate_Invoice_If_Exists]
	@fiscalYearId INT,
	@billingTransactionId INT,
	@invoiceNumber INT
AS
BEGIN
 EXEC('DISABLE TRIGGER TRG_BillingTransaction_RestrictBillAlter ON BIL_TXN_BillingTransaction');  
   
If  Exists then this means Duplication has occurred
	IF(EXISTS(SELECT * FROM BIL_TXN_BillingTransaction WHERE (BillingTransactionId != @billingTransactionId) AND (InvoiceNo = @invoiceNumber) AND (FiscalYearId = @fiscalYearId))) 
		BEGIN
			DECLARE @latestInvoiceNumber INT
			Get the latest Invoice Number of that Fiscal Year and Update in the Invoice Number of that Bill_Transaction and Deposit Remarks
			SET @latestInvoiceNumber = (SELECT MAX(InvoiceNo)+1 FROM BIL_TXN_BillingTransaction WHERE FiscalYearId=@fiscalYearId)
			UPDATE BIL_TXN_BillingTransaction SET InvoiceNo=@latestInvoiceNumber WHERE BillingTransactionId = @billingTransactionId
			UPDATE BIL_TXN_Deposit SET Remarks=REPLACE(Remarks,@invoiceNumber,@latestInvoiceNumber) WHERE BillingTransactionId = @billingTransactionId
			SELECT @latestInvoiceNumber as LatestInvoiceNumber
		END
	ELSE
		BEGIN 
			SELECT @invoiceNumber as LatestInvoiceNumber
		END

EXEC('ENABLE TRIGGER TRG_BillingTransaction_RestrictBillAlter ON BIL_TXN_BillingTransaction');
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BILL_GetServiceDepartmentsName]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_BILL_GetServiceDepartmentsName]
/*
 File: SP_BILL_GetServiceDepartmentsName Created: Ramavtar/2018-09-09
 Description: to get service-departments name for reporting 
 (it gets all the service department names as require in reporting)
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.       Ramavtar/11Sep'18                        Initial Draft
 -----------------------------------------------------------------------------
*/
AS
BEGIN
	SELECT DISTINCT
		[dbo].[FN_BIL_GetSrvDeptReportingName](ServiceDepartmentName, ItemName) 'ServiceDepartmentName'
	FROM [dbo].[VW_BIL_TxnItemsInfoWithDateSeparation]
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Bill_OrderStatusUpdate]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <7 Aug, 2020>
 Description:	<Update the OrderStatus of BillTxnItem table>
 =============================================
CREATE PROCEDURE [dbo].[SP_Bill_OrderStatusUpdate] 
(
	@allReqIds nvarchar(max),
	@status varchar(20)
)
	
AS
BEGIN

	Update BIL_TXN_BillingTransactionItems set OrderStatus=@status where BillingTransactionItemId IN (
	(select txnItem.BillingTransactionItemId from (select * from LAB_TestRequisition where RequisitionId IN (SELECT value FROM string_split(@allReqIds,','))) as req 
	join BIL_TXN_BillingTransactionItems as txnItem on req.RequisitionId = txnItem.RequisitionId
	join BIL_MST_ServiceDepartment as srv on txnItem.ServiceDepartmentId = srv.ServiceDepartmentId
	where srv.IntegrationName = 'lab' and ISNULL(txnItem.ReturnStatus,0)= 0 and  txnItem.CancelledBy IS NULL)
	);

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Bill_OrderStatusUpdate_Radiology]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <10 Aug, 2020>
 Description:	<Update OrderStatus on BillTxnItems table on Radiology Actions>
 =============================================
CREATE PROCEDURE [dbo].[SP_Bill_OrderStatusUpdate_Radiology] 
(
	@reqID INT,
	@status VARCHAR(20)
)
AS
BEGIN
	Update BIL_TXN_BillingTransactionItems set OrderStatus=@status where BillingTransactionItemId IN (
	(select txnItem.BillingTransactionItemId from (select * from RAD_PatientImagingRequisition 
	where ImagingRequisitionId = @reqID) as req 
	join BIL_TXN_BillingTransactionItems as txnItem on req.ImagingRequisitionId = txnItem.RequisitionId
	join BIL_MST_ServiceDepartment as srv on txnItem.ServiceDepartmentId = srv.ServiceDepartmentId
	where LOWER(srv.IntegrationName) = 'radiology' and ISNULL(txnItem.ReturnStatus,0)= 0 and  txnItem.CancelledBy IS NULL)
	);
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Billing_IpdPatientsListWithVisitinformation]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_Billing_IpdPatientsListWithVisitinformation]
   @SearchTxt varchar(200) = ''
AS

/*
 FileName: [SP_Billing_IpdPatientsListWithVisitinformation] 'arjun'
 Created: 20Feb'21/Sud
 Description: To Search for IPD Patients with PatientName or VisitCode.
 Remarks: We need to reuse this stored procedure also for other pages.. right now used only for billing.
 ---------------------------------------------------------------------------------------
 Change History
 ---------------------------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 ---------------------------------------------------------------------------------------
 1.	     20Feb'21/Sud		                   inital draft
 2.		 27April'21/Anjana					IPD Search using patientcode 
											of discharged cancelled patient
 3.		 5 May,'21/Anjana					Fixed issue of showing all patient in search
 4.		20July21, Sanjit/Sud				Show outdoor patient in billing as well since it is seen in ADT Search Patient --SNCH 20July21
 5.     Sud:9Sep'21                         Handle Search by PatientCode (Hospital Number as well)
                                           needed since IPD-Patient many times give the cards with hospital number only, 
										   so its necessary to search by HospNumber as well.
 ---------------------------------------------------------------------------------------
*/
BEGIN	   

Select 
	pat.PatientId,
	pat.PatientCode,
	pat.ShortName,
	pat.FirstName,
	pat.LastName,
	pat.MiddleName,
	pat.Age,
	cntry.CountryName,
	pat.Gender,
	pat.PhoneNumber,
	pat.DateOfBirth,
	pat.Address,
	pat.IsOutdoorPat,
	pat.CreatedOn,
	pat.CountryId,
	pat.CountrySubDivisionId,
	sub.CountrySubDivisionName,
	ISNULL(pat.MembershipTypeId,4) as MembershipTypeId,
	ISNULL(memb.MembershipTypeName, 'General') as MembershipTypeName, -- fix it later
	ISNULL(memb.DiscountPercent,0) 'MembershipDiscountPercent',
	pat.PANNumber,
	pat.BloodGroup,
	pat.DialysisCode,
	case when adm.PatientId is not null then 1
		 else 0 END as IsAdmitted,
    adm.WardName, adm.BedCode, adm.BedNumber,adm.VisitCode,adm.PatientVisitId,
	case when ins.PatientId is not null then ins.CurrentBalance
			else 0 END as Insurance

from 
    (
		 select adm.PatientId, adm.PatientVisitId,visit.VisitCode,
		   ward.WardName, bed.BedCode, bed.BedNumber, bedInfo.StartedOn 
		 from ADT_PatientAdmission adm
		 inner join (select * from PAT_PatientVisits) visit
			on  adm.PatientVisitId= visit.PatientVisitId
		 inner join (Select * from ADT_TXN_PatientBedInfo 
					where IsActive=1 and OutAction is null) bedInfo
		   ON adm.PatientVisitId=bedInfo.PatientVisitId
		     INNER JOIN ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
		   inner join ADT_Bed bed on bedInfo.BedId = bed.BedID
		      Where adm.AdmissionStatus='admitted'
	)adm

	INNER JOIN 

  PAT_Patient pat   on pat.PatientId=adm.PatientId
 INNER JOIN  MST_Country cntry on pat.CountryId=cntry.CountryId
 inner join MST_CountrySubDivision sub
    on pat.CountrySubDivisionId=sub.CountrySubDivisionId

  left join PAT_CFG_MembershipType memb on pat.MembershipTypeId=memb.MembershipTypeId

  Left join (
    Select patIns.PatientId, patins.CurrentBalance
	 from PAT_PatientInsuranceInfo patIns INNER JOIN INS_CFG_InsuranceProviders insProv
	on patIns.InsuranceProviderId = insProv.InsuranceProviderId
	Where insProv.InsuranceProviderName='Government Insurance'

   ) ins on pat.PatientId = ins.PatientId

 WHERE --ISNULL(pat.IsOutdoorPat,0) = 0 and    --Sanjit/Sud Show outdoor patient in billing as well since it is seen in ADT Search Patient --SNCH 20July21
 pat.IsActive=1 and 
 (pat.ShortName like '%' + ISNULL(@SearchTxt,'') +'%' 
    or adm.VisitCode like '%' + ISNULL(@SearchTxt,'') + '%'
	or pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%')
 
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Billing_PatientsListWithVisitinformation]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Billing_PatientsListWithVisitinformation] 
@SearchTxt varchar(200) = ''

AS

/*
 FileName: [SP_Billing_PatientsListWithVisitinformation] 
 Created: 29th Jan 2021/pratik
 Description: To Get the Patients list with Visit information
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.       29Jan2021/pratik                    inital draft
 2.      26Jul'21/Ramesh                      IsOutdoorPat is also shown in Billing/ADT
 3.      8Aug'21/Anish                        Getting Latest VisitId and Code for OP-Billing 
 4.      22Dec'21/Sud                         Added top(200) 
 -----------------------------------------------------------------------
*/
BEGIN  

declare @showHideIpParam varchar(10);
declare @showHideIPIndicator bit;
set @showHideIpParam = (select ParameterValue from CORE_CFG_Parameters where ParameterName='ShowIPInSearchPatient');
set @showHideIPIndicator = (SELECT CASE WHEN LOWER(@showHideIpParam)='true' OR @showHideIpParam='1' THEN 1 ELSE 0 END);

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

  Select Top(200)
  pat.PatientId,
  pat.PatientCode,
  pat.ShortName,
  pat.FirstName,
  pat.LastName,
  pat.MiddleName,
  pat.Age,
  cntry.CountryName,
  pat.Gender,
  pat.PhoneNumber,
  pat.DateOfBirth,
  pat.Address,
  pat.IsOutdoorPat,
  pat.CreatedOn,
  pat.CountryId,
  pat.CountrySubDivisionId,
  sub.CountrySubDivisionName,
  pat.MembershipTypeId,
  memb.MembershipTypeName,
  memb.DiscountPercent 'MembershipDiscountPercent',
  pat.PANNumber,
  pat.BloodGroup,
  pat.DialysisCode,
  case when adm.PatientId is not null then 1
     else 0 END as IsAdmitted,
    adm.WardName, adm.BedCode, adm.BedNumber,
  isnull(adm.VisitCode,latestVisit.VisitCode) AS VisitCode,
  isnull(adm.PatientVisitId,latestVisit.PatientVisitId) AS  PatientVisitId,  
  case when ins.PatientId is not null then ins.CurrentBalance
      else 0 END as Insurance

from PAT_Patient pat
 INNER JOIN  MST_Country cntry on pat.CountryId=cntry.CountryId
 inner join MST_CountrySubDivision sub
    on pat.CountrySubDivisionId=sub.CountrySubDivisionId
  inner join PAT_CFG_MembershipType memb on pat.MembershipTypeId=memb.MembershipTypeId
  Left join (
     select adm.PatientId, adm.PatientVisitId,visit.VisitCode,
       ward.WardName, bed.BedCode, bed.BedNumber, bedInfo.StartedOn 
     from ADT_PatientAdmission adm
     inner join  PAT_PatientVisits visit
      on  adm.PatientVisitId= visit.PatientVisitId
     inner join (Select * from ADT_TXN_PatientBedInfo 
          where IsActive=1 and OutAction is null) bedInfo
       ON adm.PatientVisitId=bedInfo.PatientVisitId
         INNER JOIN ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
       inner join ADT_Bed bed on bedInfo.BedId = bed.BedID
          Where adm.AdmissionStatus='admitted'
  )adm on pat.PatientId=adm.PatientId
  Left join (
    Select patIns.PatientId, patins.CurrentBalance
   from PAT_PatientInsuranceInfo patIns INNER JOIN INS_CFG_InsuranceProviders insProv
  on patIns.InsuranceProviderId = insProv.InsuranceProviderId
  Where insProv.InsuranceProviderName='Government Insurance'
   ) ins on pat.PatientId = ins.PatientId

   Left Join(
    Select PatientId, PatientVisitId, VisitCode
      from 
      (
      SELECT 
         ROW_NUMBER() OVER (
        PARTITION BY patientid
        ORDER BY patientvisitid desc
         ) row_num,
         PatientId, PatientVisitId,VisitCode

      FROM 
         PAT_PatientVisits
      ) A
      where row_num=1
   ) latestVisit on pat.PatientId=latestVisit.PatientId
where pat.IsActive=1 
and 
((adm.PatientId IS NULL) OR (@showHideIPIndicator=1)) 
 and (pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%' 
       or pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%')
END

GO
/****** Object:  StoredProcedure [dbo].[SP_BillItemCancellation_From_Ward]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <12 August>
 Description:	<Cancellation of Bill Item>
 =============================================
CREATE PROCEDURE [dbo].[SP_BillItemCancellation_From_Ward]
(
	@BillingTransactionItemId int, 
	@RequisitionId int, 
	@IntegrationName varchar(50), 
	@UserId int, 
	@Remarks varchar(500)
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
	
		declare @CancelledOn DateTime;
		set @CancelledOn = GETDATE();
		select @CancelledOn;

		Update BIL_TXN_BillingTransactionItems
		set BillStatus='cancel', CancelledBy=@UserId,CancelledOn=@CancelledOn,CancelRemarks=@Remarks where BillingTransactionItemId=@BillingTransactionItemId

		IF(LOWER(@IntegrationName)='lab')
		BEGIN
			Update LAB_TestRequisition set BillingStatus='cancel', BillCancelledBy=@UserId, BillCancelledOn=@CancelledOn where RequisitionId=@RequisitionId
		END

		IF(LOWER(@IntegrationName)='radiology')
		BEGIN
			Update RAD_PatientImagingRequisition set BillingStatus='cancel', BillCancelledBy=@UserId, BillCancelledOn=@CancelledOn where ImagingRequisitionId=@RequisitionId
		END	

		COMMIT;

	END TRY

	BEGIN CATCH
		ROLLBACK;
	END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Danphe_Audit]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [dbo].[SP_Danphe_Audit]    Script Date: 28-01-2019 17:16:46 ******/

 CREATE PROCEDURE [dbo].[SP_Danphe_Audit]
  @FromDate datetime=null ,
		@ToDate datetime=null,
		@Table_Name varchar(100) = null,
		@UserName varchar(100)= null
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1.		Rajesh/23Jan'19			     Created 
2.      Rajesh/28Jan'19				 Updated    
--------------------------------------------------------
*/

IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL) or (@Table_Name IS NOT NULL) or (@UserName IS NOT NULL)
begin
SELECT *
FROM [DanpheAdmin].[dbo].[Fn_Danphe_Audit]() tbl1
    INNER JOIN [AuditTrail_DanpheEMR].[dbo].[RBAC_User] tbl2
	on tbl1.ChangedByUserName = tbl2.UserName
	WHERE (  
        CONVERT(DATE,tbl1.InsertedDate) BETWEEN CONVERT(DATE,@FromDate) 
     AND CONVERT(DATE,@ToDate) 
   and tbl1.Table_Name = @Table_Name and tbl2.UserName = @UserName ) 	        
end
GO
/****** Object:  StoredProcedure [dbo].[SP_Danphe_Audit_List]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [dbo].[SP_Danphe_Audit_List]    Script Date: 28-01-2019 17:52:57 ******/

CREATE PROCEDURE [dbo].[SP_Danphe_Audit_List]
AS

 /*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1.		Rajesh/28Jan'19			     Created 

--------------------------------------------------------
*/

begin
select  distinct Table_Name From dbo.[Fn_Danphe_Audit]() 
end
GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Emergency_DashboardStatistics]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_DSB_Emergency_DashboardStatistics]
AS
/*
=============================================================================================
FileName: [SP_DSB_Emergency_DashboardStatistics]
CreatedBy/date: ramavtar/2019-03-03
=============================================================================================
*/
BEGIN

Table1
	SELECT * FROM 
		(SELECT count(*) 'TotalRegisteredPatients' FROM ER_Patient WHERE CONVERT(DATE,CreatedOn) = CONVERT(DATE,GETDATE())) TotalRegistered,
		(SELECT count(*) 'TotalTriagedPatients' FROM ER_Patient WHERE CONVERT(DATE,TriagedOn) = CONVERT(DATE,GETDATE())) TotalTriaged,
		(SELECT count(*) 'MildPatients' FROM ER_Patient WHERE CONVERT(DATE,TriagedOn) = CONVERT(DATE,GETDATE()) AND TriageCode = 'mild') Mild,
		(SELECT count(*) 'ModeratePatients' FROM ER_Patient WHERE CONVERT(DATE,TriagedOn) = CONVERT(DATE,GETDATE()) AND TriageCode = 'moderate') Moderate,
		(SELECT count(*) 'CriticalPatients' FROM ER_Patient WHERE CONVERT(DATE,TriagedOn) = CONVERT(DATE,GETDATE()) AND TriageCode = 'critical') Critical,
		(SELECT count(*) 'TotalFinalizedPatients' FROM ER_Patient WHERE CONVERT(DATE, FinalizedOn) = CONVERT(DATE,GETDATE())) TotalFinalized,
		(SELECT count(*) 'LAMAPatients' FROM ER_Patient WHERE CONVERT(DATE, FinalizedOn) = CONVERT(DATE,GETDATE()) AND FinalizedStatus='lama') LAMA,
		(SELECT count(*) 'AdmittedPatients' FROM ER_Patient WHERE CONVERT(DATE, FinalizedOn) = CONVERT(DATE,GETDATE()) AND FinalizedStatus='admitted') Admitted,
		(SELECT count(*) 'DischargedPatients' FROM ER_Patient WHERE CONVERT(DATE, FinalizedOn) = CONVERT(DATE,GETDATE()) AND FinalizedStatus='discharged') Discharged,
		(SELECT count(*) 'TransferredPatients' FROM ER_Patient WHERE CONVERT(DATE, FinalizedOn) = CONVERT(DATE,GETDATE()) AND FinalizedStatus='transferred') Transferred,
		(SELECT count(*) 'DeathPatients' FROM ER_Patient WHERE CONVERT(DATE, FinalizedOn) = CONVERT(DATE,GETDATE()) AND FinalizedStatus='death') Death
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Home_DashboardStatistics]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_DSB_Home_DashboardStatistics]
AS
/*
FileName: [SP_DSB_Home_DashboardStatistisc]
CreatedBy/date: sudarshan/2017-07-09
Description: to get dashboard statistics of the home dashboards. these are used to fill labels.
Remarks:  
NOTE:  
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       sudarshan/2017-07-09	               created
2       sudarshan/2017-07-14	               update
3.      sudarshan/2017-08-16                   update: added types inside appointmentcount.
4.      sud/17Jan'19                           removed returned count from TOtal, Added Transfer count to New 
5.      Sud/4Feb'19                            Segregation of Doctors Count for Consultant, MO, Anaesthetists <need revision for TotalDoctors Count>
------------------------------------------------------
*/
BEGIN
	Rules:-- 
	/*
	 1. Search Criteria is only 'today's OutPatient visits': VisitType='outpatient'  AND CONVERT(DATE,VisitDate)=CONVERT(DATE,GETDATE())
	 2. Total: today's all OPD counts
	 3. New: AppointmentType='new'  or AppointmentType='Transfer'
	 4. Referral: AppointmentType='referral'
	 5. Followup = AppointmentType='followup' 
	 6.Cancelled: (AppointmentType='new' and BillingStatus='cancel')   (other than 'new') can't be cancelled since they're not seen in billing.
	 7.Returned : (AppointmentType='new' and BillingStatus='return') similar as canceled 
	*/
  SELECT * FROM 
    ( Select Count(*) 'TotalPatient' from PAT_Patient ) pat,
	( Select Count(*) 'TodayPatient' from PAT_Patient where CAST(CreatedOn AS DATE) = CAST(GETDATE() AS DATE) ) today_pat,
	( Select Count(*) 'YestardayPatient' from PAT_Patient where CAST(CreatedOn AS DATE) = dateadd(day,-1, cast(getdate() as date) )) yestarday_pat,


	( 
	      Select COUNT(*) 'TotalDoctors' from EMP_Employee e,
		MST_Department d where e.DepartmentId=d.DepartmentId
		and d.IsAppointmentApplicable=1

		We're adding EmployeeRoles ('Doctor','M.O.','Anaesthetist'  in TotalDoctorsCount -- needs revision. sud:4Feb'19

		Select  SUM(case when eRole.EmployeeRoleName='Doctor' THEN 1 ELSE 0 END ) AS 'ConsultantsCount',
		  SUM(case when eRole.EmployeeRoleName='M.O.' THEN 1 ELSE 0 END ) AS 'MedicalOfficersCount',
          SUM(case when eRole.EmployeeRoleName='Anaesthetist' THEN 1 ELSE 0 END ) AS 'AnaesthetistsCount',
		  SUM(case when eRole.EmployeeRoleName='Doctor' OR eRole.EmployeeRoleName='M.O.' OR eRole.EmployeeRoleName='Anaesthetist' THEN 1 ELSE 0 END ) AS 'TotalDoctorsCount'
		 from EMP_Employee emp
		LEFT JOIN EMP_EmployeeRole eRole
		ON emp.EmployeeRoleId=eRole.EmployeeRoleId


	 ) docs,
	 -Returned Visits are excluded in this Counts--:sud-17Jan'19--reference: Dinesh
    (Select 
		SUM(1) 'TotalAppts',
		SUM( CASE WHEN (AppointmentType='new' OR AppointmentType='Transfer') THEN 1 ELSE 0 END ) AS 'NewAppts',
		SUM( CASE WHEN AppointmentType='referral' THEN 1 ELSE 0 END ) AS 'ReferralAppts',
		SUM( CASE WHEN AppointmentType='followup' THEN 1 ELSE 0 END ) AS 'FollowUpAppts',
		SUM( CASE WHEN AppointmentType='new' and BillingStatus='cancel' THEN 1 ELSE 0 END ) AS 'CancelAppts'
		SUM( CASE WHEN AppointmentType='new' and BillingStatus='returned' THEN 1 ELSE 0 END ) AS 'ReturnAppts'--sud:17Jan'19--removed returned from this query, added in separate query below.
		from PAT_PatientVisits where VisitType='outpatient' AND CONVERT(DATE,VisitDate)=CONVERT(DATE,GETDATE())
		and BillingStatus !='returned' -- exclude returned visits..
	) appt,

	 (Select 
		Count(*) 'ReturnAppts'
		FROM PAT_PatientVisits 
		where VisitType='outpatient' AND CONVERT(DATE,VisitDate)=CONVERT(DATE,GETDATE())
		and BillingStatus='returned'
	) retAppts
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Home_DeptWiseAppointmentCount]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END: Appointement Search Patient---

START: Main DashBoard DeptWise Appointment Count SP Changed after Performance Tuning---

CREATE PROCEDURE [dbo].[SP_DSB_Home_DeptWiseAppointmentCount]
    @TodaysDate Datetime=NULL
AS
[SP_DSB_Home_DeptWiseAppointmentCount]  '2018-12-12'
/*
FileName: [SP_DSB_Home_DeptWiseAppointmentCount]
CreatedBy/date: sudarshan/2017-07-09
Description: to get all the appointment counts till date acc to departments.
Remarks:  CHECK DATA CORRECTNESS ONCE AGAIN..
         ADD DEPARTMENTID in visit/appointment table for Dept wise assignment later on.
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1        sudarshan/2017-07-09	               created
2        Umed/2018-04-18                    Modified SP
                                        Corrected SP Data should be Per Day DepartmentWise Appointment Count
3        Dinesh (13th Dec_2018)			As per the hams Requirement
4        Sud/Pawan (22 Dec 2021)        SQL Performance tuning. Count is taken from Pat_vist table
                                         previuosly was taking from Bil_txn_items table.
                                         
------------------------------------------------------
*/
BEGIN

    IF (@TodaysDate IS NOT NULL)
		BEGIN
		
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
		
        SELECT ms.DepartmentName, Count(*) 'AppointmentCount'
        FROM PAT_PatientVisits vis
            JOIN MST_Department ms ON ms.DepartmentId = vis.DepartmentId
        WHERE vis.BillingStatus != 'returned'
            AND CONVERT(date,vis.VisitDate)=@TodaysDate AND vis.VisitType != 'inpatient'
        GROUP BY ms.DepartmentName
    END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Home_DeptWiseAppointmentCount_13TH_DEC_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[SP_DSB_Home_DeptWiseAppointmentCount_13TH_DEC_2018] 
						@TodaysDate Datetime=null 
AS
/*
FileName: [SP_DSB_Home_DeptWiseAppointmentCount]
CreatedBy/date: sudarshan/2017-07-09
Description: to get all the appointment counts till date acc to departments.
Remarks:  CHECK DATA CORRECTNESS ONCE AGAIN..
         ADD DEPARTMENTID in visit/appointment table for Dept wise assignment later on.
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1        sudarshan/2017-07-09	               created
2        Umed/2018-04-18                    Modified SP
                                    Corrected SP Data should be Per Day DepartmentWise Appointment Count
------------------------------------------------------
*/
BEGIN


IF (@TodaysDate IS NOT NULL)
		BEGIN
			SELECT dep.DepartmentName  ,Count(ISNULL(vis.PatientVisitId,0)) 'AppointmentCount'
		    FROM PAT_PatientVisits vis, EMP_Employee emp, MST_Department dep
			WHERE ProviderId=emp.EmployeeId 
				  AND emp.DepartmentId = dep.DepartmentId
				  AND vis.AppointmentType != 'referral' and convert(date,VisitDate) = @TodaysDate
			Group BY dep.DepartmentName
		 END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Home_PatientDistributionMap_Nepal]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_DSB_Home_PatientDistributionMap_Nepal]
AS
/*
FileName: [SP_DSB_Home_PatientDistributionMap_Nepal]
CreatedBy/date: sudarshan/2017-07-09
Description: to get zone wise patient distribution--ONLY FOR NEPAL NOW.
Remarks: 
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       sudarshan/2017-07-09	               created
------------------------------------------------------
*/
BEGIN

	Select A.MapAreaCode, IsNull(B.PatientCount,0) PatientCount
	FROM 
	(
	  Select Distinct MapAreaCode from MST_CountrySubDivision
	  WHERE CountryId=(select CountryId from MST_Country where CountryName='Nepal') 
			AND MapAreaCode IS NOT NULL
	) A

	left join 
	(
		 Select csd.MapAreaCode, Count(PatientId) 'PatientCount' 
		 from MST_CountrySubDivision csd,PAT_Patient pat
		 where pat.CountrySubDivisionId=csd.CountrySubDivisionId
		 and pat.CountryId=(select CountryId from MST_Country where CountryName='Nepal')
		 GROUP BY csd.MapAreaCode
	) B
	ON 
	A.MapAreaCode=B.MapAreaCode
END









GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Lab_DashboardStatistics]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_DSB_Lab_DashboardStatistics]
AS
/*
=============================================================================================
FileName: [SP_DSB_Lab_DashboardStatistics]
Description: Table1:To get stats for LAB dashboard --> to fill Labels
					>> for sample pending	-->> OrderStatus = active && (BillingStatus == unpaid || BillingStatus == paid) && IsActive=true
					>> for results pending	-->> OrderStatus = pending && (BillingStatus == unpaid || BillingStatus == paid) && IsActive=true
					>> for test completed	-->> OrderStatus = result-added or report-generated && (BillingStatus == unpaid || BillingStatus == paid) && IsActive=true
					>> for tests cancelled	-->> BillingStatus = cancel && IsActive=true
					>> for tests returned	-->> BillingStatus = return && IsActive=true
					>> for total test		-->> Count all where IsActive=true
			Table2:To get stats for LAB dashboard --> For Trending LabTest (last 30 days)
					takes count of LabTest - grouping by them with LabTestName, ordering them in descending order and selecting top 10 only
			Table3:to get count of LabTest performed today ( Templete wise count is shown)


Edited by Anish: 2 June, 2020 new Updated Status Added 
=============================================================================================
*/
BEGIN

Table1
	SELECT * FROM 
		(select count(*) 'TotalAvailableTest' from LAB_LabTests where IsActive=1) labtest,
		(select
			ISNULL(SUM(1),0) AS 'TestRequisitedToday',
			ISNULL(SUM( CASE WHEN OrderStatus = 'active' and IsActive=1 and (BillingStatus <> 'cancel' AND BillingStatus <> 'returned') THEN 1 ELSE 0 END ),0) AS 'SamplePendingToday',
			ISNULL(SUM( CASE WHEN OrderStatus = 'pending' and IsActive=1 and (BillingStatus <> 'cancel' AND BillingStatus <> 'returned') THEN 1 ELSE 0 END ),0) AS 'AddResultsPendingToday',
			ISNULL(SUM( CASE WHEN (OrderStatus = 'result-added' or OrderStatus = 'report-generated') and IsActive=1 and (BillingStatus <> 'cancel' AND BillingStatus <> 'returned') THEN 1 ELSE 0 END ),0) AS 'CompletedToday',
			ISNULL(SUM( CASE WHEN BillingStatus='cancel'and IsActive=1 THEN 1 ELSE 0 END ),0) AS 'CancelledTestsToday',
			ISNULL(SUM( CASE WHEN BillingStatus = 'returned'and IsActive=1 THEN 1 ELSE 0 END ),0) AS 'ReturnedTestsToday'
			from LAB_TestRequisition where convert(date,OrderDateTime) = convert(date,getdate())
		) Today,
		(select
			SUM(1) AS 'TestRequisitedTillDate',
			SUM( CASE WHEN OrderStatus = 'active' and IsActive=1 and (BillingStatus <> 'cancel' AND BillingStatus <> 'returned') THEN 1 ELSE 0 END ) AS 'SamplePendingTillDate',
			SUM( CASE WHEN OrderStatus = 'pending' and IsActive=1 and (BillingStatus <> 'cancel' AND BillingStatus <> 'returned') THEN 1 ELSE 0 END ) AS 'AddResultsPendingTillDate',
			SUM( CASE WHEN (OrderStatus = 'result-added' or OrderStatus = 'report-generated') and IsActive=1 and (BillingStatus <> 'cancel' AND BillingStatus <> 'returned') THEN 1 ELSE 0 END ) AS 'CompletedTillDate',
			SUM( CASE WHEN BillingStatus='cancel'and IsActive=1 THEN 1 ELSE 0 END ) AS 'CancelledTestsTillDate',
			SUM( CASE WHEN BillingStatus = 'returned' and IsActive=1 THEN 1 ELSE 0 END ) AS 'ReturnedTestsTillDate'
			from LAB_TestRequisition
		) TillDate
Table2
	SELECT TOP(10) LabTestName,COUNT(LabTestName) AS Counts FROM LAB_TestRequisition 
		WHERE IsActive=1 and (DATEDIFF(DAY,OrderDateTime,GETDATE()) BETWEEN 0 AND 30)
		GROUP BY LabTestName
		ORDER BY Counts DESC
Table3
	SELECT ReportTemplateName,COUNT(req.LabTestName) Counts FROM LAB_TestRequisition req 
		JOIN LAB_LabTests test ON req.LabTestId=test.LabTestId
		JOIN Lab_ReportTemplate reprt ON test.ReportTemplateID=reprt.ReportTemplateID
		WHERE  req.IsActive=1 and (CONVERT(DATE,OrderDateTime) = CONVERT(DATE,GETDATE()))
		GROUP BY ReportTemplateName
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Patient_AgeRangeNGender]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_DSB_Patient_AgeRangeNGender]
AS
/*
FileName: [SP_DSB_Patient_AgeRangeNGender]
CreatedBy/date: sudarshan/2017-07-09
Description: to get gender+Age Range wise count of all registered patients.
Remarks:  
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1        sudarshan/2017-07-09	               created
------------------------------------------------------
*/
BEGIN
    -temporary table to maintain the sequence of the age-group--
	declare @TblAgeGroup table(AgeRange varchar(20), Seq int)
	insert into @TblAgeGroup values('0-9 Years',1)
	insert into @TblAgeGroup values('10-19 Years',2)
	insert into @TblAgeGroup values('20-59 Years',3)
	insert into @TblAgeGroup values('>=60 Years',4)
   

     SELECT  dbo.GetDobAgeRange(DateOfBirth,getdate()) AgeRange, 
	 ----Gender wise patients-------------
	  ISNULL( SUM(CASE WHEN p.Gender = 'Male' THEN 1 END),0) AS Male,
	  ISNULL( SUM(CASE WHEN p.Gender = 'Female' THEN 1 END),0) AS Female,
	  ISNULL( SUM(CASE WHEN p.Gender = 'Others' THEN 1 END),0) AS Others
	FROM PAT_Patient p, @TblAgeGroup tbl
	WHERE dbo.GetDobAgeRange(DateOfBirth,getdate()) = tbl.AgeRange
	GRoup by dbo.GetDobAgeRange(DateOfBirth,getdate()), tbl.Seq
	Order by tbl.Seq

END









GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Patient_GenderWiseCount]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_DSB_Patient_GenderWiseCount]
AS
/*
FileName: [SP_DSB_Patient_GenderWiseCount]
CreatedBy/date: sudarshan/2017-07-09
Description: to get gender wise count of all registered patients.
Remarks:  
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1        sudarshan/2017-07-09	               created
------------------------------------------------------
*/
BEGIN
  Select Gender, ISNULL( Count(*),0) 'Count' from PAT_Patient
  group by Gender
END









GO
/****** Object:  StoredProcedure [dbo].[SP_DSB_Pharmacy_SalesPurchaseGraph_DashboardStatistics]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_DSB_Pharmacy_SalesPurchaseGraph_DashboardStatistics]  
         @FromDate DateTime=null,
	     @ToDate DateTime=null,
		 @Status varchar(100),
		 @ItemIdCommaSeprated varchar(100)
AS


BEGIN
DECLARE @DynamicPivotQuery AS NVARCHAR(MAX),
		@PivotColumnNames AS NVARCHAR(MAX),
		@PivotSelectColumnNames AS NVARCHAR(MAX)


CREATE TABLE #TempTable(
 ItemId int,
 ItemName varchar(200))
 
 Insert into #TempTable  (ItemId , ItemName )
  SELECT ItemId, ItemName
      FROM PHRM_MST_Item
      WHERE ItemId IN(
	         SELECT Item
            FROM dbo.SplitString(@ItemIdCommaSeprated, ',')
      )



If Status is Sales then this SQL -----
if (@Status != 'sales')
    BEGIN
	             SELECT @PivotColumnNames= ISNULL(@PivotColumnNames + ',','')
					+ QUOTENAME(ItemName)
					FROM ( 
					      Select DISTINCT ItemName from #TempTable
						 )   AS dep
				 
				   -to remove the start and end bracket from column names in return table.
					 SELECT 'Date'+ISNULL(','+REPLACE(REPLACE(@PivotColumnNames,'[',''),']',''),'') as ColumnName

					---Prepare the PIVOT query using the dynamic 
					SET @DynamicPivotQuery = N'SELECT [Date], ' + @PivotColumnNames + '
							FROM (
									  SELECT convert(date,grItm.CreatedOn) as [Date], itm.ItemName, ISNULL(grItm.ReceivedQuantity,0) as Qty       
									  FROM PHRM_GoodsReceipt gr           
									      Inner join PHRM_GoodsReceiptItems grItm on gr.GoodReceiptId = grItm.GoodReceiptId       
										  Inner Join PHRM_MST_Item itm on grItm.ItemId = itm.ItemId
										  WHERE convert(date,grItm.CreatedOn) 
										  BETWEEN  CONVERT(Datetime,'''+ Convert(varchar(20),ISNULL(@FromDate,GETDATE()))  + ''') and CONVERT(DATETIME,'''+Convert(varchar(20),ISNULL(@ToDate,GETDATE()))+''')+1
								) A
							PIVOT(sum(Qty) for ItemName in (' + @PivotColumnNames + ')) as pvt';

					----SELECT @DynamicPivotQuery

					---Execute the Dynamic Pivot Query
					EXEC SP_executesql @DynamicPivotQuery

    END

--Else Status is Purchase Then this SQL------
Else 
	   BEGIN
                  SELECT @PivotColumnNames= ISNULL(@PivotColumnNames + ',','')
					+ QUOTENAME(ItemName)
					FROM ( 
					      Select DISTINCT ItemName from #TempTable
						)   AS dep
				 
				     -to remove the start and end bracket from column names in return table.
					 SELECT 'Date'+ISNULL(','+REPLACE(REPLACE(@PivotColumnNames,'[',''),']',''),'') as ColumnName

					---Prepare the PIVOT query using the dynamic 
					SET @DynamicPivotQuery = N'SELECT [Date], ' + @PivotColumnNames + '
							FROM (
									 SELECT  convert(date,txInvItm.CreatedOn) as [Date], itm.ItemName 
				                            , txInvItm.Quantity as Qty         
									  FROM PHRM_TXN_Invoice txInv  
			                          Inner join PHRM_TXN_InvoiceItems txInvItm on txInv.InvoiceId = txInvItm.InvoiceId
			                          Inner Join PHRM_MST_Item itm on txInvItm.ItemId = itm.ItemId 
									   where convert(date,txInvItm.CreatedOn) 
										  BETWEEN  CONVERT(Datetime,'''+ Convert(varchar(20),ISNULL(@FromDate,GETDATE()))  + ''') and CONVERT(DATETIME,'''+Convert(varchar(20),ISNULL(@ToDate,GETDATE()))+''')+1
										        and txInv.BilStatus = ''paid''
								) A
							PIVOT(sum(Qty) for ItemName in (' + @PivotColumnNames + ')) as pvt';

					----SELECT @DynamicPivotQuery

					---Execute the Dynamic Pivot Query
					EXEC SP_executesql @DynamicPivotQuery

	   END

drop table #TempTable

END
GO
/****** Object:  StoredProcedure [dbo].[SP_ExportDBToCSV]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create Proc  [dbo].[SP_ExportDBToCSV]
As
/*
FileName: [SP_ExportDBToCSV]
CreatedBy/date: NageshBB/2017 Sep 28
Description: This stored procedure export all table as csv file from current database
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    CreatedBy/UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       NageshBB/2017-05-25								created the script
----------------------------------------------------------------------------------------
*/
Begin
 To allow advanced options to be changed.
EXEC sp_configure 'show advanced options',
 1;

GO -- To update the currently configured value for advanced options.
RECONFIGURE;

GO -- To enable the feature.
EXEC sp_configure 'xp_cmdshell',
 1;

GO -- To update the currently configured value for this feature.
RECONFIGURE;
GO
-----Script to create folder in desired drive----
DECLARE 
@cmd sysname, 
@DownloadDirPath varchar(300)=(select ParameterValue from CORE_CFG_Parameters where ParameterName='DBExportCSVXMLDirPath')
Set @DownloadDirPath=@DownloadDirPath+'CSV\'
SET @cmd='MD '+@DownloadDirPath;

EXEC master..xp_cmdshell @cmd;
------------------------------------------------------
Declare
@ServerName varchar(100)=convert(varchar(100),(Select SERVERPROPERTY('ServerName')))  --We can set value from core parameter table 
,@query1 VARCHAR(MAX)
,@DbName sysname=Db_name()
,@query2 VARCHAR(MAX)
,@TableName  VARCHAR(MAX)
,@ResultStatus varchar(10)='success'
-----For Data--------------
SELECT ROW_NUMBER() OVER
(ORDER BY
		(SELECT 1)) rownum, 'select ' + STUFF(
		(SELECT ','+ 'Quotename(cast(' + ISNULL(COLUMN_NAME,'''''''') + ' as varchar(max)),''""'')' + ' as ""' + COLUMN_NAME + '"" '
		FROM INFORMATION_SCHEMA.COLUMNS		
		WHERE TABLE_NAME = t.name AND DATA_TYPE<>'image' ORDER BY ordinal_position
		FOR XML PATH('')),1,1,'') + ' FROM '+ '['+@DbName+'].['+SCHEMA_NAME(schema_id)+'].['+t.name+']' AS col1,
		'select ' + STUFF(
		(
			SELECT ','+ 'Quotename(''' +COLUMN_NAME + ''',''""'')'
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = t.name AND DATA_TYPE<>'image' ORDER BY ordinal_position FOR XML PATH('')),1,1,''
		) 
		AS col2,t.name AS col3 INTO #temp FROM sys.tables t 
 
Using loop we are now export table as csv files
DECLARE @row INT=0 

WHILE
	(SELECT count(1) FROM #temp)>0 
BEGIN
	SELECT TOP 1 @query1=col2,@query2=col1,@row=rownum,@TableName=col3 FROM #temp 

	DECLARE @sqlQuery VARCHAR(8000)=''

	SELECT @sqlQuery = 'bcp "' + @query1 + ' union all ' + @query2 + '" queryout '+@DownloadDirPath+'' + @TableName + '.csv -c -t, -T -S'+ @ServerName

	SELECT @sqlQuery EXEC master..xp_cmdshell @sqlQuery

	DELETE FROM #temp WHERE rownum=@row 
END

DROP TABLE #temp
Select @ResultStatus
get Machine Name, ServerName and @@servername 
SELECT ServerProperty('machinename') as [machinename]    ,ServerProperty('ServerName') [servername]   ,@@ServerName as [@@ServerName];

End
GO
/****** Object:  StoredProcedure [dbo].[SP_ExportDBToXML]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Proc  [dbo].[SP_ExportDBToXML]
As
/*
FileName: [SP_ExportDBToXML]
CreatedBy/date: NageshBB/2017 Sep 28
Description: This stored procedure export all table as XML file from current database
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    CreatedBy/UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       NageshBB/2017-05-25								created the script
----------------------------------------------------------------------------------------
*/
Begin
 To allow advanced options to be changed.
EXEC sp_configure 'show advanced options',
 1;

GO -- To update the currently configured value for advanced options.
RECONFIGURE;

GO -- To enable the feature.
EXEC sp_configure 'xp_cmdshell',
 1;

GO -- To update the currently configured value for this feature.
RECONFIGURE;

GO
-----Script to create folder in desired drive----
DECLARE 
@cmd sysname ,
@DownloadDirPath sysname=(select ParameterValue from CORE_CFG_Parameters where ParameterName='DBExportCSVXMLDirPath')
Set @DownloadDirPath=@DownloadDirPath+'XML\'
SET @cmd='MD '+@DownloadDirPath;
EXEC master..xp_cmdshell @cmd;
---------------------------------------------
DECLARE @Database SYSNAME, 
        @Schema SYSNAME,
        @Table SYSNAME,        
        @BcpParams NVARCHAR(100)='-c -t, -T',
        @cmdBCP NVARCHAR(500),        
        @FileName VARCHAR(600),
		@ResultStatus varchar(10)='success',
        @retExec INT,
        @ServerInstance NVARCHAR(50),                   
        @RootFolder NVARCHAR(165),              
        @TableNameWithSchema VARCHAR(600);
      

    SET @ServerInstance = (select @@SERVERNAME);
    SET @BcpParams = '-t -T -w';
    SET @RootFolder = (select ParameterValue from CORE_CFG_Parameters where ParameterName='DBExportCSVXMLDirPath');----folder where the file is stored------
	Set @RootFolder=@RootFolder+'XML\';
	select @@SERVERNAME
    DECLARE curXml CURSOR FAST_FORWARD FOR
        SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME
        FROM INFORMATION_SCHEMA.Tables 
        WHERE TABLE_TYPE = 'BASE TABLE';

    OPEN curXml;
    FETCH NEXT FROM curXml INTO @Database, @Schema, @Table
    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @TableNameWithSchema = @Database + '.' + @Schema + '.' + @Table;
        SET @FileName = @RootFolder + @Schema + '.' + @Table + '.xml';

        SELECT @cmdBCP = ' bcp "SELECT * FROM '
                         + @TableNameWithSchema 
                         + ' row FOR XML AUTO, ROOT(''' + @Table + '''), elements"'
                         + ' queryout "' + @FileName + '" '
                         + @BcpParams
                         + ' -S ' + @ServerInstance;
        PRINT @cmdBCP;
        EXEC @retExec = xp_cmdshell @cmdBCP;
        IF @retExec <> 0
        BEGIN
            CLOSE curXml;
            DEALLOCATE curXml;
            RAISERROR('BCP Error', 16, 1);
        END

        FETCH NEXT FROM curXml INTO @Database, @Schema, @Table;
    END
    CLOSE curXml;
    DEALLOCATE curXml;
End
GO
/****** Object:  StoredProcedure [dbo].[SP_FRC_GetFractionApplicableList]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 End: Ramavtar 18Nov, Incentive Modules Routes added --


--Start: Sud: 21Nov'19--For Incentive and Fraction SP Correction --

CREATE PROCEDURE [dbo].[SP_FRC_GetFractionApplicableList]
AS
/*
 Altered by Sud on 20Nov'19 for Transaction Date
*/
BEGIN
select 
  per.PercentSettingId,txnItm.BillingTransactionItemId as BillTransactionItemId,
  txnItm.CreatedOn 'TransactionDate',
  itmPrice.ItemName, 
  itmPrice.BillItemPriceId, txnItm.TotalAmount, txnItm.BillingType, (pat.FirstName + ' ' + pat.LastName) as FullName,
  txnItm.ServiceDepartmentName,  c.BillTxnItemId 
  from BIL_TXN_BillingTransactionItems txnItm
  join BIL_CFG_BillItemPrice itmPrice on txnItm.ItemId = itmPrice.ItemId 
    join PAT_Patient pat on txnItm.PatientId = pat.PatientId
  left join FRC_FractionCalculation c on txnItm.BillingTransactionItemId = c.BillTxnItemId
  left join FRC_PercentSetting per on per.BillItemPriceId = itmPrice.BillItemPriceId
where txnItm.ServiceDepartmentId = itmPrice.ServiceDepartmentId 
    and itmPrice.isFractionApplicable = 1 
	and per.PercentSettingId IS NOT NULL

group by txnItm.BillingTransactionItemId,txnItm.CreatedOn, itmPrice.ItemId, 
  c.BillTxnItemId, itmPrice.ItemId ,  itmPrice.BillItemPriceId, per.PercentSettingId,
  c.BillTxnItemId, itmPrice.ItemName ,
  txnItm.ServiceDepartmentName, txnItm.TotalAmount ,
  txnItm.BillingType, FirstName, LastName
order by txnItm.BillingTransactionItemId DESC
END
GO
/****** Object:  StoredProcedure [dbo].[SP_FRC_GetTotalFractionByDoctor]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[SP_FRC_GetTotalFractionByDoctor]
@FromDate Date=null ,
@ToDate Date=null	
AS
BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
BEGIN
 Select   ISNULL(emp.Salutation+' ','')+ emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+ emp.LastName 'DoctorName',
 emp.EmployeeId,
 billingItems.ItemName,
 billingItems.TotalAmount as 'Price',
 frac.FinalAmount as 'FractionAmount',
 frac.CreatedOn from FRC_FractionCalculation frac
join BIL_TXN_BillingTransactionItems billingItems on frac.BillTxnItemId= billingItems.BillingTransactionItemId
join EMP_Employee emp on emp.EmployeeId= frac.DoctorId
where CONVERT(date,frac.CreatedOn) between @FromDate and @ToDate
order by frac.CreatedOn
END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_FRC_GetTotalFractionbyItem]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_FRC_GetTotalFractionbyItem]
AS
BEGIN
 Select itm.ItemId,itm.ItemName, billingItems.ServiceDepartmentName, itm.Price, SUM(frac.FinalAmount) as 'FractionAmount' from FRC_FractionCalculation frac
join BIL_TXN_BillingTransactionItems billingItems on frac.BillTxnItemId= billingItems.BillingTransactionItemId
join BIL_CFG_BillItemPrice itm on billingItems.ItemId= itm.ItemId 
where billingItems.ServiceDepartmentId=itm.ServiceDepartmentId and itm.isFractionApplicable= 1 
group by itm.ItemId, itm.ItemName, billingitems.ServiceDepartmentName, itm.Price
order by itm.ItemId
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Get_PHRM_Settlement_Details_By_SettlementId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Get_PHRM_Settlement_Details_By_SettlementId] @SettlementId INT = 0 AS
/*
FileName: SP_Get_PHRM_Settlement_Details_By_SettlementId
Description: To get the Settlement Details by settlementId for Duplicate Prints and settlement receipt
Remarks: We're returning 6 tables from this StoredProc.
1. patient info
2. settlement info
3. sales info against current settlement
4. sales return info against current settlement
5. cash discount return against current settlement
6. Deposit info against current settlementChange History

Change History
---------------------------------------------------------------------------------------
S.No.      UpdatedBy/Date                          Remarks
---------------------------------------------------------------------------------------
1.         Rohit/2nd,DEC'21             Created SP to get the settlement details for settlement receipt.
---------------------------------------------------------------------------------------
*/
BEGIN
DECLARE @PatientId INT = 0;



setting value to @PatientId--
SELECT
@PatientId = PatientId
FROM
PHRM_TXN_Settlement
WHERE
SettlementId = @SettlementId;



table-1: patient info--
SELECT
PatientId,
ShortName 'PatientName',
PatientCode,
PhoneNumber,
Gender,
DateOfBirth,
[Address]
FROM
PAT_Patient
WHERE
PatientId = @PatientId;



table-2: settlement info--
SELECT
SettlementId,
SettlementReceiptNo,
SettlementDate,
PaymentMode,
CreatedBy,
ISNULL(DiscountAmount, 0) 'CashDiscountGiven'
FROM
PHRM_TXN_Settlement
WHERE
SettlementId = @SettlementId;



table-3: sales--
SELECT
txn.InvoicePrintId 'ReceiptNo',
txn.CreateOn 'ReceiptDate',
txn.TotalAmount 'Amount'
FROM
PHRM_TXN_Invoice txn
WHERE
txn.SettlementId = @SettlementId

table-4: sales return--
SELECT
InvoiceReturnId,
CreditNoteID 'ReceiptNo',
CONVERT(DATE, CreatedOn) 'ReceiptDate',
invRet.TotalAmount 'Amount'
FROM
PHRM_TXN_InvoiceReturn invRet
INNER JOIN PHRM_TXN_Invoice inv ON invRet.InvoiceId= inv.InvoiceId
WHERE
ISNULL(inv.SettlementId, 0) = @SettlementId

table-5: cash discount return--
SELECT
'CR-' + CONVERT(
VARCHAR(20),
ret.CreditNoteID
) 'ReceiptNo',
ret.CreatedOn 'ReceiptDate',
sett.DiscountReturnAmount 'CashDiscountReceived'
FROM
PHRM_TXN_Settlement sett
LEFT JOIN PHRM_TXN_InvoiceReturn ret ON sett.SettlementId = ret.SettlementId
WHERE
ISNULL(sett.SettlementId, 0) = @SettlementId
and ISNULL(sett.DiscountReturnAmount, 0)!= 0

table-6: Deposit info--
SELECT
'DR-' + CONVERT(
VARCHAR(20),
ReceiptNo
) 'ReceiptNo',
CASE WHEN dep.DepositType = 'depositdeduct' THEN 'Deposit Deducted'
WHEN dep.DepositType = 'depositreturn' THEN 'Deposit Returned'
When dep.DepositType = 'deposit' THEN 'Deposit Received' END AS DepositType,
dep.DepositAmount,
dep.CreatedOn 'ReceiptDate'
FROM
PHRM_Deposit dep
WHERE
dep.SettlementId = @SettlementId
AND LOWER(DepositType) IN (
'depositdeduct', 'depositreturn'
)
ORDER BY
dep.SettlementId 
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Get_Settlement_Details_By_SettlementId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Get_Settlement_Details_By_SettlementId] @SettlementId INT = 0
AS
/*
FileName: SP_Get_Settlement_Details_By_SettlementId
Description: To get the Settlement Details by settlementId for Duplicate Prints and settlement receipt
Remarks: We're returning 6 tables from this StoredProc.
1. patient info
2. settlement info
3. sales info against current settlement
4. sales return info against current settlement
5. cash discount return against current settlement
6. Deposit info against current settlementChange History
	
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Krishna/25th,NOV'21                    Created SP to get the settlement details for settlement receipt.   
2.      Dev Narayan/18th,Jan'22                Changed SP to get paidAmount in Table-2 : Settlement Info
---------------------------------------------------------------------------------------
	*/
BEGIN
	DECLARE @PatientId INT = 0;

	setting value to @PatientId--
	SELECT 
		@PatientId = PatientId
	FROM  
		BIL_TXN_Settlements
	WHERE 
		SettlementId = @SettlementId;

	table-1: patient info--
	SELECT
		PatientId,
		ShortName 'PatientName',
		PatientCode 'HospitalNo',
		PhoneNumber 'ContactNo',
		Gender,
		DateOfBirth,
		Address
	FROM 
		PAT_Patient 
	WHERE 
		PatientId = @PatientId;

	table-2: settlement info--
	SELECT
		SettlementId,
		SettlementReceiptNo,
		SettlementDate,
		PaymentMode,
		CreatedBy,
		PaidAmount,
		ISNULL(DiscountAmount,0) 'CashDiscountGiven' --> Change this to 'CashDiscountGiven'
	FROM 
		BIL_TXN_Settlements 
	WHERE 
		SettlementId = @SettlementId;

	table-3: sales--
	SELECT
		CONCAT(txn.InvoiceCode + '-', txn.InvoiceNo) 'ReceiptNo',
		txn.CreatedOn 'ReceiptDate',
		txn.TotalAmount 'Amount'
	FROM 
		BIL_TXN_BillingTransaction txn
	WHERE 
		txn.SettlementId = @SettlementId

	table-4: sales return--
	SELECT
		BillReturnId,
		'CR-'+CONVERT(VARCHAR(20),CreditNoteNumber) 'ReceiptNo',
		CONVERT(DATE,CreatedOn) 'ReceiptDate',
		TotalAmount 'Amount'
	FROM 
		BIL_TXN_InvoiceReturn
	WHERE 
		ISNULL(SettlementId,0) = @SettlementId 

	table-5: cash discount return--
	SELECT
		'CR-'+ CONVERT(VARCHAR(20),ret.CreditNoteNumber) 'ReceiptNo',
		ret.CreatedOn 'ReceiptDate',
		sett.DiscountReturnAmount 'CashDiscountReceived' ---> Change this to 'CashDiscountReceived'
	FROM 
		BIL_TXN_Settlements sett
		LEFT JOIN BIL_TXN_InvoiceReturn ret ON sett.SettlementId = ret.SettlementId
	WHERE 
		ISNULL(sett.SettlementId,0) = @SettlementId AND 
		ISNULL(sett.DiscountReturnAmount,0)!=0 

	table-6: Deposit info--
	SELECT
		'DR-'+CONVERT(VARCHAR(20),ReceiptNo) 'ReceiptNo',
		CASE 
			WHEN dep.DepositType='depositdeduct' THEN 'Deposit Deducted'
			WHEN dep.DepositType='ReturnDeposit' THEN 'Deposit Returned'
			When dep.DepositType='Deposit' THEN 'Deposit Received' 
		END AS DepositType,
		dep.Amount, 
		dep.CreatedOn 'ReceiptDate'
	FROM 
		BIL_TXN_Deposit dep
	WHERE 
		dep.SettlementId=@SettlementId
		AND LOWER(DepositType) IN ('depositdeduct','returndeposit')
	ORDER BY dep.SettlementId
END

GO
/****** Object:  StoredProcedure [dbo].[SP_GetPatientStickerDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_GetPatientStickerDetails]
CreatedBy/date: Aniket/26-10-2021
Description: To get the Details of Patient Sticker
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.    Aniket/26-10-2021                    created the scriptk
--------------------------------------------------------------------------
*/
Create Procedure [dbo].[SP_GetPatientStickerDetails] 
@PatientId int = null
As
Begin
      If @PatientId Is not null
          Begin
          select p.PatientCode as 'HospitalNo', 
		         p.ShortName as 'PatientName', 
				 p.Age as 'Age',
				 p.PhoneNumber as 'Contact', 
				 p.Address as 'Address',
				 p.Gender as 'Gender',
				 p.DateOfBirth as 'DateOfBirth',
				 m.MunicipalityName as 'MunicipalityName',
				 c.CountryName as 'CountryName',
				 cs.CountrySubDivisionName as 'District'
          from PAT_Patient p
		  LEFT JOIN MST_Municipality as m on p.MunicipalityId = m.MunicipalityId
		  LEFT JOIN MST_Country as c on p.CountryId = c.CountryId
		  LEFT JOIN MST_CountrySubDivision as cs on p.CountrySubDivisionId = cs.CountrySubDivisionId
		  where PatientId = @PatientId
          End
End

GO
/****** Object:  StoredProcedure [dbo].[SP_GetVisitListForOPD]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GetVisitListForOPD]
		@FromDate Datetime=null ,
		@ToDate DateTime=null
		@SearchText varchar(100)

AS
/*
FileName: [SP_GetVisitListForOPD]
CreatedBy/date: Anjana/2020-06-23
Description: to get list of outpatient 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Anjana/2020-06-23					Initial Draft
---------------------------------------------------------------------------------------
2.      Anjana/2020-07-09					Updated HasVitals to IsTriaged for OPD Triage
*/
BEGIN
 
 
select
  pat.PatientId,
  pat.PatientCode,
  pat.ShortName,
  pat.DateOfBirth,
  pat.PhoneNumber,
  pat.Gender,
  pat.Address,
  pat.Age,
  vis.VisitDate,
  vis.VisitTime,
  vis.VisitType,
  vis.PatientVisitId,
  vis.ProviderName,
  vis.ProviderId,
  vis.AppointmentType,

 Case WHEN vit.PatientVisitId IS NOT NULL THEN 1 ELSE 0 END AS 'IsTriaged'

from 
 PAT_Patient pat 
     INNER JOIN
 PAT_PatientVisits vis
    ON pat.PatientId= vis.PatientId
left join
  (Select Distinct PatientVisitId 
   from 
    CLN_KV_PatientClinical_Info )
   vit
  ON vis.PatientVisitId = vit.PatientVisitId	

Where  
vis.VisitType = 'outpatient'
AND vis.BillingStatus != 'cancel'
AND vis.BillingStatus != 'returned'

and Convert(Date, vis.CreatedOn) between ISNULL(@FromDate,Convert(Date, GETDATE())) AND ISNULL(@ToDate, Convert(Date, GETDATE()))

END
GO
/****** Object:  StoredProcedure [dbo].[SP_HandoverReceiveTransactionReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*-- =============================================
 Author:        <Pratik Mani Lamichhane>
 Create date: <29 March 2021>
 Description:    <Handover Receive Transaction Report>
 Change History-----
S.No.   Date/Author    Remarks
-------------------------------------
1.     29March'21/Pratik                Initial Draft
2.     25Aug'21/Dev Narayan				some changes done in report
3.     29Sept'21/Sud                    Filtering By Received On rather than VoucherDate.
 =============================================*/
CREATE PROCEDURE [dbo].[SP_HandoverReceiveTransactionReport] (   
    @FromDate DATE = NULL,
    @ToDate DATE = NULL    
) 
AS
BEGIN
    SELECT handoverTxn.VoucherDate,
    handoverTxn.BankName,handoverTxn.VoucherNumber,handoverTxn.HandoverAmount,handoverTxn.DueAmount,
    handoverTxn.ReceivedById,receiverEmp.FullName 'ReceivedBy',
    d.DepartmentName,handoverEmp.FullName 'UserName',
    handoverTxn.ReceivedOn,handoverTxn.ReceiveRemarks
    FROM BIL_TXN_CashHandover handoverTxn
    JOIN BIL_CFG_Counter counter on counter.CounterId= handoverTxn.CounterId
    JOIN EMP_Employee handoverEmp on handoverEmp.EmployeeId= handoverTxn.HandoverByEmpId
    JOIN EMP_Employee receiverEmp on receiverEmp.EmployeeId= handoverTxn.ReceivedById
    LEFT JOIN MST_Department d on receiverEmp.DepartmentId = d.DepartmentId --and isnull(0,reciverEmp.DepartmentId)
    
    WHERE handoverTxn.IsActive=1 and handoverTxn.ReceivedById is not null 
	    and CONVERT(date,handoverTxn.ReceivedOn) between @FromDate AND @ToDate
    ORDER BY handoverTxn.ReceivedOn DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_ACC_GetTransactionInfoForAccTransfer]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	Create Procedure [dbo].[SP_INCTV_ACC_GetTransactionInfoForAccTransfer]
	  @TransactionDate DATE
	AS
	/*
	 File: SP_INCTV_ACC_GetTransactionInfoForAccTransfer
	 Description: To get the list Doctor's TotalAmount and TDSAmont for given date for Accounting Transfer.
	 Remarks:
		* These data will be used in accounting to create a single voucher for that day, where Both Consultant and TDS will be in Credit part.
		* only those data which are not transferred to accounting will be returned (columnname:  IsTransferToAcc)
	 Change History:
	 --------------------------------------------------------------------------------
	 S.No.   Author/Date               Remarks
	 --------------------------------------------------------------------------------
	 1.      Sud/15Mar'20             Initial Draft
	 --------------------------------------------------------------------------------

	*/
	BEGIN
 
	select 
	 Convert(Date, TransactionDate) 'TransactionDate',
	  IncentiveReceiverId 'EmployeeId',
	  emp.FullName 'EmployeeName',

	  'ConsultantIncentive' as TransactionType,
	SUM(ISNULL(IncentiveAmount,0)-ISNULL(TDSAmount,0)) 'TotalAmount',
	SUM(ISNULL(TDSAmount,0)) 'TotalTDS',

	Null AS Remarks,
	STUFF((SELECT ',' + CAST(InctvTxnItemId AS varchar) 
	 FROM INCTV_TXN_IncentiveFractionItem innerTbl 
	where innerTbl.IncentiveReceiverId= outerTbl.IncentiveReceiverId
		  and Convert(Date, innerTbl.TransactionDate) = Convert(Date, outerTbl.TransactionDate) 

	 FOR XML PATH('')), 1 ,1, '') 

	AS ReferenceIds

	from INCTV_TXN_IncentiveFractionItem outerTbl INNER JOIN EMP_Employee emp
	   ON outerTbl.IncentiveReceiverId=emp.EmployeeId

	Where Convert(Date,outerTbl.TransactionDate)=@TransactionDate
	  AND ISNULL(IsTransferToAcc,0) = 0
	  and ISNULL(outerTbl.IsActive,0) = 1

	Group By IncentiveReceiverId, Convert(Date, TransactionDate), emp.FullName
	Order by Convert(Date, outerTbl.TransactionDate)

	END
GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_BulkInsert_FractionItemsFromBillTxnItem_InDateRange]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INCTV_BulkInsert_FractionItemsFromBillTxnItem_InDateRange] 
 ( @FromDate DATETIME = NULL,
  @ToDate DATETIME = NULL)
AS
/*
 File: SP_INCTV_BulkInsert_FractionItemsFromBillTxnItem_InDateRange '2020-02-14','2020-02-14'
 Description: 
 Remarks:  
     * MainDoctor=1 for Assigned and is 0 for Referral.
     * Check for CreatedBy and CreatedOn value. 
	 * We're excluding the fraction where RequestsedBy(ReferredBy) and AssignedToId are there in BillingTxnItem but those doctors don't have any configuration in Incentive-Profile

 Revision Needed ON: 
    * We may need undo functionality of this feature.
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By            Remarks
 ------------------------------------------------
 1.      15Feb'20/Sud              Initial Draft (Needs Revision)
 2.      15Mar'20/Sud              Added TDSPercentage and TDSAmount calculation in the query
3.       4Apr'20/Sud               Excluding Already Added BillingTransactionItem during Bill Sync.
                                   earlier it was at BillingTransactionId level, now it's BillingTransactionItemId
4.       11June                    TDSpercentage from Employee Incentive Info
5.       17Jul'20/Sud/Pratik       Updated for Group Distribution 
6.       10Aug'20/Sud              Removed HardCoded Date Range from Group Distribution
7.       17Sept'20                 Temporary solution to avoid Syncing Returned items
                                   ToDate <= GetDate()-5days or less.. if not then make that from here..
8.       24Sept'20                 Returned items not excluded anymore, it will be handled by another StoredProcedure as Negative billing
9.       2 July'2021  /pratik             Adding quantity to maintain partial return scenario from credit note
 ---------------------------------------------------------------
*/
BEGIN

IF(@FromDate IS NOT NULL AND @ToDate IS NOT NULL)
BEGIN


INSERT INTO INCTV_TXN_IncentiveFractionItem
   ( InvoiceNoFormatted, TransactionDate, PriceCategory, BillingTransactionId, BillingTransactionItemId, PatientId, 
    BillItemPriceId, ItemName, TotalBillAmount, IncentiveType, IncentiveReceiverId, IncentiveReceiverName, IncentivePercent, IncentiveAmount, 
	IsPaymentProcessed, PaymentInfoId, CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, IsActive, IsMainDoctor, TDSPercentage, TDSAmount, IsReturnTxn,Quantity)

Select  
  -1. Primary Columns: These are primary columns -- and are in exact sequence with that of INCTV_TXN_IncentiveFractionItem table--
  fyear.FiscalYearFormatted +'-'+ txn.InvoiceCode + cast(txn.InvoiceNo as varchar(20)) AS 'InvoiceNoFormatted' ,
   txn.CreatedOn 'TransactionDate',
   sett.PriceCategoryName 'PriceCategory',
   txn.BillingTransactionId, BillingTransactionItemId, txn.PatientId, sett.BillItemPriceId, sett.ItemName,txnItm.TotalAmount 'TotalBillAmount',
    'referral' as IncentiveType, 
   txnItm.RequestedBy 'IncentiveReceiverId', sett.FullName 'IncentiveReceiverName',
    sett.ReferredByPercent 'IncentivePercent', txnitm.TotalAmount* ISNULL(sett.ReferredByPercent,0)/100 'IncentiveAmount',
	0 AS IsPaymentProcessed, NULL AS PaymentInfoId, 
	1 as CreatedBy, GetDate() as CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn,1 AS IsActive,
	0 as IsMainDoctor,
	ISNULL(sett.TDSPercent,0) AS TDSPercent,
	( txnitm.TotalAmount* ISNULL(sett.ReferredByPercent,0)/100 ) *ISNULL(sett.TDSPercent,0)/100   AS 'TDSAmount'  -- TDSAmount=IncentiveAmt*TDSPercent/100
	, 0 AS IsReturnTxn,txnItm.Quantity
  ---2. Secondary Columns:
   ,txnitm.ServiceDepartmentId, txnitm.ServiceDepartmentName, txnitm.ItemId, txnItm.SubTotal, txnItm.DiscountAmount,
   pat.FirstName+' '+pat.LastName 'PatientName'

from BIL_TXN_BillingTransaction txn 
   INNER JOIN
      BIL_TXN_BillingTransactionItems txnItm
       ON txn.BillingTransactionId=txnItm.BillingTransactionId
   INNER JOIN PAT_Patient pat
      on txn.PatientId=pat.PatientId
  INNER JOIN BIL_CFG_FiscalYears fyear 
  ON TXN.FiscalYearId=fyear.FiscalYearId
  INNER JOIN FN_INCTV_GetIncentiveSettings_Normal () sett
ON txnItm.ServiceDepartmentId = sett.ServiceDepartmentId
    AND txnItm.ItemId=sett.ItemId
    AND txnItm.RequestedBy = sett.EmployeeId
	AND 1 = (
        Case WHEN ISNULL(sett.BillingTypesApplicable,'both')='both' then 1
        WHEN sett.BillingTypesApplicable = txnItm.BillingType then 1
        ELSE 0 END
)
Where  Convert(Date,txn.CreatedOn) BETWEEN @FromDate and @ToDate
	AND ISNULL(txnItm.ReturnStatus,0)= 0 -- Not Required Anymore
	AND ISNULL(sett.ReferredByPercent,0) !=0

	and txnItm.BillingTransactionItemId NOT IN 
	    (SELECT DISTINCT BillingTransactionItemId FROM INCTV_TXN_IncentiveFractionItem  WHERE IsReturnTxn=0) 
-End: For Referral Incentive-----------

UNION ALL

-2.1-- Start: For Assigned Incentive (No Group Distribution)-----------
Select  
  -1. Primary Columns: These are primary columns -- and are in exact sequence with that of INCTV_TXN_IncentiveFractionItem table--
  fyear.FiscalYearFormatted +'-'+ txn.InvoiceCode + cast(txn.InvoiceNo as varchar(20)) AS 'InvoiceNoFormatted' ,
   txn.CreatedOn 'TransactionDate',
   sett.PriceCategoryName 'PriceCategory',
   txn.BillingTransactionId, BillingTransactionItemId, txn.PatientId, sett.BillItemPriceId, sett.ItemName,txnItm.TotalAmount 'TotalBillAmount',
    'assigned' as IncentiveType, 
   txnItm.ProviderId 'IncentiveReceiverId', sett.FullName 'IncentiveReceiverName',
    sett.AssignedToPercent 'IncentivePercent', txnitm.TotalAmount* ISNULL(sett.AssignedToPercent,0)/100 'IncentiveAmount',
	0 AS IsPaymentProcessed, NULL AS PaymentInfoId, 
	1 as CreatedBy, GetDate() as CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn,1 AS IsActive,
	1 as IsMainDoctor,
	ISNULL(sett.TDSPercent,0) AS TDSPercentage,
	( txnitm.TotalAmount* ISNULL(sett.AssignedToPercent,0)/100 ) *ISNULL(sett.TDSPercent,0)/100   AS 'TDSAmount'  -- TDSAmount=IncentiveAmt*TDSPercent/100
	, 0 AS IsReturnTxn,txnItm.Quantity
  ---2. Secondary Columns:
  , txnitm.ServiceDepartmentId, txnitm.ServiceDepartmentName, txnitm.ItemId, txnItm.SubTotal, txnItm.DiscountAmount,
   pat.FirstName+' '+pat.LastName 'PatientName'

from BIL_TXN_BillingTransaction txn 
   INNER JOIN
      BIL_TXN_BillingTransactionItems txnItm
       ON txn.BillingTransactionId=txnItm.BillingTransactionId
   INNER JOIN PAT_Patient pat
      on txn.PatientId=pat.PatientId
  INNER JOIN BIL_CFG_FiscalYears fyear 
  ON TXN.FiscalYearId=fyear.FiscalYearId
  INNER JOIN FN_INCTV_GetIncentiveSettings_Normal () sett
ON txnItm.ServiceDepartmentId = sett.ServiceDepartmentId
    AND txnItm.ItemId=sett.ItemId
    AND txnItm.ProviderId = sett.EmployeeId
	AND 1 = (
        Case WHEN ISNULL(sett.BillingTypesApplicable,'both')='both' then 1
        WHEN sett.BillingTypesApplicable = txnItm.BillingType then 1
        ELSE 0 END
)
Where  Convert(Date,txn.CreatedOn) BETWEEN @FromDate and @ToDate
	AND ISNULL(sett.AssignedToPercent,0) !=0
		-4Apr'20/Sud: changed from BillingTransactionId to BillingTransactionItemId
	and txnItm.BillingTransactionItemId NOT IN 
	  (SELECT DISTINCT BillingTransactionItemId FROM INCTV_TXN_IncentiveFractionItem WHERE IsReturnTxn=0) -- remove this condition once daily upload is enabled..
-End: 2.1 For Assigned Incentive (No Group Distribution)-----------

UNION ALL

-2.2-- Start: For Assigned Incentive (Group Distribution Only)-----------
 
Select  
  -1. Primary Columns: These are primary columns -- and are in exact sequence with that of INCTV_TXN_IncentiveFractionItem table--
  fyear.FiscalYearFormatted +'-'+ txn.InvoiceCode + cast(txn.InvoiceNo as varchar(20)) AS 'InvoiceNoFormatted' ,
   txn.CreatedOn 'TransactionDate',
   sett.PriceCategoryName 'PriceCategory',
   txn.BillingTransactionId, BillingTransactionItemId, txn.PatientId, sett.BillItemPriceId, sett.ItemName,txnItm.TotalAmount 'TotalBillAmount',
    'assigned' as IncentiveType, 
   incentive goes to:  ToEmployeeId----
   sett.ToEmployeeId 'IncentiveReceiverId', sett.ToEmployeeName 'IncentiveReceiverName',
    sett.DistributionPercent 'IncentivePercent', txnitm.TotalAmount* ISNULL(sett.DistributionPercent,0)/100 'IncentiveAmount',
	0 AS IsPaymentProcessed, NULL AS PaymentInfoId, 
	1 as CreatedBy, GetDate() as CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn,1 AS IsActive,
	1 as IsMainDoctor,
	ISNULL(sett.TDSPercent,0) AS TDSPercentage,
	( txnitm.TotalAmount* ISNULL(sett.DistributionPercent,0)/100 ) *ISNULL(sett.TDSPercent,0)/100   AS 'TDSAmount'  -- TDSAmount=IncentiveAmt*TDSPercent/100
	, 0 AS IsReturnTxn, txnItm.Quantity

from BIL_TXN_BillingTransaction txn 
   INNER JOIN
      BIL_TXN_BillingTransactionItems txnItm
       ON txn.BillingTransactionId=txnItm.BillingTransactionId
   INNER JOIN PAT_Patient pat
      ON txn.PatientId=pat.PatientId
  INNER JOIN BIL_CFG_FiscalYears fyear 
      ON TXN.FiscalYearId = fyear.FiscalYearId
  INNER JOIN 
	 FN_INCTV_GetIncentiveSettings_GroupDistribution() sett  -- this gives us group distribution settings only.. 
  
  [FN_INCTV_GetIncentiveSettings] () sett
ON txnItm.ServiceDepartmentId = sett.ServiceDepartmentId
    AND txnItm.ItemId=sett.ItemId
    AND txnItm.ProviderId = sett.FromEmployeeId
	AND 1 = (
        Case WHEN ISNULL(sett.BillingTypesApplicable,'both')='both' then 1
        WHEN sett.BillingTypesApplicable = txnItm.BillingType then 1
        ELSE 0 END
)
Where  Convert(Date,txn.CreatedOn) BETWEEN @FromDate and @ToDate -- sud:10Aug'20-- this dates were hardcoded earlier.
	 AND ISNULL(txnItm.ReturnStatus,0)= 0 -- Not Required Anymore
	AND ISNULL(sett.DistributionPercent,0) !=0
		-4Apr'20/Sud: changed from BillingTransactionId to BillingTransactionItemId
	and txnItm.BillingTransactionItemId NOT IN 
	  (SELECT DISTINCT BillingTransactionItemId FROM INCTV_TXN_IncentiveFractionItem WHERE IsReturnTxn=0) -- remove this condition once daily upload is enabled..

-2.2-- End: For Assigned Incentive (Group Distribution Only)-----------


END--end of IF.. 

by default returning something so that we understand it has been executed..
Select 'success' as 'status' 

END--end of SP--


GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_BulkInsert_FractionItemsFromBillTxnItem_Return_InDateRange]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INCTV_BulkInsert_FractionItemsFromBillTxnItem_Return_InDateRange] 
 ( @FromDate DATETIME = NULL,
  @ToDate DATETIME = NULL)
AS
/*
 File: SP_INCTV_BulkInsert_FractionItemsFromBillTxnItem_Return_InDateRange '2020-02-14','2020-02-14'
 Description: To insert negative amount for Invoice Return Cases.
            Negative Amount for:  TotalBillAmount, IncentiveAmount and TDS
		    IncentivePercent will remain same
 Remarks:  
     * MainDoctor=1 for Assigned and is 0 for Referral.
     * Check for CreatedBy and CreatedOn value. 
	 * We're excluding the fraction where RequestsedBy(ReferredBy) and AssignedToId are there in BillingTxnItem but those doctors don't have any configuration in Incentive-Profile

 Revision Needed ON: 
    * We may need undo functionality of this feature.
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By            Remarks
 ------------------------------------------------
1.      24Sept'20                 This handles only Returned Items.
2.      2 July'2021/pratik               Adding quantity to maintain partial return scenario from credit note
 ---------------------------------------------------------------
*/
BEGIN

IF(@FromDate IS NOT NULL AND @ToDate IS NOT NULL)
BEGIN

INSERT INTO INCTV_TXN_IncentiveFractionItem
   ( InvoiceNoFormatted, TransactionDate, PriceCategory, BillingTransactionId, BillingTransactionItemId, PatientId, 
    BillItemPriceId, ItemName, TotalBillAmount, IncentiveType, IncentiveReceiverId, IncentiveReceiverName, IncentivePercent, IncentiveAmount, 
	IsPaymentProcessed, PaymentInfoId, CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, IsActive, IsMainDoctor, TDSPercentage, TDSAmount
	, IsReturnTxn)

Select  
  -1. Primary Columns: These are primary columns -- and are in exact sequence with that of INCTV_TXN_IncentiveFractionItem table--
  fyear.FiscalYearFormatted +'-'+ retTxn.InvoiceCode + cast(retTxn.RefInvoiceNum as varchar(20)) AS 'InvoiceNoFormatted' ,
   rettxn.CreatedOn 'TransactionDate',
   sett.PriceCategoryName 'PriceCategory',
   retTxn.BillingTransactionId, BillingTransactionItemId, retTxn.PatientId, sett.BillItemPriceId, sett.ItemName,
   - retItm.RetTotalAmount 'TotalBillAmount',
    'referral' as IncentiveType, 
   retItm.RequestedBy 'IncentiveReceiverId', sett.FullName 'IncentiveReceiverName',
    sett.ReferredByPercent 'IncentivePercent', 
	- retItm.RetTotalAmount* ISNULL(sett.ReferredByPercent,0)/100 'IncentiveAmount', 
	0 AS IsPaymentProcessed, NULL AS PaymentInfoId, 
	1 as CreatedBy, GetDate() as CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn,1 AS IsActive,
	0 as IsMainDoctor,
	ISNULL(sett.TDSPercent,0) AS TDSPercent,
	- ( retItm.RetTotalAmount* ISNULL(sett.ReferredByPercent,0)/100 ) *ISNULL(sett.TDSPercent,0)/100   AS 'TDSAmount'  -- TDSAmount=IncentiveAmt*TDSPercent/100
	, 1 AS IsReturnTxn

From BIL_TXN_InvoiceReturn retTxn  
   INNER JOIN
      BIL_TXN_InvoiceReturnItems retItm
       ON retTxn.BillingTransactionId=retItm.BillingTransactionId
   INNER JOIN PAT_Patient pat
      on retTxn.PatientId=pat.PatientId
  INNER JOIN BIL_CFG_FiscalYears fyear 
  ON retTxn.FiscalYearId=fyear.FiscalYearId
  INNER JOIN FN_INCTV_GetIncentiveSettings_Normal () sett
ON retItm.ServiceDepartmentId = sett.ServiceDepartmentId
    AND retItm.ItemId=sett.ItemId
    AND retItm.RequestedBy = sett.EmployeeId
	AND 1 = (
        Case WHEN ISNULL(sett.BillingTypesApplicable,'both')='both' then 1
        WHEN sett.BillingTypesApplicable = retItm.BillingType then 1
        ELSE 0 END
)
Where  Convert(Date,retTxn.CreatedOn) BETWEEN @FromDate and @ToDate
	AND ISNULL(sett.ReferredByPercent,0) !=0
	and retItm.BillingTransactionItemId  NOT IN 
	  (SELECT DISTINCT BillingTransactionItemId  FROM INCTV_TXN_IncentiveFractionItem  WHERE IsReturnTxn=1) 
-End: For Referral Incentive-----------

UNION ALL

-2.1-- Start: For Assigned Incentive (No Group Distribution)-----------
Select  
  -1. Primary Columns: These are primary columns -- and are in exact sequence with that of INCTV_TXN_IncentiveFractionItem table--
  fyear.FiscalYearFormatted +'-'+ retTxn.InvoiceCode + cast(retTxn.RefInvoiceNum as varchar(20)) AS 'InvoiceNoFormatted' ,
    rettxn.CreatedOn 'TransactionDate',
   sett.PriceCategoryName 'PriceCategory',
   retTxn.BillingTransactionId, BillingTransactionItemId, retTxn.PatientId, sett.BillItemPriceId, sett.ItemName,
   - retItm.RetTotalAmount 'TotalBillAmount',
    'assigned' as IncentiveType, 
   retItm.ProviderId 'IncentiveReceiverId', sett.FullName 'IncentiveReceiverName',
    sett.AssignedToPercent 'IncentivePercent', 
	- retItm.RetTotalAmount* ISNULL(sett.AssignedToPercent,0)/100 'IncentiveAmount',
	0 AS IsPaymentProcessed, NULL AS PaymentInfoId, 
	1 as CreatedBy, GetDate() as CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn,1 AS IsActive,
	1 as IsMainDoctor,
	ISNULL(sett.TDSPercent,0) AS TDSPercentage,
	- ( retItm.RetTotalAmount* ISNULL(sett.AssignedToPercent,0)/100 ) *ISNULL(sett.TDSPercent,0)/100   AS 'TDSAmount'  -- TDSAmount=IncentiveAmt*TDSPercent/100
	, 1 AS IsReturnTxn



from BIL_TXN_InvoiceReturn retTxn 
   INNER JOIN
      BIL_TXN_InvoiceReturnItems retItm
       ON retTxn.BillingTransactionId=retItm.BillingTransactionId
   INNER JOIN PAT_Patient pat
      on retTxn.PatientId=pat.PatientId
  INNER JOIN BIL_CFG_FiscalYears fyear 
  ON retTxn.FiscalYearId=fyear.FiscalYearId
  INNER JOIN FN_INCTV_GetIncentiveSettings_Normal () sett
ON retItm.ServiceDepartmentId = sett.ServiceDepartmentId
    AND retItm.ItemId=sett.ItemId
    AND retItm.ProviderId = sett.EmployeeId
	AND 1 = (
        Case WHEN ISNULL(sett.BillingTypesApplicable,'both')='both' then 1
        WHEN sett.BillingTypesApplicable = retItm.BillingType then 1
        ELSE 0 END
)
Where  Convert(Date,retTxn.CreatedOn) BETWEEN @FromDate and @ToDate
	AND ISNULL(sett.AssignedToPercent,0) !=0
		-4Apr'20/Sud: changed from BillingTransactionId to BillingTransactionItemId
	and retItm.BillingTransactionItemId NOT IN 
	    (SELECT DISTINCT BillingTransactionItemId FROM INCTV_TXN_IncentiveFractionItem  WHERE IsReturnTxn=1) 
-End: 2.1 For Assigned Incentive (No Group Distribution)-----------

UNION ALL

-2.2-- Start: For Assigned Incentive (Group Distribution Only)-----------
 
Select  
  -1. Primary Columns: These are primary columns -- and are in exact sequence with that of INCTV_TXN_IncentiveFractionItem table--
  fyear.FiscalYearFormatted +'-'+ retTxn.InvoiceCode + cast(retTxn.RefInvoiceNum as varchar(20)) AS 'InvoiceNoFormatted' ,
   rettxn.CreatedOn 'TransactionDate',
   sett.PriceCategoryName 'PriceCategory',
   retTxn.BillingTransactionId, BillingTransactionItemId, retTxn.PatientId, sett.BillItemPriceId, sett.ItemName,
   - retItm.RetTotalAmount 'TotalBillAmount',
    'assigned' as IncentiveType, 
   incentive goes to:  ToEmployeeId----
   sett.ToEmployeeId 'IncentiveReceiverId', sett.ToEmployeeName 'IncentiveReceiverName',
    sett.DistributionPercent 'IncentivePercent', 
	- retItm.RetTotalAmount* ISNULL(sett.DistributionPercent,0)/100 'IncentiveAmount',
	0 AS IsPaymentProcessed, NULL AS PaymentInfoId, 
	1 as CreatedBy, GetDate() as CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn,1 AS IsActive,
	1 as IsMainDoctor,
	ISNULL(sett.TDSPercent,0) AS TDSPercentage,
	- ( retItm.RetTotalAmount* ISNULL(sett.DistributionPercent,0)/100 ) *ISNULL(sett.TDSPercent,0)/100   AS 'TDSAmount'  -- TDSAmount=IncentiveAmt*TDSPercent/100
	, 1 AS IsReturnTxn

from BIL_TXN_InvoiceReturn retTxn 
   INNER JOIN
      BIL_TXN_InvoiceReturnItems retItm
       ON retTxn.BillingTransactionId=retItm.BillingTransactionId
   INNER JOIN PAT_Patient pat
      ON retTxn.PatientId=pat.PatientId
  INNER JOIN BIL_CFG_FiscalYears fyear 
      ON retTxn.FiscalYearId = fyear.FiscalYearId
  INNER JOIN 
	 FN_INCTV_GetIncentiveSettings_GroupDistribution() sett  -- this gives us group distribution settings only.. 
  
  [FN_INCTV_GetIncentiveSettings] () sett
ON retItm.ServiceDepartmentId = sett.ServiceDepartmentId
    AND retItm.ItemId=sett.ItemId
    AND retItm.ProviderId = sett.FromEmployeeId
	AND 1 = (
        Case WHEN ISNULL(sett.BillingTypesApplicable,'both')='both' then 1
        WHEN sett.BillingTypesApplicable = retItm.BillingType then 1
        ELSE 0 END
)
Where  Convert(Date,retTxn.CreatedOn) BETWEEN @FromDate and @ToDate 
	AND ISNULL(sett.DistributionPercent,0) !=0
		-4Apr'20/Sud: changed from BillingTransactionId to BillingTransactionItemId
	and retItm.BillingTransactionItemId NOT IN 
	    (SELECT DISTINCT BillingTransactionItemId FROM INCTV_TXN_IncentiveFractionItem  WHERE IsReturnTxn=1) 

-2.2-- End: For Assigned Incentive (Group Distribution Only)-----------

END--end of IF.. 

by default returning something so that we understand it has been executed..
Select 'success' as 'status' 

END--end of SP--

GO
/****** Object:  StoredProcedure [dbo].[SP_Inctv_ExportAllEmpItemsSettings]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
end: sud:09Dec'20--hide unused reports from Pharmacy--

-------------------Merged from Billing-Settlement branch-----
-Start: pratik:17Dec 2020: Export all Data from incentive setting

Create PROCEDURE [dbo].[SP_Inctv_ExportAllEmpItemsSettings]  
AS
/*
 FileName: [SP_Inctv_ExportAllEmpItemsSettings] 
 Created: 16th Dec 2020/Pratik
 Description: To export all Data from incentive setting (i.e. EmployeeItemsSetup page)
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User               Change          Remarks
 -----------------------------------------------------------------------
 1.		Pratik:16th Dec 2020		inital draft
 -----------------------------------------------------------------------
*/
BEGIN	   
SELECT 
emp.EmployeeId,emp.FullName AS EmployeeName ,
inctvInfo.TDSPercent,
billItmPrice.ServiceDepartmentId,
servDeprt.ServiceDepartmentName,
billItmPrice.ItemId,
billItmPrice.ItemName,
empbillitmMap.AssignedToPercent,
empbillitmMap.ReferredByPercent,
empbillitmMap.HasGroupDistribution,
CASE
    WHEN empbillitmMap.HasGroupDistribution =1 THEN 'Yes'
    ELSE 'No'
END AS HasGroupDistribution,

groupDist.DistributionInfo
from INCTV_EmployeeIncentiveInfo inctvInfo
     join EMP_Employee emp  
        on inctvInfo.EmployeeId=emp.EmployeeId 

left join INCTV_MAP_EmployeeBillItemsMap empbillitmMap
     on inctvInfo.EmployeeId=empbillitmMap.EmployeeId 

join BIL_CFG_BillItemPrice billItmPrice
    on billItmPrice.BillItemPriceId=empbillitmMap.BillItemPriceId  
	
join BIL_MST_ServiceDepartment servDeprt
    on billItmPrice.ServiceDepartmentId=servDeprt.ServiceDepartmentId  and servDeprt.IsActive=1

left join (
		SELECT x.EmployeeBillItemsMapId, DistributionInfo = STUFF((
				SELECT N', ' + emp1.FullName+': ' +Convert(varchar(20),dist1.DistributionPercent)+'%'
				FROM INCTV_CFG_ItemGroupDistribution dist1 inner join EMP_Employee emp1
					  on dist1.DistributeToEmployeeId = emp1.EmployeeId and dist1.IsActive=1
				WHERE EmployeeBillItemsMapId = x.EmployeeBillItemsMapId
				FOR XML PATH(''), TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 2, N'')

			  FROM INCTV_MAP_EmployeeBillItemsMap AS x
			  where Isnull(x.HasGroupDistribution,0)=1
			  GROUP BY x.EmployeeBillItemsMapId

	  )groupDist

   on empbillitmMap.EmployeeBillItemsMapId = groupDist.EmployeeBillItemsMapId 
   where empbillitmMap.IsActive=1 and inctvInfo.IsActive=1
order by emp.FirstName, emp.LastName , ServiceDepartmentName, ItemName

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_GetBillingTxnItems_BetweenDate]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INCTV_GetBillingTxnItems_BetweenDate]   -- EXEC SP_INCTV_GetBillingTxnItems_BetweenDate '2020-04-01', '2020-04-10'
	( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL)
AS
/*
 File: SP_INCTV_GetBillingTxnItems_BetweenDate
 Description:  To get billing transaction items for fraction,
 Conditions/Checks: 
   1. Returned Items are removed.
   2. Joining with EMployee Table twice for Assigned and ReferredBy Employee
   3. FractionCount (number) is the count of FractionItem  in Incentive_FractionItem table for BillingTransactionItemId
        
 Remarks: This can later be extended and used in Billing -> Edit Doctor as well since the fields are preety much similar.
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By       Remarks
 ------------------------------------------------
 1.      10Apr'20/Sud          Initial Draft 
 2.      11June2020/Pratik   GroupDistribution Impacts on Existing Functionalities 
 
 -------------------------------------------------
*/
BEGIN

select
     pat.PatientId, pat.FirstName+' '+ISNULL(pat.MiddleName+' ','')+pat.LastName 'PatientName', pat.PatientCode,

  fyear.FiscalYearFormatted +'-'+ bilTxn.InvoiceCode + cast(bilTxn.InvoiceNo as varchar(20)) AS 'InvoiceNo' 
  , bilTxn.CreatedOn 'TransactionDate',  biltxn.BillingTransactionId, txnItm.BillingTransactionItemId 'BillingTransactionItemId', 

txnItm.ServiceDepartmentName, txnItm.ItemName,txnItm.ItemId,txnItm.Quantity , txnItm.TotalAmount,
txnItm.ProviderName 'AssignedToEmpName', emp2.FullName 'ReferredByEmpName', 
inctvTxnItm.FrcCount 'FractionCount'

from  BIL_CFG_FiscalYears fyear, 
	PAT_Patient pat,

    BIL_TXN_BillingTransaction bilTxn 
	     JOIN BIL_TXN_BillingTransactionItems txnItm
	ON bilTxn.BillingTransactionId = txnItm.BillingTransactionId
	    LEFT JOIN EMP_Employee emp1 
		   ON txnItm.ProviderId = emp1.EmployeeId  -- for AssignedToDoctor
        LEFT JOIN EMP_Employee emp2
		   ON txnItm.RequestedBy= emp2.EmployeeId
    LEFT JOIN (Select BillingTransactionItemId, Count(*) 'FrcCount'  from INCTV_TXN_IncentiveFractionItem where IsActive=1 Group By BillingTransactionItemId ) inctvTxnItm
	    ON txnItm.BillingTransactionItemId = inctvTxnItm.BillingTransactionItemId

where 
	    bilTxn.FiscalYearId = fyear.FiscalYearId 
	AND bilTxn.PatientId=pat.PatientId
	AND Convert(Date,bilTxn.CreatedOn) Between @FromDate AND @ToDate
	AND ISNULL(bilTxn.ReturnStatus,0) = 0
 
END


GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_GetFractionItems_ByTxnItemId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_INCTV_GetFractionItems_ByTxnItemId]  -- EXEC SP_INCTV_GetFractionItems_ByTxnItemId 21058
  @BillingTansactionItemId int = NULL
AS
/*
 File: SP_INCTV_GetFractionItems_ByTxnItemId
 Description: to get the fractions for Current BillingTransactionItemId.
 Conditions/Checks: 
 Remarks: 
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By       Remarks
 ------------------------------------------------
 1.      10Apr'20/Sud          Initial Draft 
 -------------------------------------------------
*/
BEGIN
 
Table:1 -- Get Fraction Information---
Select * from INCTV_TXN_IncentiveFractionItem
WHERE BillingTransactionItemId=@BillingTansactionItemId

END
GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_PaymentInfo_Update]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


End:Sud-17Mar'20-- For incentive-TDS Percentage---

Anish: Start: 18 March, Bill PaymentInfo update done from SP----
CREATE PROCEDURE [dbo].[SP_INCTV_PaymentInfo_Update]  --EXEC SP_Report_INCTV_ReferralItemsSummary '2020-01-17','2020-02-17',93
	@FromDate date = NULL,
    @ToDate date = NULL,
    @EmployeeId int = NULL,
	@paymentInfoId int = NULL
AS
BEGIN
	Update INCTV_TXN_IncentiveFractionItem set IsPaymentProcessed=1, PaymentInfoId=@paymentInfoId
	WHERE IncentiveReceiverId = @EmployeeId AND Convert(Date,TransactionDate) Between @FromDate AND @ToDate;
	
	-needed to return something from this SP(needs revision)
	select 'success' as Result
END
GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_ViewTransactionItems]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INCTV_ViewTransactionItems] --SP_INCTV_ViewTransactionItems '2019-11-20','2019-12-02',0
( @FromDate DATETIME = NULL,
  @ToDate DATETIME = NULL,
  @EmployeeId INT=NULL)
AS
/*
 File: SP_INCTV_ViewTransactionItems
 Description: To get AssignedTo and Referral for each Transaction Item level to show and edit in frontend.
 Conditions/Checks: 
         * If EmployeeId is passed, then we'll show Both Assigned and Referred Items of that Employee.
         * If EmployeeId is Null then we'll return data of all employee in that range
		 * External Referral are also handled since we're taking from Employee Table.

 Remarks: Needs Revision.
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By       Remarks
 ------------------------------------------------
 1.      21Nov'19/Sud          Initial Draft (Needs Revision)
 2.      04Dec'19/Pratik       Added FiscalYear Formatted to show in FrontEnd
 -------------------------------------------------
*/
BEGIN

; WITH ItemsTxnInfo AS (
    Select cfgItm.BillItemPriceId, bilTxn.BillingTransactionId, txnItm.BillingTransactionItemId, bilTxn.CreatedOn, 
	bilTxn.InvoiceNo, 
	fyear.FiscalYearFormatted +'-'+ bilTxn.InvoiceCode + cast(bilTxn.InvoiceNo as varchar(20)) AS 'InvoiceNo',
	biltxn.FiscalYearId,
	   txnItm.ItemId, txnItm.ItemName,txnItm.ServiceDepartmentId,txnItm.TotalAmount, txnItm.PriceCategory,
	   txnItm.RequestedBy,txnItm.ProviderId,txnItm.PatientId, pat.FirstName+' '+pat.LastName 'PatientName', pat.PatientCode
		from 
		   (Select * from BIL_TXN_BillingTransaction 
		   where Convert(Date,CreatedOn) Between @FromDate AND @ToDate
		     and ISNULL(ReturnStatus,0) = 0   -- to exclude returned
		   )  bilTxn
		 INNER JOIN 
		 (
		   Select * from  BIL_TXN_BillingTransactionItems 
		   Don't show the transaction items whose incentive is already calculated and stored in fractionitems table--
		   WHERE BillingTransactionItemId NOT IN (Select BillingTransactionItemId from INCTV_TXN_IncentiveFractionItem)
		 )txnItm
		    ON bilTxn.BillingTransactionId = txnItm.BillingTransactionId

		 INNER JOIN BIL_CFG_FiscalYears fyear
		   ON  bilTxn.FiscalYearId = fyear.FiscalYearId

		  INNER JOIN BIL_CFG_BillItemPrice cfgItm
			 ON txnItm.ServiceDepartmentId=cfgItm.ServiceDepartmentId
				AND txnItm.ItemId=cfgItm.ItemId
		  INNER JOIN PAT_Patient pat
			ON pat.PatientId = txnItm.PatientId
		WHERE cfgItm.isFractionApplicable=1
		   and ISNULL(bilTxn.ReturnStatus,0) = 0   -- to exclude returned
		 AND Convert(Date,txnItm.CreatedOn) Between @FromDate AND @ToDate   
 )
 

 SELECT txn.CreatedOn 'TransactionDate',txn.FiscalYearId, txn.InvoiceNo, txn.PriceCategory,   txn.BillingTransactionItemId, 
 txn.BillingTransactionId, txn.BillItemPriceId,
   txn.PatientId, txn.PatientName, txn.PatientCode,
   txn.ItemName, txn.TotalAmount, 
   refItems.EmployeeId 'ReferredByEmpId', refItems.FullName 'ReferredByEmpName', 
   refItems.ReferredByPercent, ISNULL(txn.TotalAmount,0)*refItems.ReferredByPercent/100 'ReferralAmount',

    assignedToItms.EmployeeId 'AssignedToEmpId', assignedToItms.FullName 'AssignedToEmpName' ,
	assignedToItms.AssignedToPercent, ISNULL(txn.TotalAmount,0)*assignedToItms.AssignedToPercent/100 'AssignedToAmount'


 FROM 
    ItemsTxnInfo txn
	LEFT JOIN
	  ( 
		Select 
		 profItm.BillItemPriceId, price.ServiceDepartmentId, price.ItemId, price.ItemName,
		  priceCat.PriceCategoryId, priceCat.PriceCategoryName,
		 prof.ProfileName, prof.ProfileId,
		 emp.EmployeeId,
		 emp.FullName,
		 profItm.AssignedToPercent,
		 profItm.ReferredByPercent

		 from INCTV_MST_Profile  prof
		   INNER JOIN BIL_CFG_PriceCategory priceCat
			 ON prof.PriceCategoryId=priceCat.PriceCategoryId 
		   INNER JOIN INCTV_BillItems_Profile_Map profItm
			  ON prof.ProfileId= profItm.ProfileId
		   INNER JOIN INCTV_EMP_Profile_Map empProf
			  ON prof.ProfileId=empProf.ProfileId
		   INNER JOIN EMP_Employee emp
			 ON empProf.EmployeeId=emp.EmployeeId  
		   INNER JOIN BIL_CFG_BillItemPrice  price
			  ON profItm.BillItemPriceId = price.BillItemPriceId
         
		  WHERE ISNULL(@EmployeeId,ISNULL(emp.EmployeeId,0)) =  ISNULL(emp.EmployeeId,0)

		 ) refItems
   ON txn.BillItemPriceId=refItems.BillItemPriceId
      AND txn.RequestedBy= refItems.EmployeeId
	  AND txn.PriceCategory = refItems.PriceCategoryName
		
   	LEFT JOIN
	  	( 
         
		Select 
		 profItm.BillItemPriceId, price.ServiceDepartmentId, price.ItemId, price.ItemName,
		  priceCat.PriceCategoryId, priceCat.PriceCategoryName,
		 prof.ProfileName, prof.ProfileId,
		 emp.EmployeeId,
		 emp.FullName,
		 profItm.AssignedToPercent,
		 profItm.ReferredByPercent

		 from INCTV_MST_Profile  prof
		   INNER JOIN BIL_CFG_PriceCategory priceCat
			 ON prof.PriceCategoryId=priceCat.PriceCategoryId 
		   INNER JOIN INCTV_BillItems_Profile_Map profItm
			  ON prof.ProfileId= profItm.ProfileId
		   INNER JOIN INCTV_EMP_Profile_Map empProf
			  ON prof.ProfileId=empProf.ProfileId
		   INNER JOIN EMP_Employee emp
			 ON empProf.EmployeeId=emp.EmployeeId  
		   INNER JOIN BIL_CFG_BillItemPrice  price
			  ON profItm.BillItemPriceId = price.BillItemPriceId

           WHERE ISNULL(@EmployeeId,ISNULL(emp.EmployeeId,0)) =  ISNULL(emp.EmployeeId,0)
         
		 ) assignedToItms
   ON txn.BillItemPriceId=assignedToItms.BillItemPriceId
      AND txn.ProviderId = assignedToItms.EmployeeId	
	  AND txn.PriceCategory = assignedToItms.PriceCategoryName
  WHERE txn.ItemName like '%usg%'
  WHERE ISNULL(@EmployeeId,0) =  ISNULL(refItems.EmployeeId,0)

   WHERE (ISNULL(refItems.EmployeeId,0) = ISNULL(@EmployeeId, ISNULL(refItems.EmployeeId,0))  OR  ISNULL(assignedToItms.EmployeeId,0) = ISNULL(@EmployeeId, ISNULL(assignedToItms.EmployeeId,0)))

   ORDER BY txn.BillingTransactionItemId

END
GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_ViewTxn_InvoiceItemLevel]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_INCTV_ViewTxn_InvoiceItemLevel]    --SP_INCTV_ViewTxn_InvoiceItemLevel '2020-02-05','2020-02-10',313716,0
  @BillingTansactionId int = NULL
AS
/*
 File: SP_INCTV_ViewTxn_InvoiceItemLevel
 Description: 
 Conditions/Checks: 

 Remarks: We're returning 2 tables from here
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By       Remarks
 ------------------------------------------------
 1.      24Jan'20/Pratik          Initial Draft (Needs Revision)
 2.      16Feb'20/Sud         Rewrite after change in logic.. 
 3.      11June2020/Pratik   GroupDistribution Impacts on Existing Functionalities  
 -------------------------------------------------
*/
BEGIN
  Table:1 -- Get BillingTransactionItem information---
select PatientId, BillingTransactionItemId, BillingTransactionId,ItemId, ItemName, Quantity, Price, SubTotal, DiscountAmount, TotalAmount
from BIL_TXN_BillingTransactionItems
where BillingTransactionId=@BillingTansactionId

  Table:2 -- Get Fraction Information---
Select * from INCTV_TXN_IncentiveFractionItem
WHERE BillingTransactionId=@BillingTansactionId

END
GO
/****** Object:  StoredProcedure [dbo].[SP_INCTV_ViewTxn_InvoiceLevel]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Start: Pratik- 11March, 2020---



 start: pratik -17MArch 2020---



CREATE PROCEDURE [dbo].[SP_INCTV_ViewTxn_InvoiceLevel] --SP_INCTV_ViewTxn_InvoiceLevel '2020-02-06','2020-03-06',0
	( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL,
      @EmployeeId INT=NULL)
AS
/*
 File: SP_INCTV_ViewTxn_InvoiceLevel
 Description: 
 Conditions/Checks: 
        

 Remarks: Needs Revision.
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By       Remarks
 ------------------------------------------------
 1.      24Jan'20/Pratik          Initial Draft (Needs Revision)
 
 -------------------------------------------------
*/
BEGIN

select
pat.PatientId, pat.FirstName+' '+ISNULL(pat.MiddleName+' ','')+pat.LastName 'PatientName', pat.PatientCode,

 fyear.FiscalYearFormatted +'-'+ bilTxn.InvoiceCode + cast(bilTxn.InvoiceNo as varchar(20)) AS 'InvoiceNo' 
, bilTxn.CreatedOn 'TransactionDate', bilTxn.TotalAmount, biltxn.BillingTransactionId

from BIL_TXN_BillingTransaction bilTxn, BIL_CFG_FiscalYears fyear, PAT_Patient pat
where 
	bilTxn.FiscalYearId=fyear.FiscalYearId 
	and bilTxn.PatientId=pat.PatientId
	AND Convert(Date,bilTxn.CreatedOn) Between @FromDate AND @ToDate
	and ISNULL(bilTxn.ReturnStatus,0) = 0


END
GO
/****** Object:  StoredProcedure [dbo].[SP_InPatient_Item_Details]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <3 August 2020>
 Description:	<Get all the Items requested for the given Inpatient>
 =============================================
CREATE PROCEDURE [dbo].[SP_InPatient_Item_Details] 
( 
@patientId int, 
@patientVisitId int,
@moduleName varchar(50)=null
)
AS
BEGIN

IF(@moduleName='' OR LOWER(@moduleName)='null' OR LOWER(@moduleName)='nursing' OR LOWER(@moduleName)='emergency')
BEGIN
SET @moduleName = null
END


select billItems.* , emp.FullName as 'RequestingUserName',dept.DepartmentName as 'RequestingUserDept', 
dept.DepartmentCode as 'DepartmenCode',LOWER(srv.IntegrationName) as 'IntegrationName', null as 'AllowCancellation' from 
(Select * from BIL_TXN_BillingTransactionItems 
Where ISNULL(ReturnStatus,0)=0 and PatientId=@patientId and PatientVisitId=@patientVisitId and LOWER(BillStatus)='provisional') billItems
Join (select * from BIL_MST_ServiceDepartment where LOWER(IntegrationName)=LOWER(@moduleName) OR @moduleName Is Null) srv on billItems.ServiceDepartmentId = srv.ServiceDepartmentId
Join EMP_Employee emp on emp.EmployeeId = billItems.CreatedBy
Left Join MST_Department dept on emp.DepartmentId = dept.DepartmentId
Order by billItems.CreatedOn desc
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Inpatient_Provisional_Items_List]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
End: Anjana:17May, 2021: Changes for addition of Municipality in address field-------
----------Merged from LPH_MunicipalityChanges, 25th May, 2021-------------------

Start: Anjana:18/05/2021 fixed issue of date filter not working----
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <18 August>
 Description:	<Get all the Provisional Items List>
 =============================================
/*
Change History
--------------------------------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------------------------------
1		Anjana/18/05/2021			Applied date filter 
--------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Inpatient_Provisional_Items_List] (
	@FromDate DATETIME = NULL,
    @ToDate DATETIME = NULL	
) 
AS
BEGIN
	SELECT pat.ShortName,pat.Age,pat.Gender,pat.DateOfBirth,pat.PatientCode,srv.IntegrationName,item.* FROM BIL_TXN_BillingTransactionItems item
	JOIN PAT_Patient pat on pat.PatientId=item.PatientId
	LEFT JOIN BIL_MST_ServiceDepartment srv on srv.ServiceDepartmentId=item.ServiceDepartmentId
	WHERE (LOWER(VisitType)='inpatient' OR LOWER(VisitType)='outpatient') AND LOWER(BillStatus)='provisional' and Convert(Date, RequisitionDate) between ISNULL(@FromDate, Convert(Date, GETDATE())) AND ISNULL(@ToDate, Convert(DATE, GETDATE()))
	ORDER BY item.RequisitionDate desc
END

GO
/****** Object:  StoredProcedure [dbo].[SP_INS_GetNewClaimCode]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[SP_INS_GetNewClaimCode]
AS
/*
File: SP_INS_GetNewClaimCode
Created: Sud/Pratik : 1-Oct'21
Description: Get new claim code from pat_visit table.
   Moving the logic from C# to SQL since there was issue in LINQ comparision of String(data type of Claimcode)  
NOTE: 
   * Returns 0 as New claimcode if max limit is reached.
   * Need to change the datatype of ClaimCode to BigInt in near future since string comparision is too heavy operation.

Change History:
-----------------------------------------------------------------
S.No.  ChangedBy/Date               Remarks
-----------------------------------------------------------------
1.     Sud/Pratik : 1-Oct'21        Initial Draft.
-----------------------------------------------------------------
*/
BEGIN
	declare @minLimit BIGINT, @maxLimit BIGINT;
	Read the json param and get the min/max fields. 
	declare @claimCodeParam varchar(500) = (Select ParameterValue from CORE_CFG_Parameters 
										 where ParameterGroupName='Insurance' and ParameterName='ClaimCodeAutoGenerateSettings')
	set @minLimit =  Convert(BIGINT,(SELECT JSON_VALUE(@claimCodeParam, '$.min')));
	set @maxLimit =  Convert(BIGINT,(SELECT JSON_VALUE(@claimCodeParam, '$.max')));

	Declare @maxClaimCode BIGINT = (select MAX(ClaimCode) from PAT_PatientVisits
									where ClaimCode between @minLimit and @maxLimit)

	Declare @newClaimCode BIGINT=@minLimit --- by default new claim code will start from MinLimit value.

	IF @maxClaimCode is not null 
	BEGIN
	   SET  @newClaimCode = @maxClaimCode+1
	END
	ELSE


	Declare @isMaxLimitReached BIT = 0;
	if(@newClaimCode>@maxLimit)
	BEGIN
	 SET @isMaxLimitReached=1
	 SET @newClaimCode=0 ---Return zero when maxlimit is reached
	END
	ELSE
	BEGIN
	  SET @isMaxLimitReached=0
	END

	-This will return a table with two columns 1 row
	Select @newClaimCode AS 'NewClaimCode', @isMaxLimitReached AS 'IsMaxLimitReached'

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INS_GetPatientVisitStickerInfo]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_INS_GetPatientVisitStickerInfo]  --- SP_INS_GetPatientVisitStickerInfo 
    
@PatientVisitId INT=null
AS
/*
FileName: SP_INS_GetPatientVisitStickerInfo
CreatedBy/date:  VIKAS/23Feb2021        
Description: Get patient's current visit details in insurance. 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.     VIKAS/23Feb2021                         Created. 
---------------------------------------------------------------------------------------
*/
BEGIN
select 
  visit.AppointmentType 'AppointmentType',
  visit.VisitType 'VisitType',
  visit.VisitCode 'VisitCode',
  visit.ProviderName 'DoctorName',
  visit.VisitDate 'VisitDate',
  visit.VisitTime 'VisitTime',
  CONCAT_WS(' ',pat.FirstName,pat.MiddleName,pat.LastName) 'PatientName',
  pat.PatientCode 'PatientCode',
  pat.DateOfBirth 'DateOfBrith',
  pat.Gender 'Gender',
  pat.Address 'Address',
  pat.Age 'Age',
  pat.PhoneNumber 'PhoneNumber',
  subCounty.CountrySubDivisionName 'District',
  dep.DepartmentName 'Department',
  dep.RoomNumber 'DeptRoomNumber',
  doc.RoomNo 'RoomNo',
  usr.UserName 'User',
  cnty.CountryName 'CountryName',
  bilTxnItms.ServiceDepartmentName,
  ISNULL(bilTxnItms.TotalAmount,0) 'OpdTicketCharge',
  visit.QueueNo,
  visit.ClaimCode,
  pat.Ins_NshiNumber   
  from PAT_PatientVisits visit join PAT_Patient pat on pat.PatientId=visit.PatientId
            join MST_CountrySubDivision subCounty on subCounty.CountrySubDivisionId=pat.CountrySubDivisionId
            join MST_Department dep on dep.DepartmentId= visit.DepartmentId
            join RBAC_User usr on usr.EmployeeId=visit.CreatedBy
            join MST_Country cnty on cnty.CountryId = pat.CountryId
            left join EMP_Employee doc on doc.EmployeeId=visit.ProviderId

            left join (Select * from BIL_TXN_BillingTransactionItems where PatientVisitId=@PatientVisitId
                           and ServiceDepartmentName IN ('OPD'
                                   , 'Department OPD'
                                   ,'Department Followup Charges'
                                   ,'Doctor Followup Charges'
                                   ,'Department OPD Old Patient'
                                   ,'Doctor OPD Old Patient')) bilTxnItms  
                              on  visit.PatientVisitId = bilTxnItms.PatientVisitId        

            where visit.PatientVisitId=@PatientVisitId 
            
END 

GO
/****** Object:  StoredProcedure [dbo].[SP_INS_GetVisitListOfValidDays]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[SP_INS_GetVisitListOfValidDays]
	@SearchTxt VARCHAR(200) = '', 
	@RowCounts INT = 200,
	@DaysLimit INT = 1

	AS 
	/*
	 FileName: [SP_INS_GetVisitListOfValidDays] 
	 Created: 22-Dec'21/Krishna
	 Description: To Get the Patients visit list
				 Returns upto 200 patients
				Match fields: ShortName, PatientCode (HospitalNo), PhoneNumber
	 Remarks:   
	 -----------------------------------------------------------------------
	 Change History
	 -----------------------------------------------------------------------
	 S.No.    Date/User              Change          Remarks
	 -----------------------------------------------------------------------
	 1.       22-Dec'21/Krishna                      inital draft 
	 2.       25-Dec'21/Sud                          Can search also from Insurance NSHI Number.
	 -----------------------------------------------------------------------
	*/
	
	DECLARE @Now DATE
		SET @Now = GETDATE()
	DECLARE @ValidDate DATE
		SET @ValidDate = DATEADD(DAY, -@DaysLimit, @Now) --takes date @Dayslimit(eg: 7 days) days less than the current date.
		
	BEGIN 
		IF(@SearchTxt = 'null') 
	BEGIN 
		SET @SearchTxt = null 
	END 
		SET @RowCounts = ISNULL(@RowCounts, 200) --default rowscount=200

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT TOP (@RowCounts) 
	  visit.PatientVisitId, 
	  visit.ParentVisitId, 
	  dept.DepartmentId,
	  dept.DepartmentName,
	  visit.ProviderId, 
	  visit.ProviderName, 
	  visit.VisitDate, 
	  visit.VisitTime, 
	  visit.VisitType, 
	  visit.AppointmentType, 
	  pat.PatientId, 
	  pat.PatientCode, 
	  pat.FirstName, 
	  pat.MiddleName, 
	  pat.LastName, 
	  pat.ShortName, 
	  pat.PhoneNumber, 
	  pat.DateOfBirth, 
	  pat.Gender, 
	  pat.CountryId, 
	  pat.PANNumber, 
	  pat.MembershipTypeId, 
	  pat.[Address], 
	  pat.Email, 
	  pat.LandLineNumber,
	  visit.ClaimCode,
	  pat.Ins_NshiNumber,
	  visit.Ins_HasInsurance,
	  visit.QueueNo, 
	  visit.BillingStatus AS BillStatus


	FROM PAT_PatientVisits AS visit
		INNER JOIN MST_Department AS dept ON visit.DepartmentId = dept.DepartmentId
		INNER JOIN PAT_Patient AS pat ON visit.PatientId = pat.PatientId
	WHERE 
	  pat.IsActive = 1
	  AND visit.IsActive=1
	  AND ISNULL(visit.Ins_HasInsurance, 0) = 1
	  AND CONVERT(DATE,visit.VisitDate) BETWEEN CONVERT(DATE,@ValidDate) AND CONVERT(DATE,@Now)
	  AND LOWER(visit.VisitType) != 'inpatient'
	  AND LOWER(visit.BillingStatus) != 'returned'
	  AND (
		pat.PatientCode LIKE '%' + ISNULL(@SearchTxt, '') + '%' 
		OR ISNULL(pat.Ins_NshiNumber,'') LIKE '%' + ISNULL(@SearchTxt, '') + '%'   --sud:25Dec'21: Additional where clause for Insurance Patients.
		OR pat.ShortName LIKE '%' + ISNULL(@SearchTxt, '') + '%' 
		OR ISNULL(pat.PhoneNumber, '') LIKE '%' + ISNULL(@SearchTxt, '') + '%'
	  ) 
	 
	ORDER BY 
	  visit.PatientVisitId DESC --Show recent visit at top.. 
	  END

GO
/****** Object:  StoredProcedure [dbo].[SP_INS_RPT_GetDetailsOfSingleClaimCode]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SP_INS_RPT_GetDetailsOfSingleClaimCode]
    @PatientId int = NULL,
    @ClaimCode bigint = NULL
AS

/*
 FileName: [SP_INS_RPT_GetDetailsOfSingleClaimCode] 
 Created: 28 Oct'21/Swapnil
 Description: To get Details Of Single Claim Code with PatientId and Claim Code.
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User                         Change Remarks
 -----------------------------------------------------------------------
 1.       06Oct'21/Swapnil                  inital draft
 2.       Sud/Sanjit: 31-Oct'21             Corrected Pharmacy Data
 3.       Sud/18Jan'21                      Added InvoiceNumber in Billing and Pharmacy Details
										    Added With(NOLOCK) for Uncommitted Read (performance improvement)
 -----------------------------------------------------------------------
*/

BEGIN
   
-Table:1-- Admission/Discharge Details if any---
-Table:2--Billing Details---
-Table:3 --Pharmacy Details---

-Table:1-- Admission/Discharge Details if any---
-need to correct below for the scenario when more than one admission uses same claim code---

Select top(1) adm.AdmissionDate, adm.DischargeDate, adm.AdmissionStatus
  from PAT_PatientVisits vis WITH(NOLOCK)
     inner join ADT_PatientAdmission adm  WITH(NOLOCK)
  on vis.PatientVisitId=adm.PatientVisitId
  where vis.PatientId=@PatientId
      and vis.VisitType='inpatient'
      and vis.ClaimCode=@ClaimCode


-Table:2--Billing Details---
   Select 
    PatientId,
    ClaimCode,
    InvoiceNo,
    ServiceDepartmentName,
    ItemId,
    ItemName,
    SUM(ISNULL(SalesQuantity,0)) AS Sales_Quantity,
    SUM(ISNULL(SubTotal,0)) AS Sales_Subtotal,
    SUM(ISNULL(DiscountAmount,0)) AS Sales_Discount,
    SUM(ISNULL(SalesTotalAmount,0))  AS Sales_TotalAmount,
    SUM(ISNULL(RetQty,0)) AS Ret_Quantity,
    SUM(ISNULL(RetSubtotal,0)) AS Ret_Subtotal,
    SUM(ISNULL(RetDiscountAmount,0)) AS Ret_Discount,
    SUM(ISNULL(RetTotalAmount,0)) AS Ret_TotalAmount,
    SUM(ISNULL(NetAmount,0)) As Net_TotalAmount
  from 
  (

	  Select 
		txnItm.BillingTransactionId,
		txnitm.BillingTransactionItemId,
		txn.PatientId,
		txn.ClaimCode,
		txn.InvoiceNo,
		txnItm.ServiceDepartmentName,
		txnItm.ItemId,
		txnItm.ItemName,
		txnItm.SubTotal,
		txnitm.DiscountAmount,
		txnItm.Quantity 'SalesQuantity',
		txnItm.TotalAmount 'SalesTotalAmount',
		retItm.RetQty,
		retItm.RetSubtotal,
		retitm.RetDiscountAmount,
		retItm.RetTotalAmount,
		txnitm.TotalAmount - ISNULL(retItm.RetTotalAmount,0) 'NetAmount'

		from BIL_TXN_BillingTransaction txn  WITH(NOLOCK)
		INNER JOIN BIL_TXN_BillingTransactionItems txnItm  WITH(NOLOCK)
		ON txn.BillingTransactionId=txnItm.BillingTransactionId
		LEFT JOIN 
		(Select BillingTransactionItemId, PatientId, 
		 Sum(ISNULL(RetQuantity,0)) 'RetQty',
		 Sum(ISNULL(RetSubTotal,0)) 'RetSubtotal',
		 Sum(ISNULL(RetDiscountAmount,0)) 'RetDiscountAmount',
		 Sum(ISNULL(RetTotalAmount,0)) 'RetTotalAmount'
		 from BIL_TXN_InvoiceReturnItems  WITH(NOLOCK)
		 Where PatientId=@PatientId 
		 Group by BillingTransactionItemId, PatientId
		 ) retItm
		ON txnItm.BillingTransactionItemId=retItm.BillingTransactionItemId

		Where txn.IsInsuranceBilling=1
    ) txnDetails
    
    Where PatientId=@PatientId
        AND ISNULL(@ClaimCode,ClaimCode)=ClaimCode
    
    Group by 
      PatientId,
	  InvoiceNo,
      ClaimCode,
      ServiceDepartmentName,
      ItemId,
      ItemName
    Order by ClaimCode, ItemName

 -Table:3 --Pharmacy Details---
  Select
  inv.InvoicePrintId 'InvoiceNo',
  invItm.ItemId, invItm.ItemName, gen.GenericName, invItm.BatchNo, invItm.ExpiryDate, 
  SUM(invItm.Quantity) AS SalesQuantity,
  Sum(invItm.TotalAmount) AS SalesAmount, 

  SUM(ISNULL(invRt.Ret_TotalAmount,0)) as ReturnAmount,  --take this after joining from return table--
  SUM(ISNULL(invItm.TotalAmount,0)) - SUM(ISNULL(invRt.Ret_TotalAmount,0)) AS NetAmount  -- Subtract Return amount here.. 
  from
     PHRM_MST_Store store INNER JOIN 
     PHRM_TXN_Invoice inv  WITH(NOLOCK) on inv.StoreId=store.StoreId
     inner join PHRM_TXN_InvoiceItems invItm  WITH(NOLOCK)  on inv.InvoiceId=invItm.InvoiceId
     inner join PHRM_MST_Item itm on invItm.ItemId=itm.ItemId
     left join PHRM_MST_Generic gen on itm.GenericId = gen.GenericId
	 left join (
	                  Select InvoiceItemId, 
					   SUM(ISNULL(retItm.Quantity,0)) Ret_Quantity, 
					   SUM(ISNULL(retItm.SubTotal,0)) Ret_Subtotal,  
					   SUM(ISNULL(retItm.DiscountAmount,0)) Ret_DiscountAmt, 
					   SUM(ISNULL(retItm.TotalAmount,0)) Ret_TotalAmount
					from PHRM_TXN_InvoiceReturnItems retItm  WITH(NOLOCK)
					     INNER JOIN PHRM_TXN_InvoiceReturn ret  WITH(NOLOCK)
					     ON retItm.InvoiceReturnId = ret.InvoiceReturnId
					Where ret.PatientId=@PatientId
					Group by InvoiceItemId
			    ) invRt on invItm.InvoiceItemId=invRt.InvoiceItemId

  where 
  store.SubCategory='insurance'  -- take only invoices created from Insurance Dispensaries. 
  AND  inv.PatientId=@PatientId and inv.ClaimCode = @ClaimCode
  
  Group by inv.InvoicePrintId, 
       invItm.ItemId, 
	   invItm.ItemName, 
	   gen.GenericName, 
       invItm.BatchNo, 
	   invItm.ExpiryDate
END

GO
/****** Object:  StoredProcedure [dbo].[SP_INS_SearchInsurancePatients]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END--Search Patient SP altered--

START: Insurance Search Patient SP altered---

CREATE PROCEDURE [dbo].[SP_INS_SearchInsurancePatients] 
   @SearchTxt varchar(200) = '',
   @RowCounts INT = NULL
AS

/*
 FileName: [SP_INS_SearchInsurancePatients] 
 Created: 10-Oct'21/Sud
 Description: To Get the Patients Info + IsAdmitted for patient matching given search conditions.
             Returns upto 200 patients
			Match fields: NSHI Number, ShortName, PatientCode (HospitalNo), PhoneNumber
 Remarks:  Searches only for Insurance patients, other informations can be removed if not required. 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.       10-Oct'21/Sud                          inital draft 
 2.       28-Oct'21/Sud                          Sending InsuranceProviderId of Gov-Insurance in return data.
                                                 it was causing issue in InsuranceBalanceUpdate because of null value. 
 -----------------------------------------------------------------------
*/
BEGIN  
SET @RowCounts=ISNULL(@RowCounts,200)--default rowscount=200

IF(@SearchTxt='null')
BEGIN
  SET @SearchTxt=null
END

Need to send back insurance providerid of GovernmentInsuarnce--
Declare @InsProviderId INT
Set @InsProviderId=( Select InsuranceProviderId from INS_CFG_InsuranceProviders
					 where InsuranceProviderName='Government Insurance')

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

Select top (@RowCounts)
  pat.PatientId,
  pat.PatientCode,
  pat.ShortName,
  pat.FirstName,
  pat.LastName,
  pat.MiddleName,
  pat.PatientNameLocal,
  pat.Age,
  pat.Gender,
  pat.PhoneNumber,
  pat.DateOfBirth,
  pat.Address,
  pat.IsOutdoorPat,  pat.CreatedOn,
  pat.CountryId, cntry.CountryName,  pat.CountrySubDivisionId,  sub.CountrySubDivisionName,
  pat.MunicipalityId,munc.MunicipalityName,  
  pat.MembershipTypeId,  memb.MembershipTypeName,
  memb.DiscountPercent 'MembershipDiscountPercent',
  pat.PANNumber,  pat.BloodGroup, 
  pat.Ins_HasInsurance,
  pat.Ins_NshiNumber,
  pat.Ins_InsuranceBalance,
  pat.Ins_LatestClaimCode AS LatestClaimCode,
  case when adm.PatientId is not null then 1
     else 0 END as IsAdmitted,
  @InsProviderId as InsuranceProviderId

from PAT_Patient pat
 INNER JOIN  MST_Country cntry on pat.CountryId=cntry.CountryId
 inner join MST_CountrySubDivision sub
    on pat.CountrySubDivisionId=sub.CountrySubDivisionId
  inner join PAT_CFG_MembershipType memb on pat.MembershipTypeId=memb.MembershipTypeId
  LEFT JOIN 
  (
   Select distinct PatientId from ADT_PatientAdmission
   Where AdmissionStatus='admitted'
  ) adm
  on pat.PatientId=adm.PatientId

Left join MST_Municipality munc
   ON pat.MunicipalityId=munc.MunicipalityId

where pat.IsActive=1 
 and pat.Ins_HasInsurance=1 --take only insurance patients. 
and (
       ISNULL(pat.Ins_NshiNumber,'') like '%' + ISNULL(@SearchTxt,'') + '%'
       OR pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%'
       or pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%'  
	   OR ISNULL(pat.PhoneNumber,'') LIKE '%' + ISNULL(@SearchTxt,'') + '%'
	 )
Order by PatientId DESC 

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INV_RPT_GetInventorySummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_INV_RPT_GetInventorySummary]			
    @FiscalYearId int, 
	@FromDate Date, 
	@ToDate Date
AS

/************************************************************************
FileName: [SP_INV_RPT_GetInventorySummary]
CreatedBy/date: NageshBB/09Sep2020
Description: Get Inventory summary report data
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       NageshBB/09Sep2020						script created
												OpeningTxnQty and OpeningTxnValue
												Transaction Records= StockManageIN+ GRReceipt   -StockManageOut -dispatch (if dispatch )
												Transaction Records= StockManageIN+ GRReceipt   -StockManageOut-Consumption (if consumption)
												Closing bal= Opening + Purchase +stockmanagein -stockmanageout -dispatch (if dispatch )
												Closing bal= Opening + Purchase +stockmanagein -stockmanageout -consumption (if consumption)
2.   Sud/3rdJan'21                              Added reusable functions for correct calculation.. 
*************************************************************************/
BEGIN
  
 Declare @FyStartDate datetime=(select top 1 Convert(Date,StartDate) from INV_CFG_FiscalYears where FiscalYearId=@FiscalYearId)
 Declare @DispatchOrConsumption varchar(20)=(Select top 1 ParameterValue from CORE_CFG_Parameters Where ParameterGroupName='Inventory' and ParameterName='ConsumptionOrDispatchForReports')

 Declare @ToDateForOpening Date = DATEADD(DAY, -1, @FromDate)  --ToDateforOpening = FromDate-1

 Select 
		itmsInfo.ItemId,
		itmsInfo.Code 'ItemCode',
		itmsInfo.ItemName,
		itmsInfo.SubCategoryName 'SubCategory',
		itmsInfo.UOMName 'Unit',
		opening.OpeningQty  AS 'OpeningQty',
		opening.OpeningValue AS  'OpeningValue',
		txnsBetnRange.PurchaseQty,
		txnsBetnRange.PurchaseValue,
		txnsBetnRange.DispatchQty,
		txnsBetnRange.DispatchValue,
		txnsBetnRange.ConsumptionQty,
		txnsBetnRange.ConsumptionValue,
		txnsBetnRange.StockManageOutQty,
		txnsBetnRange.StockManageOutValue,
		txnsBetnRange.StockManageInQty,
		txnsBetnRange.StockManageInValue

 From  
 (
  Select itm.ItemId, itm.ItemName, itm.ItemType, itm.Code, sub.SubCategoryName, uom.UOMName
     from INV_MST_Item itm
          INNER JOIN INV_MST_ItemSubCategory sub 
		      ON itm.SubCategoryId = sub.SubCategoryId
	      LEFT JOIN INV_MST_UnitOfMeasurement uom 
		      on itm.UnitOfMeasurementId=uom.UOMId
 ) itmsInfo

LEFT JOIN
(
  This function does Opening+SUM(IN)-SUM(OUT) and gives Opening on the FromDate
    Select * from	[FN_RPT_INV_GetItemsOpeningQtyUptoDate](@FiscalYearId, @FyStartDate, @ToDateForOpening, @DispatchOrConsumption)
) opening
ON opening.ItemId=itmsInfo.ItemId

Left join
(
  Get transactions from: @FromDate To @ToDate---
  Select * from [FN_RPT_INV_GetItemStockTxnsBetnDateRange](@FromDate, @ToDate)
)
txnsBetnRange
 ON itmsInfo.ItemId = txnsBetnRange.ItemId

where itmsInfo.ItemType='Consumables'

ORder by itmsInfo.SubCategoryName, itmsInfo.ItemName 

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INV_RPT_GetSubstoreDispConsumption_Items ]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INV_RPT_GetSubstoreDispConsumption_Items ] 
	@StoreIds NVARCHAR(400) = '' ,
	@ItemId NVARCHAR(50),
	@FromDate DateTime,
	@ToDate DateTime
AS
/*
Change History
--------------------------------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------------------------------
1		Anjana/12/18/2020				Initial Draft
2		Anjana/01/05/2020				Added two more parameters for date filter
--------------------------------------------------------------------------------
*/

  DECLARE @StoreIdTbl Table(StoreId int)
  Insert into @StoreIdTbl
  SELECT value FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> ''
	BEGIN
		SELECT 
			itm.ItemName, 
			itm.ItemId,
			itm.Code,
			itm.ItemType,
			txn.TransactionId,
			txn.TransactionDate,
			txn.StoreId,
			txn.ItemId,
			txn.InOut,
			txn.TransactionType,
			txn.Price,
			txn.Quantity,
			sto.Name,
			gr.GoodsReceiptNo,
			CASE When TransactionType ='dispatched-items' Then txn.Price*txn.Quantity Else 0 END as 'DispatchValue',
			CASE WHEN TransactionType ='consumption-items' Then txn.Price*txn.Quantity ELSE 0 END as 'ConsumptionValue',
			CASE WHEN TransactionType='dispatched-items' Then txn.Quantity ELSE 0 END as 'DispatchQuantity',
			CASE WHEN TransactionType='consumption-items' Then txn.Quantity ELSE 0 END as 'ConsumptionQuantity'
			
		From @StoreIdTbl store
		join WARD_INV_Transaction txn on store.StoreId = txn.StoreId
		join PHRM_MST_Store sto on store.StoreId = sto.StoreId
		join INV_MST_Item itm on txn.ItemId = itm.ItemId
		join INV_TXN_GoodsReceiptItems gritm on txn.GoodsReceiptItemId = gritm.GoodsReceiptItemId
		join INV_TXN_GoodsReceipt gr on gritm.GoodsReceiptId = gr.GoodsReceiptID
		WHERE  txn.StoreId IN (Select StoreId from @StoreIdTbl) and itm.ItemId = @ItemId and Convert(Date, TransactionDate) between ISNULL(@FromDate, Convert(Date, GETDATE())) AND ISNULL(@ToDate, Convert(DATE, GETDATE())) 
		ORDER BY sto.Name asc, txn.TransactionDate asc
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_INV_RPT_GetSubstoreDispConsumption_Summary ]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[SP_INV_RPT_GetSubstoreDispConsumption_Summary ] 
  @StoreIds NVARCHAR(400) = '' ,
  @FromDate Datetime = null,
  @ToDate DateTime = null
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date          Remarks
--------------------------------------------------------
1    Anjana/12/18/2020        Initial Draft
2	 Sud/01/05/2021			  Made Corrections 
-------------------------------------------------------------------
*/
 BEGIN
 
 
  Declare @StoreIdTbl Table(StoreId int)
  Insert into @StoreIdTbl
  SELECT value FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> ''
  
   SELECT 
       sub.SubCategoryName,
      itm.ItemName, 
      itm.ItemId,
      itm.Code,
      itm.ItemType,
      unit.UOMName as Unit,
      dis.DispatchQuantity,
      dis.DispatchValue,
      con.ConsumptionQuantity,
      con.ConsumptionValue
    From 
	INV_MST_Item itm 
	  inner join INV_MST_ItemSubCategory sub on itm.SubCategoryId = sub.SubCategoryId
	  left join  INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId 
      left join ( Select ItemId, Sum(Quantity) 'DispatchQuantity', Sum(ISNULL(Price,0)*ISNULL(Quantity,0)) 'DispatchValue' 
	        from WARD_INV_Transaction txn
			where TransactionType = 'dispatched-items' 
                  and Convert(Date, TransactionDate) between ISNULL(@FromDate, Convert(Date, GETDATE())) AND ISNULL(@ToDate, Convert(DATE, GETDATE())) 
				  and txn.StoreId IN (Select StoreId from @StoreIdTbl)
			group by ItemId
			) dis 
			on itm.ItemId = dis.ItemId

     left join ( Select ItemId, Sum(Quantity) 'ConsumptionQuantity', Sum(ISNULL(Price,0)*ISNULL(Quantity,0)) 'ConsumptionValue' 
	      from WARD_INV_Transaction  txn
		  where TransactionType = 'consumption-items' 
		        and Convert(Date, TransactionDate) between ISNULL(@FromDate, Convert(Date, GETDATE())) AND ISNULL(@ToDate, Convert(DATE, GETDATE())) 
		       and txn.StoreId IN (Select StoreId from @StoreIdTbl)
		  group by ItemId )con 
		  on itm.ItemId = con.ItemId
   
     where (
	  ISNULL(dis.DispatchQuantity,0) !=0 
	  OR ISNULL(con.ConsumptionQuantity,0) !=0 
	)

    ORDER BY sub.SubCategoryName, itm.ItemName 

 END

GO
/****** Object:  StoredProcedure [dbo].[SP_INVReport_SupplierInfoReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INVReport_SupplierInfoReport]   
	
AS
/*
FileName: [SP_INVReport_SupplierInfoReport] 
CreatedBy/date: Avanti/2021-10-10
Description: To get the Each Supplier Information 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Avanti/2021-10-10	                     created the script

------------------------------------------------------
*/

BEGIN
    
	 Select 
	 VendorName,
	 ContactNo, 
	 ContactAddress,
	 CASE WHEN PanNo= 'NULL' THEN '' ELSE PanNo END
	 PanNo,
	 Email 
	  From  [dbo].[INV_MST_Vendor]
End

GO
/****** Object:  StoredProcedure [dbo].[SP_IRD_InvoiceDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_IRD_InvoiceDetails]
    @FromDate Datetime = null,
    @ToDate DateTime = null
AS
  /*
    FileName: [SP_IRD_InvoiceDetails] 
    CreatedBy/date: Umed/2017-09-294
    Description: to get the Invoice Details as per IRD requirements 
    Change History
    -----------------------------------------------------
    S.No.    UpdatedBy/Date         Remarks
    -----------------------------------------------------
    1        Sud/2018-May-7         revised as per new ird requirements    
    2        Ramavtar/07Dec         applying filter on CreatedOn instead of PaidDate 
    3.       Vikas/02 Jan 2019      modify patient shortname(firstname and last name) to fullname(first,middle, and lastName)   
    4.       Sud/2Jul'21            Setting Is_Bill_Active=False if One or more CreditNote generated from current invoice.
                                    Taking Customer_name from Patient>ShortName field
    5.       Shankar/20thSept'21    Update for Payment_Method and TransactionId columns(revised as per new ird requirements)
    6.       Anish/3 December 2021  Getting the data of Return as well 
    7.       Ramesh/Dev 6 Dec 2021  Merged the billing IRD_InvoiceDetails sp with pharmachy IRD_InvoiceDetails sp
	8.       Ramesh/17th Dec'21     Remove CR in pharmacy cash sale invoice
    -----------------------------------------------------
    */
  BEGIN
    IF (@FromDate IS NOT NULL)
        OR (@ToDate IS NOT NULL) 
  BEGIN
        SET
  NOCOUNT ON
        SELECT *
        FROM
            (
                                                        (
                                SELECT
                    fiscYr.FiscalYearFormatted AS Fiscal_Year,
                    CONVERT(varchar(30), ret.CreditNoteNumber) AS Bill_No,
                    pats.ShortName AS Customer_name,
                    sud:2July'21--revised column to take Customer_name
                    pats.PANNumber,
                    CONVERT( datetime,  ret.ReturnedOn) AS BillDate,
                    ret.ReturnSubTotal AS Amount,
                    ret.ReturnDiscountAmount AS DiscountAmount,
                    CONVERT(float,0.00) AS Taxable_Amount,
                    CONVERT(float,0.00) AS Tax_Amount,
                    ret.ReturnTotalAmount AS Total_Amount,
                    CASE WHEN ret.IsReturnSyncedWithIRD = 1 THEN 'Yes' ELSE 'No' END  AS SyncedWithIRD,
                    CASE WHEN biltxn.PrintCount > 0 THEN 'Yes' ELSE 'No' END AS Is_Printed,
                    CONVERT(varchar(20), CONVERT(time, ret.ReturnedOn), 100)AS Printed_Time,
                    ret.ReturnedBy AS Entered_By,
                    ret.ReturnedBy AS Printed_by,
                    might need to change logic for isrealtime--: sud:9May'18--  
                    CASE WHEN ISNULL(ret.IsReturnRealTime, 0) = 1 THEN 'Yes' ELSE 'No' END AS Is_Realtime,
                    CASE
                      WHEN ISNULL(biltxn.ReturnStatus, 0) = 0 THEN 'True'
                      ELSE 'False'
                    END AS Is_Bill_Active
                    -Sud/2Jul'21: Changed after Credit Note.
                    'True' AS Is_Bill_Active,
                    ret.ReturnPaymentMethod AS Payment_Method,
                    'N/A' as TransactionId,
                    CONVERT(float,0.00) as VAT_Refund_Amount
                FROM
                    BIL_TXN_BillingTransaction biltxn
                    INNER JOIN EMP_Employee emp ON emp.EmployeeId = biltxn.CreatedBy
                    INNER JOIN PAT_Patient pats ON pats.PatientId = biltxn.PatientId
                    INNER JOIN BIL_CFG_FiscalYears fiscYr ON biltxn.FiscalYearId = fiscYr.FiscalYearId
                    INNER JOIN(
    Select
                        BillingTransactionId 'ReturnTxnId',
                        'CRN' + CONVERT(varchar(10),CreditNoteNumber) 'CreditNoteNumber',
                        -SubTotal 'ReturnSubTotal',
                        -DiscountAmount 'ReturnDiscountAmount',
                        -TotalAmount 'ReturnTotalAmount',
                        IsRemoteSynced 'IsReturnSyncedWithIRD',
                        1 as ReturnPrintCount,
                        0 as 'ReturnVATRefundAmount',
                        e.FullName 'ReturnedBy',
                        r.CreatedOn 'ReturnedOn',
                        PaymentMode as 'ReturnPaymentMethod',
                        IsRealtime as 'IsReturnRealTime'
                    from
                        BIL_TXN_InvoiceReturn r
                        join EMP_Employee e on r.CreatedBy=e.EmployeeId
                    Where
      r.IsActive = 1
  ) ret ON biltxn.BillingTransactionId = ret.ReturnTxnId
                WHERE
  CONVERT(date, biltxn.CreatedOn) BETWEEN CONVERT(date, @FromDate) 
  AND CONVERT(date, @ToDate)
                )
            UNION ALL
                (
                SELECT
                    fiscYr.FiscalYearFormatted AS Fiscal_Year,
                    ISNULL(biltxn.InvoiceCode, 'BL') + CONVERT(varchar(30), biltxn.InvoiceNo) AS Bill_No,
                    pats.ShortName AS Customer_name,
                    sud:2July'21--revised column to take Customer_name
                    pats.PANNumber,
                    CONVERT( datetime, biltxn.CreatedOn) AS BillDate,
                    biltxn.SubTotal AS Amount,
                    biltxn.DiscountAmount AS DiscountAmount,
                    CONVERT(float,0.00) AS Taxable_Amount,
                    CONVERT(float,0.00) AS Tax_Amount,
                    biltxn.TotalAmount AS Total_Amount,
                    CASE WHEN biltxn.IsRemoteSynced = 1 THEN 'Yes' ELSE 'No' END AS SyncedWithIRD,
                    CASE WHEN biltxn.PrintCount > 0 THEN 'Yes' ELSE 'No' END AS Is_Printed,
                    CONVERT(varchar(20), CONVERT(time, biltxn.CreatedOn), 100)AS Printed_Time,
                    emp.FullName AS Entered_By,
                    emp.FullName AS Printed_by,
                    might need to change logic for isrealtime--: sud:9May'18--  
                    CASE WHEN ISNULL(biltxn.IsRealtime, 0) = 1 THEN 'Yes' ELSE 'No' END AS Is_Realtime,
                    CASE
                      WHEN ISNULL(biltxn.ReturnStatus, 0) = 0 THEN 'True'
                      ELSE 'False'
                    END AS Is_Bill_Active
                    -Sud/2Jul'21: Changed after Credit Note.
                    'True' AS Is_Bill_Active,
                    biltxn.PaymentMode as Payment_Method,
                    'N/A' as TransactionId,
                    CONVERT(float,0.00) as VAT_Refund_Amount
                FROM
                    BIL_TXN_BillingTransaction biltxn
                    INNER JOIN EMP_Employee emp ON emp.EmployeeId = biltxn.CreatedBy
                    INNER JOIN PAT_Patient pats ON pats.PatientId = biltxn.PatientId
                    INNER JOIN BIL_CFG_FiscalYears fiscYr ON biltxn.FiscalYearId = fiscYr.FiscalYearId
                WHERE
  CONVERT(date, biltxn.CreatedOn) BETWEEN CONVERT(date, @FromDate) 
  AND CONVERT(date, @ToDate) 
  )
            UNION ALL
            (
                            SELECT
                    fisc.FiscalYearFormatted AS Fiscal_Year,
                    ret.CreditNoteNumber AS Bill_No,
                    pat.ShortName AS Customer_name,
                    pat.PANNumber,
                    CONVERT( datetime, ret.ReturnedOn) AS BillDate,
                    ret.ReturnedOn AS BillDate,
                    ret.ReturnSubTotal AS Amount,
                    ret.ReturnDiscountAmount AS DiscountAmount,
                    CONVERT(float,0.00) AS Taxable_Amount,
                    CONVERT(float,0.00) AS Tax_Amount,
                    ret.ReturnTotalAmount AS Total_Amount,
                    CASE WHEN ret.IsReturnSyncedWithIRD = 1 THEN 'Yes' ELSE 'No' END  AS SyncedWithIRD,
                    CASE WHEN inv.PrintCount > 0 THEN 'Yes' ELSE 'No' END AS Is_Printed,
                    CONVERT( varchar(20), CONVERT(time, ret.ReturnedOn), 100)AS Printed_Time,
                    ret.ReturnedBy  AS Entered_By,
                    ret.ReturnedBy AS Printed_by,
                    might need to change logic for isrealtime--: sud:9May'18--  
                    CASE WHEN ISNULL(ret.IsReturnRealTime, 0) = 1 THEN 'Yes' ELSE 'No' END AS Is_Realtime,
                    'True' AS Is_Bill_Active,
                    ret.ReturnPaymentMethod AS Payment_Method,
                    'N/A' AS TransactionId,
                    CONVERT(float,0.00) AS VAT_Refund_Amount
                FROM PHRM_TXN_Invoice inv
                    INNER JOIN EMP_Employee emp ON emp.EmployeeId=inv.CreatedBy
                    INNER JOIN PAT_Patient pat ON pat.PatientId=inv.PatientId
                    INNER JOIN BIL_CFG_FiscalYears fisc ON inv.FiscalYearId=fisc.FiscalYearId
                    INNER JOIN(
        SELECT
                        InvoiceId 'ReturnTxnId',
                        'CR-PH' + CONVERT(varchar(10),CreditNoteID) 'CreditNoteNumber',
                        -SubTotal 'ReturnSubTotal',
                        -DiscountAmount 'ReturnDiscountAmount',
                        -TotalAmount 'ReturnTotalAmount',
                        IsRemoteSynced 'IsReturnSyncedWithIRD',
                        1 AS ReturnPrintCount,
                        0 AS 'ReturnVATRefundAmount',
                        e.FullName 'ReturnedBy',
                        invRet.CreatedOn 'ReturnedOn',
                        PaymentMode AS 'ReturnPaymentMethod',
                        IsRealtime AS 'IsReturnRealTime'
                    FROM
                        PHRM_TXN_InvoiceReturn invRet
                        JOIN EMP_Employee e ON invRet.CreatedBy=e.EmployeeId
                        JOIN PHRM_CFG_FiscalYears fisc ON invRet.FiscalYearId = fisc.FiscalYearId
     ) ret
                    ON inv.InvoiceId = ret.ReturnTxnId
                WHERE (CONVERT(DATE,inv.CreateOn) BETWEEN CONVERT(DATE,@FromDate) AND CONVERT(DATE,@ToDate))
            UNION ALL
                (
                SELECT
                    fiscYr.FiscalYearFormatted AS Fiscal_Year,
                    'PH' + CONVERT(varchar(30), inv.InvoicePrintId) AS Bill_No,
                    pats.ShortName AS Customer_name,
                    sud:2July'21--revised column to take Customer_name
                    pats.PANNumber,
                    CONVERT( datetime, inv.CreateOn) AS BillDate,
                    inv.SubTotal AS Amount,
                    inv.DiscountAmount AS DiscountAmount,
                    CONVERT(float,0.00) AS Taxable_Amount,
                    CONVERT(float,0.00) AS Tax_Amount,
                    inv.TotalAmount AS Total_Amount,
                    CASE WHEN inv.IsRemoteSynced = 1 THEN 'Yes' ELSE 'No' END  AS SyncedWithIRD,
                    CASE WHEN inv.PrintCount > 0 THEN 'Yes' ELSE 'No' END AS Is_Printed,
                    CONVERT(varchar(20), CONVERT(time, inv.CreateOn), 100)AS Printed_Time,
                    emp.FullName AS Entered_By,
                    emp.FullName AS Printed_by,
                    might need to change logic for isrealtime--: sud:9May'18--  
                    CASE WHEN ISNULL(inv.IsRealtime, 0) = 1 THEN 'Yes' ELSE 'No' END AS Is_Realtime,
                    'True' AS Is_Bill_Active,
                    inv.PaymentMode as Payment_Method,
                    'N/A' as TransactionId,
                    CONVERT(float,0.00) as VAT_Refund_Amount
                FROM
                    PHRM_TXN_Invoice inv
                    INNER JOIN EMP_Employee emp ON emp.EmployeeId = inv.CreatedBy
                    INNER JOIN PAT_Patient pats ON pats.PatientId = inv.PatientId
                    INNER JOIN BIL_CFG_FiscalYears fiscYr ON inv.FiscalYearId = fiscYr.FiscalYearId
                WHERE
  CONVERT(date, inv.CreateOn) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate))
  )
  )
  AS IRDDetails
        ORDER BY IRDDetails.BillDate DESC
    END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_IRD_PHRM_InvoiceDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_IRD_PHRM_InvoiceDetails]
		@FromDate Datetime=null ,
		@ToDate DateTime=null	
AS
/*
FileName: [SP_IRD_PHRM_InvoiceDetails]
CreatedBy/date: Vikas/2018-10-24
Description: to get the Pharmacy Invoice Details as per IRD requirements 
 Change History:
 -----------------------------------------------------------------------------
 S.No      ModifiedBy/Date                     Remarks
 -----------------------------------------------------------------------------
 1.			Vikas/2018-10-24					 Created
 2.        22 Nov 2018 By NageshBB               Update for fiscal year, and other columns
 3.			Ajay/04 Dec 2018					 Changed InvoiceId to InvoicePrintId
 4.			Vikas/02 Jan 2019					 modify patient shortname(firstname and last name) to fullname(first,middle, and lastName)
 5.         Sud/2Jul'21                        * Setting Is_Bill_Active=False if One or more CreditNote generated from current invoice.
								               * Taking Customer_name from Patient>ShortName field
								               * Corrected Double Columns (Is_Realtime, and Isbillactive were returned twice)
											   * Corrected SourceColumns for EmpName and PatientName.
 6.         Shankar/20thSept'21                  Update for Payment_Method and TransactionId columns(revised as per new ird requirements)
 ----------------------------------------------------------------------------
*/

BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)  
	 BEGIN
	 SET NOCOUNT ON
select 
       fisc.FiscalYearFormatted AS Fiscal_Year,
		Convert(varchar(20),inv.InvoicePrintId) as Bill_No,
		pat.ShortName as Customer_name,	
		pat.PANNumber,		
	    CONVERT(VARCHAR(10), inv.CreateOn, 120) As BillDate,
		'ItemTransaction' as BillType, --here only for ird details need to handle into pharmacy table also
	    inv.SubTotal AS Amount,
        inv.DiscountAmount as DiscountAmount,
	   ((inv.SubTotal-inv.DiscountAmount)+inv.VATAmount) As Total_Amount,
	   (inv.VATAmount) as Tax_Amount ,
	   case when inv.VATAmount >0 or inv.VATAmount is null then inv.SubTotal-inv.DiscountAmount else 0 end As Taxable_Amount ,
	   case when inv.VATAmount <=0 or inv.VATAmount is null then inv.SubTotal-inv.DiscountAmount else 0 end As  NonTaxable_Amount  ,
	   CASE When inv.IsRemoteSynced=1 then 'Yes' else 'No' END AS SyncedWithIRD,
	   CASE WHEN inv.PrintCount > 0  THEN 'Yes' ELSE 'No' END AS Is_Printed,	
	   CASE WHEN inv.PrintCount >0 Then   convert(varchar(20),convert(time,inv.CreateOn),100) Else '' END AS Printed_Time,

	   emp.FullName as Entered_By,				   
	   emp.FullName  as Printed_by,
	   inv.PrintCount as Print_Count,
	   CASE When ISNULL(inv.IsRealtime,0)=1 then 'Yes' ELSE 'No' END as Is_Realtime,		
	   -Sud/2Jul'21: Changed after Credit Note.
		CASE
			WHEN ISNULL(ret.ReturnInvoiceId, 0) = 0 THEN 'True'
			ELSE 'False' 
		END AS Is_Bill_Active,
		inv.PaymentMode as Payment_Method,
		inv.InvoiceId as TransactionId


  from PHRM_TXN_Invoice inv 
	  inner join	EMP_Employee emp on emp.EmployeeId=inv.CreatedBy
	  inner join    PAT_Patient pat on pat.PatientId=inv.PatientId
	  inner join BIL_CFG_FiscalYears fisc on inv.FiscalYearId=fisc.FiscalYearId
	  left join(Select distinct InvoiceId 'ReturnInvoiceId' from PHRM_TXN_InvoiceReturn )ret 
		  ON inv.InvoiceId = ret.ReturnInvoiceId

  WHERE (  
        CONVERT(DATE,inv.CreateOn) BETWEEN CONVERT(DATE,@FromDate) 
     AND CONVERT(DATE,@ToDate) 
     ) 
	  END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_AllRequisitionsBy_SampleCode]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author:		<Anish>
 Updated date: <2 July>
 Description:	<Get the Duplicate Data by Sample Code>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_AllRequisitionsBy_SampleCode]
 @sampleCode int,
 @sampleDate date,
 @groupingIndex int
AS
BEGIN

	DECLARE @startDate DATE;
	DECLARE @endDate DATE;
	DECLARE @rangeType VARCHAR(20);


	-First select range type
	SELECT @rangeType=(CASE 
						WHEN settingRow.ResetDaily=1 
						THEN 'day'
						WHEN settingRow.ResetMonthly=1
						THEN 'month'
						WHEN settingRow.ResetYearly=1
						THEN 'year'
						ELSE ''
						END
						)FROM (SELECT TOP(1) * FROM Lab_MST_RunNumberSettings WHERE RunNumberGroupingIndex=@GroupingIndex) settingRow;

		-Based upon the RangeType and the Sample Date Get Start Date and End Date---
		SELECT @startDate=dateRange.StartDate,@endDate=dateRange.EndDate FROM (SELECT * FROM FN_Common_GetNepStartEndDate_ByRangeName(@sampleDate,@rangeType)) dateRange;

		SELECT * FROM LAB_TestRequisition req JOIN Lab_MST_RunNumberSettings sett 
		ON (LOWER(req.VisitType) = LOWER(sett.VisitType)) AND (LOWER(req.RunNumberType) = LOWER(sett.RunNumberType)) AND (req.HasInsurance=sett.UnderInsurance) 
		WHERE sett.RunNumberGroupingIndex=@GroupingIndex AND (SampleCode=@sampleCode) AND SampleCreatedOn IS NOT NULL AND CONVERT(DATE,SampleCreatedOn) BETWEEN @startDate AND @endDate;
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_AllRequisitionsBy_VisitAndRunType]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author:		<Anish Bhattarai>
 Updated date: <1 Junly 2021>
 Description:	<Description,,>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_AllRequisitionsBy_VisitAndRunType]
 @GroupingIndex int,
 @PatientId int,
 @SampleDate date
AS
BEGIN
	DECLARE @startDate DATE;
	DECLARE @endDate DATE;
	DECLARE @rangeType VARCHAR(20);


	-First select range type
	SELECT @rangeType=(CASE 
						WHEN settingRow.ResetDaily=1 
						THEN 'day'
						WHEN settingRow.ResetMonthly=1
						THEN 'month'
						WHEN settingRow.ResetYearly=1
						THEN 'year'
						ELSE ''
						END
						)FROM (SELECT TOP(1) * FROM Lab_MST_RunNumberSettings WHERE RunNumberGroupingIndex=@GroupingIndex) settingRow;

	-Based upon the RangeType and the Sample Date Get Start Date and End Date---
	SELECT @startDate=dateRange.StartDate,@endDate=dateRange.EndDate FROM (SELECT * FROM FN_Common_GetNepStartEndDate_ByRangeName(@SampleDate,@rangeType)) dateRange;

	SELECT MAX(LastSampleNumber)+1 as LatestSampleCode FROM (
		SELECT LastSampleNumber FROM (SELECT MAX(SampleCode) AS LastSampleNumber FROM LAB_TestRequisition req JOIN Lab_MST_RunNumberSettings sett 
		ON (LOWER(req.VisitType) = LOWER(sett.VisitType)) AND (LOWER(req.RunNumberType) = LOWER(sett.RunNumberType)) AND (req.HasInsurance=sett.UnderInsurance) 
		WHERE sett.RunNumberGroupingIndex=@GroupingIndex AND SampleCode IS NOT NULL AND SampleCreatedOn IS NOT NULL AND CONVERT(DATE,SampleCreatedOn) BETWEEN @startDate AND @endDate
		GROUP BY req.SampleCode) AS ReqList
		UNION (SELECT 0 AS LastSampleNumber)
	) allReqList;

	SELECT DISTINCT TOP(1) SampleCode as SampleNumber,BarCodeNumber,SampleCodeFormatted, 0 as IsSelected,SampleCreatedOn as SampleDate FROM LAB_TestRequisition req
	JOIN Lab_MST_RunNumberSettings sett 
	ON (LOWER(req.VisitType) = LOWER(sett.VisitType)) AND (LOWER(req.RunNumberType) = LOWER(sett.RunNumberType)) AND (req.HasInsurance=sett.UnderInsurance) 
	WHERE sett.RunNumberGroupingIndex=@GroupingIndex AND SampleCode IS NOT NULL AND SampleCreatedOn IS NOT NULL AND CONVERT(DATE,SampleCreatedOn) BETWEEN @startDate AND @endDate
	AND req.PatientId=@PatientId AND req.BarCodeNumber IS NOT NULL 
	ORDER BY BarCodeNumber DESC;

END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_CategoryWiseLabTestTotalCount]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<ANish Bhattarai>
 Create date: <27 Apr 2020>
 Description:	<Get the count of test category wise>
--------------------------------------------------------------------------------------
Co-Author:          <Dev Narayan Chaudhary>
Modified Date:      <13 Sep 2021>
Description:        <Added status filter>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_CategoryWiseLabTestTotalCount] 
( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL,
	  @OrderStatus varchar(200) = NULL)
AS
BEGIN
    Declare @OrderStatusList Table(OrderStatus varchar(20))
	Insert into @OrderStatusList
	Select value from string_split(@OrderStatus,',') where RTRIM(value) <>''

	select cat.TestCategoryId,cat.TestCategoryName, Count(req.RequisitionId) as TotalCount from LAB_TestRequisition req 
	join @OrderStatusList os on os.OrderStatus = req.OrderStatus
	join LAB_LabTests test on req.LabTestId = test.LabTestId
	join LAB_TestCategory cat on test.LabTestCategoryId = cat.TestCategoryId
	where req.BillingStatus <> 'cancel' and req.BillingStatus <> 'returned'
	and Convert(date,req.OrderDateTime) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
	group by cat.TestCategoryId, cat.TestCategoryName order by [TotalCount] desc;
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetAllLabProvisionalFinalReports]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-End:Anjana: July12'21: Parameter to change the collection site of lab samples---




-------Anish: 14th July: STart:  Altered SP_LAB_GetAllLabProvisionalFinalReports------
CREATE PROCEDURE [dbo].[SP_LAB_GetAllLabProvisionalFinalReports]
	@BarcodeNumber int = 0,
	@SampleNumber int = 0,
	@PatientId int = 0,
	@StartDate DateTime = null,
	@EndDate DateTime = null,
	@CategoryList NVARCHAR(400) = '',
	@LabType varchar(50),	
	@IsForLabMaster bit
AS
BEGIN
	Declare @allowProvisionalPrintStr varchar(10)
	Set @allowProvisionalPrintStr = (Select ParameterValue from CORE_CFG_Parameters where LOWER(ParameterGroupName)='lab' and ParameterName='AllowLabReportToPrintOnProvisional');
	Declare @allowProvisionalPrint bit = 0;
	IF(@allowProvisionalPrintStr = 'true' OR @allowProvisionalPrintStr = '1')
	BEGIN 
	Set @allowProvisionalPrint=1
	END

	Declare @CategoryTbl Table(CategoryId int)
	Insert into @CategoryTbl
	Select value from string_split(@CategoryList, ',') where RTRIM(value) <> ''
		Select 
		req.SampleCodeFormatted,
		req.SampleCode,
		Convert(date, req.SampleCreatedOn) as SampleDate,
		req.LabReportId,
		req.VisitType,
		req.RunNumberType as RunNumType,
		report.IsPrinted,
		req.BarCodeNumber,
		req.WardName,
		req.LabTestName,
		req.BillingStatus,
		req.RequisitionId,
		req.LabTestId,
		req.SampleCreatedBy as SampleCollectedBy,
		req.VerifiedBy as VerifiedBy,
		req.IsVerified,
		req.ResultAddedBy as ResultAddedBy,		
		req.HasInsurance,
		req.PrintCount,
		req.PrintedBy,
		pat.PatientId,
		pat.PatientCode,
		pat.DateOfBirth,
		pat.PhoneNumber,
		pat.Gender,
		pat.ShortName as PatientName,		
		emp.FullName as ReportGeneratedBy,
		report.CreatedBy as ReportGeneratedById,		
		test.LabTestCategoryId as LabCategoryId,
		@allowProvisionalPrint as AllowOutpatientWithProvisional,
		CASE LOWER(req.BillingStatus) 
		WHEN 'provisional' then 'provisional' 
		WHEN 'unpaid' then 'paid'
		WHEN 'paid' then 'paid'
		ELSE '' end as BillingStatus
		
		from LAB_TestRequisition req 
		join PAT_Patient pat on req.PatientId = pat.PatientId
		join LAB_TXN_LabReports report on req.LabReportId = report.LabReportId
		join LAB_LabTests test on req.LabTestId = test.LabTestId
		left join EMP_Employee emp on report.CreatedBy = emp.EmployeeId
		where req.OrderStatus = 'report-generated' and 
		(req.BarcodeNumber = (case @BarcodeNumber when 0 then req.BarCodeNumber else @BarcodeNumber end)) and
		(req.SampleCode = (case @SampleNumber when 0 then req.SampleCode else @SampleNumber end)) and
		(req.PatientId = (case @PatientId when 0 then req.PatientId else @PatientId end)) and
		(report.CreatedOn Is Not NULL) and 
		(Convert(date,report.CreatedOn) BETWEEN CONVERT(date, @StartDate) and CONVERT(date, @EndDate)) and 
		(test.LabTestCategoryId In (Select CategoryId from @CategoryTbl)) and 
		(LOWER(req.BillingStatus) IN ('paid','unpaid','provisional')) and
		(req.LabTypeName = (case @IsForLabMaster when 1 then req.LabTypeName else @LabType end))		 
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetAllSmsApplicableTests]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_LAB_GetAllSmsApplicableTests] 
	@FromDate DATE,
	@ToDate DATE
  
AS
/*
SP Name:	SP_LAB_GetAllSmsApplicableTests
Author:		Krishna Bogati/Sanjit Raj Shakya
CreatedOn:	2021-12-22
Remarks:	Created SP to Replace Linq Query from API in Lab Controller
Exec Example: EXEC SP_LAB_GetAllSmsApplicableTests @FromDate = '2021-01-01', @ToDate = '2021-12-22'
-------------------------------------------------------------------------------------------------------------
*/
BEGIN
	
	DECLARE @CovidTestName VARCHAR(1000) = '';
	DECLARE @VerificationParameter VARCHAR(1000) = '';
	DECLARE @IsVerificationRequired BIT = 0;
	DECLARE @VerificationLevel INT = 0;
	
	SELECT TOP(1)  @CovidTestName =  JSON_VALUE(ParameterValue, '$.DisplayName') FROM CORE_CFG_Parameters
	WHERE ParameterGroupName = 'common' AND ParameterName = 'CovidTestName'

	SELECT TOP(1)  @VerificationParameter = ParameterValue FROM CORE_CFG_Parameters
	WHERE ParameterGroupName = 'lab' AND ParameterName = 'LabReportVerificationNeededB4Print'

	SET @IsVerificationRequired = CAST (JSON_VALUE(@VerificationParameter, '$.EnableVerificationStep') AS BIT)
	SET @VerificationLevel = CAST (JSON_VALUE(@VerificationParameter, '$.VerificationLevel') AS INT)


	SELECT 
		LR.RequisitionId, 
		P.ShortName AS PatientName, 
		LR.LabTestName, 
		LR.SampleCollectedOnDateTime, 
		P.DateOfBirth, 
		P.Age, 
		P.Gender, 
		P.PatientCode, 
		ISNULL(P.PhoneNumber,'') as PhoneNumber, 
		ISNULL(LR.IsSmsSend,0) as IsSmsSend, 
		LR.IsVerified, 
		LTCR.Value AS Result, 
		ISNULL(LR.IsFileUploaded,0) as IsFileUploaded
	FROM 
		LAB_TestRequisition AS LR
		INNER JOIN PAT_Patient AS P ON LR.PatientId = (P.PatientId)
		INNER JOIN LAB_LabTests AS LT ON LR.LabTestId = LT.LabTestId
		INNER JOIN LAB_TXN_TestComponentResult AS LTCR ON LR.RequisitionId = LTCR.RequisitionId
	WHERE 
		LT.SmsApplicable = 1 AND 
		LT.LabTestName = @CovidTestName AND
		LR.OrderStatus IN ('report-generated','result-added') AND
		((@IsVerificationRequired = 1 AND LR.IsVerified = 1) OR @IsVerificationRequired = 0) AND
		LTCR.Value IN ('positive','negative') AND
		LR.IsActive = 1 AND
		CONVERT(Date, LR.CreatedOn) BETWEEN @FromDate AND @ToDate
END


GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetCovidTestDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Anish: End: 7 May, SMS Parameter update made-------



start:anjana:7May'21--Correction in COVID-19 Statistics Stored Proc---

/*
 FileName: [SP_LAB_GetCovidTestDetails] 
 Created: May,3,2021
 Description: To get the details of Covid-19 test results
Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.	     May,3,2021/Anjana		                inital draft
 2.		 May,6'21/Anjana					Added testname as parameter
 ----------------------------------------------------------------------
 */
CREATE PROCEDURE [dbo].[SP_LAB_GetCovidTestDetails] 
@TestName varchar(200) = NULL
AS
BEGIN
Select * from 

(Select Count(*) TotalTest,
	Sum( Case when [Value] = 'Negative' then 1 else 0 end) as TotalNegative,
	Sum( Case when [Value] = 'Positive' then 1 else 0 end) as TotalPositive,
	Sum( Case when (req.OrderStatus ='pending' or req.OrderStatus ='active') then 1 else 0 end) as TotalPendingTests
	from LAB_TestRequisition req
	left join LAB_TXN_TestComponentResult result on req.RequisitionId = result.RequisitionId
	join LAB_LabTests test on req.LabTestId = test.LabTestId
	where test.LabTestName = 'RT-PCR NCOV-2' and test.IsActive = 1) TillDate,
    where test.LabTestName = @TestName and test.IsActive = 1) TillDate,

	(Select Count(*) TotalTestToday,
	ISNULL( Sum( Case when [Value] = 'Negative' then 1 else 0 end),0) as TotalNegativeToday,
	ISNULL( Sum( Case when [Value] = 'Positive' then 1 else 0 end),0) as TotalPositiveToday,
	ISNULL( Sum( Case when (req.OrderStatus ='pending' or req.OrderStatus ='active') then 1 else 0 end),0) as PendingTestsToday
	from LAB_TestRequisition req
	left join LAB_TXN_TestComponentResult result on req.RequisitionId = result.RequisitionId
	join LAB_LabTests test on req.LabTestId = test.LabTestId
	where test.LabTestName = @TestName and test.IsActive = 1 
	and req.OrderDateTime between(CONVERT(date, getdate())) and CONVERT(date, DATEADD(day, 1, getdate()))) today
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetLatestBarCodeNumber]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author:		<Author,,Name>
 Create date: <Create Date,,>
 Description:	<Description,,>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_GetLatestBarCodeNumber]
AS
BEGIN
select COALESCE(MAX(BarCodeNumber)+1,1000000) as Value from LAB_BarCode
END
GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetPatAndReportInfoForFinalReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_LAB_GetPatAndReportInfoForFinalReport]
  @FromDate DATE=NULL,
  @ToDate DATE=NULL,
  @LabTypeName varchar(100)='op-lab',
  @CategoryIdCsv VARCHAR(200)=NULL
AS 
/*
File: SP_LAB_GetPatAndReportInfoForFinalReport
Created: Anish/Sud:6Sep'21
Description: To get patient info, report info, etc in a date range for Final Reports Grid
NOTE: 
   * Returned  And Cancelled items are excluded from this.
   * Provisional Print restriction (parameterized) is checked here
   * our default labtype is op-lab (it may not be passed from some hospitals, hence pre-assigned it.
Change History:
-----------------------------------------------------------------
S.No.  ChangedBy/Date               Remarks
-----------------------------------------------------------------
1.    Anish/Sud:6Sep'21             Needed new sp since for final report since previous was processing more data and hence taking more time
2.    Anish/10Sep'21                Correction in Verification Filter, which was missing earlier.
3.    Dev /23Jan' 22                Added new fileds in select query like firstname, lastname, email,isfileuploadedtotelemedicine etc.
-----------------------------------------------------------------
*/
BEGIN

-Conditional Restriction for Lab reports of OP>Patients with BillStatus=Provisional---
Declare @allowProvisionalPrintStr varchar(10)
Set @allowProvisionalPrintStr = (Select ParameterValue 
                                 from CORE_CFG_Parameters 
								 where LOWER(ParameterGroupName)='lab' and ParameterName='AllowLabReportToPrintOnProvisional');
Declare @allowProvisionalPrint bit = 0;
IF(@allowProvisionalPrintStr = 'true' OR @allowProvisionalPrintStr = '1')
BEGIN 
  Set @allowProvisionalPrint=1
END

--Conditional Restriction of Lab Reports of All Patients based on Verification Parameter---
declare @isVerificationEnabled bit;
declare @verificationParam varchar(500) = (Select ParameterValue 
                                           from CORE_CFG_Parameters 
										   where ParameterName='LabReportVerificationNeededB4Print')
set @isVerificationEnabled = (SELECT JSON_VALUE(@verificationParam, '$.EnableVerificationStep'));


--create temp table to insert categoryid list coming as Comma Separated Value
Declare @CategoryIdTbl Table(CategoryId int)
Insert into @CategoryIdTbl
Select value from string_split(@CategoryIdCsv, ',') where RTRIM(value) <> ''

SELECT pat.PatientId,
pat.PatientCode, 
pat.DateOfBirth, 
pat.PhoneNumber, 
pat.Gender, 
pat.ShortName AS PatientName,
pat.FirstName,
pat.LastName,
pat.Email,
req.SampleCodeFormatted, 
req.VisitType, 
req.RunNumberType, 
req.IsFileUploadedToTeleMedicine,
ISNULL(rpt.IsPrinted,0) IsPrinted, 
req.BillingStatus,
req.BarCodeNumber, 
rpt.LabReportId AS ReportId, 
req.WardName,
emp.FullName ReportGeneratedBy,
string_agg(req.LabTestName, ',') AS LabTestCSV,
string_agg(req.RequisitionId, ',')  AS LabRequisitionIdCSV,
@allowProvisionalPrint AS AllowOutpatientWithProvisional,
-if provisional not restricted then no further check required.
-else: only inpatient and emergency visitype are allowed to print in billingstatus=provisional
CASE WHEN @allowProvisionalPrint=1 then 1 
     WHEN req.VisitType='inpatient' OR req.VisitType='emergency' THEN 1
     WHEN req.BillingStatus !='provisional' THEN 1
     ELSE 0 END AS IsValidToPrint
FROM LAB_TestRequisition req 
INNER JOIN LAB_LabTests tst on req.LabTestId=tst.LabTestId
INNER JOIN LAB_TestCategory allCat on allCat.TestCategoryId=tst.LabTestCategoryId
INNER JOIN @CategoryIdTbl selCat on selCat.CategoryId=allCat.TestCategoryId
INNER JOIN PAT_Patient pat on req.PatientId=pat.PatientId
INNER JOIN LAB_TXN_LabReports rpt on req.LabReportId=rpt.LabReportId
LEFT JOIN EMP_Employee emp on rpt.CreatedBy = emp.EmployeeId

Where Convert(Date,rpt.CreatedOn) Between @FromDate and @ToDate
     checking for default labtypename if it's null
     and ISNULL(req.LabTypeName,'op-lab')= ISNULL(@LabTypeName,'op-lab')
   and req.BillingStatus !='cancel'
   and req.BillingStatus !='returned'
   and req.OrderStatus = 'report-generated'
   -if verification is enabled then 
   and (req.IsVerified=1 OR ISNULL(req.IsVerified,0)=@isVerificationEnabled)

Group by pat.PatientId,
    pat.PatientCode, 
    pat.DateOfBirth, 
    pat.PhoneNumber, 
    pat.Gender, 
    pat.ShortName,
    req.SampleCodeFormatted, 
    req.VisitType, 
    req.RunNumberType, 
    rpt.IsPrinted, 
    req.BillingStatus,
    req.BarCodeNumber, 
    rpt.LabReportId, 
    req.WardName, 
    emp.FullName,
	pat.FirstName,
	pat.LastName,
	pat.Email,
	req.IsFileUploadedToTeleMedicine
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetPatientExistingRequisition_With_SameRunNumber]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish>
 Create date: <2 July>
 Description:	<Get the existing requisition with same run number data>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_GetPatientExistingRequisition_With_SameRunNumber]
	@GroupingIndex int,
	@SampleDate Date,
	@SampleCode int,
	@PatientId Bigint
AS
BEGIN
	
	DECLARE @startDate DATE;
	DECLARE @endDate DATE;
	DECLARE @rangeType VARCHAR(20);


	-First select range type
	SELECT @rangeType=(CASE 
						WHEN settingRow.ResetDaily=1 
						THEN 'day'
						WHEN settingRow.ResetMonthly=1
						THEN 'month'
						WHEN settingRow.ResetYearly=1
						THEN 'year'
						ELSE ''
						END
						)FROM (SELECT TOP(1) * FROM Lab_MST_RunNumberSettings WHERE RunNumberGroupingIndex=@GroupingIndex) settingRow;

	-Based upon the RangeType and the Sample Date Get Start Date and End Date---
	SELECT @startDate=dateRange.StartDate,@endDate=dateRange.EndDate FROM (SELECT * FROM FN_Common_GetNepStartEndDate_ByRangeName(@sampleDate,@rangeType)) dateRange;

	SELECT * FROM LAB_TestRequisition req JOIN Lab_MST_RunNumberSettings sett 
		ON (LOWER(req.VisitType) = LOWER(sett.VisitType)) AND (LOWER(req.RunNumberType) = LOWER(sett.RunNumberType)) AND (req.HasInsurance=sett.UnderInsurance) 
		WHERE sett.RunNumberGroupingIndex=@GroupingIndex AND SampleCode IS NOT NULL AND (SampleCode=@SampleCode) AND req.PatientId=@PatientId
		AND SampleCreatedOn IS NOT NULL AND CONVERT(DATE,SampleCreatedOn) BETWEEN @startDate AND @endDate;
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetPatientListForReportDispatch]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_LAB_GetPatientListForReportDispatch]
  @StartDate DATE = null,
  @EndDate DATE = null,
  @CategoryList NVARCHAR(400) = ''
AS

/*
File: SP_LAB_GetPatientListForReportDispatch
Created: Anish/Sud:6Sep'21
Description: To get distinct patient list in the given date range for Lab-Dispatch Page.
NOTE: Returned  And Cancelled items are excluded from this.
Change History:
-----------------------------------------------------------
S.No.  ChangedBy/Date         Remarks
-----------------------------------------------------------
1.    Anish/Sud:6Sep'21       Needed new sp since previous was processing more data and hence taking more time
2.    Anish:10Sep'21          Correction in Verification Filter, which was missing earlier.
                              Added ProvisionalRestriction Check(parameterized) which was missing earlier.
-----------------------------------------------------------
*/
BEGIN

Declare @CategoryIdTbl Table(CategoryId int)
Insert into @CategoryIdTbl
Select value from string_split(@CategoryList, ',') where RTRIM(value) <> ''

-Conditional Restriction for Lab reports of OP>Patients with BillStatus=Provisional---
Declare @allowProvisionalPrintStr varchar(10)
Set @allowProvisionalPrintStr = (Select ParameterValue 
                                 from CORE_CFG_Parameters 
								 where LOWER(ParameterGroupName)='lab' and ParameterName='AllowLabReportToPrintOnProvisional');
Declare @allowProvisionalPrint bit = 0;
IF(@allowProvisionalPrintStr = 'true' OR @allowProvisionalPrintStr = '1')
BEGIN 
  Set @allowProvisionalPrint=1
END


--Conditional Restriction of Lab Reports of All Patients based on Verification Parameter---
declare @isVerificationEnabled bit;
declare @verificationParam varchar(500) = (Select ParameterValue 
                                           from CORE_CFG_Parameters 
                                           where ParameterName='LabReportVerificationNeededB4Print')

set @isVerificationEnabled = (SELECT JSON_VALUE(@verificationParam, '$.EnableVerificationStep'));

need to get distinct since there could be more than one requisition for same patient---  
Select distinct 
    pat.PatientId,
    pat.PatientCode,
    pat.ShortName as PatientName,
    pat.PhoneNumber,
    pat.Gender,
    Convert(Date,pat.DateOfBirth) 'DateOfBirth'
    
from LAB_TestRequisition req 
    INNER JOIN  PAT_Patient pat on req.PatientId = pat.PatientId
    INNER JOIN LAB_LabTests test on req.LabTestId = test.LabTestId
    INNER JOIN @CategoryIdTbl cat on test.LabTestCategoryId=cat.CategoryId
    
where req.OrderStatus = 'report-generated'  --take only report generated patients..
    and (req.IsVerified=1 OR ISNULL(req.IsVerified,0) = @isVerificationEnabled )
       filter by request created on--
    and Convert(Date,req.CreatedOn) Between @StartDate and @EndDate
    and req.BillingStatus !='returned'  --exclude returned and cancelled requests (from billing)
    and req.BillingStatus !='cancel'
   -if provisional not restricted then no further check required.
    -else: only inpatient and emergency visitype are allowed to print in billingstatus=provisional
	AND (  @allowProvisionalPrint = 1
	       OR(req.VisitType='inpatient' OR req.VisitType='emergency')
		   OR (req.BillingStatus !='provisional')
		)

Order by pat.ShortName
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_GetSamplesCollectedInfo]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END:Ramesh-28 Jun'21: PaymentStatus added in GoodsReceipt table---

Start: Anjana: 28 June, 2021: Order Sample collected list in FIFO order-----

CREATE PROCEDURE [dbo].[SP_LAB_GetSamplesCollectedInfo]  --- SP_LAB_GetSamplesCollectedInfo
    @FromDate Datetime=null ,
	@ToDate DateTime=null,
	@SelectedLab varchar(100)
AS
/*
FileName: SP_APPT_GetPatientVisitStickerInfo
CreatedBy/date: Anjana/Feb/22/2021
Description: Get list of lab items whose sample collection is completed.  

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Anjana/Feb/22/2021                   Initial Draft
2.      Anjana/March/9/2021					Added SampleCollectedOnDAteTime on select
---------------------------------------------------------------------------------------
*/
BEGIN

select 
	pat.PatientId,
	pat.ShortName as PatientName,
	pat.Age,
	pat.Gender,
	pat.DateOfBirth,
	pat.PatientCode,
	pat.PhoneNumber,
	cat.TestCategoryName,
	test.LabTestName,
	req.BarCodeNumber,
	req.SampleCodeFormatted,
	req.SampleCreatedOn,
	req.LabTestSpecimen,
	req.SampleCollectedOnDateTime

  from LAB_TestRequisition req join PAT_Patient pat on pat.PatientId=req.PatientId
			join LAB_LabTests test on test.LabTestId = req.LabTestId 
			join LAB_TestCategory cat on cat.TestCategoryId = test.LabTestCategoryId 
            where req.OrderStatus != Lower('active')
			and Convert(Date, req.CreatedOn) between ISNULL(@FromDate, Convert(Date, GETDATE())) and ISNULL(@ToDate, Convert(Date, GETDATE())) 
			and req.BillingStatus != 'cancel' and req.BillingStatus != 'returned'			
			and req.LabTypeName = Lower(@SelectedLab)
			Order by req.BarCodeNumber ASC
END 

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_Statuswise_Test_Detail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <3 August 2020>
 Description:	<Get the test requisition detail and its status>
Modified Column Name : <8 August 2020>
--------------------------------------------------------------------------------------
Co-Author:          <Dev Narayan Chaudhary>
Modified Date:      <13 Sep 2021>
Description:        <Added status filter>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_Statuswise_Test_Detail] 
( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL,
	  @OrderStatus varchar(200) = NULL)
AS
BEGIN
	Declare @OrderStatusList Table(OrderStatus varchar(20))
	Insert into @OrderStatusList
	Select value from string_split(@OrderStatus,',') where RTRIM(value) <>''
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
BEGIN
SELECT OrderDateTime 'RequestedOn', pat.ShortName 'PatientName',pat.PatientCode 'HospitalNo',
Convert(Varchar(10),pat.Age)+'/'+ pat.Gender 'AgeSex',
CASE WHEN WardName='outpatient' THEN 'OPD'
ELSE UPPER(wardname) END AS  WardName,
CASE WHEN req.ProviderName is null THEN 'SELF' 
ELSE req.ProviderName END AS 'ReferredBy',
LabTestName,SampleCodeFormatted 'RunNo',
CASE 
WHEN req.OrderStatus='active' then 'Sample Not Collected' 
WHEN req.OrderStatus='pending' then 'Sample Collected'
WHEN req.OrderStatus='result-added' then 'Result Added'
WHEN req.OrderStatus='report-generated' then 'Report Generated' 
END AS TestStatus,
CASE 
WHEN BillingStatus IN ('paid','unpaid') THEN 'Paid' 
WHEN BillingStatus='cancel' THEN 'bill-cancelled'
WHEN BillingStatus = 'returned' THEN 'bill-returned' 
WHEN BillingStatus = 'provisional' THEN 'provisional' 
END AS BillStatus,
emp1.FullName AS SampleCollectedBy,emp4.FullName AS ReportPrintedBy,
emp2.FullName As CancelledByUser, req.BillCancelledOn
FROM LAB_TestRequisition req 
join @OrderStatusList os on req.OrderStatus = os.OrderStatus
LEFT JOIN EMP_Employee emp1 ON req.SampleCreatedBy = emp1.EmployeeId
LEFT JOIN EMP_Employee emp2 ON req.BillCancelledBy = emp2.EmployeeId
LEFT JOIN EMP_Employee emp3 ON req.ResultAddedBy = emp3.EmployeeId
LEFT JOIN LAB_TXN_LabReports report ON req.LabReportId = report.LabReportId
LEFT JOIN EMP_Employee emp4 ON report.PrintedBy = emp4.EmployeeId
JOIN PAT_Patient pat ON req.PatientId=pat.PatientId
WHERE CONVERT(date,req.OrderDateTime) between @FromDate and @ToDate
Order by req.OrderDateTime desc;
END
END


GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_TestCount_GovernmentReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:    	<ANish Bhattarai>
 Create date: <27 August 2020>
 Description:	<Get the count of each test of Government Lab Report>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_TestCount_GovernmentReport] 
	@FromDate date = NULL,
	@ToDate date = NULL
AS
BEGIN

  -Case 1: Is Items are Testbased i.e.NOT Component Based(IsComponentBased == false)----
  (SELECT
    masterData.SerialNumber,
    masterData.GroupName,
    masterData.TestName,
    masterData.DisplayName,
    masterData.HasInnerItems,
    masterData.InnerTestGroupName,
    COUNT(*) AS 'Total'
  FROM (SELECT
    LabItemId,
    IsComponentBased,
    PositiveIndicator,
    IsResultCount,
    SerialNumber,
    TestName,
    GroupName,
    DisplayName,
    HasInnerItems,
    InnerTestGroupName
  FROM Lab_Gov_Report_Mapping map
  JOIN Lab_Mst_Gov_Report_Items item
    ON map.ReportItemId = item.ReportItemId
  WHERE map.IsComponentBased = 0
  AND map.IsActive = 1) masterData
  JOIN LAB_TestRequisition req
    ON req.LabTestId = masterData.LabItemId
  WHERE req.IsActive = 1
  AND CONVERT(date, req.OrderDateTime) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
  AND (req.BillingStatus NOT IN ('returned', 'cancel'))
  GROUP BY masterData.SerialNumber,
           masterData.TestName,
		   masterData.LabItemId,
           masterData.GroupName,
           masterData.DisplayName,
           masterData.HasInnerItems,
           masterData.InnerTestGroupName
  )
  UNION
  -Case 2: Is Items are Component Based and IsResultCount<>0----
  (SELECT
    masterData.SerialNumber,
    masterData.GroupName,
    masterData.TestName,
    masterData.DisplayName,
    masterData.HasInnerItems,
    masterData.InnerTestGroupName,
    COUNT(*) AS 'Total'
  FROM (SELECT
    LabItemId,
    IsComponentBased,
    PositiveIndicator,
    IsResultCount,
    SerialNumber,
    TestName,
    GroupName,
    DisplayName,
    HasInnerItems,
    InnerTestGroupName,
    ComponentId,
    ReportMapId,
    map.ReportItemId
  FROM Lab_Gov_Report_Mapping map
  JOIN Lab_Mst_Gov_Report_Items item
    ON map.ReportItemId = item.ReportItemId
  WHERE map.IsComponentBased = 1
  AND map.IsActive = 1
  AND map.IsResultCount = 1) masterData
  JOIN (SELECT
    res.RequisitionId,
    res.ComponentName,
    res.[Value],
    res.LabTestId,
	res.ComponentId
  FROM LAB_TXN_TestComponentResult res
  JOIN LAB_TestRequisition req
    ON res.RequisitionId = req.RequisitionId
  WHERE res.IsActive = 1 AND req.IsActive = 1
  AND CONVERT(date, req.OrderDateTime) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
  AND req.BillingStatus NOT IN ('returned', 'cancel')) labData
    ON (labData.ComponentId = masterData.ComponentId AND labData.LabTestId = masterData.LabItemId)
	AND LTRIM(RTRIM((LOWER(labData.[Value])))) = LTRIM(RTRIM((LOWER(masterData.PositiveIndicator))))
  GROUP BY masterData.SerialNumber,
           masterData.TestName,
		   masterData.LabItemId,
           masterData.GroupName,
           masterData.DisplayName,
           masterData.HasInnerItems,
           masterData.InnerTestGroupName
  )
  UNION
  -Case 3: Is Items are Component Based and IsResultCount=0----
  (SELECT
    masterData.SerialNumber,
    masterData.GroupName,
    masterData.TestName,
    masterData.DisplayName,
    masterData.HasInnerItems,
    masterData.InnerTestGroupName,
    COUNT(*) AS 'Total'
  FROM (SELECT
    LabItemId,
    IsComponentBased,
    PositiveIndicator,
    IsResultCount,
    SerialNumber,
    TestName,
    GroupName,
    DisplayName,
    HasInnerItems,
    InnerTestGroupName,
    ComponentId
  FROM Lab_Gov_Report_Mapping map
  JOIN Lab_Mst_Gov_Report_Items item
    ON map.ReportItemId = item.ReportItemId
  WHERE map.IsComponentBased = 1
  AND map.IsActive = 1
  AND map.IsResultCount = 0) masterData
  JOIN (SELECT
    res.RequisitionId,
    res.ComponentName,
    res.Value,
    res.LabTestId,
	res.ComponentId
  FROM LAB_TXN_TestComponentResult res
  JOIN LAB_TestRequisition req
    ON res.RequisitionId = req.RequisitionId
  WHERE res.IsActive = 1
  AND CONVERT(date, req.OrderDateTime) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
  AND req.BillingStatus NOT IN ('returned', 'cancel')) labData
    ON labData.ComponentId = masterData.ComponentId
  GROUP BY masterData.SerialNumber,
           masterData.TestName,
		   masterData.LabItemId,
           masterData.GroupName,
           masterData.DisplayName,
           masterData.HasInnerItems,
           masterData.InnerTestGroupName
  )
END

GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_TestWiseTotalCount]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<ANish Bhattarai>
 Create date: <27 Apr 2020>
 Description:	<Get the count of test category wise>
--------------------------------------------------------------------------------------
Co-Author:          <Dev Narayan Chaudhary>
Modified Date:      <13 Sep 2021>
Description:        <Added status filter>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_TestWiseTotalCount] 
( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL,
	  @catId INT = NULL,
	  @OrderStatus varchar(200) = null)
AS
BEGIN
Declare @qry nvarchar(max);
Set @qry = 'Declare @OrderStatusList Table(OrderStatus varchar(20))
Insert into @OrderStatusList
Select value from ' + 'string_split(' + '''' + @OrderStatus + '''' + ',' + ''',''' + ')' + ' where RTRIM(value) <>' + '''' + '''' + '; '  +
'select cat.TestCategoryName,req.LabTestId,req.LabTestName, Count(req.RequisitionId) as TotalCount from LAB_TestRequisition req 
join @OrderStatusList os on os.OrderStatus = req.OrderStatus
join LAB_LabTests test on req.LabTestId = test.LabTestId
join LAB_TestCategory cat on test.LabTestCategoryId = cat.TestCategoryId where';

IF(@catId IS NOT NULL  and @catId > 0)
BEGIN
SET @qry = @qry + ' cat.TestCategoryId = ' + cast(@catId as varchar(10)) + ' and';
END

Set @qry = @qry + ' req.BillingStatus <> ' +  '''cancel''' + ' and req.BillingStatus <> ' +  '''returned''' 
+ ' and Convert(date,req.OrderDateTime) BETWEEN CONVERT(date,''' + cast(@FromDate AS VARCHAR(50)) + ''',103)  AND ' 
+ 'CONVERT(date,''' + cast(@ToDate AS VARCHAR(50)) + ''',103) group by req.LabTestId, req.LabTestName, cat.TestCategoryName order by req.LabTestId desc';

EXEC(@qry);

select cat.TestCategoryName,req.LabTestId,req.LabTestName, Count(req.RequisitionId) as TotalCount from LAB_TestRequisition req 
join LAB_LabTests test on req.LabTestId = test.LabTestId
join LAB_TestCategory cat on test.LabTestCategoryId = cat.TestCategoryId
where req.BillingStatus <> 'cancel' and req.BillingStatus <> 'returned' 
and Convert(date,req.OrderDateTime) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
group by req.LabTestId, req.LabTestName, cat.TestCategoryName;

END


GO
/****** Object:  StoredProcedure [dbo].[SP_LAB_Update_Test_SmsStatus]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anjana Sharma>
 Create date: <26th April, 2021>
 Description:	<Update IsSmsSend column in Lab_TestRequisition table>
 =============================================
CREATE PROCEDURE [dbo].[SP_LAB_Update_Test_SmsStatus]  
	@RequistionIds NVARCHAR(max) = '' 
AS
BEGIN
	DECLARE @ReqIdTbl Table(RequisitionId int)
	Insert into @ReqIdTbl
	SELECT value FROM STRING_SPLIT(@RequistionIds, ',') WHERE RTRIM(value) <> ''

	Update LAB_TestRequisition
	set IsSmsSend = 1
	where RequisitionId IN (Select RequisitionId from @ReqIdTbl)
	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_MAT_GetPatientListForAllowance]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_MAT_GetPatientListForAllowance] 
   @SearchTxt varchar(200) = '',
   @IsSearchAll bit=0,
   @RowCounts INT = NULL
AS

/*
 FileName: [SP_MAT_GetPatientListForAllowance] 
 Created: 17-Nov'21/Dhanashri
 Description: To Get the Patients Info For Maternity Allowance Payment + Patients matching given search conditions.
             Returns upto 200 patients
 -------------------------------------------------------------------------------------------
 Change History
 --------------------------------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 --------------------------------------------------------------------------------------------
 1.       17-Nov'21/Dhanashri                  Created SP for get patient list for maternity allowance payment
 2.       19-Nov'21/Aniket					   Updated query with select pat.patient
 3.       21-Nov'21/Aniket					   Updated query with select pat.DateofBirth 
---------------------------------------------------------------------------------------------
*/

IF(@IsSearchAll = 0) 
	BEGIN  
		SET @RowCounts=ISNULL(@RowCounts,200)--default rowscount=200
		IF(@SearchTxt='null')
		BEGIN
			SET @SearchTxt=null
		END
		Select top (@RowCounts)
		  pat.PatientId,pat.PatientCode,pat.FirstName,pat.LastName,pat.ShortName,pat.Age,pat.Gender,pat.PhoneNumber,pat.Address,adt.DischargeDate,pvs.VisitCode,pat.DateOfBirth
		  from ADT_PatientAdmission adt
		  JOIN PAT_Patient pat on adt.PatientId = pat.PatientId
		  JOIN PAT_PatientVisits pvs on adt.PatientVisitId = pvs.PatientVisitId
		  where pat.IsActive=1 and  AdmissionCase = 'Safe Mother Program' and AdmissionStatus = 'Discharged'and pat.Gender='Female' and 
			   (ISNULL(pvs.VisitCode,'') like '%' + ISNULL(@SearchTxt,'') + '%'
			   OR pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%'
			   or pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%'  
			   OR ISNULL(pat.PhoneNumber,'') LIKE '%' + ISNULL(@SearchTxt,'') + '%')
		Order by adt.DischargeDate DESC 
	END
ELSE
	BEGIN 
	SET @RowCounts=ISNULL(@RowCounts,200)--default rowscount=200
		IF(@SearchTxt='null')
		BEGIN
			SET @SearchTxt=null
		END
		Select top (@RowCounts)
			pat.PatientId,pat.PatientCode,pat.FirstName,pat.LastName,pat.ShortName,pat.Age,pat.Gender,pat.PhoneNumber,pat.Address,adt.DischargeDate,pvs.VisitCode,pat.DateOfBirth
			from ADT_PatientAdmission adt
			JOIN PAT_Patient pat on adt.PatientId = pat.PatientId
			JOIN PAT_PatientVisits pvs on adt.PatientVisitId = pvs.PatientVisitId
			where  pat.IsActive=1 and  AdmissionStatus = 'Discharged' and
				(ISNULL(pvs.VisitCode ,'') like '%' + ISNULL(@SearchTxt,'') + '%'
				 OR pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%'
				 or pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%'  
				 OR ISNULL(pat.PhoneNumber,'') LIKE '%' + ISNULL(@SearchTxt,'') + '%')
			Order by adt.DischargeDate DESC 
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_MAT_RPT_GetMaternityPaymentDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_MAT_RPT_GetMaternityPaymentDetails] 
CreatedBy/date: Swapnil/19-11-2021
Description: To get the Details of  Maternity Payment Details Report
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.    Swapnil/19-11-2021                   created the script
2.    Aniket/21-11-2021                   added patientpaymentId d.PatientPaymentId and updated InAmount instead of OutAmount and vise versa 
--------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_MAT_RPT_GetMaternityPaymentDetails] 
    @FromDate datetime = null,
    @ToDate datetime =null
AS
BEGIN
IF ((@FromDate IS NOT NULL) AND (@ToDate IS NOT NULL))
BEGIN 

select SUM(ISNULL(d.PaidAmount,0)) - SUM(ISNULL(d.ReturnAmount,0)) as 'NetPaidAmount', SUM(ISNULL(d.PaidAmount,0)) 'PaidToPatient' ,SUM(ISNULL(d.ReturnAmount,0)) 'ReturnedFromPatient', d.PatientPaymentId as 'PatientPaymentId' from(
select
case when mtp.TransactionType = 'MaternityAllowance' then mtp.OutAmount end as 'PaidAmount',
case when mtp.TransactionType = 'MaternityAllowanceReturn' then mtp.InAmount end as 'ReturnAmount',
mtp.PatientPaymentId
from  MAT_TXN_PatientPayments mtp
WHERE ( CONVERT(date, mtp.CreatedOn) BETWEEN CONVERT(date,@FromDate) AND CONVERT(date,@ToDate)) AND
mtp.TransactionType in ('MaternityAllowance', 'MaternityAllowanceReturn')
) as d
Group by d.PatientPaymentId


select  mtp.ReceiptNo,mtp.CreatedOn,mtp.TransactionType,p.ShortName,p.PatientCode as 'HospitalNo',p.Age,p.Gender,e.FullName,mtp.PatientPaymentId as 'PatientPaymentId',	
case when mtp.TransactionType = 'MaternityAllowance' then mtp.OutAmount else mtp.InAmount end as 'Amount'
from MAT_TXN_PatientPayments mtp
join EMP_Employee e on mtp.CreatedBy=e.EmployeeId
join PAT_Patient p on mtp.PatientId=p.PatientId
WHERE (CONVERT(date, mtp.CreatedOn) BETWEEN CONVERT(date,@FromDate) 
AND CONVERT(date,@ToDate)) and mtp.TransactionType in ('MaternityAllowance', 'MaternityAllowanceReturn')
END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_MR_BirthList_FemalePatientsListWithVisitinformation]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 FileName: [SP_MR_BirthList_FemalePatientsListWithVisitinformation] 
 Created: 6th May 2021/Bikash
 Description: To Get the Female Patients list with Visit information
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------------------------------------------------------------
 S.No.    Date/User  						Remarks
 -----------------------------------------------------------------------------------------------------------------------------
 1.	     6thMay2021/Bikash					inital draft
 2.		 12th-May-2021/Bikash				show female patient from age group 12-49
 3.		 8th-Sept-2021/Bikash				Only admitted patient taken in considration for search
 -----------------------------------------------------------------------------------------------------------------------------
*/

CREATE PROCEDURE [dbo].[SP_MR_BirthList_FemalePatientsListWithVisitinformation]
@SearchTxt varchar(200) = ''
AS
BEGIN	   
	SELECT distinct
		pat.PatientId,
		pat.PatientCode,
		pat.ShortName,
		pat.Age,
		pat.Gender,
		pat.PhoneNumber,
		pat.DateOfBirth,
		pat.Address
	FROM PAT_Patient pat
		inner join PAT_PatientVisits visit on visit.PatientId = pat.PatientId
		inner join ADT_PatientAdmission adm on adm.PatientId = pat.PatientId
	WHERE adm.AdmissionStatus in ('admitted','discharged') 
		and ISNULL(pat.IsOutdoorPat,0) = 0 
		and pat.IsActive=1
		and (FLOOR(DATEDIFF(DAY, pat.DateOfBirth, GETDATE()) / 365.25)>=12 
		and FLOOR(DATEDIFF(DAY, pat.DateOfBirth, GETDATE()) / 365.25)<=49) 
		and pat.Gender = 'Female' 
		and ((pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%' or pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%'))
	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_MR_PatientsListWithVisitId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_MR_PatientsListWithVisitId] 
@SearchTxt varchar(200) = ''
AS
/*
 FileName: [SP_MR_PatientsListWithVisitId] 
 Created: 8th Sep 2021/Prem/Bikas/Sanjit
 Description: To Get the Patients list with Visit Id to add Death details in MR
 Execution Example:
  exec SP_MR_PatientsListWithVisitId 'sunita'
 Remarks: 
 --------------------------------------------------------------------------------------------------------
 Change History
 --------------------------------------------------------------------------------------------------------
 S.No.    Date/User              Change										Remarks
 --------------------------------------------------------------------------------------------------------
	1.		15th-Aug-2021		Only dead patient recorded					Outpatients not taken in consideration
								in MR_RecordSummary table(Inpatients) 
								taken in consideration.
 --------------------------------------------------------------------------------------------------------
*/
BEGIN 

SELECT 
  pat.PatientId 
  ,mrs.PatientVisitId
  ,mrs.MedicalRecordId
  ,pat.PatientCode
  ,pat.ShortName
  ,pat.Age
  ,pat.Gender
  ,ISNULL(pat.PhoneNumber, '') as PhoneNumber
  ,pat.DateOfBirth
  ,ISNULL(pat.Address, '') as Address  
FROM MR_RecordSummary mrs
  INNER JOIN PAT_Patient pat on mrs.PatientId = pat.PatientId
  INNER JOIN ADT_DischargeType disType on disType.DischargeTypeId = mrs.DischargeTypeId
WHERE pat.IsActive = 1
	and LOWER(disType.DischargeTypeName) ='death'
  and (pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%' or pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%')
END


GO
/****** Object:  StoredProcedure [dbo].[SP_Package_GetPatientVisitStickerInfo]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Package_GetPatientVisitStickerInfo]  --- SP_Package_GetPatientVisitStickerInfo 120668
		
@BillingTransactionId INT=null
AS
/*
FileName: SP_Package_GetPatientVisitStickerInfo
CreatedBy/date: Sanjit / 2019-12-2
Description: Get patient's package billing details. 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
*/
BEGIN
select distinct
	visit.AppointmentType 'AppointmentType',
	visit.VisitType 'VisitType',
	visit.VisitCode 'VisitCode',
	visit.ProviderName 'ProviderName',
	CONVERT(VARCHAR(10), bilTxn.CreatedOn, 101) 'SaleDate',
	CONVERT(VARCHAR(9), bilTxn.CreatedOn, 108) 'SaleTime',
	CONCAT_WS(' ',pat.FirstName,pat.MiddleName,pat.LastName) 'PatientName',
	pat.PatientCode 'PatientCode',
	pat.DateOfBirth 'DateOfBirth',
	pat.Gender 'Gender',
	pat.Address 'Address',
	pat.PhoneNumber 'PhoneNumber',
	subCounty.CountrySubDivisionName 'District',
	doc.FullName 'DoctorName',
	dep.DepartmentName 'Department',
	doc.RoomNo 'RoomNo',
	usr.UserName 'User',
	bilTxn.PackageName 'PackageName',
	bilTxn.CreatedOn 'BillingDate'
	 
	from BIL_TXN_BillingTransaction bilTxn join PAT_Patient pat on pat.PatientId=bilTxn.PatientId
						join MST_CountrySubDivision subCounty on subCounty.CountrySubDivisionId=pat.CountrySubDivisionId	
						join BIL_TXN_BillingTransactionItems bilTxnItms on  bilTxn.BillingTransactionId = bilTxnItms.BillingTransactionId
						join RBAC_User usr on usr.EmployeeId=bilTxn.CreatedBy
						left join PAT_PatientVisits visit on bilTxn.PatientVisitId = visit.PatientVisitId
						left join MST_Department dep on dep.DepartmentId= visit.DepartmentId
						left join EMP_Employee doc on doc.EmployeeId=bilTxnItms.RequestedBy		
						where bilTxn.BillingTransactionId=@BillingTransactionId 
	order by bilTxn.CreatedOn desc
END -- end of SP

END : Sanjit:3rd Dec 2019  correction in package sales report



--Start--sud: 4Dec'19: Reverse Integration from Features/IncentiveModule to R2V1/Dev Branch---

 Start: Ramavtar 10Nov, Initial create table queries --

/****** Object:  Table [dbo].[INCTV_BillItems_Profile_Map] ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[SP_PAT_GetLastVisitContextByPatientId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PAT_GetLastVisitContextByPatientId]
   @PatientId INT=NULL
/*
Sud: 9Sep'21--To get latest visit COntext .
We have other similar functions as well, but none of them seem to give consistent result.
*/
AS
BEGIN
  Select vis.PatientId, vis.PatientVisitId, vis.VisitCode , 
	vis.VisitDate, 
	vis.VisitType, vis.DepartmentId, vis.ProviderId, 
	Case WHEN adm.AdmissionStatus is null then 0
	     when adm.AdmissionStatus = 'discharged' then 0
		 else 1 end as IsCurrentlyAdmitted,
		 Convert(Date,adm.DischargeDate) 'DischargeDate'
		  from 
		  (
		  SELECT 
			 ROW_NUMBER() OVER (
			PARTITION BY patientid
			ORDER BY PatientVisitId desc  --to get latest first, we need to order by visitid descending
			 ) row_num,
			 PatientId, PatientVisitId,VisitCode, Convert(Date,VisitDate) 'VisitDate', 
			 VisitType, DepartmentId, ProviderId

		  FROM  PAT_PatientVisits
		  Where PatientId=@PatientId AND BillingStatus != 'returned'
		  ) vis
		  left join ADT_PatientAdmission adm 
		  on vis.PatientVisitId=adm.PatientVisitId
	where row_num=1
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PAT_RegisteredPatientList]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[SP_PAT_RegisteredPatientList]
	@SearchTxt varchar(200) = '', 
	@RowCounts INT = NULL 
	AS 
	/*
	 FileName: [SP_PAT_RegisteredPatientList] 
	 Created: 17-Dec'21/Krishna
	 Description: To Get the Patients List
				 Returns upto 200 patients
				Match fields: ShortName, PatientCode (HospitalNo), PhoneNumber
	 Remarks:   
	 -----------------------------------------------------------------------
	 Change History
	 -----------------------------------------------------------------------
	 S.No.    Date/User              Change          Remarks
	 -----------------------------------------------------------------------
	 1.       17-Dec'21/Krishna                          inital draft 
	 -----------------------------------------------------------------------
	*/

	BEGIN 
		IF(@SearchTxt = 'null') 
	BEGIN 
		SET @SearchTxt = null 
	END 
		SET @RowCounts = ISNULL(@RowCounts, 200) --default rowscount=200

	SELECT TOP (@RowCounts) 
	  pat.PatientId, 
	  pat.PatientCode, 
	  pat.ShortName, 
	  pat.FirstName, 
	  pat.LastName, 
	  pat.MiddleName, 
	  pat.Age, 
	  pat.Gender, 
	  pat.PhoneNumber, 
	  pat.DateOfBirth, 
	  pat.[Address], 
	  pat.IsOutdoorPat, 
	  pat.CreatedOn

	FROM 
	  PAT_Patient pat 
	WHERE 
	  pat.IsActive = 1 
	  AND (
		pat.PatientCode LIKE '%' + ISNULL(@SearchTxt, '') + '%' 
		OR pat.ShortName LIKE '%' + ISNULL(@SearchTxt, '') + '%' 
		OR ISNULL(pat.PhoneNumber, '') LIKE '%' + ISNULL(@SearchTxt, '') + '%'
	  ) 
	ORDER BY 
	  PatientId DESC --Show recent patient at top.. 
	  END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_BreakageItemReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRM_BreakageItemReport] 
@FromDate datetime=null,
@ToDate datetime=null
 AS
 /*
FileName: [[SP_PHRM_BreakageItemReport]]
CreatedBy/date:Vikas/2018-08-10
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Vikas/2018-08-10	              created the script
2	   Rusha/2019-03-31				  add writeoff quantity 
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
		select convert(date,wi.CreatedOn) as [Date], usr.UserName, i.ItemName,ItemPrice as MRP,WriteOffQuantity as BreakageQty,Round(sum(wi.TotalAmount),2,0) as [TotalAmount] from PHRM_WriteOffItems wi	
			  join RBAC_User usr
				  on wi.CreatedBy=usr.EmployeeId
			  join PHRM_MST_Item i
				  on i.ItemId=wi.ItemId
		      where CONVERT(date, wi.CreatedOn) Between @FromDate AND @ToDate
        group by convert(date, wi.CreatedOn), usr.UserName,i.ItemName, ItemPrice, WriteOffQuantity
	   End
End
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_CashCollectionSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_CashCollectionSummaryReport]  --- [SP_PHRM_CashCollectionSummaryReport] '03/23/2020','05/23/2021'
@FromDate datetime=null,
 @ToDate datetime=null, 
  @StoreId int = null
 AS
 /*
FileName: [[SP_PHRM_CashCollectionSummaryReport]]
CreatedBy/date: Dinesh 2nd Sept 2019 
Description: .
Remarks:    
Change History
----------------------------------------------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------------------------------------------------------------
1       Dinesh 2nd Sept 2019                created the script
2		Ashish 14th Jan 2020				fix bug Provisional credit invoice amount showing  --if transaction is Provisional and paymenttype is credit then entry into settlement tbl  	
3       Shankar 17th March 2020	            deducted from deposit amount was showing in user collection which is fixed here on.
4       Ramesh/Sanjit 5th May 2021          Added StoreId as a parameter for selected Store Details
5		Ramesh/Sanjit 7th Sep, 2021			Invoice Return Payment Mode filter added.
-----------------------------------------------------------------------------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
    BEGIN
	select tabletotal.[Date], tabletotal.UserName, sum(tabletotal.TotalAmount) as TotalAmount, sum(tabletotal.ReturnAmount) as ReturnedAmount, sum((tabletotal.TotalAmount+tabletotal.DepositAmount)-(tabletotal.ReturnAmount+tabletotal.DepositReturn)) as NetAmount, sum(tabletotal.DiscountAmount) as DiscountAmount, sum(tabletotal.DepositAmount) as DepositAmount, sum(tabletotal.DepositReturn) as DepositReturn, ISNULL(S.Name,'') as StoreName
	from ( 
          SELECT convert(date,inv.CreateOn) as [Date] ,usr.UserName,sum(inv.PaidAmount)as TotalAmount, 0 as ReturnAmount,sum(inv.DiscountAmount) as DiscountAmount,  0 as DepositAmount, 0 as DepositReturn, inv.StoreId as StoreId
            FROM [PHRM_TXN_Invoice] inv
              INNER JOIN RBAC_User usr
             on inv.CreatedBy=usr.EmployeeId      
              where  (convert(datetime, inv.CreateOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 ) and inv.BilStatus='paid' and inv.SettlementId is null and inv.DepositDeductAmount=0 and (inv.StoreId = @StoreId OR @StoreId is NULL)
              group by convert(date,inv.createon),UserName, StoreId
			  
			 
			  union all 
			    SELECT convert(date,stl.CreatedOn) as [Date] ,usr.UserName,sum(stl.PayableAmount)as TotalAmount, 0 as ReturnAmount,sum(stl.DiscountAmount) as DiscountAmount,  0 as DepositAmount, 0 as DepositReturn, NULL as StoreId
            FROM [PHRM_TXN_Settlement] stl
              INNER JOIN RBAC_User usr
             on stl.CreatedBy=usr.EmployeeId
              where  (convert(datetime, stl.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 ) and (@StoreId is NULL)
              group by convert(date,stl.CreatedOn),UserName
			  
			  union all
			  select convert(date,invRet.CreatedOn) as [Date], usr.UserName, 0 as TotalAmount,sum(invRet.TotalAmount ) as ReturnAmount,  sum(DiscountAmount) as DiscountAmount, 0 as DepositAmount, 0 as DepositReturn,invRet.StoreId as StoreId
			  From[PHRM_TXN_InvoiceReturn] invRet
			  INNER JOIN RBAC_User usr
			  on invRet.CreatedBy = usr.EmployeeId
			  where convert(datetime, invRet.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 
					and invRet.PaymentMode != 'credit'
					and invRet.InvoiceId is not null and (invRet.StoreId = @StoreId OR @StoreId is NULL)
			  group by convert(date,invRet.CreatedOn),UserName, StoreId

			  union all
			  select convert(date,depo.CreatedOn) as [Date], usr.UserName, 0 as TotalAmount, 0 as ReturnAmount, 0 as DiscountAmount, sum(depo.DepositAmount) as DepositAmount, 0 as DepositReturn,depo.StoreId as StoreId
			  From PHRM_Deposit as depo
			  INNER JOIN RBAC_User as usr
			  on depo.CreatedBy = usr.EmployeeId
			  where convert(datetime, depo.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and depo.DepositType = 'deposit' and (depo.StoreId = @StoreId OR @StoreId is NULL)
			  group by convert(date, depo.CreatedOn), UserName, StoreId

			  union all
			  select convert(date,depo.CreatedOn) as [Date], usr.UserName, 0 as TotalAmount, 0 as ReturnAmount, 0 as DiscountAmount, 0 as DepositAmount, sum(depo.DepositAmount) as DepositReturn,depo.StoreId as StoreId
			  From PHRM_Deposit as depo
			  INNER JOIN RBAC_User as usr
			  on depo.CreatedBy = usr.EmployeeId
			  where convert(datetime, depo.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and depo.DepositType ='depositreturn' and (depo.StoreId = @StoreId OR @StoreId IS NULL)
			  group by convert(date, depo.CreatedOn), UserName, StoreId


			  )	  tabletotal
			  left join PHRM_MST_Store S ON tabletotal.StoreId = S.StoreId
			  Group BY [Date], UserName, S.Name
      End
End

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_CounterCollectionReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRM_CounterCollectionReport] 
@FromDate datetime=null,
 @ToDate datetime=null
 AS
 /*
FileName: [SP_PHRM_CounterCollectionReport] '05/01/2018','08/08/2018'
CreatedBy/date: Nagesh/Vikas/2018-07-31
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Nagesh/Vikas/2018-08-01	              created the script
2	   Rusha/04-08-2019						  Remove Sum() function to get details of each counter and user		
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
			
			select convert(date,inv.CreatedOn) as [Date], usr.UserName as UserName,cnt.CounterName as CounterName, 
			sum(inv.TotalAmount)as TotalAmount, sum(inv.SubTotal*inv.DiscountPercentage / 100.0) as [DiscountAmount]
			 from PHRM_TXN_InvoiceItems inv
				join RBAC_User usr
				on inv.CreatedBy=usr.EmployeeId
				join PHRM_MST_Counter cnt on inv.CounterId=cnt.CounterId
				where CONVERT(date,inv.CreatedOn) Between ISNULL(@FromDate,GETDATE()) AND ISNULL(@ToDate,GETDATE())+1
			    group by  UserName,CounterName,convert(date,inv.CreatedOn)
				order by [Date]
					
		End
End

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
    BEGIN
	select [Date], CounterName,UserName, TotalAmount, ReturnAmount as ReturnedAmount, TotalAmount-ReturnAmount as NetAmount, 
	DiscountAmount
	from ( 
          SELECT convert(date,inv.CreateOn) as [Date], phrmCnt.CounterName,usr.UserName,inv.PaidAmount as TotalAmount, 0 as ReturnAmount,inv.DiscountAmount as DiscountAmount
            FROM [PHRM_TXN_Invoice] inv
              INNER JOIN RBAC_User usr
             on inv.CreatedBy=usr.EmployeeId  
			 left Join PHRM_TXN_InvoiceItems as item
			  on inv.InvoiceId= item.InvoiceId
			 INNER JOIN PHRM_MST_Counter phrmCnt
			 on item.CounterId = phrmCnt.CounterId    
              where  convert(datetime, inv.CreateOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 
              group by convert(date,inv.CreateOn),UserName, CounterName,inv.PaidAmount,inv.DiscountAmount
			  
			  union all
			 
			  select convert(date,invRet.CreatedOn) as [Date], phrmCnt.CounterName, usr.UserName, 0 as TotalAmount,invRet.TotalAmount as ReturnAmount, (-(invRet.DiscountPercentage/100)*invRet.SubTotal ) as DiscountPercentage
			  From[PHRM_TXN_InvoiceReturnItems] invRet
			  INNER JOIN RBAC_User usr
			  on invRet.CreatedBy = usr.EmployeeId
			  INNER JOIN PHRM_MST_Counter phrmCnt
			 on invRet.CounterId = phrmCnt.CounterId  
			  where convert(datetime, invRet.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			  group by convert(date,invRet.CreatedOn),UserName, CounterName,invRet.TotalAmount,invRet.DiscountPercentage,invRet.SubTotal
			  )	  tabletotal
			  Group BY [Date], UserName, CounterName,TotalAmount, ReturnAmount, DiscountAmount
      End
End
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetAllInvoiceOfPatientForSettlement]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_GetAllInvoiceOfPatientForSettlement]
 @PatientId INT = 0
AS  

/*
FileName: SP_PHRM_GetAllInvoiceOfPatientForSettlement
Description: To get all the invoices of patiend for settlement by patientID
Remarks: We're returning 4 tables from this StoredProc.
1. patient info
2. Credit Invoices and there Return Information
3. Deposit Information
4. Provisional Information

Change History
---------------------------------------------------------------------------------------
S.No. 	UpdatedBy/Date 				Remarks
---------------------------------------------------------------------------------------
1. 		Rohit/1,DEC'21 				Created SP to get the settlement details for settlement receipt.
---------------------------------------------------------------------------------------
*/
BEGIN  
-table:1--Patient Informations---
	SELECT
		PatientId,
		PatientCode,
		ShortName as PatientName,
		FirstName,
		MiddleName,
		LastName,
		Gender,
		DateOfBirth,
		Address,
		PhoneNumber
	FROM PAT_Patient
	WHERE PatientId=@PatientId

-Table:2 --- Credit Invoices and there Return Information-----
	SELECT 
		PatientId, inv.InvoiceId,
		inv.InvoicePrintId as InvoiceNo,
		Convert(Date,inv.CreateOn) 'InvoiceDate',
		ISNULL(inv.TotalAmount,0) 'SalesAmount', ISNULL(ret.ReturnAmount,0) 'ReturnAmount',
		ISNULL(inv.TotalAmount,0) - ISNULL(ret.ReturnAmount,0) 'NetAmount',
		PHRMReturnIdsCSV

	FROM PHRM_TXN_Invoice inv
	LEFT JOIN (Select InvoiceId, SUM(TotalAmount) 'ReturnAmount',
	STRING_AGG(InvoiceReturnId, ',') 'PHRMReturnIdsCSV'
	FROM PHRM_TXN_InvoiceReturn
	WHERE PatientId=@PatientId
	GROUP BY InvoiceId) ret
	ON inv.InvoiceId=ret.InvoiceId
	WHERE
		inv.PatientId=@PatientId AND
		inv.PaymentMode='credit' AND inv.BilStatus != 'paid'

-table:3: Deposit Information---
SELECT SUM(ISNULL(Deposit_In,0)) Deposit_In,
SUM(ISNULL(Deposit_Out,0)) Deposit_Out,
SUM(ISNULL(Deposit_In,0))-SUM(ISNULL(Deposit_Out,0)) 'Deposit_Balance'
FROM
(
SELECT PatientId, Deposittype,
CASE WHEN DepositType='deposit' THEN DepositAmount
ELSE 0 END AS 'Deposit_In',
CASE WHEN DepositType IN('depositreturn','depositdeduct') THEN DepositAmount
ELSE 0 END AS 'Deposit_Out'
FROM PHRM_Deposit
WHERE PatientId=@PatientId
) a

-table:4: Provisional Information---
SELECT PatientId,
Sum(ISNULL(TotalAmount,0)) 'ProvisionalTotal'
FROM PHRM_TXN_InvoiceItems
WHERE BilItemStatus='provisional'
AND PatientId = @PatientId
GROUP BY PatientId
END  

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetInvoicesBetweenDateRange]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRM_GetInvoicesBetweenDateRange] 
		@FromDate Date=NULL,
		@ToDate DATE=NULL
AS
/*
FileName:SP_PHRM_GetInvoicesBetweenDateRange
CreatedBy/date: Sud,Sanjit/8Apr'21 
Description:Get Invoice Details for Pharmacy-> Duplicate Print 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Sud,Sanjit/8Apr'21                   Initial Draft
2.		Rusha/Ramesh/08 June,21				patientshortname correction
---------------------------------------------------------------------------------------
*/
BEGIN
SET @FromDate= ISNULL(@FromDate,Convert(Date,GetDate()))
SET @ToDate= ISNULL(@ToDate,Convert(Date,GetDate()))

select
	 inv.InvoiceId,
	 inv.InvoicePrintId,
	 pat.ShortName 'PatientName',
	 pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
	 pat.PatientCode,
	 inv.SubTotal,
	 inv.DiscountAmount,
	 inv.VATAmount,
	 inv.PaidAmount,
	 inv.BilStatus,
	 inv.CreditAmount 'TotalCredit',
	 inv.CreateOn,
	 pat.IsOutdoorPat,
	 case when ISNULL(pat.IsOutdoorPat,0)=0 then 'Indoor'
	   ELSE 'Outdoor' END AS PatientType,
	inv.PaymentMode,
	fy.FiscalYearFormatted AS FiscalYear

	 from PHRM_TXN_Invoice inv
	 inner join BIL_CFG_FiscalYears fy 
	 on inv.FiscalYearId=fy.FiscalYearId
	inner join PAT_Patient pat
	on inv.PatientId=pat.PatientId

where convert(date, inv.CreateOn) between   @FromDate and @ToDate
order by inv.CreateOn desc

END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetMainStoreStockDetails]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END: RAMESH-27 De'21 : -- Delete constraint from [PHRM_GoodsReceiptItems] table  which was referencing StockId instead of StoreStockId--

START--Ramesh: 2 Dec'21 :- Main Store Details SP Altered to get Stock Details--
CREATE PROCEDURE [dbo].[SP_PHRM_GetMainStoreStockDetails]
    @ShowStockFromAllStores BIT = 1
AS
/*
SP Name: SP_PHRM_GetMainStoreStockDetails
Author: Sanjit Raj Shakya
CreatedOn: 22 Dec, 2021
Remarks: Created to replace Linq Query in Api GetMainStoreStock in PharmacyController
Execution: EXEC SP_PHRM_GetMainStoreStockDetails @ShowStockFromAllStores = 1
 ----------------------------------------------------------------------------
 Change History
 ----------------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks-
 ------------------------------------------------------------------------------
 1.      Sanjit/22 Dec'21                       inital draft
 2.      Ramesh/27 Dec'21                       Changed Innerjoin to LeftJoin of StockBarCode with MST Stock 
----------------------------------------------------------------------------------------------
*/
BEGIN
    SELECT
        SS.ItemId,
        I.ItemName,
        I.ItemCode,
        Store.StoreId,
        Store.Name AS StoreName,
        U.UOMName,
        G.GenericName,
        S.BatchNo,
        S.ExpiryDate,
        S.CostPrice,
        S.MRP,
        SUM(SS.AvailableQuantity) AS AvailableQuantity,
        I.IsInsuranceApplicable,
        SB.BarcodeId AS BarcodeNumber
    FROM
        PHRM_TXN_StoreStock SS
        INNER JOIN PHRM_MST_Stock S ON SS.StockId = S.StockId
        LEFT JOIN PHRM_MST_StockBarcode SB ON S.BarcodeId = SB.BarcodeId
        INNER JOIN PHRM_MST_Item I ON SS.ItemId = I.ItemId
        INNER JOIN PHRM_MST_Store Store ON SS.StoreId = Store.StoreId
        LEFT JOIN PHRM_MST_UnitOfMeasurement U ON I.UOMId = U.UOMId
        LEFT JOIN PHRM_MST_Generic G ON I.GenericId = G.GenericId
    WHERE
SS.IsActive = 1 AND
        (@ShowStockFromAllStores = 1 OR Store.Name = 'Main Store')
    GROUP BY
SS.ItemId,
I.ItemName,
I.ItemCode,
Store.StoreId,
Store.Name,
U.UOMName,
G.GenericName,
S.BatchNo,
S.ExpiryDate,
S.CostPrice,
S.MRP,
I.IsInsuranceApplicable,
SB.BarcodeId
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetPatientList]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END:Krishna/Sanjit 22-Dec'21, Convert the linq code into SP of getADTList in ADT Module--

START: RAMESH-- 22 Dec'21 -- Performance Tuning - Transaction Isolation level is set to uncommited 
START: ----- Search Patient SP Altered for Dispensary Module--
CREATE PROCEDURE [dbo].[SP_PHRM_GetPatientList]
   @SearchTxt varchar(200) NULL,
   @IsInsurance Bit= NULL
AS
/*
 FileName: [SP_PHRM_GetPatientList] '018658684'
 Created: 09Oct'21/Sud/Sanjit
 Description: To get Patient along with Insurance Information + latest visit's doctor information. 
     when @IsInsurance= false or null then get all patient.
	 When @SearchTxt is null or empty then get all patients.
	 @SearchTxt compares these columns: PatientCode, ShortName, InsuranceNSHI Code, PhoneNumber..  (add more fields if required later).
 
 Remarks: Need to add more fields later as required.. 
 ---------------------------------------------------------------------------------------
 Change History
 ---------------------------------------------------------------------------------------
 S.No.    Date/User                     Change          Remarks
 ---------------------------------------------------------------------------------------
 1.       09Oct'21/Sud/Sanjit           Created          Initial Draft. 
 ---------------------------------------------------------------------------------------
*/
BEGIN	

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

Select TOP(200) pat.PatientId,
	pat.PatientCode,
	pat.FirstName,
	pat.MiddleName,
	pat.LastName,
	pat.ShortName,
	pat.Age,
	pat.Gender,
	pat.PhoneNumber,
	pat.DateOfBirth,
	pat.Address,
	pat.IsOutdoorPat,
	pat.CountryId,
	pat.CountrySubDivisionId,
	district.CountrySubDivisionName,
	pat.PANNumber,
	pat.Ins_NshiNumber,
	pat.Ins_LatestClaimCode AS ClaimCode,
	pat.Ins_HasInsurance,
	pat.Ins_InsuranceBalance,
	latestVisit.PatientVisitId,
	Convert(varchar(20),Convert(Date,latestVisit.VisitDate)) AS VisitDate,
	latestVisit.ProviderId

from PAT_Patient pat
 inner join MST_CountrySubDivision district on pat.CountrySubDivisionId=district.CountrySubDivisionId
 left Join(
    
    Select PatientId, PatientVisitId, VisitCode, ProviderId, VisitDate
      from 
      (
      SELECT 
         ROW_NUMBER() OVER (
          PARTITION BY PatientId
          ORDER BY PatientVisitId desc
         ) row_num,
         PatientId, PatientVisitId,VisitCode, ProviderId, VisitDate

      FROM 
         PAT_PatientVisits
      ) A
      where row_num=1
   ) latestVisit on pat.PatientId = latestVisit.PatientId

Where (pat.PatientCode+ pat.ShortName + ISNULL(pat.PhoneNumber,'') + ISNULL(pat.Ins_NshiNumber,'')) like '%'+ISNULL(@SearchTxt,'')+'%'
   AND (ISNULL(@IsInsurance,0)=0 OR pat.Ins_HasInsurance = @IsInsurance)

END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetReturnInvoicesBetweenDateRange]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_GetReturnInvoicesBetweenDateRange]
  @FromDate DATE = NULL,
  @ToDate DATE = NULL,
  @StoreId INT = NULL
AS

/*
FileName:[SP_PHRM_GetReturnInvoicesBetweenDateRange] 
CreatedBy/date:  Ramesh/16thDec'21
Description:  Get Invoice Return Details for Pharmacy-> Duplicate Print
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Ramesh/26Apr'21                   Initial Draft
---------------------------------------------------------------------------------------
*/
BEGIN
  SET @FromDate = ISNULL(@FromDate,CONVERT(DATE, GetDate()))
  SET @ToDate = ISNULL(@ToDate,CONVERT(DATE, GetDate()))
  SELECT
    inv.InvoiceId,
    invret.InvoiceReturnId,
    inv.InvoicePrintId,
    pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
    pat.Address ,
    pat.PhoneNumber AS 'ContactNumber',
    pat.PatientCode,
    pat.DateOfBirth,
    pat.Gender,
    invret.DiscountAmount,
    pat.IsOutdoorPat,
    invret.SubTotal,
    invret.TotalAmount,
	invret.DiscountAmount,
	invret.VATAmount,
    invret.PaidAmount,
    invret.PaymentMode,
    invret.CreatedOn 'CreateOn',
    invret.CreatedBy,
    invret.CreditNoteID,
    invret.Remarks,
	invret.PrintCount,
    CASE WHEN ISNULL(pat.IsOutdoorPat, 0) = 0 THEN 'Indoor' ELSE 'Outdoor' END AS PatientType,
    fy.FiscalYearFormatted AS FiscalYear,
    usr.UserName,
    pat.Ins_NshiNumber 'NSHINumber',
    invret.ClaimCode 'ClaimCode'
  FROM
    PHRM_TXN_InvoiceReturn invret
    INNER JOIN PHRM_TXN_Invoice inv ON inv.InvoiceId = invret.InvoiceId
    INNER JOIN PAT_Patient pat ON pat.PatientId = invret.PatientId
    INNER JOIN BIL_CFG_FiscalYears fy ON invret.FiscalYearId = fy.FiscalYearId
    INNER JOIN RBAC_User usr ON invret.CreatedBy = usr.EmployeeId
  WHERE
  CONVERT(DATE, invret.CreatedOn) BETWEEN @FromDate AND @ToDate
    AND invret.StoreId = @StoreId
  ORDER BY invret.CreatedOn DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetSettlementDetailReportOfSelectedPatient]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_GetSettlementDetailReportOfSelectedPatient] 
    @FromDate DATE,
    @ToDate DATE,
    @PatientId INT = NULL
AS
/*
 FileName: [SP_PHRM_GetSettlementDetailReportOfSelectedPatient] '2021-12-01', '2021-12-07', 31445
 Created: 6Dec'21/Rohit
 Description: To get all the settlement details of a patient.
 Remarks: We need to use this procedure to get all the settlement details of the patient.
 ---------------------------------------------------------------------------------------
 Change History
 ---------------------------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 ---------------------------------------------------------------------------------------
 1.	     6Dec'21/Rohit		                   created SP
 ---------------------------------------------------------------------------------------
*/
BEGIN

    Table 1: PATIENT INFORMATION--
    SELECT
        PatientId,
        ShortName 'PatientName',
        PatientCode,
        Gender,
        DateOfBirth
    FROM
        PAT_Patient
    WHERE
	PatientId = @PatientId

    Table 2: COLLECTION FROM RECEIVABLE--
    SELECT
        sett.PatientId,
        CONVERT(DATE, sett.SettlementDate) 'SettlementDate',
        sett.SettlementReceiptNo,
        mstStore.Name AS CrdtSettledStoreName,
        s.Name AS CrdtStoreName,
        txn.InvoiceId,
        txn.InvoicePrintId,
        CONVERT(DATE, txn.CreateOn) 'InvoiceDate',
        ISNULL(txn.TotalAmount, 0) 'SalesAmount',
        ISNULL(ret.RetTotalAmount, 0) 'ReturnTotalAmount',
        ISNULL(txn.TotalAmount, 0) - ISNULL(ret.RetTotalAmount, 0) 'Receivable',
        ISNULL(sett.DiscountAmount, 0) 'CashDiscount'
    FROM
        PHRM_TXN_Settlement sett
        INNER JOIN PAT_Patient pat ON sett.PatientId = pat.PatientId
        INNER JOIN PHRM_MST_Store mstStore ON sett.StoreId= mstStore.StoreId
        LEFT JOIN PHRM_TXN_Invoice txn ON sett.SettlementId = txn.SettlementId
        LEFT JOIN PHRM_MST_Store s ON txn.StoreId=s.StoreId
        LEFT JOIN (
	SELECT
            SettlementId,
            InvoiceId,
            SUM(ISNULL(TotalAmount, 0)) 'RetTotalAmount'
        FROM
            PHRM_TXN_InvoiceReturn
        WHERE
	SettlementId IS NOT NULL
        GROUP BY
	SettlementId,
	InvoiceId
	            ) ret ON sett.SettlementId = ret.SettlementId
            AND txn.InvoiceId = ret.InvoiceId
    WHERE
	CONVERT(DATE, sett.CreatedOn) BETWEEN @FromDate AND @ToDate
        AND sett.PatientId = @PatientId
        AND ISNULL(sett.CollectionFromReceivable, 0) !=0
     need only settlement


    Table 3: RETURN TO RECEIVABLE--
    SELECT
        sett.SettlementReceiptNo,
        CONVERT(DATE, sett.CreatedOn) 'SettlementDate',
        ret.CreditNoteID,
        CONVERT(DATE, ret.CreatedOn) 'ReturnDate',
        ISNULL(ret.TotalAmount, 0) 'ReturnTotalAmount',
        ret.ReferenceInvoiceNo,
        ret.InvoiceId,
        ISNULL(sett.DiscountReturnAmount,0) 'DiscountReturnAmount'
    FROM
        PHRM_TXN_Settlement sett
        INNER JOIN PHRM_TXN_InvoiceReturn ret ON sett.SettlementId = ret.SettlementId
        INNER JOIN PHRM_TXN_Invoice inv ON ret.SettlementId = inv.SettlementId
          AND ret.InvoiceId = inv.InvoiceId
    WHERE
	CONVERT(DATE, sett.CreatedOn) BETWEEN @FromDate
	AND @ToDate
        AND sett.PatientId = @PatientId AND sett.CollectionFromReceivable IS NULL AND sett.RefundableAmount IS NULL
        AND LOWER(inv.BilStatus) = 'paid'
     need only returns done after settlement

    Table 4: GET CASH DISCOUNT--
    SELECT
        SUM(ISNULL(DiscountAmount, 0)) 'CashDiscount'
    FROM
        PHRM_TXN_Settlement
    WHERE
	CONVERT(DATE, CreatedOn) BETWEEN @FromDate AND @ToDate
        AND PatientId = @PatientId
        AND ISNULL(CollectionFromReceivable, 0) != 0

END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GetSettlementSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_GetSettlementSummaryReport] 
    @FromDate DATE,
    @ToDate DATE,
    @StoreId INT = NULL
AS
/*
 FileName: [SP_PHRM_GetSettlementSummaryReport] 
 Created: 6Dec'21/Rohit
 Description: To get all the settlement report data.
 Remarks: We need to use this procedure to get all the settlement report data.
 ---------------------------------------------------------------------------------------
 Change History
 ---------------------------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 ---------------------------------------------------------------------------------------
 1.	     6Dec'21/Rohit		                   Created SP
 ---------------------------------------------------------------------------------------
*/
BEGIN
    SELECT
        sett.PatientId,
        pat.ShortName AS 'PatientName',
        pat.PatientCode,
        pat.Gender,
        pat.PhoneNumber AS 'ContactNo',
        pat.DateOfBirth,
        MAX(sett.CreatedOn) AS LatestSettlementDate,
        ROUND(SUM(ISNULL(CollectionFromReceivable, 0)),3) 'CollnFromReceivable',
        ROUND(SUM(ISNULL(DiscountAmount, 0)),3) 'CashDiscountGiven',
        ROUND(SUM(ISNULL(DiscountReturnAmount, 0)),3) 'CashDiscReturn'
    FROM
        PHRM_TXN_Settlement sett
        INNER JOIN PAT_Patient pat ON sett.PatientId = pat.PatientId
    WHERE 
		CONVERT(Date, sett.CreatedOn) BETWEEN @FromDate AND @ToDate
        AND (sett.StoreId = @StoreId OR @StoreId IS NULL)
	GROUP BY
		sett.PatientId,
        pat.ShortName,
        pat.PatientCode,
        pat.Gender,
        pat.PhoneNumber,
        pat.DateOfBirth
	ORDER BY MAX(sett.SettlementDate) DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_GoodsReceiptProductReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_GoodsReceiptProductReport]
    @FromDate date=NULL,
    @ToDate date=NULL,
    @ItemId int=NULL
AS
 /*
FileName: [SP_PHRM_GoodsReceiptProductReport] '2021-07-09','2021-08-09'
CreatedBy/date:Vikas/2018-08-10
Description: .
Remarks: 4Sept'21/sud: This report may be hidden for temporary purpose, will correct it later after proper requirement
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Vikas/2018-08-10                created the script
2      Nagesh/2018-08-11                updated
3	   Abhishek/ 2018-09-7				updated
4	   Naveed/2019-12-13				updated script for exclude zero quantity Items
5      Ramesh/2021-08-01                show BillNo as well in Grid
6      Rohit/Ramesh/2021-08-08          show SubTotal and Total Amt in Grid 
7      Sud/Pawan:4Sept'21               * Added VATAmount Column in Return Table.
                                        * Taking GoodReceiptDate from GR table instead of CreatedOn of GRI table. 
										   since We're doing Stock Entry on GoodReceiptDate (Check TransactionDate table of StockTxnTable)

------------------------------------------------------
*/
 BEGIN

    BEGIN
        SELECT CONVERT(date,gr.GoodReceiptDate) AS [Date],
		   gr.GoodReceiptPrintId, gr.InvoiceNo,  
		   gri.ItemId, gri.ItemName, gri.BatchNo, gri.ReceivedQuantity, gri.FreeQuantity,
            gri.GRItemPrice AS [ItemPrice], gri.MRP, spl.SupplierName, spl.ContactNo, 
			gri.SubTotal, gri.TotalAmount,
            gri.GrPerItemVATAmt 'VATAmount'
        FROM PHRM_GoodsReceiptItems gri
            JOIN PHRM_GoodsReceipt gr
                   ON gri.GoodReceiptId=gr.GoodReceiptId
            JOIN PHRM_MST_Supplier spl
                  ON gr.SupplierId=spl.SupplierId
       WHERE  CONVERT(date, gr.GoodReceiptDate) BETWEEN @FromDate AND @ToDate
			AND (gri.ItemId=@ItemId OR ISNULL(@ItemId,0)=0)
		ORDER BY  CONVERT(date,gr.GoodReceiptDate) DESC
    END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_ReturnToSupplierReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRM_ReturnToSupplierReport] 
	@FromDate datetime=null,
	@ToDate datetime=null
AS
 /*
FileName: [dbo].[SP_PHRM_ReturnToSupplierReport] 
CreatedBy/date:Rusha/04-08-2019
Description: To get report of stock detials return to supplier from Pharmacy store 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.		 Naveed/2019-12-13				      updated script for exclude zero quantity Items from Report
2.      Sanjesh/2021-02-22                    Updated script for supplier name 
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
			select CONVERT(date,rtnitm.CreatedOn) as [Date], (Cast(ROW_NUMBER() OVER (ORDER BY  supp.SupplierName)  as int)) as SN,supp.SupplierName, 
				grp.ItemName,rtn.ReturnDate, rtnitm.Quantity + rtnitm.FreeQuantity as Qty,rtnitm.SubTotal,rtn.DiscountAmount,
				rtn.VATAmount, rtnitm.TotalAmount,rtn.CreditNoteId as SupplierCreditNoteNum,rtn.CreditNotePrintId as CreditNoteNum,rtn.Remarks
			from PHRM_ReturnToSupplierItems as rtnitm
			join PHRM_ReturnToSupplier as rtn on rtnitm.ReturnToSupplierId=rtn.ReturnToSupplierId
			join PHRM_GoodsReceiptItems as grp on rtnitm.GoodReceiptItemId=grp.GoodReceiptItemId
			join PHRM_MST_Supplier as supp on supp.SupplierId = rtn.SupplierId
			where CONVERT(date, rtnitm.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 AND rtnitm.Quantity>0 
			group by CONVERT(date,rtnitm.CreatedOn),supp.SupplierName, grp.ItemName,rtn.ReturnDate, rtnitm.Quantity,rtnitm.FreeQuantity,rtnitm.SubTotal,
				rtn.DiscountAmount,rtn.VATAmount, rtnitm.TotalAmount,rtn.CreditNoteId,rtn.CreditNotePrintId,rtn.Remarks
	   END
END


GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_RPT_GetStockSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_RPT_GetStockSummary]			
    @FiscalYearId int, 
	@FromDate Date, 
	@ToDate Date,
	@StoreId int
AS

/************************************************************************
FileName: [SP_PHRM_RPT_GetStockSummary] 4, '
CreatedBy/date: Sanjit/15Jun21
Description: Get Pharmacy stock summary report data
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       Sanjit/15Jun21						script created 
2		Sanjit/21Jul21						all amount rounded to two decimal point
3       Ramesh/10Aug'21                     store wise filter added
4		Sanjit/Sud/30Aug'21					a. Added calculation for Stock Transfers. 
											b. used new function to get closing on previous day
*************************************************************************/
BEGIN
DECLARE @FyStartDate DATE = (SELECT TOP 1  CONVERT(Date,StartDate)    FROM PHRM_CFG_FiscalYears    WHERE FiscalYearId=@FiscalYearId)
DECLARE @ClosingDate Date = DATEADD(DAY, -1, @FromDate) -- Closing should be calculated on Previous Day

SELECT stkMaster.StockId, store.StoreId, store.Name AS 'StoreName', I.ItemId, G.GenericName, I.ItemName, I.ItemCode, U.UOMName, stkMaster.BatchNo, stkMaster.ExpiryDate, stkMaster.CostPrice, stkMaster.MRP,
		SUM(ISNULL(prevDayClosing.ClosingQty,0) ) AS 'OpeningQty',
		ROUND(SUM(ISNULL(prevDayClosing.ClosingValue,0)),2) AS  'OpeningValue',
		SUM(ISNULL(prevDayClosing.ClosingQty_WithProvisional,0) ) AS 'OpeningQty_WithProvisional',
		ROUND(SUM(ISNULL(prevDayClosing.ClosingValue_WithProvisional,0)),2) AS  'OpeningValue_WithProvisional',
		SUM(ISNULL(txnsBetnRange.PurchaseQty,0)) as 'PurchaseQty',
		ROUND(SUM(ISNULL(txnsBetnRange.PurchaseValue,0)),2) as 'PurchaseValue',
		SUM(ISNULL(txnsBetnRange.PurchaseReturnQty,0)) as 'PurchaseReturnQty',
		ROUND(SUM(ISNULL(txnsBetnRange.PurchaseReturnValue,0)),2) as 'PurchaseReturnValue',
		SUM(ISNULL(txnsBetnRange.SalesQty,0)) as 'SalesQty',
		ROUND(SUM(ISNULL(txnsBetnRange.SalesValue,0)),2) as 'SalesValue',
		SUM(ISNULL(txnsBetnRange.SalesReturnQty,0)) as 'SaleReturnQty',
		ROUND(SUM(ISNULL(txnsBetnRange.SalesReturnValue,0)),2) as 'SaleReturnValue',
		SUM(ISNULL(txnsBetnRange.ProvisionalQty,0)) as 'ProvisionalQty',
		ROUND(SUM(ISNULL(txnsBetnRange.ProvisionalValue,0)),2) as 'ProvisionalValue',
		SUM(ISNULL(txnsBetnRange.WriteOffQty,0)) as 'WriteOffQty',
		ROUND(SUM(ISNULL(txnsBetnRange.WriteOffValue,0)),2) as 'WriteOffValue',
		SUM(ISNULL(txnsBetnRange.ConsumptionQty,0)) as 'ConsumptionQty',
		ROUND(SUM(ISNULL(txnsBetnRange.ConsumptionValue,0)),2) as 'ConsumptionValue',
		SUM(ISNULL(txnsBetnRange.StockManageOutQty,0)) as 'StockManageOutQty',
		ROUND(SUM(ISNULL(txnsBetnRange.StockManageOutValue,0)),2) as 'StockManageOutValue',
		SUM(ISNULL(txnsBetnRange.StockManageInQty,0)) as 'StockManageInQty',
		ROUND(SUM(ISNULL(txnsBetnRange.StockManageInValue,0)),2) as 'StockManageInValue',
		SUM(ISNULL(txnsBetnRange.TransferInQty,0)) as 'TransferInQty',
		ROUND(SUM(ISNULL(txnsBetnRange.TransferInValue,0)),2) as 'TransferInValue',
		SUM(ISNULL(txnsBetnRange.TransferOutQty,0)) as 'TransferOutQty',
		ROUND(SUM(ISNULL(txnsBetnRange.TransferOutValue,0)),2) as 'TransferOutValue',

		SUM(ISNULL(prevDayClosing.ClosingQty,0)) + SUM(ISNULL(txnsBetnRange.PurchaseQty,0)) - SUM(ISNULL(txnsBetnRange.PurchaseReturnQty,0)) - SUM(ISNULL(txnsBetnRange.SalesQty,0)) + SUM(ISNULL(txnsBetnRange.SalesReturnQty,0))
		- SUM(ISNULL(txnsBetnRange.ProvisionalQty,0)) - SUM(ISNULL(txnsBetnRange.WriteOffQty,0)) - SUM(ISNULL(txnsBetnRange.ConsumptionQty,0)) 
		+ SUM(ISNULL(txnsBetnRange.StockManageInQty,0)) - SUM(ISNULL(txnsBetnRange.StockManageOutQty,0))
		+ SUM(ISNULL(txnsBetnRange.TransferInQty,0)) - SUM(ISNULL(txnsBetnRange.TransferOutQty,0))
		as 'ClosingQty_WithProvisional',

		ROUND(
		SUM(ISNULL(prevDayClosing.ClosingValue,0)) + SUM(ISNULL(txnsBetnRange.PurchaseValue,0)) - SUM(ISNULL(txnsBetnRange.PurchaseReturnValue,0)) - SUM(ISNULL(txnsBetnRange.SalesValue,0)) 
		+ SUM(ISNULL(txnsBetnRange.SalesReturnValue,0)) - SUM(ISNULL(txnsBetnRange.ProvisionalValue,0)) - SUM(ISNULL(txnsBetnRange.WriteOffValue,0)) - SUM(ISNULL(txnsBetnRange.ConsumptionValue,0)) 
		+ SUM(ISNULL(txnsBetnRange.StockManageInValue,0)) - SUM(ISNULL(txnsBetnRange.StockManageOutValue,0))
		+ SUM(ISNULL(txnsBetnRange.TransferInValue,0)) - SUM(ISNULL(txnsBetnRange.TransferOutValue,0))
		,2) as 'ClosingValue_WithProvisional',

		SUM(ISNULL(prevDayClosing.ClosingQty,0)) + SUM(ISNULL(txnsBetnRange.PurchaseQty,0)) - SUM(ISNULL(txnsBetnRange.PurchaseReturnQty,0)) - SUM(ISNULL(txnsBetnRange.SalesQty,0)) + SUM(ISNULL(txnsBetnRange.SalesReturnQty,0))
		- SUM(ISNULL(txnsBetnRange.WriteOffQty,0)) - SUM(ISNULL(txnsBetnRange.ConsumptionQty,0)) 
		+ SUM(ISNULL(txnsBetnRange.StockManageInQty,0)) - SUM(ISNULL(txnsBetnRange.StockManageOutQty,0))
		+ SUM(ISNULL(txnsBetnRange.TransferInQty,0)) - SUM(ISNULL(txnsBetnRange.TransferOutQty,0))
		as 'ClosingQty',

		ROUND(
		SUM(ISNULL(prevDayClosing.ClosingValue,0)) + SUM(ISNULL(txnsBetnRange.PurchaseValue,0)) - SUM(ISNULL(txnsBetnRange.PurchaseReturnValue,0)) - SUM(ISNULL(txnsBetnRange.SalesValue,0)) 
		+ SUM(ISNULL(txnsBetnRange.SalesReturnValue,0)) - SUM(ISNULL(txnsBetnRange.WriteOffValue,0)) - SUM(ISNULL(txnsBetnRange.ConsumptionValue,0)) 
		+ SUM(ISNULL(txnsBetnRange.StockManageInValue,0)) - SUM(ISNULL(txnsBetnRange.StockManageOutValue,0))
		+ SUM(ISNULL(txnsBetnRange.TransferInValue,0)) - SUM(ISNULL(txnsBetnRange.TransferOutValue,0))
		,2) as 'ClosingValue'

FROM PHRM_MST_Item I
    INNER JOIN PHRM_MST_Generic G
    ON I.GenericId = G.GenericId
    INNER JOIN PHRM_MST_UnitOfMeasurement U
    ON I.UOMId = U.UOMId
    INNER JOIN PHRM_MST_Stock stkMaster
    ON I.ItemId = stkMaster.ItemId
    INNER JOIN PHRM_MST_Store store
    ON store.Category IN ('dispensary') OR store.SubCategory = 'pharmacy'
    for prevDayClosing part, we take closing from previous day as opening for today.
    LEFT JOIN
    (
		SELECT * FROM FN_RPT_PHRM_GetClosingStockDetailsOnGivenDate(@FiscalYearId, @FyStartDate, @ClosingDate)
	) prevDayClosing
    ON prevDayClosing.StockId = stkMaster.StockId AND store.StoreId = prevDayClosing.StoreId
    for current year part
    LEFT JOIN
    (
        SELECT * FROM [FN_RPT_PHRM_GetItemStockTxnsBetnDateRange](@FromDate, @ToDate)
    ) txnsBetnRange
    ON stkMaster.StockId = txnsBetnRange.StockId AND store.StoreId = txnsBetnRange.StoreId
	> If @StoreId is NULL, then show stocks of all stores, else show stocks of given store
	WHERE (store.StoreId = @StoreId OR @StoreId IS NULL) 
GROUP BY stkMaster.StockId, store.StoreId, store.Name, I.ItemId, G.GenericName, I.ItemName, I.ItemCode, U.UOMName, stkMaster.BatchNo, stkMaster.ExpiryDate, stkMaster.CostPrice, stkMaster.MRP
ORDER BY I.ItemName, store.StoreId

END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_SaleReturnReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRM_SaleReturnReport] 
@FromDate datetime=null,
@ToDate datetime=null
AS
 /*
FileName:[SP_PHRM_SaleReturnReport]
CreatedBy/date: Vikas/2018-08-06
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Vikas/2018-08-06                       created the script
2.     VIKAS/2019-01-02               report doesnt shown correctly so changes in script. 
3.     Rusha/2019-04-09             report doesnot show quantity so add return quantity
4.     Rusha/2019-07-03             report doesnot showing correct amount so updated script
5.     Abhishek/2019-07-03             report doesnot showing correct amount so updated script
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
    BEGIN
          select convert(date,invr.CreatedOn) as[Date],convert(date, inv.CreateOn) as [InvDate], 
           inv.InvoicePrintId,usr.UserName,
            pat.FirstName+' '+ ISNULL( pat.MiddleName,'')+' '+pat.LastName  as PatientName,
          sum(invr.TotalAmount) as TotalAmount, sum(inv.DiscountAmount) as Discount, Sum(invr.ReturnedQty) as Quantity
            from [PHRM_TXN_Invoice]inv
           join [PHRM_TXN_InvoiceReturnItems]invr
              on inv.InvoiceId=invr.InvoiceId
          join RBAC_User usr
              on usr.EmployeeId=invr.CreatedBy 
          join PAT_Patient pat
              on pat.PatientId=inv.PatientId
                where  convert(date, invr.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())
                
          group by convert(date,inv.CreateOn), convert(date, invr.CreatedOn),usr.UserName, 
          pat.FirstName,pat.MiddleName,pat.LastName, inv.InvoicePrintId
          order by convert(date,invr.CreatedOn) desc

  End
End

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_Settlement_GetInvoiceAndInvoiceReturnItemsOfInvoiceForPreview]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_Settlement_GetInvoiceAndInvoiceReturnItemsOfInvoiceForPreview]
@invoiceId INT = 0

AS  

/*
FileName: SP_PHRM_Settlement_GetInvoiceAndInvoiceReturnItemsOfInvoiceForPreview 2397
Description: To get all invoice and return invoice items details  of patient for Settlement preview
Remarks: We're returning 4 tables from this StoredProc.
1. INVOICE information
2. Invoice Items Information
3. CreditNote Information
4. CreditNote Items Information

Change History
---------------------------------------------------------------------------------------
S.No. 	UpdatedBy/Date 				Remarks
---------------------------------------------------------------------------------------
1. 		Rohit/1,DEC'21 				Created SP to get the settlement details for settlement receipt.
---------------------------------------------------------------------------------------
*/
BEGIN
-Table:1--Get 'Invoice' Information---
	SELECT inv.InvoicePrintId 'InvoiceNo', CONVERT(Date,inv.CreateOn) 'InvoiceDate',
		 inv.SubTotal, inv.DiscountAmount, inv.TotalAmount
		FROM PHRM_TXN_Invoice inv
	WHERE inv.InvoiceId = @invoiceId

	-Table:2--Get 'InvoiceItems' Information---
	SELECT txnItm.ItemId, txnItm.ItemName, txnItm.Quantity, txnItm.MRP,
	   txnItm.SubTotal,txnItm.TotalDisAmt 'DiscountAmount',txnItm.TotalAmount
		FROM PHRM_TXN_InvoiceItems txnItm 
	WHERE txnItm.InvoiceId = @invoiceId

	-Table:3--Get 'Credit Note' Information---
	SELECT InvoiceReturnId, CreditNoteID, CONVERT(date,CreatedOn) 'ReturnDate' 
	FROM  PHRM_TXN_InvoiceReturn
	WHERE InvoiceId = @invoiceId


	-Table:4--Get 'Credit Note Items' Information---
	SELECT retItm.InvoiceReturnId,mstItm.ItemName, retItm.ReturnedQty, retItm.MRP, retItm.SubTotal, retItm.DiscountAmount, retItm.TotalAmount
	FROM PHRM_TXN_InvoiceReturnItems retItm 
	INNER JOIN PHRM_MST_Item mstItm on retItm.ItemId = mstItm.ItemId
	WHERE retItm.InvoiceId = @invoiceId
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_StockClosingtest]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_StockClosingtest]--- [SP_PHRM_StockClosingtest] '01-03-2018','01-14-2019'
@FromDate datetime=null,
 @ToDate datetime=null
 AS
 /*
FileName: [[SP_PHRM_UserwiseCollectionReport]]
CreatedBy/date: Nagesh/Vikas/2018-07-31
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Nagesh/Vikas/2018-07-31                       created the script
2      Abhishek/2018-08-06					 Return and NetAmount calculation  select round(4.584406, 1, 1)
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
    BEGIN
	select  ItemName,BatchNo,MRP, sum(TotalQuantity-ReturnQuantity) as TotalQuantity
	from ( 
          SELECT item.ItemName, instock.BatchNo,round(instock.MRP,2,1)as MRP,sum(instock.Quantity)as TotalQuantity, 0 as ReturnQuantity
            FROM [dbo].[PHRM_StockTxnItems] instock
              INNER JOIN [dbo].[PHRM_MST_Item] item
             on instock.ItemId=item.ItemId          
              where  convert(datetime, instock.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and inout='in'
              group by ItemName, MRP, BatchNo
			  
			  union all
			 
			  select  item.ItemName,outstock.BatchNo ,round(outstock.MRP,2,1)as MRP, 0 as TotalAmount,sum(outstock.Quantity ) as ReturnQuantity
			  From[PHRM_StockTxnItems] outstock
			  INNER JOIN [dbo].[PHRM_MST_Item] item
             on outstock.ItemId=item.ItemId 
			  where convert(datetime, outstock.CreatedOn)   BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and inout='out'
			  group by ItemName,MRP, BatchNo
			  )	  tabletotal
			  Group BY  ItemName, MRP, BatchNo
      End
End
End: Abhishek/2018-08-06 Changes :StoredProcedure for userwise collection rectified--
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_TransferToDispensaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

store producre for transfer to dispensary report--
CREATE PROCEDURE [dbo].[SP_PHRM_TransferToDispensaryReport] 
	@FromDate datetime=null,
	@ToDate datetime=null
AS
 /*
FileName: [dbo].[SP_PHRM_TransferToDispensaryReport] '05/06/2020','05/06/2020'
CreatedBy/date:Shankar/05-01-2020
Description: To get report of stock details transfer to dispensary from store
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
			select CONVERT(date,stk.CreatedOn) as [Date],ItemName,BatchNo,Quantity,ExpiryDate,TotalAmount,StoreName,emp.FullName
			from PHRM_StoreStock as stk
			join EMP_Employee emp on stk.CreatedBy = emp.EmployeeId
			where CONVERT(date, stk.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 AND TransactionType='Transfer To Dispensary'
			
	   END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_TransferToStoreReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRM_TransferToStoreReport] 
	@FromDate datetime=null,
	@ToDate datetime=null
AS
 /*
FileName: [dbo].[SP_PHRM_TransferToStoreReport] '05/05/2020','05/05/2020'
CreatedBy/date:Shankar/05-01-2020
Description: To get report of stock details transfer to store from dispensary 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
			select CONVERT(date,stk.CreatedOn) as [Date],ItemName,BatchNo,Quantity,ExpiryDate,TotalAmount,StoreName,emp.FullName
			from PHRM_StoreStock as stk
			join EMP_Employee emp on stk.CreatedBy = emp.EmployeeId
			where CONVERT(date, stk.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 AND TransactionType='Sent From Dispensary'
			
	   END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRM_UserwiseCollectionReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRM_UserwiseCollectionReport]

    @FromDate datetime=NULL,
    @ToDate datetime=NULL,
    @CounterId varchar(max)=NULL,
    @CreatedBy varchar(max)=NULL,
    @StoreId int = NULL
AS
 /*
 SP_PHRM_UserwiseCollectionReport '2020-04-01','2022-01-01','1','admin',22
FileName: [[SP_PHRM_UserwiseCollectionReport]]
CreatedBy/date: Nagesh/Vikas/2018-07-31
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Nagesh/Vikas/2018-07-31                       created the script
2      Abhishek/2018-08-06					 Return and NetAmount calculation
3	   Salakha/2019-08-26					Billing type wise Calculation 
4. 		Dinesh /Abhishek 2nd Sept 2019		Counter corrected for pharmacy 
5.      Shankar 23rd March 2020             Included deposit deduct and deposit refund
6.		Sanjit/Ramesh 12 April 2021			Added StoreId as parameter for filtering by dispensary
7.      Sanjit/16Jun2021                    Added StoreName to show in grid
8:      Ramesh/Rohit 12Dec'21               New Fxn added for Summary View, Case changed for Settlement Details ie Newly SP Changes for User Collection Report
9.		Rohit/14th Jan'22					passed new parameter 'CreatedBy' in FN_PHRM_GetUserCollectionSummaryInDateRange
------------------------------------------------------
*/
 BEGIN
    IF ((@FromDate IS NOT NULL) AND (@ToDate IS NOT NULL)) 
    BEGIN
        SELECT
            bills.Date,
            bills.InvoiceNo 'ReceiptNo',
            pat.PatientCode 'HospitalNo',
            pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
            bills.TransactionType 'TransactionType',
            bills.SubTotal,
            bills.DiscountAmount,
            bills.VATAmount,
            bills.TotalAmount,
            bills.CashCollection,
            bills.DepositReceived,
            bills.DepositRefund,
            bills.DepositDeduct,
            bills.CreditReceived,
            bills.CreditAmount,
            bills.CounterId,
            cntr.CounterName,
            bills.StoreId,
            str.Name 'StoreName',
            bills.[EmployeeId],
            bills.Remarks,
            emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy
        FROM ( 

					                SELECT *
                FROM FN_PHRM_PharmacyTxn_ByBillingType_UserCollection(@FromDate,@ToDate,@StoreId)

            UNION ALL

                All Deposits Transactions---
                SELECT CONVERT(Date,CreatedOn) 'Date',
                    'DR'+ CONVERT(varchar(20),ISNULL(ReceiptNo,'')) 'InvoiceNo',
                    Patientid,
                    0 AS 'InvoiceId',
                    CASE WHEN DepositType='deposit' THEN 'AdvanceReceived' 
								WHEN DepositType='depositdeduct' OR DepositType='depositreturn' THEN 'AdvanceSettled' END AS 'TransactionType',

                    0 AS SubTotal, 0 AS DiscountAmount, 0 AS VATAmount, 0 AS TotalAmount,
                    CASE WHEN DepositType='deposit' THEN DepositAmount WHEN DepositType='depositdeduct' OR DepositType='depositreturn' THEN (-DepositAmount) END AS 'CashCollection',
                    CASE WHEN DepositType='deposit' THEN DepositAmount ELSE 0 END AS 'DepositReceived',
                    CASE WHEN  DepositType='depositreturn' THEN DepositAmount ELSE 0 END AS 'DepositRefund',

                    CASE WHEN  DepositType='depositdeduct' THEN DepositAmount ELSE 0 END AS 'DepositDeduct'
							 , 0 AS CreditReceived, 0 AS 'CreditAmount',
                    CounterId 'CounterId', StoreId, CreatedBy 'EmployeeId', Remark 'Remarks', 6 AS DisplaySeq
                FROM PHRM_Deposit
                WHERE (StoreId = @StoreId OR @StoreId IS NULL) AND CONVERT(Date,CreatedOn) BETWEEN @FromDate AND @ToDate	


			) bills,

            EMP_Employee emp,
            PAT_Patient pat,
            PHRM_MST_Counter cntr,
            PHRM_MST_Store str
        WHERE bills.PatientId = pat.PatientId
            AND emp.EmployeeId = bills.EmployeeId
            AND bills.CounterId = cntr.CounterId
            AND bills.StoreId = str.StoreId
            AND (bills.CounterId LIKE '%' + ISNULL(@CounterId, bills.CounterId) + '%')
            AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')

        ORDER BY bills.DisplaySeq


        Table2: For Settlement Details---
        Need: CollectionFromReceivable,  CashDiscount and Return Cash Discount in given date range for given counter, user--
        Getting Total(SUM) for all given criterias-- no need to separate for each user/counters/dates---
        SELECT
            Case When sett.PayableAmount > 0 then PayableAmount - ( DepositDeducted + ISNULL(DiscountAmount,0) + ISNULL(DueAmount,0)) ELSE 0 END AS PaidAmount, 
            SUM(Case When sett.PayableAmount > 0 then sett.PaidAmount ELSE 0 END) AS 'SettlPaidAmount', 
            SUM( Case WHEN sett.RefundableAmount > 0 THEN sett.ReturnedAmount ELSE 0 END ) AS 'SettlReturnAmount',
            SUM( Case WHEN sett.DueAmount > 0 THEN sett.DueAmount ELSE 0 END ) AS 'SettlDueAmount',
            SUM( Case WHEN  sett.DiscountAmount > 0 THEN sett.DiscountAmount ELSE 0 END  ) 'SettlDiscountAmount'

            Sum(Isnull(sett.CollectionFromReceivable,0)) 'CollectionFromReceivables',
            Sum(Isnull(sett.DiscountAmount,0)) 'CashDiscountGiven',
            Sum(Isnull(sett.DiscountReturnAmount,0)) 'CashDiscountReceived'

        FROM PHRM_TXN_Settlement sett,
            EMP_Employee emp,
            PHRM_MST_Counter cntr,
			PHRM_MST_Store store


        WHERE sett.CreatedBy=emp.EmployeeId
            AND sett.CounterId=cntr.CounterId
			AND sett.StoreId = store.StoreId
            AND (sett.CounterId LIKE '%' + ISNULL(@CounterId, sett.CounterId) + '%')
            AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
            AND CONVERT(Date,sett.CreatedOn) BETWEEN CONVERT(Date, @FromDate) AND CONVERT(Date, @ToDate)
        Group By sett.CreatedBy, sett.CounterId,emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName 

        table:3--Gets User Collection Summary for all users in the given date range---
        SELECT *
        FROM FN_PHRM_GetUserCollectionSummaryInDateRange(@FromDate,@ToDate,@StoreId,@CreatedBy)

    END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_ABC/VEDStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_ABC/VEDStockReport]  
@Status varchar(200) = null
AS
/*
FileName: [SP_PHRMReport_ABC/VEDStockReport]
CreatedBy/date: Rusha/04-01-2019
Description: 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1		Rusha/04-01-2019						get item details according to ABC and VED
2		Naveed/13-12-2019				    	updated script for exclude zero quantity Items
--------------------------------------------------------------------------
*/
Begin 
IF (@Status IS NOT NULL)
	BEGIN
		select itm.ItemName,gen.GenericName,itm.ABCCategory as ABC,itm.VED,itm.MinStockQuantity as Quantity
		from [dbo].[PHRM_MST_Item] as itm
		join PHRM_MST_Generic as gen on itm.GenericId = gen.GenericId
		where ((@Status=itm.ABCCategory OR @Status=itm.VED OR @Status='') or itm.ABCCategory like '%'+ISNULL(@Status,'')+'%' 
		or itm.VED like '%'+ISNULL(@Status,'')+'%' ) and itm.MinStockQuantity>0
		group by itm.ItemName,itm.ABCCategory, itm.VED,itm.MinStockQuantity,gen.GenericName
	END
	ELSE IF (@Status IS NULL)
	BEGIN
		select itm.ItemName,gen.GenericName,itm.ABCCategory as ABC,itm.VED,itm.MinStockQuantity as Quantity
		from [dbo].[PHRM_MST_Item] as itm
		join PHRM_MST_Generic as gen on itm.GenericId = gen.GenericId
		where ((@Status=itm.ABCCategory OR @Status=itm.VED OR @Status='') or itm.ABCCategory like '%'+ISNULL(@Status,'')+'%' 
		or itm.VED like '%'+ISNULL(@Status,'')+'%' )
		group by itm.ItemName,itm.ABCCategory, itm.VED,itm.MinStockQuantity,gen.GenericName
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_BatchStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--- END: 6 June 2019 Vikas: Create new PHRM_Dispensary Table -----


--- START: 7th June 2019: Alter store procedure

CREATE PROCEDURE [dbo].[SP_PHRMReport_BatchStockReport]  
	     @ItemName varchar(200) = null		
AS
/*
FileName: [SP_PHRMReport_BatchStockReport]
CreatedBy/date: Umed/2018-02-22
Description: To get the Details Such As ItemTypeName, ItemCode, AvailableQty,ExpiryDate,BatchNo, PurchaseRate, PurchaseValue, SalesRate, SalesVale of Each Item Selected By User BatchWise
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-22	                 created the script
										(To get the Details Such As ItemTypeName, ItemCode, AvailableQty,ExpiryDate,BatchNo, PurchaseRate, PurchaseValue, SalesRate, SalesVale of Each Item Selected By User BatchWise)
2       Umed/2018-02-23					Modified Sp i.e correction in SaleRate and SaleValue Field 
										(previously i am getting Salevale= SaleQty*Price but Write is SaleValue= AvailQty*Price and Added IsNull on some Attribute)
3		Rusha/2019-04-10				Modify Batch report showing stocks according to batchwise 
4		Vikas/2019-06-07				modify table name PHRM_StockTxnItem to PHRM_DispensarStock, get data from PHRM_DispensaryStock table
5.		Naveed/2019-12-13				updated script for exclude zero quantity Items from Report
--------------------------------------------------------------------------
*/
BEGIN

 IF (@ItemName IS NOT NULL)
	 BEGIN
		SELECT (CAST(ROW_NUMBER() OVER (ORDER BY  itm.ItemName)  AS INT)) AS SN,stk.ItemId, stk.BatchNo, itm.ItemName,gen.GenericName,
		stk.ExpiryDate,stk.AvailableQuantity AS TotalQty,stk.MRP
		FROM PHRM_DispensaryStock AS stk
		JOIN PHRM_MST_Item AS itm ON stk.ItemId=itm.ItemId
		JOIN PHRM_MST_Generic gen ON itm.GenericId= gen.GenericId
		WHERE BatchNo  like '%'+ISNULL(@ItemName,'')+'%' and stk.AvailableQuantity>0
		GROUP BY stk.ItemId,stk.BatchNo,itm.ItemName, stk.MRP, gen.GenericName,stk.ExpiryDate,stk.AvailableQuantity  
	 END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_BillingReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_BillingReport]
	@FromDate Date = NULL,
	@ToDate Date = NULL,
	@InvoiceNumber int = NULL

AS
/*
FileName: [SP_PHRMReport_BillingReport]
CreatedBy/date: Umed/2018-02-23
Description: To get the Details Such As ItemName, ItemCode, Expiry, PurchaseRate, PurchaseValue,SalesRate, SalesValue of Each Item Against Each Invoice Number
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-23             created the script
                                    (To get the Details Such As ItemName, ItemCode, Expiry, PurchaseRate, PurchaseValue,SalesRate, SalesValue of Each Item Against Each Invoice Number)
2       Rusha/2019-04-29            Recreated the Script
3.      Sanjit/Sud/2021-08-10       Removed group by from the query
4.		Sanjit/Sud/Pawan/2021-09-01	Removed double query for InvoiceNumber Null Check, changed DateTime to Date in @FromDate, @ToDate
									Removed @ToDate+1 Logic from Where Condition
									Added SubTotal, StoreName, StoreId
--------------------------------------------------------------------------
*/

BEGIN
	SELECT CONVERT(DATE,inv.CreateOn) AS [InvoiceDate], inv.InvoicePrintId, pat.PatientCode AS HospitalNo, pat.ShortName AS PatientName, emp.FullName AS UserName, inv.SubTotal, inv.DiscountAmount, inv.TotalAmount, inv.PaymentMode, store.Name AS StoreName, store.StoreId
	FROM PHRM_TXN_Invoice AS  inv
		INNER JOIN PAT_Patient AS pat ON pat.PatientId=inv.PatientId
		INNER JOIN EMP_Employee AS emp ON inv.CreatedBy = emp.EmployeeId
		INNER JOIN PHRM_MST_Store store ON inv.StoreId = store.StoreId
	WHERE (inv.InvoicePrintId = @InvoiceNumber OR ISNULL(@InvoiceNumber,0) = 0) AND ( CONVERT (Date, inv.CreateOn) BETWEEN @FromDate AND @ToDate )
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_DailyStockSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_DailyStockSummaryReport] 
	     @FromDate datetime= null,
		 @ToDate datetime= null		
AS
/*
FileName: [SP_PHRMReport_DailyStockSummaryReport]
CreatedBy/date: Umed/2018-02-27
Description: 
1. Created Seprate Function to Get Opention Stock Count of Selected FromDate 

2. Get ItemWise Opening Qty Count, PurchaseQty, PurchaseValue, SalesQty, SalesValue, EndingQty
   (Call this [getOpeningStockCount] and Get Opening Count of Each Items on Selected Date )
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-22	                 created the script
                                   Get ItemWise Opening Qty Count, PurchaseQty, PurchaseValue, SalesQty, SalesValue, EndingQty
                                    (Call this [getOpeningStockCount] and Get Opening Count of Each Items on Selected Date )
								Selecting 3 Table 
								1. In First Table: Selecting All Dates and ItemId of Sales/Purchase and Join with Second Table Data
								2. In Second Table: Selecting Purchase Data and Doing Left Join With First TAble
								3. Third Table Selecting Sales Data and Doing Left join with Result Til Generated by Second Table Join
 2.     Rusha/ 07-18-2019        updated script
 3.     Rusha/ 07-21-2019        quantity is not showing correctly so updated script
--------------------------------------------------------------------------
*/
BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
	BEGIN
			SELECT * FROM (
			SELECT x.ItemId, x.ItemName,x.BatchNo,x.GenericName,x.ExpiryDate,x.MRP,x.Price,SUM(x.OpeningQty) AS OpeningQty,
			SUM(x.EndQty) AS EndQty 
			FROM (
				SELECT a.ItemId,a.ItemName,a.BatchNo,a.GenericName,a.ExpiryDate,
				LAST_VALUE(a.MRP) OVER (PARTITION BY a.BatchNo, a.ItemId ORDER BY a.ItemId ) 'MRP',
				FIRST_VALUE(a.Price) OVER (PARTITION BY a.BatchNo, a.ItemId ORDER BY a.ItemId) 'Price',
				SUM(a.OpeningQty) AS OpeningQty,SUM (a.CurrQuantity) AS CurrQty,SUM(a.OpeningQty+ a.CurrQuantity) AS EndQty 
				FROM (
					SELECT stock.ItemId, stock.BatchNo,stock.ItemName,stock.GenericName,0 AS OpeningQty,
					SUM(stock.FreeInQty + stock.InQty-stock.OutQty-stock.FreeOutQty) AS CurrQuantity,
					stock.ExpiryDate,stock.MRP, stock.Price 
					FROM (
						SELECT t1.ItemId, t1.BatchNo,item.ItemName, generic.GenericName,t1.ExpiryDate,
					    LAST_VALUE(t1.MRP) OVER (PARTITION BY t1.BatchNo, t1.ItemId ORDER BY t1.ItemId ) 'MRP',
					    FIRST_VALUE(t1.Price) OVER (PARTITION BY t1.BatchNo, t1.ItemId ORDER BY t1.ItemId) 'Price',
						SUM(CASE WHEN InOut ='in' THEN FreeQuantity ELSE 0 END ) AS 'FreeInQty',
						SUM(CASE WHEN InOut = 'out' THEN FreeQuantity ELSE 0 END) AS 'FreeOutQty',
						SUM(CASE WHEN InOut ='in' THEN Quantity ELSE 0 END ) AS 'InQty',
						SUM(CASE WHEN InOut = 'out' THEN Quantity ELSE 0 END) AS 'OutQty'
						FROM [dbo].[PHRM_StockTxnItems] t1
						  INNER JOIN [dbo].[PHRM_MST_Item] item on item.ItemId = t1.ItemId
						  INNER JOIN [dbo].[PHRM_MST_Generic] generic on generic.GenericId =item.GenericId
						  WHERE CONVERT(date, t1.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())
						  GROUP BY t1.ItemId, t1.BatchNo,item.ItemName, generic.GenericName,t1.ExpiryDate,MRP,Price
					) stock
					GROUP BY stock.ItemId,stock.ItemName,stock.BatchNo,stock.GenericName,stock.ExpiryDate,stock.MRP, stock.Price

					UNION 

					SELECT stock.ItemId, stock.BatchNo,stock.ItemName,stock.GenericName,
					Sum(stock.FreeInQty + stock.InQty-stock.OutQty-stock.FreeOutQty) AS OpeningQty, 0 AS CurrQuantity,
					stock.ExpiryDate,stock.MRP, stock.Price 
					FROM (
						SELECT t1.ItemId, t1.BatchNo,item.ItemName, generic.GenericName,t1.ExpiryDate,
						LAST_VALUE(t1.MRP) OVER (PARTITION BY t1.BatchNo, t1.ItemId ORDER BY t1.ItemId ) 'MRP',
						FIRST_VALUE(t1.Price) OVER (PARTITION BY t1.BatchNo, t1.ItemId ORDER BY t1.ItemId) 'Price',
						SUM(CASE WHEN InOut ='in' THEN FreeQuantity ELSE 0 END ) AS 'FreeInQty',
						SUM(CASE WHEN InOut = 'out' THEN FreeQuantity ELSE 0 END) AS 'FreeOutQty',
						SUM(CASE WHEN InOut ='in' THEN Quantity ELSE 0 END ) AS 'InQty',
						SUM(CASE WHEN InOut = 'out' THEN Quantity ELSE 0 END) AS 'OutQty'
						FROM [dbo].[PHRM_StockTxnItems] t1
						INNER JOIN [dbo].[PHRM_MST_Item] item on item.ItemId = t1.ItemId
						INNER JOIN [dbo].[PHRM_MST_Generic] generic on generic.GenericId =item.GenericId
						WHERE CONVERT(date, t1.CreatedOn) < ISNULL(@FromDate,GETDATE())
						GROUP BY t1.ItemId, t1.BatchNo,item.ItemName, generic.GenericName,t1.ExpiryDate,MRP,Price
		             ) stock
					GROUP BY stock.ItemId,stock.ItemName,stock.BatchNo,stock.GenericName,stock.ExpiryDate,stock.MRP, stock.Price) a
				GROUP BY a.ItemId,a.ItemName,a.BatchNo,a.GenericName,a.ExpiryDate,a.MRP,a.Price )x
			GROUP BY x.ItemId, x.ItemName,x.BatchNo,x.GenericName,x.ExpiryDate,x.MRP,x.Price) t
			WHERE t.OpeningQty >= 0 and t.EndQty >= 0
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_DateWisePurchaseReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_DateWisePurchaseReport]
    @FromDate datetime = NULL,
    @ToDate datetime = NULL,
	@SupplierId int = NULL
	
AS
/*
FileName: SP_PHRMReport_DateWisePurchaseReport '2021-05-13', '2021-09-13', null
CreatedBy/date: RAMESH/13-05-2021
Description: To get the Details of goods receipt along with Supplier, Item, GenericName and other parameters.
             This Report is also used for Supplier Wise Purchase report.
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1        RAMESH/13-05-2021                  Initial commit
2        Rohit/16-08-2021                   Search with SupplierId.(we are using same report for SupplierWise Purchase Report as well so we have added SupplierId as a filter.)
----------------------------------------------------------------------------------------------------------------------------------
*/

	BEGIN

    IF ( @FromDate IS NOT NULL AND @ToDate IS NOT NULL)
	BEGIN
        SELECT (Cast(ROW_NUMBER() OVER (ORDER BY  gr.GoodReceiptDate)  AS int)) AS SN, gr.GoodReceiptDate, gr.InvoiceNo, supplier.SupplierName, item.ItemName, generic.GenericName, grI.BatchNo, grI.ExpiryDate, IsNULL(grI.GRItemPrice,0) AS PurchaseRate,
            SUM (ISNULL (grI.ReceivedQuantity, 0)) AS Quantity, ROUND(IsNULL(grI.GRPerItemVATAmt,0),2) AS VATAmount,
            SUM (ISNULL (grI.FreeQuantity, 0)) AS FreeQuantity, ROUND(((IsNULL(grI.GRItemPrice,0)* SUM (ISNULL (grI.ReceivedQuantity, 0))) + IsNULL(grI.GRPerItemVATAmt,0)),2) AS TotalAmount, ROUND(((IsNULL(grI.GRItemPrice,0)* SUM (ISNULL (grI.ReceivedQuantity, 0)))),2) AS SubTotal
        FROM PHRM_GoodsReceiptItems AS grI INNER JOIN
            PHRM_GoodsReceipt AS gr ON grI.GoodReceiptId = gr.GoodReceiptId INNER JOIN
            PHRM_MST_Supplier AS supplier ON supplier.SupplierId  = gr.SupplierId INNER JOIN
            PHRM_MST_Item AS item ON item.ItemId = grI.ItemId INNER JOIN
            PHRM_MST_Generic AS generic ON generic.GenericId = item.GenericId
        WHERE CONVERT(datetime,gr.GoodReceiptDate) BETWEEN ISNULL(@FromDate,GETDATE()) AND ISNULL(@ToDate,GETDATE())+1 AND (gr.SupplierId = @SupplierId OR @SupplierId IS NULL)

        GROUP BY grI.GoodReceiptItemId, gr.GoodReceiptDate, item.ItemName, generic.GenericName, grI.ExpiryDate, gr.InvoiceNo, grI.BatchNo, grI.GRItemPrice, grI.GrPerItemVATAmt, supplier.SupplierName

    END
END


GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_DepositBalanceReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_DepositBalanceReport] 	
		
AS
/*
FileName: [SP_PHRMReport_DepositBalanceReport]
CreatedBy/date: Kushal/2019-07-08
Description: To get the deposit Balance of the Patient in Pharmacy
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Kushal/2019-07-08	                   created the script
------------------------------------------------------
*/
BEGIN
select (Cast(ROW_NUMBER() OVER (ORDER BY  s.PatientCode)  as int)) as SN,*
from(
SELECT  distinct d.PatientId, d.PatientCode, d.PatientName, d.DepositBalance 
	FROM 
	(SELECT
		dep.PatientId,
		pat.PatientCode,
		pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName 'PatientName',
		LAST_VALUE( dep.DepositBalance) over (partition by dep.PatientId order by dep.PatientId) 'DepositBalance' 
		dep.DepositBalance
	FROM PHRM_Deposit as dep
	JOIN PAT_Patient pat ON dep.PatientId = pat.PatientId
		) d
WHERE d.DepositBalance > 0)
s

END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_DispensaryStoreStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_DispensaryStoreStockReport]
    @Status varchar(200) = NULL
AS
/*
FileName: [SP_PHRMReport_DispensaryStoreStockReport]
CreatedBy/date: Rusha/2019-04-10
Description: To get the Stock Value of both dispensary and store wise
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.       Rusha/06-11-2019						updated script for dispensary and store stock item
2.		 Naveed/13-12-2019						updated script for exclude zero quantity Items from Report
3.      Sanjit/11-06-2021                       updated script to handle stock redesign. script uses same table for dispensary and store
------------------------------------------------------
*/

BEGIN
    SELECT I.ItemName, S.BatchNo, S.ExpiryDate, S.MRP, SUM(SS.AvailableQuantity) StockQty, STR.Name StoreName
    FROM PHRM_TXN_StoreStock SS
        INNER JOIN PHRM_MST_Stock S ON SS.StockId = S.StockId
        INNER JOIN PHRM_MST_Item I ON SS.ItemId = I.ItemId
        INNER JOIN PHRM_MST_Store STR ON SS.StoreId = STR.StoreId
    WHERE SS.AvailableQuantity>0 AND
        (
             @Status = 'all' OR
            (@Status = 'store' AND STR.Category = 'store') OR
            (@Status = 'dispensary' AND STR.Category = 'dispensary')
        )
    GROUP BY SS.ItemId, I.ItemName, S.BatchNo, S.ExpiryDate, S.MRP, STR.Name
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_DrugCategoryWiseReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_PHRMReport_DrugCategoryWiseReport] 
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@Category nvarchar(100)=null

AS
/*
FileName: [SP_PHRMReport_DrugCategoryWiseReport]
CreatedBy/date: Rusha/2019-05-12
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1        Rusha/2019-05-12                     created of the script for displaying report according to drug category
2.		 Naveed/2019-12-13				      updated script for exclude zero quantity Items from Report
------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL) and (@Category IS NOT NULL))
	BEGIN
		SELECT CONVERT(DATE,invitm.CreatedOn) AS [Date],cat.CategoryName,invitm.ItemName, CONCAT_WS(' ',pat.FirstName,pat.MiddleName,pat.LastName) AS PatientName,
		CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS ProviderName,		
		invitm.BatchNo,invitm.Quantity,invitm.Price,invitm.TotalAmount 
		FROM PHRM_TXN_InvoiceItems AS invitm
		join PHRM_TXN_Invoice AS inv ON inv.PatientId = invitm.PatientId
		join EMP_Employee AS emp ON inv.ProviderId = emp.EmployeeId
		join PHRM_MST_Item AS itm ON invitm.ItemId = itm.ItemId
		join PHRM_MST_Generic AS gen ON itm.GenericId = gen.GenericId
		join PHRM_MST_Category AS cat ON gen.CategoryId = cat.CategoryId
		join PAT_Patient AS pat ON invitm.PatientId = pat.PatientId
		WHERE CONVERT(DATE,invitm.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and cat.CategoryName = @Category AND invitm.Quantity>0
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_EndingStockSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_EndingStockSummaryReport]  
	     @ItemName varchar(200) = null
		 
AS
/*
FileName: [SP_PHRMReport_EndingStockSummaryReport]
CreatedBy/date: Umed/2018-02-22
Description: To get the Details Such As ItemName, ItemCode, AvailableQty, PurchaseRate, PurchaseValue, of Each Item Selected By User on that ItemPrice
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-22	                 created the script
                                    (To get the Details Such As ItemName, ItemCode, AvailableQty, PurchaseRate, PurchaseValue, of Each Item Selected By User on that ItemPrice)
2       Umed/2018-02-23             Modified SP i.e Added Batch No 
--------------------------------------------------------------------------
*/

BEGIN

 IF (@ItemName IS NOT NULL)
	 BEGIN
		
			Select (Cast(ROW_NUMBER() OVER (ORDER BY  t1.ItemName)  as int)) as SN, 
			      t1.ItemName, itm.ItemCode, t1.AvailableQuantity as Quantity, t1.BatchNo, t1.GRItemPrice AS PurchaseRate ,
				   (t1.AvailableQuantity*t1.GRItemPrice) as PurchaseValue
				  From PHRM_GoodsReceiptItems t1
				  inner join PHRM_MST_Item itm on itm.ItemId= t1.ItemId
				  inner join PHRM_Stock stk on stk.ItemId = itm.ItemId
				   where t1.ItemName  like '%'+ISNULL(@ItemName,'')+'%'  
				  group by t1.ItemName,itm.ItemCode,t1.BatchNo, t1.GRItemPrice,t1.AvailableQuantity
			     
			       
	 END
End

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_ExpiryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_ExpiryReport]
    [SP_PHRMReport_ExpiryReport] null, null,'2021-05-01','2040-05-10'
    @ItemId int = NULL,
    @StoreId int = NULL,
    @FromDate Date = NULL,
    @ToDate Date = NULL
AS
/*
FileName: [SP_PHRMReport_ExpiryReport]
CreatedBy/date: Abhishek/2018-05-06
Description: To get the Expired Products Details Such As ItemName, ItemCode, AvailableQty,ExpiryDate,BatchNo of Each Item Selected By User Datewise
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/04-03-2019						Updated INOUT Quantity
2.		Vikas/07-06-2019						update table name, get data from PHRM_DispensaryStock table
3.      Naveed/13-12-2019                       Convert Expiry Date to varchar for showing well format date while Export
4.		Bikash/12-01-2020						items with generic name as surgical removed.
5.      Sanjit/Ramesh/10-05-2021                Show the Stocks expiry selecting available Stores.Also Date Filter added.
6.      Sanjit/10-06-2021                       Removed Dispensary Stock part and calculated from store stock table (Pharmacy Stock Redesign Impact Analysis)
7.      Ramesh/13-03-2021                       Supplier Name is Added in the report.
--------------------------------------------------------------------------
*/

BEGIN
    SELECT (Cast(ROW_NUMBER() OVER (ORDER BY  x.ItemName)  AS int)) AS SN, x.*
    FROM
        (
            SELECT t1.ItemId, t1.BatchNo, t1.ExpiryDate, t1.MRP, t1.CostPrice, item.ItemName, generic.GenericName, SUM(t2.AvailableQuantity) AS AvailableQuantity, store.Name, ISNULL(Supplier.SupplierName, '') AS SupplierName
          FROM PHRM_MST_Stock AS t1 INNER JOIN
            PHRM_TXN_StoreStock AS t2 ON t1.StockId = t2.StockId LEFT JOIN
            PHRM_GoodsReceiptItems AS GRI ON t2.StoreStockId = GRI.StoreStockId LEFT JOIN
            PHRM_GoodsReceipt AS GR ON GRI.GoodReceiptId = GR.GoodReceiptId LEFT JOIN
            PHRM_MST_Supplier Supplier ON GR.SupplierId = Supplier.SupplierId INNER JOIN
            PHRM_MST_Item AS item ON item.ItemId = t1.ItemId INNER JOIN
            PHRM_MST_Generic AS generic ON generic.GenericId = item.GenericId INNER JOIN
            PHRM_MST_Store AS store ON store.StoreId = t2.StoreId
         WHERE  (t1.ItemId = @ItemId OR @ItemId IS NULL) AND (t2.StoreId = @StoreId OR @StoreId IS NULL)
            AND CONVERT(Date,t1.ExpiryDate) BETWEEN @FromDate AND @ToDate AND (t2.AvailableQuantity > 0)
            AND (generic.GenericName NOT LIKE '%SURGICAL%')
        GROUP BY t1.ItemId, t1.BatchNo, t1.ExpiryDate, t1.MRP,t1.CostPrice, item.ItemName, generic.GenericName, store.Name, Supplier.SupplierName
        )
    AS x
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_ItemTxnSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE PROCEDURE [dbo].[SP_PHRMReport_ItemTxnSummaryReport] 
    @FromDate DATE = null,
    @ToDate DATE = null,  
    @ItemId INT = null
AS
/*
  FileName: [SP_PHRMReport_ItemTxnSummaryReport]
  CreatedBy/date: Sanjit/2021-01-20
  Description: 
  1. Created to find all the item txn as a part of stock summary report in pharmacy
  Example to Execute:
  exec SP_PHRMReport_ItemTxnSummaryReport '2021-06-15', '2021-09-01', 9
  Change History
  --------------------------------------------------------------------------
  S.No.    UpdatedBy/Date                        Remarks
  -------------------------------------------------------------------------
  1       Sanjit/2021-01-20          created the script.
  2       Sanjesh/2021-02-21         Added Reference name 
  3		  Sanjit/2021-09-01			 Added StoreName, UserName. Added Transfers and Opening Data	
  4       Ramesh/2021-09-26          InvoiceReturnId added as ReferenceNo for Invoice Return 
  --------------------------------------------------------------------------
*/
BEGIN
  SELECT TransactionDate, ReferenceNoPrefix,ReferenceName, ReferenceNo, ReferencePrintNo, Type, StockIn, StockOut, Rate, MRP, ExpiryDate, StoreName, UserName FROM 
  (
	Opening Items
	SELECT FYS.CreatedOn AS [TransactionDate],
        'Opening' AS [ReferenceNoPrefix],
        '' AS [ReferenceName],
        NULL AS [ReferenceNo],
        NULL AS [ReferencePrintNo],
        'Opening' AS [Type],
        ISNULL(FYS.OpeningQuantity,0) AS [StockIn],
        0 AS [StockOut],
        FYS.CostPrice AS [Rate],
        FYS.MRP AS [MRP],
        CONVERT(varchar, FYS.ExpiryDate, 23) AS [ExpiryDate],
		store.Name as StoreName,
		E.FullName as UserName
    FROM PHRM_FiscalYearStock AS FYS
	INNER JOIN PHRM_MST_Store store ON FYS.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON FYS.CreatedBy = E.EmployeeId
    WHERE (FYS.ItemId = @ItemId) AND (CONVERT(date, FYS.CreatedOn) BETWEEN @fromDate AND @toDate)

	UNION

    Purchase from Goods Receipt Table
    SELECT GR.GoodReceiptDate AS [TransactionDate],
        'GR' AS [ReferenceNoPrefix],
        Supp.SupplierName AS [ReferenceName],
        GR.GoodReceiptId AS [ReferenceNo],
        GR.GoodReceiptPrintId AS [ReferencePrintNo],
        'Purchase' AS [Type],
        ISNULL(GRI.ReceivedQuantity,0) + ISNULL(GRI.FreeQuantity,0) AS [StockIn],
        0 AS [StockOut],
        GRI.GRItemPrice AS [Rate],
        GRI.MRP AS [MRP],
        CONVERT(varchar, GRI.ExpiryDate, 23) AS [ExpiryDate],
		store.Name as StoreName,
		E.FullName as UserName
    FROM PHRM_GoodsReceiptItems AS GRI
    INNER JOIN PHRM_GoodsReceipt AS GR ON GR.GoodReceiptId = GRI.GoodReceiptId
    INNER JOIN PHRM_MST_Supplier As Supp on gr.SupplierId = Supp.SupplierId
	INNER JOIN PHRM_MST_Store store ON GR.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON GR.CreatedBy = E.EmployeeId
    WHERE (GRI.ItemId = @ItemId) AND (CONVERT(date, GR.GoodReceiptDate) BETWEEN @fromDate AND @toDate)

    UNION

     Purchase Return from Return To Supplier
    SELECT RTS.ReturnDate AS [TransactionDate],
        'RTS' AS [ReferenceNoPrefix],
        Supp.SupplierName AS [ReferenceName],
        RTS.CreditNoteId AS [ReferenceNo],
        RTS.CreditNotePrintId AS [ReferencePrintNo],
        'PurchaseReturn' AS [Type],
        0 AS [StockIn],
        (ISNULL(RTSI.Quantity,0) + ISNULL(RTSI.FreeQuantity,0)) AS [StockOut],
        RTSI.ItemPrice AS [Rate],
        RTSI.MRP AS [MRP],
        CONVERT(varchar, RTSI.ExpiryDate, 23) AS [ExpiryDate],
		'Main Store' as StoreName,
		E.FullName as UserName
    FROM PHRM_ReturnToSupplierItems RTSI
    INNER JOIN PHRM_ReturnToSupplier RTS ON RTSI.ReturnToSupplierId = RTS.ReturnToSupplierId
    INNER JOIN PHRM_MST_Supplier Supp on rts.SupplierId = Supp.SupplierId
	INNER JOIN EMP_Employee E ON RTS.CreatedBy = E.EmployeeId
    WHERE RTSI.ItemId = @ItemId AND CONVERT(date, RTS.ReturnDate) BETWEEN @fromDate AND @toDate

    UNION

    Purchase Cancel , txn type = cancel-gr
    SELECT GR.GoodReceiptDate AS [TransactionDate],
        'CGR' AS [ReferenceNoPrefix],
         NULL AS [ReferenceName],
         GR.GoodReceiptId AS [ReferenceNo],
        GR.GoodReceiptPrintId AS [ReferencePrintNo],
        'PurchaseCancel' AS [Type],
        ISNULL(GRI.ReceivedQuantity,0) + ISNULL(GRI.FreeQuantity,0) AS [StockIn],
        0 AS [StockOut],
        GRI.GRItemPrice AS [Rate],
        GRI.MRP AS [MRP],
        CONVERT(varchar, GRI.ExpiryDate, 23) AS [ExpiryDate],
		store.Name as StoreName,
		E.FullName as UserName
    FROM PHRM_GoodsReceiptItems AS GRI
    INNER JOIN PHRM_GoodsReceipt AS GR ON GR.GoodReceiptId = GRI.GoodReceiptId
	INNER JOIN PHRM_MST_Store store ON GR.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON GR.CreatedBy = E.EmployeeId
    WHERE (GRI.ItemId = @ItemId) AND GR.IsCancel = 1 AND (CONVERT(date, GR.GoodReceiptDate) BETWEEN @fromDate AND @toDate)

    UNION
	StockManageIn from PHRM_StoreStock
    SELECT S.TransactionDate AS [TransactionDate],
        'SMI' AS [ReferenceNoPrefix],
         '' AS [ReferenceName],
        S.ReferenceNo AS [ReferenceNo],
        S.ReferenceNo AS [ReferencePrintNo],
        'StockManageIn' AS [Type],
        ISNULL(S.InQty,0) AS [StockIn],
        0 AS [StockOut],
        S.CostPrice AS [Rate],
        S.MRP AS [MRP],
        CONVERT(varchar, S.ExpiryDate, 23) AS [ExpiryDate],
		store.Name as StoreName,
		E.FullName as UserName
    FROM PHRM_TXN_StockTransaction S
	INNER JOIN PHRM_MST_Store store ON S.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON S.CreatedBy = E.EmployeeId
    WHERE TransactionType = 'stock-managed-item'
		AND S.InQty > 0
        AND S.ItemId = @ItemId
        AND CONVERT(date, S.TransactionDate) BETWEEN @fromDate AND @toDate

    UNION

    StockManageOut from PHRM_StoreStock
    SELECT S.TransactionDate AS [TransactionDate],
        'SMO' AS [ReferenceNoPrefix],
         '' AS [ReferenceName],
        S.ReferenceNo AS [ReferenceNo],
         S.ReferenceNo AS [ReferencePrintNo],
        'StockManageOut' AS [Type],
        0 AS [StockIn],
        ISNULL(S.OutQty,0) AS [StockOut],
        S.CostPrice AS [Rate],
        S.MRP AS [MRP],
        CONVERT(varchar, S.ExpiryDate, 23) AS [ExpiryDate],
		store.Name as StoreName,
		E.FullName as UserName
    FROM PHRM_TXN_StockTransaction S
	INNER JOIN PHRM_MST_Store store ON S.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON S.CreatedBy = E.EmployeeId
    WHERE TransactionType = 'stock-managed-item'
        AND S.OutQty > 0
        AND S.ItemId = @ItemId
        AND CONVERT(date, S.TransactionDate) BETWEEN @fromDate AND @toDate

    UNION

     Sale from Invoice Table
      SELECT I.CreateOn AS [TransactionDate],
        'PH' AS [ReferenceNoPrefix],
        pat.ShortName AS [ReferenceName],
        I.InvoiceId AS [ReferenceNo],
         I.InvoicePrintId AS [ReferencePrintNo],
        'Sale' AS [Type],
        0 AS [StockIn],
        (ISNULL(IItem.Quantity,0) + ISNULL(IItem.FreeQuantity,0)) AS [StockOut],
        IItem.Price AS [Rate],
        IItem.MRP AS [MRP],
        CONVERT(varchar, IItem.ExpiryDate, 23) AS [ExpiryDate],
		store.Name as StoreName,
		E.FullName as UserName
    FROM PHRM_TXN_InvoiceItems IItem
    INNER JOIN PHRM_TXN_Invoice I ON I.InvoiceId = IItem.InvoiceId
    INNER JOIN PAT_Patient pat on I.PatientId = pat.PatientId
	INNER JOIN PHRM_MST_Store store ON I.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON I.CreatedBy = E.EmployeeId
    WHERE IItem.ItemId = @ItemId AND CONVERT(date, I.CreateOn) BETWEEN @fromDate AND @toDate

    UNION

     Sales Return from Invoice Return Table
    SELECT IR.CreatedOn AS [TransactionDate],
      'CR-PH' AS [ReferenceNoPrefix],
       NULL AS [ReferenceName],
      IR.InvoiceReturnId AS [ReferenceNo],
      IR.CreditNoteID AS [ReferencePrintNo],
      'SaleRefund' AS [Type],
      (ISNULL(IRI.ReturnedQty,0)) AS [StockIn],
      0 AS [StockOut],
      IRI.Price AS [Rate],
      IRI.MRP AS [MRP],
      CONVERT(varchar, IItem.ExpiryDate, 23) AS [ExpiryDate],
	  store.Name as StoreName,
	  E.FullName as UserName
    FROM PHRM_TXN_InvoiceReturnItems IRI
    INNER JOIN PHRM_TXN_InvoiceReturn IR ON IR.InvoiceReturnId = IRI.InvoiceReturnId
    INNER JOIN PHRM_TXN_InvoiceItems IItem ON IItem.InvoiceItemId = IRI.InvoiceItemId
	INNER JOIN PHRM_MST_Store store ON IR.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON IR.CreatedBy = E.EmployeeId
    WHERE IRI.ItemId = @ItemId AND CONVERT(date, IR.CreatedOn) BETWEEN @fromDate AND @toDate

    UNION

     Dispatches/Transfers
    SELECT DI.DispatchedDate AS [TransactionDate],
      'TR' AS [ReferenceNoPrefix],
       '' AS [ReferenceName],
      DI.DispatchItemsId AS [ReferenceNo],
      DI.DispatchId AS [ReferencePrintNo],
      'Transfer/Dispatch' AS [Type],
      (SUM(ST.InQty)) AS [StockIn],
      (SUM(ST.OutQty)) AS [StockOut],
      ST.CostPrice AS [Rate],
      ST.MRP AS [MRP],
      CONVERT(varchar, ST.ExpiryDate, 23) AS [ExpiryDate],
	  store.Name as StoreName,
	  E.FullName as UserName
    FROM PHRM_TXN_StockTransaction ST
    INNER JOIN PHRM_StoreDispatchItems DI ON ST.ReferenceNo = DI.DispatchItemsId
	INNER JOIN PHRM_MST_Store store ON ST.StoreId = store.StoreId
	INNER JOIN EMP_Employee E ON (ST.OutQty > 0 AND DI.CreatedBy = E.EmployeeId) OR (ST.InQty > 0 AND DI.ReceivedById = E.EmployeeId)
    WHERE ST.TransactionType IN ('transfer-item','dispensary-dispatched-item','dispatched-item') 
	AND ST.ItemId = @ItemId AND CONVERT(date, ST.TransactionDate) BETWEEN @fromDate AND @toDate
	GROUP BY DI.DispatchItemsId, DI.DispatchedDate, DI.DispatchId, ST.CostPrice, ST.MRP, ST.ExpiryDate, store.Name, E.FullName
  ) ItemTxns
  ORDER BY ItemTxns.TransactionDate
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_ItemWisePurchaseReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_ItemWisePurchaseReport]
    @FromDate Date = NULL,
    @ToDate Date = NULL,
    @ItemId int = NULL,
    @InvoiceNo varchar(50) = NULL,
    @GoodsReceiptNo int = NULL,
	@SupplierId INT=NULL
AS
/*
FileName: [SP_PHRMReport_ItemWisePurchaseReport]  --- [SP_PHRMReport_ItemWisePurchaseReport] '2021-01-01','2021-12-01', 3,null,null
CreatedBy/Date: Ramesh/2021-05-11
Description: To get the Details of Supplier, GoodsReceiptDate, GR No, Rate, VAT Amount and TotalAmount of the Selected Item by User.

Changes:
------------------------------------------------------------------------
SN       User/Date                              Remarks
------------------------------------------------------------------------
1.      Sud/Sanjit/Ramesh:4Sep'21             Using this function for Supplier as well.
                                              Removing Grouping/sums etc since we need item level data.
------------------------------------------------------------------------

*/
  BEGIN

    SELECT 
	-(Cast(ROW_NUMBER() OVER (ORDER BY  grItems.ItemId)  AS int)) AS SN, 
	grItems.ItemId, 
	gen.GenericName, 
	item.ItemName,
	grItems.BatchNo, 
	Convert(Date,grItems.ExpiryDate) ExpiryDate,
	supplier.SupplierName, 
	Convert(Date,gr.GoodReceiptDate) GoodReceiptDate, 
	gr.InvoiceNo, 
	gr.GoodReceiptPrintId AS GoodsReceiptNo, 
	IsNULL(grItems.GRItemPrice,0) AS PurchaseRate, 
	ISNULL(grItems.GrPerItemVATAmt,0) AS VATAmount, 
	ISNULL(grItems.ReceivedQuantity,0) AS ReceivedQuantity, 
		ISNULL(grItems.SubTotal,0) AS SubTotal, 
	ISNULL(grItems.TotalAmount,0) AS TotalAmount

    FROM PHRM_GoodsReceiptItems AS grItems INNER JOIN
        PHRM_GoodsReceipt AS gr ON gr.GoodReceiptId = grItems.GoodReceiptId INNER JOIN
        PHRM_MST_Item AS item ON item.ItemId = grItems.ItemId INNER JOIN
        PHRM_MST_Generic AS gen ON gen.GenericId = item.GenericId INNER JOIN
        PHRM_MST_Supplier AS supplier ON gr.SupplierId = supplier.SupplierId
    WHERE  
	   ISNULL(gr.IsCancel,0) !=1 --Exclude items from Cancelled GRs
	   AND (grItems.ItemId = @ItemId OR @ItemId IS NULL) 
	   AND CONVERT(Date,gr.GoodReceiptDate) BETWEEN @FromDate AND @ToDate 
       AND (gr.GoodReceiptPrintId = @GoodsReceiptNo OR @GoodsReceiptNo IS NULL)
	    this is special case 'null' was coming from frontend.. Pls don't remove that check.. 
	   AND (gr.InvoiceNo = @InvoiceNo OR @InvoiceNo IS NULL OR LOWER (@InvoiceNo) = 'null' ) 
       AND (gr.SupplierId = @SupplierId OR @SupplierId IS NULL)
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_ItemWiseStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_PHRMReport_ItemWiseStockReport]  
	
AS
/*
FileName: [SP_PHRMReport_ItemWiseStockReport]
CreatedBy/date: Umed/2017-11-23
Description: To get the itemwise Stock quantity with Stock Value
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2017-11-23	                     created the script
2       Umed/2017-11-28                     Modify because we have drop the stockIn table 
                                          and now available qty is get from GrItms Tables
------------------------------------------------------
*/

BEGIN
     SELECT  itm.ItemName,ittyp.ItemTypeName ,ISNULL(SUM(gritm.AvailableQuantity),0) AS StockQuantity ,
            ISNULL(SUM(gritm.AvailableQuantity *gritm.GRItemPrice),0) AS StockValue
	 FROM  PHRM_GoodsReceiptItems gritm 
	 INNER JOIN PHRM_MST_Item itm ON itm.ItemId = gritm.ItemId
	 INNER JOIN PHRM_MST_ItemType ittyp ON ittyp.ItemTypeId = itm.ItemTypeId
	 GROUP BY itm.ItemName,ittyp.ItemTypeName
	 
	 
End
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_LedgerCredit_IndoorOutdoorPatient]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_LedgerCredit_IndoorOutdoorPatient] 
		@FromDate datetime=null,
		@ToDate datetime=null,
        @IsInOutPat bit
AS
/*
FileName: [SP_PHRMReport_LedgerCredit_IndoorOutdoorPatient]
CreatedBy/date: Umed/2018-02-21
Description: To get Patient Sale Credit Details Based on Patient Type
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-21	                 created the script
                                        i.e. To get Patient Sale Credit Details Based on Patient Type
2		Rusha/2019-05-03				Recreated the script to get Patient Sale Credit Details Based on Patient Type
3       Shankar/2020-06-01				Added organization name and remark
--------------------------------------------------------------------------
*/
BEGIN
	IF (@FromDate IS NOT NULL AND @ToDate IS NOT NULL AND @IsInOutPat=1)
			BEGIN
				SELECT CONVERT(date,inv.CreateOn) AS [Date],inv.InvoicePrintId AS InvoiceNum,pat.PatientCode, ISNULL(cr.OrganizationName,'N/A') as 'OrganizationName', inv.Remark,
				CONCAT_WS(' ',pat.FirstName,pat.MiddleName,pat.LastName) AS PatientName,pat.Address,inv.PaidAmount,inv.VisitType 
				FROM PHRM_TXN_Invoice AS inv
				LEFT JOIN PHRM_MST_Credit_Organization AS cr ON inv.OrganizationId = cr.OrganizationId
				JOIN PAT_Patient AS pat ON pat.PatientId = inv.PatientId
				WHERE inv.VisitType='outpatient' AND  inv.PaymentMode='credit' and CONVERT(date, inv.CreateOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
				GROUP BY CONVERT(date,inv.CreateOn),pat.FirstName,pat.MiddleName,pat.LastName,pat.PatientCode,inv.PaidAmount,inv.VisitType, inv.InvoicePrintId,pat.Address, OrganizationName, inv.Remark
			END
			ELSE IF (@IsInOutPat=0)
			BEGIN
				select CONVERT(date,inv.CreateOn) AS [Date],inv.InvoicePrintId AS InvoiceNum,pat.PatientCode, ISNULL(cr.OrganizationName,'N/A') as 'OrganizationName', inv.Remark,
				CONCAT_WS(' ',pat.FirstName,pat.MiddleName,pat.LastName) as PatientName,pat.Address,inv.PaidAmount,inv.VisitType 
				from PHRM_TXN_Invoice AS inv
				LEFT JOIN PHRM_MST_Credit_Organization AS cr ON inv.OrganizationId = cr.OrganizationId
				join PAT_Patient AS pat ON pat.PatientId = inv.PatientId
				where inv.VisitType='inpatient' AND  inv.PaymentMode='credit'and CONVERT(date,inv.CreateOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
				group by CONVERT(date,inv.CreateOn),pat.FirstName,pat.MiddleName,pat.LastName,pat.PatientCode,inv.PaidAmount,inv.VisitType, inv.InvoicePrintId,pat.Address, OrganizationName, inv.Remark
			END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_MinStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_MinStockReport]  
@ItemName varchar(200) = null
AS
/*
FileName: [SP_PHRMReport_MinStockReport]
CreatedBy/date: vikas/2018-08-21
Description: 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
	1.	Vikas/28Aug'18						created the script
	2.	Rusha/04-01-2019					sum up quantity
	3.	Rusha/07-08-2019					updated script
	4.	Naveed/13-12-2019				    updated script for exclude zero quantity Items
--------------------------------------------------------------------------
*/
Begin 
IF (@ItemName IS NOT NULL)
	BEGIN

	SELECT * FROM
	(
		SELECT a.ItemId ,a.ItemName, SUM(InQty-OutQty+FInQty-FOutQty) as Quantity,convert(date,a.ExpiryDate) AS ExpiryDate,
		a.BatchNo,a.MinStockQuantity 
		FROM 
			(SELECT itm.ItemId ,itm.ItemName,itm.MinStockQuantity,convert(date,stk.ExpiryDate)as ExpiryDate,stk.BatchNo,
					SUM(CASE WHEN stk.InOut = 'in' THEN stk.Quantity ELSE 0 END) AS 'InQty',
					SUM(CASE WHEN stk.InOut = 'out' THEN stk.Quantity ELSE 0 END) AS 'OutQty',
					SUM(CASE WHEN stk.InOut = 'in' THEN stk.FreeQuantity ELSE 0 END) AS 'FInQty',
					SUM(CASE WHEN stk.InOut = 'out' THEN stk.FreeQuantity ELSE 0 END) AS 'FOutQty'
			FROM  PHRM_StockTxnItems stk
			JOIN  PHRM_MST_Item itm
			ON stk.ItemId=itm.ItemId
			WHERE itm.MinStockQuantity != 0 
			GROUP BY itm.ItemId ,itm.ItemName,convert(date,stk.ExpiryDate),stk.BatchNo,itm.MinStockQuantity) a
		WHERE (((@ItemName=a.ItemName OR @ItemName='') or a.ItemName like '%'+ISNULL(@ItemName,'')+'%' )) 
		GROUP BY a.ItemId,a.ItemName,a.BatchNo,a.ExpiryDate,a.MinStockQuantity
	) s		
	WHERE s.Quantity < s.MinStockQuantity and s.Quantity>0
	GROUP BY s.ItemId, s.ItemName,s.Quantity,s.ExpiryDate,s.BatchNo,s.MinStockQuantity

	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_NarcoticsDispensaryStoreStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_NarcoticsDispensaryStoreStockReport]
AS
/*
FileName: [SP_PHRMReport_NarcoticsDispensaryStoreStockReport]
CreatedBy/date: Ashish/12-02-2020
Description: To get the Stock Value of both dispensary and store wise for Narcotics Stock report
*/


BEGIN
	DECLARE @dis_name VARCHAR(MAX);
		SET @dis_name='Dispensary';
		SELECT * FROM (	
				SELECT itm.ItemName,dis.BatchNo AS BatchNo, dis.ExpiryDate, dis.MRP,
				dis.AvailableQuantity AS StockQty,@dis_name as [Name]
				FROM PHRM_DispensaryStock AS dis 
				JOIN PHRM_MST_Item AS itm ON dis.ItemId = itm.ItemId
				where dis.AvailableQuantity>0 and itm.IsNarcotic='true'
				UNION ALL

				
									SELECT  
										x1.ItemName,
										x1.BatchNo,
										x1.ExpiryDate,
										Round(x1.MRP,2,0) AS MRP,
										SUM(InQty- OutQty+FInQty-FOutQty) AS StockQty,
										x1.StoreName as [Name]
									FROM

									(
											select 
													stk.ItemName, 
													stk.BatchNo as BatchNo, 
													stk.ExpiryDate, 
													stk.MRP,
													stk.StoreName,
														SUM(CASE WHEN stk.InOut = 'in' THEN stk.Quantity ELSE 0 END) AS 'InQty',
																SUM(CASE WHEN stk.InOut = 'out' THEN stk.Quantity ELSE 0 END) AS 'OutQty',
																SUM(CASE WHEN stk.InOut = 'in' THEN stk.FreeQuantity ELSE 0 END) AS 'FInQty',
																SUM(CASE WHEN stk.InOut = 'out' THEN stk.FreeQuantity ELSE 0 END) AS 'FOutQty'
											from PHRM_StoreStock stk
											join PHRM_MST_Item itm on stk.ItemId = itm.ItemId
											where itm.IsNarcotic ='true' and stk.Quantity>0 and stk.FreeQuantity>0
											GROUP BY stk.ItemName, stk.BatchNo , stk.ExpiryDate, stk.MRP,stk.StoreName
									) as x1
									GROUP BY x1.ItemName, x1.BatchNo, x1.ExpiryDate, x1.MRP, x1.StoreName
				) a



END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_PurchaseOrderSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_PHRMReport_PurchaseOrderSummaryReport] 
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@Status nvarchar(50)=null

AS
/*
FileName: [SP_PHRMReport_PurcaseOrderSummary]
CreatedBy/date: Umed/2017-11-23
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2017-05-25	                     created the script
2		Rusha/2019-04-26					 Recreated of Script
3.		Naveed/2019-12-13					 updated script for exclude zero quantity Items from Report
------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) and (@Status IS NOT null)
	BEGIN
		IF (@Status='all')
			SELECT convert(date,PO.PODate) as [Date],itm.ItemName,po.POStatus,po.Subtotal,po.VATAmount,po.TotalAmount,sum(poitm.Quantity) as Quantity,poitm.StandaredPrice,sum(poitm.ReceivedQuantity) as ReceivedQuantity from PHRM_PurchaseOrder as po
			join PHRM_PurchaseOrderItems as poitm on poitm.PurchaseOrderId=po.PurchaseOrderId
			join PHRM_MST_Item as itm on itm.ItemId=poitm.ItemId
			WHERE convert(datetime, PO.PODate) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 AND poitm.Quantity>0
			GROUP BY convert(date,PO.PODate),itm.ItemName,po.POStatus,po.Subtotal,po.VATAmount,po.TotalAmount,poitm.Quantity,poitm.StandaredPrice,poitm.ReceivedQuantity
		
		ELSE IF (@Status='active')
			SELECT convert(date,PO.PODate) as [Date], itm.ItemName,po.POStatus,po.Subtotal,po.VATAmount,po.TotalAmount,sum(poitm.Quantity) as Quantity,poitm.StandaredPrice,sum(poitm.ReceivedQuantity) as ReceivedQuantity from PHRM_PurchaseOrder as po
			join PHRM_PurchaseOrderItems as poitm on poitm.PurchaseOrderId=po.PurchaseOrderId
			join PHRM_MST_Item as itm on itm.ItemId=poitm.ItemId
			WHERE po.POStatus='active' and convert(datetime, PO.PODate) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 AND poitm.Quantity>0
			GROUP BY convert(date,PO.PODate),itm.ItemName,po.POStatus,po.Subtotal,po.VATAmount,po.TotalAmount,poitm.Quantity,poitm.StandaredPrice,poitm.ReceivedQuantity

		ELSE IF (@Status='complete')
			SELECT convert(date,PO.PODate) as [Date],itm.ItemName,po.POStatus,po.Subtotal,po.VATAmount,po.TotalAmount,sum(poitm.Quantity) as Quantity,poitm.StandaredPrice,sum(poitm.ReceivedQuantity) as ReceivedQuantity from PHRM_PurchaseOrder as po
			join PHRM_PurchaseOrderItems as poitm on poitm.PurchaseOrderId=po.PurchaseOrderId
			join PHRM_MST_Item as itm on itm.ItemId=poitm.ItemId
			WHERE po.POStatus='complete' and convert(datetime, PO.PODate) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 AND poitm.Quantity>0
			GROUP BY convert(date,PO.PODate),itm.ItemName,po.POStatus,po.Subtotal,po.VATAmount,po.TotalAmount,poitm.Quantity,poitm.StandaredPrice,poitm.ReceivedQuantity
	END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_RackStockDistribution]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_RackStockDistribution] 
    @rackIds varchar(200) = null,
    @locationId int = null
AS
/*
FileName: [SP_PHRMReport_RackStockDistribution] "1;2",2
CreatedBy/date: Sanjit/2020-06-01
Description: 
Remarks:    
Change History
---------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------
1        Sanjit/2020-06-01          created the script
2        Sanjit/2020-06-03          updated the script for store
---------------------------------------------------------------
*/
 BEGIN
    IF((@rackIds IS NOT NULL) AND (@locationId IS NOT NULL))
    BEGIN
      DECLARE @rackIdTable TABLE (
        RackId int
      )
      INSERT INTO @rackIdTable
      SELECT value FROM STRING_SPLIT(@rackIds, ';')
      IF(@locationId = 1)
        BEGIN
          SELECT MR.Name RackName,I.ItemId,I.ItemName,DS.AvailableQuantity,DS.BatchNo, DS.ExpiryDate, DS.Price,(CONVERT( decimal(18,1),DS.AvailableQuantity)*(CONVERT(decimal(18,1),DS.Price))) StockValue, 'Dispensary' Location
          FROM PHRM_DispensaryStock AS DS 
          INNER JOIN PHRM_MST_Item AS I ON DS.ItemId = I.ItemId
          INNER JOIN @rackIdTable AS R ON R.RackId = I.Rack
          INNER JOIN PHRM_MST_Rack AS MR ON MR.RackId = R.RackId
          where DS.AvailableQuantity>0


          SELECT SUM(DS.AvailableQuantity) as 'TotalAvailableQuantity', SUM(CONVERT( decimal(18,1),DS.AvailableQuantity)*(CONVERT(decimal(18,1),DS.Price))) AS 'TotalStockValuation'
          FROM PHRM_DispensaryStock AS DS 
          INNER JOIN PHRM_MST_Item AS I ON DS.ItemId = I.ItemId
          INNER JOIN @rackIdTable AS R ON R.RackId = I.Rack
          where DS.AvailableQuantity>0
        END
      ELSE
        BEGIN
          SELECT  x1.RackName,x1.ItemId,x1.ItemName,SUM(InQty- OutQty+FInQty-FOutQty) AvailableQuantity,x1.BatchNo AS BatchNo, x1.ExpiryDate,Round(x1.Price,2,0) AS Price, (SUM(InQty - OutQty + FInQty - FOutQty) * Round(x1.Price,2,0)) StockValue, 'Store' Location
          FROM(SELECT MR.Name RackName,S.ItemId,S.ItemName, S.BatchNo, S.ExpiryDate, S.Price,
            SUM(CASE WHEN S.InOut = 'in' THEN S.Quantity ELSE 0 END) AS 'InQty',
            SUM(CASE WHEN S.InOut = 'out' THEN S.Quantity ELSE 0 END) AS 'OutQty',
            SUM(CASE WHEN S.InOut = 'in' THEN S.FreeQuantity ELSE 0 END) AS 'FInQty',
            SUM(CASE WHEN S.InOut = 'out' THEN S.FreeQuantity ELSE 0 END) AS 'FOutQty'
          FROM [dbo].[PHRM_StoreStock] AS S
          INNER JOIN PHRM_MST_Item AS I ON I.ItemId = S.ItemId
          INNER JOIN @rackIdTable AS R ON R.RackId = I.StoreRackId
          INNER JOIN PHRM_MST_Rack AS MR ON MR.RackId = R.RackId
          GROUP BY S.ItemName,S.ItemId, S.BatchNo , S.ExpiryDate,S.Price,MR.Name)as x1
          GROUP BY x1.ItemId,x1.ItemName, x1.BatchNo, x1.ExpiryDate, x1.Price,x1.RackName
          HAVING SUM(FInQty + InQty - FOutQty - OutQty) > 0  -- filtering out quantity > 0
          ORDER BY x1.ItemName
		  SELECT SUM(x2.AvailableQuantity) TotalAvailableQuantity,SUM(x2.StockValue)  TotalStockValuation
          FROM 
            (SELECT  x1.RackName,x1.ItemId,x1.ItemName,SUM(InQty- OutQty+FInQty-FOutQty) AvailableQuantity,x1.BatchNo AS BatchNo, x1.ExpiryDate,Round(x1.Price,2,0) AS Price, (SUM(InQty - OutQty + FInQty - FOutQty) * Round(x1.Price,2,0)) StockValue, 'Store' Location
          FROM(SELECT MR.Name RackName,S.ItemId,S.ItemName, S.BatchNo, S.ExpiryDate, S.Price,
            SUM(CASE WHEN S.InOut = 'in' THEN S.Quantity ELSE 0 END) AS 'InQty',
            SUM(CASE WHEN S.InOut = 'out' THEN S.Quantity ELSE 0 END) AS 'OutQty',
            SUM(CASE WHEN S.InOut = 'in' THEN S.FreeQuantity ELSE 0 END) AS 'FInQty',
            SUM(CASE WHEN S.InOut = 'out' THEN S.FreeQuantity ELSE 0 END) AS 'FOutQty'
          FROM [dbo].[PHRM_StoreStock] AS S
          INNER JOIN PHRM_MST_Item AS I ON I.ItemId = S.ItemId
          INNER JOIN @rackIdTable AS R ON R.RackId = I.StoreRackId
          INNER JOIN PHRM_MST_Rack AS MR ON MR.RackId = R.RackId
          GROUP BY S.ItemName,S.ItemId, S.BatchNo , S.ExpiryDate,S.Price,MR.Name)as x1
          GROUP BY x1.ItemId,x1.ItemName, x1.BatchNo, x1.ExpiryDate, x1.Price,x1.RackName
          HAVING SUM(FInQty + InQty - FOutQty - OutQty) > 0  -- filtering out quantity > 0
		  )as x2
        END
    END
  END
RETURN
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_ReturnFromCustomerReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_ReturnFromCustomerReport]
     @FromDate DATE = NULL,
     @ToDate DATE = NULL,
     @UserId INT = NULL,
	 @DispensaryId INT = NULL
AS
/*
 FileName: [SP_PHRMReport_ReturnFromCustomerReport] 
 Created: 2021-05-01/ramesh
 Description: To get details about return from Customer
 Example to execute the stored procedure we just created:
	EXECUTE dbo.SP_PHRMReport_ReturnFromCustomerReport '2021-05-01','2021-07-13'
 Remarks: 
 -----------------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------------
 1.	     2021-05-01/Ramesh		                inital draft
 2.      2021-07-30/Ramesh                      Add DispensaryWise Filter and Show Dispensary Name in grid.
 3.		 2021-09-01/Sanjit						Added PatientName and Hospital Code, Removed StockTxn from JOIN Logic, instead used as nested query for ExpiryDate
 ------------------------------------------------------------------------------
*/
BEGIN
     body of the stored procedure
	SELECT G.GenericName,
		I.ItemName,
		CONVERT(Date, IR.CreatedOn) AS ReturnedDate,
		IRI.CreditNoteNumber AS CreditNoteNumber,
		E.FullName AS UserName,
		C.CounterName,
		IRI.ReturnedQty,
		IRI.MRP,
		IRI.BatchNo,
		> must remove the dependency from stock transaction table asap
		(
			SELECT TOP(1) ExpiryDate FROM PHRM_TXN_StockTransaction ST
			WHERE IRI.InvoiceReturnItemId = ST.ReferenceNo 
			AND (ST.TransactionType = 'sale-returned-item' OR ST.TransactionType = 'manual-sales-return')
		) as ExpiryDate,
		ISNULL(IRI.TotalAmount,0) AS TotalAmount ,
		'PH'  + ISNULL(CONVERT(VARCHAR(MAX), INV.InvoicePrintId), 
		IR.ReferenceInvoiceNo) AS IssueNo,
		S.Name AS DispensaryName, 
		PAT.PatientCode,
		PAT.ShortName as PatientName
	FROM PHRM_TXN_InvoiceReturnItems IRI
		INNER JOIN PHRM_TXN_InvoiceReturn IR ON IRI.InvoiceReturnId = IR.InvoiceReturnId
		LEFT JOIN PHRM_TXN_Invoice INV ON IR.InvoiceId = INV.InvoiceId -- Left join For Manual Sales Return
		INNER JOIN PAT_Patient PAT ON INV.PatientId = PAT.PatientId
		INNER JOIN PHRM_MST_Item I ON IRI.ItemId = I.ItemId
		INNER JOIN PHRM_MST_Generic G ON I.GenericId = G.GenericId
		INNER JOIN EMP_Employee E ON IRI.CreatedBy = E.EmployeeId
		INNER JOIN PHRM_MST_Counter C ON IRI.CounterId = C.CounterId
		INNER JOIN PHRM_MST_Store S ON IRI.StoreId = S.StoreId
	WHERE (IRI.CreatedBy = @UserId OR @UserId IS NULL AND IRI.StoreId = @DispensaryId OR @DispensaryId IS NULL)
		AND CONVERT(Date, IR.CreatedOn) BETWEEN @FromDate AND @ToDate
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_StockItemsReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_StockItemsReport]  
	     @ItemName varchar(200) 
AS
/*
FileName: [SP_PHRMReport_StockItemsReport]
CreatedBy/date: Umed/2018-02-21
Description: To get the Details Such As PurchaseQty, PurchaseValue, SalesQty, SalesVale of Each Items With Its Item Code
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-21	                 created the script
                                         (get the Details Such As PurchaseQty, PurchaseValue, SalesQty, SalesVale of Each Items With Its Item Code)

--------------------------------------------------------------------------
*/

BEGIN

 IF (@ItemName IS NOT NULL)
 BEGIN
		
				
		SELECT (Cast(ROW_NUMBER() OVER (ORDER BY  x.ItemCode)  as int)) as SN,
			  x.ItemName,x.ItemCode,x.AvailableQuantity AS Qty,PurchaseValue,SalesValue 
	   FROM 
			(
			 Select t1.ItemName, itm.ItemCode,itm.ItemId,stk.AvailableQuantity ,Sum((GRItemPrice* ReceivedQuantity)) as PurchaseValue
			 From PHRM_GoodsReceiptItems t1
			 inner join PHRM_MST_Item itm on itm.ItemId= t1.ItemId
			 inner join PHRM_Stock stk on stk.ItemId = itm.ItemId
			 group by t1.ItemName,itm.ItemCode,itm.ItemId,stk.AvailableQuantity
			 ) AS X
		FULL OUTER JOIN 
			(
			Select t2.ItemName,itm.ItemCode,  stk.AvailableQuantity  ,Sum((Price* Quantity)) as SalesValue
		   From PHRM_TXN_InvoiceItems t2
		   inner join PHRM_MST_Item itm on itm.ItemId= t2.ItemId
		   inner join PHRM_Stock stk on stk.ItemId = itm.ItemId
		   group by t2.ItemName,itm.ItemCode,stk.AvailableQuantity
		   ) AS Y
		ON x.ItemName = y.ItemName
		where x.ItemName  like '%'+ISNULL(@ItemName,'')+'%' 

END

End
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_StockManageDetailReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_StockManageDetailReport] 
	@FromDate DateTime=null,
	@ToDate DateTime=null

AS
/*
FileName: SP_PHRMReport_StockManageDetailReport
CreatedBy/date:Salakha/18/09/2018
Description: .
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Salakha/18/09/2018	                     created the script
2.      Vikas/2019-01-02						 modify sp for Stock management remark.
3.		Rusha/2019-03-05						 add MRP,Price and Total amt of stock
4.		Naveed/2019-12-13						 updated script for exclude zero quantity Items
5.		Rusha/ 2020-07-24						Old script used to show dispensary and store item manage but now only from store
												item can be manage, so now report will show only list of those items manage in store only 
6.     Sanjesh/2021-05-11                       Order by StoreStockId for stock management data
------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			SELECT convert(date,stkMng.CreatedOn) as [Date] ,itm.ItemName, stkMng.BatchNo, stkMng.ExpiryDate ,stkMng.Quantity,stkMng.Remark,
			case when stkMng.InOut='in'then 'stock added' else 'stock deducted'
			end as InOut, stkMng.MRP, stkMng.Price, Round(stkMng.MRP*stkMng.Quantity,2,0) as TotalAmount 
					FROM PHRM_StoreStock stkMng
            INNER JOIN PHRM_MST_Item itm on itm.ItemId = stkMng.ItemId
            WHERE  convert(datetime, stkMng.CreatedOn) 
           BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1 and stkMng.Quantity>0 and stkMng.TransactionType = 'stockmanage'
		  ORDER BY    stkMng.StoreStockId  DESC 
		END		
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_StockMovementReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_PHRMReport_StockMovementReport]
	     @ItemName varchar(200) = null
AS
/*
FileName: [SP_PHRMReport_StockMovementReport]
CreatedBy/date: Umed/2018-02-21
Description: To get the Details Such As PurchaseQty,PurchaseRate, PurchaseValue, SalesQty,SalesRate, SalesVale of Each Items With Its Item Code
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Umed/2018-02-21	                 created the script
                                         (To get the Details Such As PurchaseQty,PurchaseRate, PurchaseValue, SalesQty,SalesRate, SalesVale of Each Items With Its Item Code)

--------------------------------------------------------------------------
*/

BEGIN

 IF (@ItemName IS NOT NULL)
	 BEGIN
		
			SELECT (Cast(ROW_NUMBER() OVER (ORDER BY  x.ItemCode)  as int)) as SN,
				   x.ItemName,x.ItemCode,PurchaseQty,PurchaseRate,PurchaseValue,SalesQty,SalesRate ,SalesValue 
			FROM 
				(
				  Select t1.ItemName, itm.ItemCode, Sum(ReceivedQuantity) as PurchaseQty, t1.GRItemPrice AS PurchaseRate ,Sum((GRItemPrice* ReceivedQuantity)) as PurchaseValue
				  From PHRM_GoodsReceiptItems t1
				  inner join PHRM_MST_Item itm on itm.ItemId= t1.ItemId
				  group by t1.ItemName,itm.ItemCode,t1.GRItemPrice
				) AS X
			FULL OUTER JOIN 
				(
				  Select t2.ItemName,itm.ItemCode,  Sum(Quantity) as SalesQty , Price as SalesRate ,Sum((Price* Quantity)) as SalesValue
				  From PHRM_TXN_InvoiceItems t2
				  inner join PHRM_MST_Item itm on itm.ItemId= t2.ItemId
				  group by t2.ItemName,itm.ItemCode,Price 
				) AS Y
			  ON x.ItemName = y.ItemName
			 where x.ItemName  like '%'+ISNULL(@ItemName,'')+'%' 
	 END
End
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_StockSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
End:Sanjesh:21-Jan'21-column named oldMRP and StoreStockId added in PHRM_StockTxnItems_MRPHistory  table

START: Sanjit 21Jan21 - SP alter for Stock Summary Report in Pharmacy and Item-wise transaction
CREATE PROCEDURE [dbo].[SP_PHRMReport_StockSummaryReport] 
	     @FromDate datetime= null,
		 @ToDate datetime= null	
		 
AS
set @FromDate = @FromDate + ' 00:00:00.000'
set @ToDate = @ToDate + ' 23:59:59.997'
/*
FileName: [SP_PHRMReport_StockSummaryReport]
CreatedBy/date: Umed/2018-02-27
Description: 
1. Created Seprate Function to Get Opention Stock Count of Selected FromDate 


Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1       Arpan/2020-12-31	                created the script.
2.		Sanjesh/ 2021-01-04					updated script
3.		Sanjit/ 2021-01-21					changed the sequence for UOM Name
--------------------------------------------------------------------------
*/
BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
	BEGIN


create table #GRItemsStockBetweenDates(
     GRItemID int primary key
    ,ItemId int
    ,ItemName nvarchar(max)
	,BatchNo nvarchar(max)
	,ExpiryDate datetime
	,GRItemPrice decimal(16,4)
	,MRP decimal(16,4) 
	,UOMName nvarchar(max)
	,GRIReceivedQuantity int 
	,GRIFreeQuantity int
	,GRITotalAmount decimal(16,4)
	,RTSQuantity int
	,RTSFreeAmount decimal(16,4)
	,RTSTotalAmount decimal(16,4)
	,SalesQuantity int
	,SalesTotalAmount decimal(16,4) 
	,ProvisionalQuantity int
	,ProvisionalTotalAmount decimal(16,4)
	,ReturnQuantity int
	,ReturnTotalAmount decimal(16,4)
	,StockManageQuantityIn int
	,StockManageAmountIn decimal(16,4)
	,StockManageQuantityOut int
	,StockManageAmountOut decimal(16,4)
);


create table #GRItemsStartingStock(
     GRItemID int primary key
    ,ItemId int
    ,ItemName nvarchar(max)
	,BatchNo nvarchar(max)
	,ExpiryDate datetime
	,GRItemPrice decimal(16,4)
	,MRP decimal(16,4)
	,UOMName nvarchar(max) 
	,GRIReceivedQuantity int 
	,GRIFreeQuantity int
	,GRITotalAmount decimal(16,4)
	,RTSQuantity int
	,RTSFreeAmount decimal(16,4)
	,RTSTotalAmount decimal(16,4)
	,SalesQuantity int
	,SalesTotalAmount decimal(16,4) 
	,ProvisionalQuantity int
	,ProvisionalTotalAmount decimal(16,4)
	,ReturnQuantity int
	,ReturnTotalAmount decimal(16,4)
	,StockManageQuantityIn int
	,StockManageAmountIn decimal(16,4)
	,StockManageQuantityOut int
	,StockManageAmountOut decimal(16,4)
);


insert into #GRItemsStartingStock
select * from 
dbo.FN_PHRM_StockDetailsOfGRItems('2016-01-01 00:00:00.000', @FromDate)


insert into #GRItemsStockBetweenDates
select * from 
dbo.FN_PHRM_StockDetailsOfGRItems(@FromDate, @ToDate)


select  
      (isnull(Starting.GRIReceivedQuantity + Starting.GRIFreeQuantity 
	         - Starting.ProvisionalQuantity - Starting.SalesQuantity  + Starting.ReturnQuantity 
			 + Starting.StockManageQuantityIn - Starting.StockManageQuantityOut, 0)) as StartingQuantity
      ,(isnull(Starting.GRITotalAmount 
	        - Starting.ProvisionalTotalAmount - Starting.SalesTotalAmount + Starting.ReturnTotalAmount 
			  + Starting.StockManageAmountIn - Starting.StockManageAmountOut, 0.000)) as StartingAmount
	  ,BetweenDates.*
	  ,(isnull(BetweenDates.GRIReceivedQuantity + BetweenDates.GRIFreeQuantity 
			  - BetweenDates.ProvisionalQuantity - BetweenDates.SalesQuantity + BetweenDates.ReturnQuantity 
			  + BetweenDates.StockManageQuantityIn - BetweenDates.StockManageQuantityOut, 0)) as EndingQuantity
      ,(isnull(BetweenDates.GRITotalAmount + BetweenDates.ProvisionalTotalAmount 
			  - BetweenDates.SalesTotalAmount + BetweenDates.ReturnTotalAmount 
			  + BetweenDates.StockManageAmountIn - BetweenDates.StockManageAmountOut, 0.000)) as EndingAmount
from 
	#GRItemsStockBetweenDates as BetweenDates
left join
	#GRItemsStartingStock as Starting
on 
	BetweenDates.GRItemID = Starting.GRItemID

	END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_stockvaluetest]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_stockvaluetest]  
      @ItemName varchar(200) = null
AS
/*
FileName: [SP_PHRMReport_stockvaluetest] '' ,'08/08/2018'
CreatedBy/date: Abhishek/2018-05-06
Description: To get the Expired Products Details Such As ItemName, ItemCode, AvailableQty,ExpiryDate,BatchNo of Each Item Selected By User Datewise
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------

--------------------------------------------------------------------------
*/
Begin 
IF (@ItemName IS NOT NULL)
  BEGIN
  Select stock.BatchNo,stock.GenericName,stock.ItemId,stock.ItemName,stock.Qty,stock.SN,grt.MRP,grt.GRItemPrice from (
  Select (Cast(ROW_NUMBER() OVER (ORDER BY  x.ItemName)  as int)) as SN, 
  x.ItemId, x.BatchNo, x.ItemName, x.GenericName,
  Sum(FQty+InQty-OutQty) 'Qty'
  From 
      (select t1.ItemId, t1.BatchNo,item.ItemName, generic.GenericName,
    SUM(t1.FreeQuantity) as 'FQty',
        SUM(Case when InOut ='in' then Quantity else 0 end ) as 'InQty',
        SUM(Case When InOut = 'out' then Quantity ELSE 0 END) AS 'OutQty'
        from 
		[dbo].[PHRM_StockTxnItems] t1
          inner join [dbo].[PHRM_MST_Item] item on item.ItemId = t1.ItemId
          inner join [dbo].[PHRM_MST_Generic] generic on generic.GenericId =item.GenericId
		  
		  
          
          group by t1.ItemId, t1.BatchNo,item.ItemName, generic.GenericName
          ) x 
		 
          where x.ItemName  like '%'+ISNULL(@ItemName,'')+'%' 
          Group By x.ItemId, x.BatchNo, x.ItemName, x.GenericName
		  
		  order by Qty desc

		  )stock
		  join PHRM_GoodsReceiptItems grt on stock.ItemId =grt.ItemId and stock.BatchNo=grt.BatchNo
		  where stock.Qty>0 and CreatedOn<'04/14/2019'
		   Group By stock.ItemId, stock.BatchNo, stock.ItemName, stock.GenericName, stock.Qty, stock.SN, grt.MRP, grt.GRItemPrice
		   
		  order by Qty desc
		 
          
            
 
  END
  END
GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_SupplierInfoReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PHRMReport_SupplierInfoReport]  
	
AS
/*
FileName: [SP_PHRMReport_SupplierInfoReport]
CreatedBy/date: Umed/2018-02-16
Description: To get the Each Supplier Information 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2018-02-16	                     created the script
2       Rohit/2021-09-29                     Pin column renamed as PANNumber

------------------------------------------------------
*/

BEGIN
    
	 Select SupplierName, ContactNo, City, PANNumber , ContactAddress, Email 
	  From  [dbo].[PHRM_MST_Supplier]
End

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMReport_SupplierStockReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMReport_SupplierStockReport]
    @fromDate Date = NULL,
    @toDate Date = NULL,
    @SupplierId int = NULL
AS
/*
FileName: SP_PHRMReport_SupplierStockReport
CreatedBy/date: Rusha/04-07-2019
Description: To get the Details of goods receipt from Supplier such as received qty, rate per qty, and so on
Example: exec SP_PHRMReport_SupplierStockReport '2021-01-01', '2021-12-01',78
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1        Rusha/04-07-2019	                 To get details of goods receipts from Supplier 
2		 Sanjit/27-05-2020					 added fromDate and toDate in the sp for date filter (EMR-1618)
3        Ramesh/12-05-2021                   SupplierName is replaced by SupplierId and other details like VAT Amt, BatchNo etc were Added
4.		Sanjit/1-09-2021					Conerted @FromDate and @ToDate into Date Type instead of DateTime
----------------------------------------------------------------------------------------------------------------------------------
*/

	BEGIN

    IF ( @FromDate IS NOT NULL AND @ToDate IS NOT NULL AND @SupplierId IS NOT NULL )
	BEGIN
        SELECT  gr.GoodReceiptDate, supplier.SupplierName, grI.ItemName, grI.BatchNo, grI.ExpiryDate, IsNULL(grI.GRItemPrice,0) AS PurchaseRate,
		    SUM (ISNULL (grI.ReceivedQuantity, 0)) AS ReceivedQuantity, IsNULL(grI.GRPerItemVATAmt,0) AS VATAmount,
            SUM (ISNULL (grI.FreeQuantity, 0)) AS FreeQuantity, ((IsNULL(grI.GRItemPrice,0)* SUM (ISNULL (grI.ReceivedQuantity, 0))) + IsNULL(grI.GRPerItemVATAmt,0)) AS TotalAmount, ((IsNULL(grI.GRItemPrice,0)* SUM (ISNULL (grI.ReceivedQuantity, 0)))) AS SubTotal
        FROM PHRM_GoodsReceiptItems AS grI INNER JOIN
            PHRM_GoodsReceipt AS gr ON grI.GoodReceiptId = gr.GoodReceiptId INNER JOIN
            PHRM_MST_Supplier AS supplier ON supplier.SupplierId  = gr.SupplierId
        WHERE CONVERT(Date, gr.GoodReceiptDate) BETWEEN @fromDate AND @toDate AND gr.SupplierId = @SupplierId

        GROUP BY grI.GoodReceiptId, grI.ItemId, grI.ExpiryDate, grI.BatchNo, grI.GRItemPrice, grI.ItemName, grI.GrPerItemVATAmt, gr.GoodReceiptDate, supplier.SupplierName
    END
  END

GO
/****** Object:  StoredProcedure [dbo].[SP_PHRMStoreStock]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PHRMStoreStock]
	@Status varchar(200) = NULL
AS
/*
FileName: [SP_PHRMStore]
CreatedBy/date: Shankar/04-03-2019
Description: To get the Details of store Items
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/04-08-2019						Add From and to Date for date filter
2.		Sanjit/04-09-2019						StoreName has been added.
3.      Shankar/04-15-2019                      IsActive added.
4.		Rusha/05-23-2019						Remove From and to Date for date filter and handled quantity not equals to zero
5.		Rusha/06-11-2019						Updated script
6.		Naveed/24-11-2019						Get GR CreatedOn date as Date in Store details List
7.		Ramavtar/04-Jan-2020					Filtered out Quantity > 0
8.		Sanjit/03-Jan-2020						Generic Name added.
9.      Sanjesh/19-Aug-2020                     GoodReceiptId added.
10.     Sanjesh/26-Nov-2020                     Filtered out Quantity >= 0
11.     Shankar/21-Dec-2020						GoodReceiptPrintId included
--------------------------------------------------------------------------
*/
BEGIN
	IF(@Status IS NOT NULL)
		BEGIN
				SELECT  x1.ItemName,x1.GenericName,x1.BatchNo, x1.ExpiryDate,Round(x1.MRP,2,0) AS MRP,x1.GoodReceiptId,

			    (SELECT CreatedOn FROM PHRM_GoodsReceiptItems where GoodReceiptItemId= x1.GoodsReceiptItemId )AS 'Date',
				SUM(FInQty + InQty - FOutQty - OutQty) AS 'AvailableQty',x1.StoreName,x1.ItemId,x1.StoreId,x1.GoodsReceiptItemId,x1.Price,x1.GoodReceiptPrintId

				FROM(SELECT stk.ItemName,gen.GenericName, stk.BatchNo, stk.ExpiryDate, stk.MRP,stk.StoreName,
				stk.StoreId,stk.ItemId,stk.GoodsReceiptItemId,stk.Price,gritm.GoodReceiptId,gr.GoodReceiptPrintId,
					SUM(CASE WHEN stk.InOut = 'in' THEN stk.Quantity ELSE 0 END) AS 'InQty',
					SUM(CASE WHEN stk.InOut = 'out' THEN stk.Quantity ELSE 0 END) AS 'OutQty',
					SUM(CASE WHEN stk.InOut = 'in' THEN stk.FreeQuantity ELSE 0 END) AS 'FInQty',
					SUM(CASE WHEN stk.InOut = 'out' THEN stk.FreeQuantity ELSE 0 END) AS 'FOutQty'

				FROM [dbo].[PHRM_StoreStock] AS stk

				join PHRM_GoodsReceiptItems as gritm on gritm.GoodReceiptItemId = stk.GoodsReceiptItemId
				join PHRM_GoodsReceipt as gr on gr.GoodReceiptId = gritm.GoodReceiptId
				join PHRM_MST_Item as itm on stk.ItemId = itm.ItemId
				join PHRM_MST_Generic gen on itm.GenericId = gen.GenericId

				GROUP BY stk.ItemName,gen.GenericName, stk.BatchNo , stk.ExpiryDate, stk.MRP,stk.StoreName,stk.StoreId,stk.ItemId,stk.GoodsReceiptItemId,stk.Price,gritm.GoodReceiptId,gr.GoodReceiptPrintId)as x1

				WHERE (@Status=x1.ItemName or x1.ItemName like '%'+ISNULL(@Status,'')+'%')

				GROUP BY x1.ItemName,x1.GenericName, x1.BatchNo, x1.ExpiryDate, x1.MRP,x1.StoreName,x1.ItemId,x1.StoreId,x1.GoodsReceiptItemId,x1.Price,x1.GoodReceiptId,x1.GoodReceiptPrintId

				HAVING SUM(FInQty + InQty - FOutQty - OutQty) >= 0	-- filtering out quantity >= 0
				ORDER BY x1.ItemName
		END		
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_AdmissionAndDischargeReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 =============================================
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Dev Narayan/2021-09-25          Initial Draft
---------------------------------------------------------------------------------------
2.      Dev Narayan/2021-09-29          Added Discharge date filter
---------------------------------------------------------------------------------------
*/
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_ADT_AdmissionAndDischargeReport]
   @FromDate Date=null,
   @ToDate Date=null,
   @WardId int = null,
   @DepartmentId int = null,
   @BedFeatureId int = null,
   @AdmissionStatus varchar(40)= null,
   @SearchText varchar(40) = null
AS
BEGIN
SET 
  @WardId = ISNULL(@WardId, 0);
SET 
  @DepartmentId = ISNULL(@DepartmentId, 0);
SET 
  @BedFeatureId = ISNULL(@BedFeatureId, 0);
IF(@AdmissionStatus LIKE '%All%')
BEGIN
SET @AdmissionStatus = null;
END
Select 
  (
    Cast(
      ROW_NUMBER() OVER (
        ORDER BY 
          newData.RowNum desc
      ) AS int
    )
  ) AS SN, 
  newData.PatientName, 
  newData.PatientCode, 
  newData.VisitCode, 
  newData.AdmissionDate, 
  newData.DepartmentName, 
  newData.AdmittingDoctorName, 
  newData.WardName, 
  newData.BedFeature, 
  newData.AdmissionStatus, 
  newData.DischargeDate, 
  newData.Number_of_Days
FROM 
  (
    select 
      ROW_NUMBER() OVER(
        PARTITION BY adm.PatientAdmissionId 
        ORDER BY 
          adtPat.StartedOn DESC
      ) AS RowNum, 
      adm.PatientAdmissionId, 
      adm.AdmissionDate, 
      pat.PatientCode, 
      visit.VisitCode, 
      pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName AS 'PatientName', 
      ISNULL(emp.Salutation + '. ', '') + emp.FirstName + ' ' + ISNULL(emp.MiddleName + ' ', '') + emp.LastName 'AdmittingDoctorName', 
      bed.BedCode as 'BedCode', 
      bedf.BedFeatureName as BedFeature, 
      bedf.BedFeatureId, 
      adtPat.StartedOn, 
      dept.DepartmentName, 
      dept.DepartmentId, 
      ward.WardName, 
      ward.WardID, 
      adm.AdmissionStatus, 
      adm.DischargeDate, 
      case when adm.AdmissionStatus = 'admitted' then DATEDIFF(
        DAY, 
        adm.AdmissionDate, 
        GETDATE()
      ) else DATEDIFF(
        DAY, adm.AdmissionDate, adm.DischargeDate
      ) end AS 'Number_of_Days' 
    from 
      ADT_PatientAdmission adm 
      join ADT_TXN_PatientBedInfo adtPat on adm.PatientId = adtPat.PatientId 
      join PAT_PatientVisits visit on adm.PatientVisitId = visit.PatientVisitId 
      JOIN PAT_Patient pat ON pat.PatientId = visit.PatientId 
      join ADT_MST_Ward ward on ward.WardID = adtPat.WardId 
      JOIN ADT_Bed bed on bed.BedID = adtPat.BedId 
      JOIN ADT_MAP_BedFeaturesMap bedm on bed.BedID = bedm.BedId 
      JOIN ADT_MST_BedFeature bedf on bedm.BedFeatureId = bedf.BedFeatureId 
      left join EMP_EMPLOYEE emp ON adm.AdmittingDoctorId = emp.EmployeeId 
      left join MST_Department dept on dept.DepartmentId = adtPat.RequestingDeptId
  ) newData 
where 
  newData.RowNum = 1 
  and (CONVERT(date, newData.AdmissionDate) between @FromDate 
  and @ToDate 
  or CONVERT(date, newData.DischargeDate) between @FromDate 
  and @ToDate )
  and (
    newData.WardID = Convert(
      VARCHAR(40), 
      @WardId
    ) 
    or Convert(
      VARCHAR(40), 
      @WardId
    )= 0
  ) 
  and (
    newData.DepartmentId = Convert(
      VARCHAR(40), 
      @DepartmentId
    ) 
    or Convert(
      VARCHAR(40), 
      @DepartmentId
    )= 0
  ) 
  and (
    newData.BedFeatureId = Convert(
      VARCHAR(40), 
      @BedFeatureId
    ) 
    or Convert(
      VARCHAR(40), 
      @BedFeatureId
    )= 0
  ) 
  and (
    newData.AdmissionStatus NOT LIKE '%cancel%'
  )
  and (
    newData.AdmissionStatus LIKE '%' + @AdmissionStatus + '%' 
    OR @AdmissionStatus is Null 
  ) 
  and
   (newData.PatientName like '%' + ISNULL(@SearchText,'') +'%' 
    or newData.VisitCode like '%' + ISNULL(@SearchText,'') + '%'
	or newData.PatientCode like '%' + ISNULL(@SearchText,'') + '%')
order by 
  newData.AdmissionDate desc

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_DiagnosisWiseReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[SP_Report_ADT_DiagnosisWiseReport] 
	@FromDate Date=null ,
	@ToDate Date=null,
	@Diagnosis varchar(max) = null
AS
/*
FileName: [SP_Report_ADT_DiagnosisWiseReport]   '2019-09-29','2019-09-29', 'typhoid'
CreatedBy/date: Dinesh/2019-09-29
Description: to get the no of patient's count diagnosis wise
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Dinesh 2019-09-29					to get the no of patient's count diagnosis wise
------------------------------------------------------
*/
BEGIN
		If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>=0 OR LEN(@ToDate)>=0 AND (@Diagnosis IS NOT NULL)
        OR (LEN(@Diagnosis) > 0 ))
	BEGIN 
			select convert(date,x.[Date]) as 'Date',x.PatientCode as 'PatientCode',x.PatientName as 'PatientName', x.PhoneNumber, x.Diagnosis
			
			 from (
select pt.FirstName +' '+ Isnull(pt.MiddleName,'') + ' '+pt.LastName as 'PatientName',discharge.Diagnosis as 'Diagnosis'
,pt.PatientCode,pt.PhoneNumber,discharge.CreatedOn as 'Date' from 
ADT_DischargeSummary discharge join PAT_PatientVisits visit on discharge.PatientVisitId=visit.PatientVisitId 
inner join PAT_Patient  pt on pt.PatientId=visit.PatientId
where discharge.Diagnosis LIKE '%' + ISNULL(@Diagnosis, '') + '%' and 
CONVERT(date, discharge.createdOn) BETWEEN @FromDate AND @ToDate
  )as x
  group by x.Diagnosis, x.PatientName,x. PatientCode,PhoneNumber,[Date]
  order by Diagnosis asc
	END	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_DischargedPatient]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_ADT_DischargedPatient] 
	@FromDate Date=null ,
	@ToDate Date=null	
AS
/*
FileName: [SP_Report_ADT_DischargedPatient]
CreatedBy/date: Nagesh/Sud (upto 2018-08-21) 
Description: to get the count of total discharged patient between Given Date
Remarks:    Removed TotalAdmittedCount for now, add it later if needed.
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1.     Nagesh/Sud (upto 2018-08-21)             Revised
2.     Sud/8Aug'21                              Handled Admitting Doctor non-mandatory case.
-----------------------------------------------------------------------------
*/

BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN 
			select 
			  (Cast(ROW_NUMBER() OVER (ORDER BY  DischargeDate desc)  as int)) as SN,
			  	P.FirstName+ISNULL(' '+P.MiddleName,'')+' '+ P.LastName AS PatientName,
		      (P.Firstname+''+P.LastName) 'PatientName',
              convert(varchar(20),CONVERT(date,DischargeDate)) 'DischargedDate', 
              convert(varchar(20),CONVERT(date,AdmissionDate)) 'AdmissionDate',
			  ISNULL(E.Salutation+' ','')+ E.FirstName+ISNULL(' '+E.MiddleName,'')+' '+ E.LastName 'AdmittingDoctor',
              (E.FirstName+' '+E.LastName) 'AdmittingDoctor',
              A.PatientVisitId 'VisitId',
			  V.VisitCode 'IpNumber',
			  P.PatientCode 'HospitalNumber',
			  A.PatientId
		    from ADT_PatientAdmission A join PAT_PatientVisits V
                on A.PatientVisitId = V.PatientVisitId
               left join EMP_EMPLOYEE E on A.AdmittingDoctorId= E.EmployeeId 
               Join PAT_Patient P on P.PatientId=V.PatientId
		    where A.AdmissionStatus='discharged' and CONVERT(date,DischargeDate) between @FromDate and @ToDate
			Order By convert(varchar(20),CONVERT(date,DischargeDate)) desc
            union all
            select  NULL,NULL,NULL,'','Total Discharged Count ',Count('PatientVisitId'),null
            from ADT_PatientAdmission 
			where AdmissionStatus='discharged' and CONVERT(date,DischargeDate) between @FromDate and @ToDate
	
	END	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_PatientInOutReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
 Author:		Anish Bhattarai
 Create date: June 4, 2020
------------------------------------------
S.No.   Date/Author           Remarks
-------------------------------------------
1.     14June'10/Sud         Excluded Action='cancel' from patientbedinfo. this is when admission is cancelled.
 ============================================= */
CREATE PROCEDURE [dbo].[SP_Report_ADT_PatientInOutReport] 
	@FromDate Date=null ,
	@ToDate Date=null
AS
BEGIN
	If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN

	
	Table1 for all wardName
	select distinct(ward.WardName) from ADT_TXN_PatientBedInfo bedInf Join ADT_MST_Ward ward on bedInf.WardId=ward.WardID

	Table2 for all Admisssion and TransIn
	select flatData.WardName, flatData.Action, Count(*) as TotalCount
	from (select bedInfo.*,ward.WardName from ADT_TXN_PatientBedInfo bedInfo
	Join ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
	where bedInfo.IsActive=1 
	and bedInfo.Action !='cancel'
	and CONVERT(date,bedInfo.StartedOn) between @FromDate and @ToDate) as flatData Group By flatData.WardName, flatData.Action 

	Table3 for all Discharged and TransOut
	select flatData.WardName, flatData.OutAction, Count(*) as TotalCount
	from (select bedInfo.*,ward.WardName from ADT_TXN_PatientBedInfo bedInfo
	Join ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
	where bedInfo.IsActive=1 
	and bedInfo.Action !='cancel'
	and CONVERT(date,bedInfo.EndedOn) between @FromDate and @ToDate) as flatData Group By flatData.WardName, flatData.OutAction


	Table4 for Total InBed Count
	select flatData.WardName, Count(*) as TotalCount
	from (select bedInfo.*,ward.WardName from ADT_TXN_PatientBedInfo bedInfo
	Join ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
	where bedInfo.IsActive=1 
	and bedInfo.Action !='cancel'
	AND CONVERT(date,bedInfo.StartedOn) < @FromDate 
	AND   @FromDate <= CONVERT(date,ISNULL(bedInfo.EndedOn,Getdate())))
	as flatData Group By flatData.WardName

	select flatData.WardName, Count(*) as TotalCount
	from (select bedInfo.*,ward.WardName from ADT_TXN_PatientBedInfo bedInfo
	Join ADT_MST_Ward ward on bedInfo.WardId=ward.WardID
	where bedInfo.IsActive=1 and bedInfo.EndedOn Is Null 
	and bedInfo.OutAction Is Null and CONVERT(date,bedInfo.StartedOn) < @FromDate
	and ((bedInfo.Action='admission') or (bedInfo.Action='transfer'))) as flatData Group By flatData.WardName, flatData.OutAction

	END

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_TotalAdmittedPatient]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_ADT_TotalAdmittedPatient] 
   @FromDate Date=null,
   @ToDate Date=null  
AS

/*
FileName: [SP_Report_ADT_TotalAdmittedPatient]
CreatedBy/date: Sagar/2017-05-27
Description: to get the count of total discharged patient between Given Date
Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
11.    Anish: 4 June 2020				Row Number Removed
12.    Sud:1Aug'21                      Handle AdmittingDoctor (NonMandatory) case using Left-Join instead of Inner join
13.   Sud:21Sep'21                      Return Department name also.
                                        taking PatName and EmpName from single Column of their tables
-----------------------------------------------------------------------------
*/
BEGIN

  BEGIN 
  Select * FROM
    (
      select 
       (Cast(ROW_NUMBER() OVER (ORDER BY  AdmissionDate desc)  AS int)) AS SN,
         this groups beds of one patients and adds rownumber to it, need to get latest bed (rowNum=1)-- (based on: latest bedInfo.StartedOn)
        ROW_NUMBER() OVER(PARTITION BY bedInfo.PatientId ORDER BY bedInfo.StartedOn DESC) AS RowNum,
        AD.AdmissionDate,
        P.PatientCode,
        V.VisitCode,
        P.ShortName AS 'PatientName',
        P.Age as [Age/Sex],
        E.FullName 'AdmittingDoctorName',
		ISNULL(dept.DepartmentName,'Not Assigned') AS DepartmentName,
        bed.BedCode as 'BedCode',
        bedf.BedFeatureName as BedFeature
        from ADT_PatientAdmission AD
        join PAT_PatientVisits V on AD.PatientVisitId=V.PatientVisitId
        JOIN PAT_Patient P ON P.PatientId=V.PatientId 
        left JOIN EMP_EMPLOYEE E ON AD.AdmittingDoctorId= E.EmployeeId 
		left join MST_Department dept on V.DepartmentId=dept.DepartmentId
        JOIN ADT_TXN_PatientBedInfo bedInfo ON AD.PatientVisitId=bedInfo.PatientVisitId 
            -and EndedOn is null -- no need of this.
        JOIN ADT_Bed bed on bed.BedID=bedInfo.BedId
        JOIN ADT_MAP_BedFeaturesMap bedm on bed.BedID=bedm.BedId
        JOIN ADT_MST_BedFeature bedf on bedm.BedFeatureId=bedf.BedFeatureId
          
        where 
		bedInfo.Action='admission'  and 
		CONVERT(date,bedInfo.StartedOn) between @FromDate and @ToDate and
		CONVERT(date,ad.AdmissionDate) between @FromDate and @ToDate
    ) A
    where A.RowNum=1 ---take only latest bed..
    ORDER by SN 
  END  
END		

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_TotalAdmittedPatient_26th_January_2019]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[SP_Report_ADT_TotalAdmittedPatient_26th_January_2019] 
 -[SP_Report_ADT_TotalAdmittedPatient] '2019-01-11','2018-01-11'
@FromDate Date=null ,
@ToDate Date=null	
AS

/*
FileName: [SP_Report_ADT_TotalAdmittedPatient]
CreatedBy/date: Sagar/2017-05-27
Description: to get the count of total discharged patient between Given Date
Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1       Sagar/2017-05-27	                   created the script
2       Umed / 2017-06-08                      Modify the script i.e format and alias of table
                                               and Remove The time from AdmissionDate
											   and Group the Query by AdmissionDate
3.     Dinesh/2017-06-28                       all the information is requred to see the Admitted report and count at the last 
4      Umed/2018-04-23                        Apply Order by Desc Date and Added SR No also with Order By Date 
5.     Sud/24Sept'18                           Correction in Patientname, DoctorName, VisitId
-----------------------------------------------------------------------------
*/

BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN 
				
             SELECT 
				   (Cast(ROW_NUMBER() OVER (ORDER BY  AdmissionDate desc)  AS int)) AS SN,
				       P.FirstName + ' ' + ISNULL(P.MiddleName + ' ', '') + P.LastName 'PatientName',
					   P.PatientId,
					   Ward.WardName as 'Ward',
					   bedNo.BedNumber as 'BedNo',
		           (P.Firstname+''+P.LastName) 'PatientName',
			       convert(varchar(20),CONVERT(date,AdmissionDate)) 'AdmissionDate',
			       (E.FirstName+' '+E.LastName) 'AdmittedDoctor',
				   ISNULL(E.Salutation + '. ', '') + E.FirstName + ' ' + ISNULL(E.MiddleName + ' ', '') + E.LastName 'AdmittedDoctor',
			        A.PatientVisitId  'VisitId'  FROM ADT_PatientAdmission A join PAT_PatientVisits V -- changed from A.PatientVisitId to VisitCode--sud
			               ON A.PatientVisitId = V.PatientVisitId
			               JOIN EMP_EMPLOYEE E ON A.AdmittingDoctorId= E.EmployeeId 
			               JOIN PAT_Patient P ON P.PatientId=V.PatientId 
						   JOIN ADT_TXN_PatientBedInfo bed ON A.PatientId=bed.PatientId and bed.Action='admission' and EndedOn is null
						   JOIN ADT_MST_Ward Ward on Ward.WardID = bed.WardId
						   JOIN ADT_Bed bedNo on bedNo.BedID=bed.BedId
				   WHERE A.AdmissionStatus='admitted' 
			Order by convert(varchar(20),CONVERT(date,AdmissionDate)) desc
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ADT_TotalAdmittedPatient_old]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_ADT_TotalAdmittedPatient_old]  
@FromDate Date=null ,
@ToDate Date=null	
AS

/*
FileName: [SP_Report_ADT_TotalAdmittedPatient]
CreatedBy/date: Sagar/2017-05-27
Description: to get the count of total discharged patient between Given Date
Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1       Sagar/2017-05-27	                   created the script
2       Umed / 2017-06-08                      Modify the script i.e format and alias of table
                                               and Remove The time from AdmissionDate
											   and Group the Query by AdmissionDate
3.     Dinesh/2017-06-28                       all the information is requred to see the Admitted report and count at the last 
4      Umed/2018-04-23                        Apply Order by Desc Date and Added SR No also with Order By Date 
5.     Sud/24Sept'18                           Correction in Patientname, DoctorName, VisitId
-----------------------------------------------------------------------------
*/

BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN 
				
             SELECT 
				   (Cast(ROW_NUMBER() OVER (ORDER BY  AdmissionDate desc)  AS int)) AS SN,
				       P.FirstName + ' ' + ISNULL(P.MiddleName + ' ', '') + P.LastName 'PatientName',
		           (P.Firstname+''+P.LastName) 'PatientName',
			       convert(varchar(20),CONVERT(date,AdmissionDate)) 'AdmissionDate',
			       (E.FirstName+' '+E.LastName) 'AdmittedDoctor',
				   ISNULL(E.Salutation + '. ', '') + E.FirstName + ' ' + ISNULL(E.MiddleName + ' ', '') + E.LastName 'AdmittedDoctor',
			        A.PatientVisitId  'VisitId'  FROM ADT_PatientAdmission A join PAT_PatientVisits V -- changed from A.PatientVisitId to VisitCode--sud
			               ON A.PatientVisitId = V.PatientVisitId
			               JOIN EMP_EMPLOYEE E ON A.AdmittingDoctorId= E.EmployeeId 
			               JOIN PAT_Patient P ON P.PatientId=V.PatientId 
				   WHERE A.AdmissionStatus='admitted' AND CONVERT(date,AdmissionDate) BETWEEN @FromDate AND @ToDate

			 UNION ALL
			     SELECT  NULL,NULL,NULL,'Total Admitted Count ',Count('PatientVisitId')
			FROM ADT_PatientAdmission 
			WHERE AdmissionStatus='admitted' AND CONVERT(date,AdmissionDate) BETWEEN @FromDate AND @ToDate
			Order by convert(varchar(20),CONVERT(date,AdmissionDate)) desc
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Appointment_DailyAppointmentReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Appointment_DailyAppointmentReport] 
	@FromDate Date=null,
	@ToDate Date=null,
	@Doctor_Name varchar(100) = null,
	@AppointmentType varchar(100) = null
AS
/*
FileName: [SP_Report_Appointment_DailyAppointmentReport]
CreatedBy/date: Umed/2017-06-08
Description: to get Details such as Patient Name , Appointment type, Appointment Status, along with doctor name between the Given Dates
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
5		Rusha/2019-18-06					Updated of script according to provider name and appointment type
6       Shankar/2020-19-02                  Added middle name to the patients name
7.      Sud/14Jun'20                        PatientName taking from ShortName field of Pat_Patient Table
8.      Sud:21Sep'21                        Adding DepartmentName, DistrictName in Select Result.
                                            Refactoring of where clause 
------------------------------------------------------
*/
BEGIN
    SELECT
	CONVERT(datetime, CONVERT(date, vis.VisitDate)) + CONVERT(datetime, VisitTime) as 'Date',
		pat.PatientCode,
		pat.ShortName AS Patient_Name,
        pat.PhoneNumber,pat.Age,pat.Gender,
		dist.CountrySubDivisionName 'DistrictName',
		ISNULL(dept.DepartmentName,'Not Assigned') AS DepartmentName,
		vis.AppointmentType,vis.VisitType,
		emp.FullName AS Doctor_Name,vis.ProviderId,
		vis.VisitStatus
FROM PAT_PatientVisits AS vis
	INNER JOIN PAT_Patient pat ON vis.PatientId = pat.PatientId
	INNER JOIN MST_CountrySubDivision dist on pat.CountrySubDivisionId=dist.CountrySubDivisionId
	left join MST_Department dept on vis.DepartmentId=dept.DepartmentId
	left join EMP_Employee emp on emp.EmployeeId=vis.ProviderId
	WHERE CONVERT(date, vis.VisitDate) BETWEEN @FromDate  AND  @ToDate 
	and vis.VisitType !='inpatient' --excluding inpatient visits (those can be seen from admission reports)
	and ISNULL(emp.FullName,'') LIKE '%' + ISNULL(@Doctor_Name, '') + '%' and
	  vis.AppointmentType LIKE '%' + ISNULL(@AppointmentType, '') + '%'
    AND vis.BillingStatus NOT  IN('cancel','returned')--exclude cancelled and returned visits.
	ORDER BY CONVERT(datetime, CONVERT(date, vis.VisitDate)) + CONVERT(datetime, vis.VisitTime) DESC

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Appointment_DepartmentWiseAppointmentReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Appointment_DepartmentWiseAppointmentReport] 
    @FromDate DATE =NULL,
	@ToDate DATE = NULL,
	@DepartmentId int = null,
	@Gender Varchar(20)=null
AS
/*
FileName: [SP_Report_Appointment_DepartmentWiseAppointmentReport]
CreatedBy/date: 
Description: To get departments total appointments(new,followup,referral) on a given date range
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date            Remarks
-----------------------------------------------------
1      Sud:21Sep'21               Complete rewrite as per new requirement to show sum in the given date range
------------------------------------------------------
*/
BEGIN

Select DepartmentId, ISNULL(DepartmentName,'Not Assigned') AS DepartmentName, 
	ISNULL([New],0) 'NewAppointment',
	ISNULL([followup],0) 'Followup',
	ISNULL([Referral],0) 'Referral',
	ISNULL([New],0) + ISNULL([followup],0) + ISNULL([Referral],0)  'TotalAppointments'

	from 
	(
	Select dept.DepartmentId, dept.DepartmentName, vis.AppointmentType, Count(*) 'AppointmentCount'
	FROM PAT_PatientVisits VIS
	INNER JOIN PAT_Patient pat
	  on vis.PatientId = pat.PatientId
	LEFT JOIN MST_Department dept ON VIS.DepartmentId = DEPT.DepartmentId
	
	WHERE Convert(Date,VIS.VisitDate) BETWEEN @FromDate AND @ToDate AND 
	   make deptid= null if it came as Zero---
	   ISNULL(NULLIF(@DepartmentId,0),vis.DepartmentId)=vis.DepartmentId

	-exclude returned and cancelled billingstatus---
	and vis.BillingStatus NOT IN('returned','cancel')
	exclude inpatient visits..
	and vis.VisitType !='inpatient'

	and ISNULL(NULLIF(@Gender,'all'),pat.Gender)=pat.Gender

	GROUP by dept.DepartmentId,vis.AppointmentType, dept.DepartmentName

	) tbl
	pivot (SUM(AppointmentCount) for AppointmentType IN ([New],[followup],[Referral])) as pvtData

	order by DepartmentName
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Appointment_DistrictWiseAppointmentReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Appointment_DistrictWiseAppointmentReport]
@FromDate DATE = NULL,
@ToDate DATE = NULL,
@CountrySubDivisionName varchar(200) = NULL,
@Gender varchar(20)=null
AS
/*
FileName: [SP_Report_Appointment_DistrictWiseAppointmentReport]
CreatedBy/date: 
Description: To get District wise total appointments(new,followup,referral) on a given date range
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date            Remarks
-----------------------------------------------------
1      Sud:21Sep'21               Complete rewrite as per new requirement to show sum in the given date range
------------------------------------------------------
*/
BEGIN
	Select CountrySubDivisionId 'DistrictId', CountrySubDivisionName 'DistrictName', 
	ISNULL([New],0) 'NewAppointment',
	ISNULL([followup],0) 'Followup',
	ISNULL([Referral],0) 'Referral',
	ISNULL([New],0) + ISNULL([followup],0) + ISNULL([Referral],0)  'TotalAppointments'

	from 
	(
	Select dist.CountrySubDivisionId, dist.CountrySubDivisionName,
	vis.AppointmentType, Count(*) 'AppointmentCount'
	FROM PAT_PatientVisits VIS
	INNER JOIN PAT_Patient pat
		on vis.PatientId = pat.PatientId
	INNER JOIN MST_CountrySubDivision dist ON pat.CountrySubDivisionId = dist.CountrySubDivisionId

	WHERE Convert(Date,VIS.VisitDate) BETWEEN @FromDate AND @ToDate AND 
		 CountrySubDivisionName LIKE  '%'+ISNULL(@CountrySubDivisionName,'')+'%'

	-exclude returned and cancelled billingstatus---
	and vis.BillingStatus NOT IN('returned','cancel')
	exclude inpatient visits..
	and vis.VisitType !='inpatient'

	and ISNULL(NULLIF(@Gender,'all'),pat.Gender)=pat.Gender
	
	GROUP by dist.CountrySubDivisionId, dist.CountrySubDivisionName, vis.AppointmentType

	) tbl
	pivot (SUM(AppointmentCount) for AppointmentType IN ([New],[followup],[Referral])) as pvtData

	order by CountrySubDivisionName
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Appointment_DoctorWiseOutPatientReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author/Date:		Ramavtar/06Aug'18
 Description:	get count of outpatient new visit and follow-up visit doctor-wise
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_Appointment_DoctorWiseOutPatientReport]
@FromDate DATETIME = null,
@ToDate DATETIME = null
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Ramavtar/06Aug'18			created the script
--------------------------------------------------------
*/
BEGIN
SELECT 
	CONCAT(FirstName + ' ', ISNULL(E.MiddleName + ' ', ''), E.LastName) 'DoctorName',
    SUM(CASE WHEN P.AppointmentType = 'New' THEN 1 ELSE 0 END) 'NEW',
    SUM(CASE WHEN P.AppointmentType = 'followup' THEN 1 ELSE 0 END) 'FOLLOWUP'
FROM PAT_PatientVisits P
JOIN EMP_Employee E ON ProviderId = EmployeeId
WHERE CONVERT(DATE, p.VisitDate) BETWEEN @FromDate AND @ToDate
GROUP BY P.ProviderId, CONCAT(FirstName + ' ', ISNULL(E.MiddleName + ' ', ''), E.LastName)
ORDER BY P.ProviderId
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Appointment_PhoneBookAppointmentReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Appointment_PhoneBookAppointmentReport] 
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@Doctor_Name varchar(max) = null,
	@AppointmentStatus varchar(max) = null
AS
/*
FileName: [SP_Report_Appointment_PhoneBookAppointmentReport]
CreatedBy/date: Rusha/10-24-2019
Description: To get details from phone book such as Patient Name , Appointment type, Appointment Status, 
				along with doctor name between the Given Dates
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------

------------------------------------------------------
*/
BEGIN
		If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>=0 OR LEN(@ToDate)>=0 AND (@Doctor_Name IS NOT NULL)
        OR (LEN(@Doctor_Name) > 0 AND (@AppointmentStatus IS NOT NULL)
        OR (LEN(@AppointmentStatus) > 0)))
		BEGIN
			SELECT CONVERT(datetime, CONVERT(date, apt.AppointmentDate)) + CONVERT(datetime, apt.AppointmentTime) as 'Date', 
				ISNULL(pat.PatientId,pvit.patientId) AS PatientId,pat.PatientCode,
				CONCAT_WS(' ',apt.FirstName,apt.MiddleName,apt.LastName) AS PatientName,
				pat.Age, pat.Address, apt.Gender, apt.ContactNumber, apt.ProviderName, apt.AppointmentStatus
			FROM PAT_Appointment AS apt
			LEFT JOIN PAT_PatientVisits AS pvit ON pvit.AppointmentId = apt.AppointmentId
			LEFT JOIN PAT_Patient AS pat ON pat.PatientId = pvit.PatientId

			WHERE CONVERT(date, apt.AppointmentDate) BETWEEN @FromDate AND @ToDate and 
				apt.ProviderName LIKE '%' + ISNULL(@Doctor_Name, '') + '%' and
				apt.AppointmentStatus LIKE '%' + ISNULL(@AppointmentStatus, '') + '%'
			ORDER BY CONVERT(datetime, CONVERT(date, apt.AppointmentDate)) + CONVERT(datetime, apt.AppointmentTime) DESC

		END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailyMISDrPatientCount]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DailyMISDrPatientCount] -- SP_Report_BIL_DailyMISDrPatientCount '2018-07-27','2018-07-27'
@FromDate DATETIME = NULL,
@ToDate DATETIME = NULL
AS
/*
FileName: SP_Report_BILL_DailyMISReport
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date		Remarks
-----------------------------------------------------
1       Ramavtar/2018-08-30	    created the script
------------------------------------------------------
*/
BEGIN
	SELECT
		ISNULL(ProviderId,0) 'ProviderId',
		ISNULL(emp.FirstName + ' ' + emp.LastName,'NoDoctor') 'ProviderName',
		COUNT(DISTINCT PatientId) 'PatientCount' 
	FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation](@FromDate,@ToDate) bil
	LEFT JOIN EMP_Employee emp ON bil.ProviderId = emp.EmployeeId
	GROUP BY bil.ProviderId,emp.FirstName,emp.LastName
	ORDER BY 2
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailySales]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DailySales] --- [SP_Report_BIL_DailySales] '2018-11-29','2018-11-29',null,null,1
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy int = null,
		@IsInsurance bit=0
AS
/*
FileName: [sp_Report_BIL_DailySales]
CreatedBy/date: sud/2018-07-27
Description: To Get Sales + Cash Collection details from Invoice and Deposits table between given range. 
Remarks: 
    * Deposits are returned as it is for IsInsurance=1 as well since it's independent of sales
	* We're Returning 4 tables from this Stored Procedure.
	   1. Sales+Sales Return Details
	   2. Settlement Summary only
	   3. Summary of User Collection which has Cash impact in it.
	   4. Summary of Other Payments (eg: Maternity for LPH)
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
4.      Sud/15Feb'19                           Format Revised, getting sales summary from a function and then union with Deposit transactions.
5.      Sud/7Aug'19                            Added Filter for IsInsurance
6.      Sud/16Jan'20                           Changed for UserName filter not working because of Salutation
7.      Sud/1-Oct'21                           Changed for CounterName and CounterId comparison.
8.      Sud/23Nov'21                           Settlement Scenarios Revised. (JiraId: EMR-4496)
9.      Sud/25Nov'21                           For Maternity> Payment Handling in User collection report.
10.     Sud/29Nov'21                           BugFix> Maternity payment: User Filter was not handled earlier in Detailed View
11.		Krishna/18thJan'22					   changed the filter of this report from username to its ID (@createdBy varchar to int)
---------------------------------------------------------------------------------------
*/
BEGIN

 IF (@FromDate IS NOT NULL)
  OR (@ToDate IS NOT NULL)
BEGIN
	
	 Table:1 - For Usercollection Details---
	 Return Columns: BillingDate, ReceiptNo, HospitalNo, patientName, BillingType, SubTotal, DiscountAmount, 
	 TaxTotal, TotalAmount, CashCollection, DepositReceived, DepositRefund, CreditReceived,CreditAmount, CounterId, EmployeeId, Remarks, User (CreatedBy)

   SELECT
			bills.BillingDate,
			bills.InvoiceNo 'ReceiptNo',
			pat.PatientCode 'HospitalNo',
			pat.ShortName AS PatientName,
			bills.BillingType 'BillingType',
			bills.SubTotal,
			bills.DiscountAmount,
			bills.TaxTotal,
			bills.TotalAmount, 
			bills.CashCollection, 
			bills.DepositReceived,
			bills.DepositRefund,
			bills.CreditReceived,
			bills.CreditAmount,
			bills.CounterId, 
			cntr.CounterName,
			bills.[EmployeeId],
			bills.Remarks,
			emp.FullName AS CreatedBy
		

		FROM (
					Select * from FN_BILL_BillingTxnSegregation_ByBillingType_DailySales(@FromDate,@ToDate)
					WHERE ISNULL(IsInsuranceBilling,0) = @IsInsurance
	    
					UNION ALL

					All Deposits Transactions---
					Select   Convert(Date,CreatedOn) 'BillingDate', 
							 'DR'+Convert(varchar(20),ISNULL(ReceiptNo,'')) 'InvoiceNo', 
							 Patientid,
							 CASE WHEN DepositType='Deposit' THEN 'AdvanceReceived' 
								WHEN DepositType='depositdeduct' OR DepositType='ReturnDeposit' THEN 'AdvanceSettled' END AS 'BillingType',
			
							 0 As SubTotal,0 AS DiscountAmount,0 AS TaxTotal, 0 AS TotalAmount, 
							 CASE WHEN DepositType='Deposit' THEN Amount WHEN DepositType='depositdeduct' OR DepositType='ReturnDeposit' THEN (-Amount) END AS 'CashCollection',
							  CASE WHEN DepositType='Deposit' THEN Amount ELSE 0 END AS 'DepositReceived',
							CASE WHEN  DepositType='depositdeduct' OR DepositType='ReturnDeposit' THEN Amount ELSE 0 END AS 'DepositRefund'
						   
							 , 0 AS CreditReceived,  0 AS 'CreditAmount',
							 CounterId 'CounterId', CreatedBy 'EmployeeId', Remarks, 0 AS IsInsuranceBilling, 6 as DisplaySeq 
					from BIL_TXN_Deposit
					WHERE COnvert(Date,CreatedOn) BETWEEN @FromDate and @ToDate	


			) bills,


		EMP_Employee emp,
		PAT_Patient pat,
		BIL_CFG_Counter cntr
		WHERE bills.PatientId = pat.PatientId
				AND emp.EmployeeId = bills.EmployeeId
				AND bills.CounterId = cntr.CounterId

				--AND (bills.CounterId LIKE '%' + ISNULL(@CounterId, bills.CounterId) + '%')
				AND (@CounterId is null OR @CounterId=0 OR bills.CounterId = @CounterId ) 
				AND emp.EmployeeId = ISNULL(@CreatedBy, emp.EmployeeId) --updated Krishna : 18th JAN.22
				AND emp.FullName like '%'+ISNULL(@CreatedBy,emp.FullName)+'%'  -- updated sud: 16Jan'20
		        AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
		
       Order by bills.DisplaySeq


    Table2: For Settlement Details---
   Need: CollectionFromReceivable,  CashDiscount and Return Cash Discount in given date range for given counter, user--
   Getting Total(SUM) for all given criterias-- no need to separate for each user/counters/dates---
	 Select 
	        below fields kept for backup---
	       SUM(Case When sett.PayableAmount > 0 then sett.PaidAmount ELSE 0 END) AS 'SettlPaidAmount', 
			SUM( Case WHEN sett.RefundableAmount > 0 THEN sett.ReturnedAmount ELSE 0 END ) AS 'SettlReturnAmount',
			SUM( Case WHEN sett.DueAmount > 0 THEN sett.DueAmount ELSE 0 END ) AS 'SettlDueAmount',
			SUM( Case WHEN  sett.DiscountAmount > 0 THEN sett.DiscountAmount ELSE 0 END  ) 'SettlDiscountAmount'
	        
			Sum(Isnull(sett.CollectionFromReceivable,0)) 'CollectionFromReceivables',
			Sum(Isnull(sett.DiscountAmount,0)) 'CashDiscountGiven',
			Sum(Isnull(sett.DiscountReturnAmount,0)) 'CashDiscountReceived'

	from BIL_TXN_Settlements sett, 
	    EMP_Employee emp,
		BIL_CFG_Counter cntr 

	WHERE sett.CreatedBy=emp.EmployeeId
	      AND sett.CounterId=cntr.CounterId
		  AND (@CounterId is null OR @CounterId=0 OR sett.CounterId = @CounterId )
		  AND emp.FullName like '%'+ISNULL(@CreatedBy,emp.FullName)+'%' -- updated sud: 16Jan'20
		  AND emp.EmployeeId = ISNULL(@CreatedBy, EmployeeId)--updated Krishna : 18th JAN.22
		  AND Convert(Date,sett.CreatedOn) BETWEEN Convert(Date, @FromDate) AND Convert(Date, @ToDate) 


	 table:3--Gets User Collection Summary for all users in the given date range---
	 Select * from FN_BILL_GetUserCollectionSummaryInDateRange(@FromDate,@ToDate) 
	 WHERE EmployeeId = ISNULL(@CreatedBy, EmployeeId)--updated Krishna : 18th JAN.22



  -table:4--Gets Maternity payment amounts---
      Right now we only have Maternity Payment feature, 
    need to create separate function when we have other Cash payments to patient---
    SELECT  SUM(ISNULL(OutAmount,0)) - SUM(ISNULL(InAmount,0)) 'OtherPaymentsGiven'
    FROM MAT_TXN_PatientPayments pmt inner join EMP_Employee emp on pmt.CreatedBy=emp.EmployeeId
    WHERE Convert(DATE,pmt.CreatedOn) Between @FromDate and @ToDate
     AND emp.FullName like '%'+ISNULL(@CreatedBy,emp.FullName)+'%'
	 AND EmployeeId = ISNULL(@CreatedBy, EmployeeId)--updated Krishna : 18th JAN.22


 END -- end of IF

END -- end of SP

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailySales_14th_Dec_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[SP_Report_BIL_DailySales_14th_Dec_2018] --- [SP_Report_BIL_DailySales] '2018-11-29','2018-11-29',null,null
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy varchar(max)=null
AS
/*
FileName: [sp_Report_BIL_DailySales]
CreatedBy/date: sud/2018-07-27
Description: to get the price, Tax, total,along with recipt number between given date input
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      sud/2018-07-26                      modified after HAMS Deployment (NEEDS REVISION)\
2.		ramavtar/2018-10-09					added return remark
3.		ramavtar/2018-11-29					calculating summary amounts
---------------------------------------------------------------------------------------
*/
BEGIN
 IF (@FromDate IS NOT NULL)
  OR (@ToDate IS NOT NULL)
BEGIN
	SELECT
		*
	FROM (
		SELECT DISTINCT
			CONVERT(varchar(20), dates.ReportDate) AS [Date],
			txnInfo.InvoiceCode + CONVERT(varchar(20), txnInfo.InvoiceNo) 'ReceiptNo',
			pat.PatientCode AS HospitalNo,
			pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
			ISNULL(txn.SubTotal, 0) AS 'Price',
			ISNULL(txn.DiscountAmount, 0) AS 'DiscountAmount',
			ISNULL(bilRet.ReturnAmount, 0) AS 'ReturnedAmount',
			0 AS 'AdvanceReceived',
			ISNULL(depRet.Amount, 0) AS 'AdvanceSettlement',
			ISNULL(txn.TaxTotal, 0) AS 'Tax',
			ISNULL(txn.TotalAmount, 0) - ISNULL(depRet.Amount, 0) - ISNULL(bilRet.ReturnAmount, 0) AS 'TotalAmount',
			emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
			txnInfo.CounterId AS 'CounterId',
			ISNULL(bilRet.ReturnedTax, 0) AS 'ReturnedTax',
			ISNULL(bilRet.Remarks, '') 'ReturnRemark'
		FROM ((
			SELECT
				Dates 'ReportDate'
			FROM [FN_COMMON_GetAllDatesBetweenRange](ISNULL(@FromDate, GETDATE()), ISNULL(@ToDate, GETDATE()))) dates

		LEFT JOIN (
- These two tables works as an Anchor Table (LEFT Table) to join with other tables--
- Need BillingTransactionId, CreatedBy, CounterID to be joined with all other Right side tables---
		SELECT
			CONVERT(date, PaidDate) 'TxnDate',
			BillingTransactionId,
			InvoiceCode,
			InvoiceNo,
			PatientID,
			CreatedBy,
			CounterId,
			Remarks
		FROM BIL_TXN_BillingTransaction
		WHERE CONVERT(date, PaidDate) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
		AND BillStatus != 'unpaid' ---ramavtar:20-nov-18 filterring out unpaid (credit bills)

		UNION

		SELECT DISTINCT
			CONVERT(date, CreatedOn) AS TxnDate,
			BillingTransactionId,
			InvoiceCode,
			RefInvoiceNum,
			PatientId,
			CreatedBy,
			CounterId,
			Remarks
		FROM BIL_TXN_InvoiceReturn r
		WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())) txnInfo
			ON dates.ReportDate = txnInfo.TxnDate
- Join with Patient and Employee Table to get their names etc---
		INNER JOIN PAT_Patient pat
			ON txnInfo.PatientId = pat.PatientId
		INNER JOIN EMP_Employee emp
			ON txnInfo.CreatedBy = emp.EmployeeId

		LEFT JOIN BIL_TXN_BillingTransaction txn
			ON dates.ReportDate = CONVERT(date, txn.PaidDate)
		AND txnInfo.BillingTransactionId = txn.BillingTransactionId
		AND txnInfo.CounterId = txn.CounterId
		AND txnInfo.CreatedBy = txn.CreatedBy

		LEFT OUTER JOIN (
- deposit deduct happens both from Transaction and settlement
- take only those from Transaction in this query..
- condition is: BillingTransaction Is NOT NULL--
		SELECT
			CONVERT(date, CreatedOn) AS DepositRetDate,
			Amount,
			BillingTransactionId,
			CounterId,
			CreatedBy
		FROM BIL_TXN_Deposit
		WHERE DepositType = 'depositdeduct'
		AND BillingTransactionId IS NOT NULL) depRet
			ON dates.ReportDate = depRet.DepositRetDate
		AND txnInfo.BillingTransactionId = depRet.BillingTransactionId
		AND txnInfo.CounterId = depRet.CounterId
		AND txnInfo.CreatedBy = depRet.CreatedBy
		LEFT JOIN (

-Sud: 9May'18--our return table is now changed--
-get only returned bills---
		SELECT
			CONVERT(date, CreatedOn) AS bilReturnDate,
			BillingTransactionId,
			RefInvoiceNum,
			TotalAmount 'ReturnAmount',
			TaxTotal AS 'ReturnedTax',
			CounterId,
			CreatedBy,
			Remarks
		FROM BIL_TXN_InvoiceReturn r) bilRet
			ON dates.ReportDate = bilret.bilReturnDate
		AND txnInfo.BillingTransactionId = bilRet.BillingTransactionId
		AND txnInfo.CounterId = bilRet.CounterId
		AND txnInfo.CreatedBy = bilRet.CreatedBy
		)
		WHERE dates.ReportDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE()) + 1
		AND (txnInfo.CounterId LIKE '%' + ISNULL(@CounterId, txnInfo.CounterId) + '%')
		AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')

		UNION ALL

		SELECT
			CONVERT(date, deposits.DepositDate) 'DepositDate',
			deposits.ReceiptNo 'ReceiptNo',
			pat.PatientCode 'HospitalNo',
			pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
			0 'Price',
			0 'DiscountAmount',
			0 'ReturnedAmount',
			deposits.AdvanceReceived 'AdvanceReceived',
			deposits.AdvancedSettled 'AdvancedSettled',
			0 'Tax',
			deposits.TotalAmount 'TotalAmount',
			emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
			deposits.CounterId 'CounterId',
			0 'ReturnedTax',
			'' 'ReturnRemark'
		FROM (SELECT
				CONVERT(date, CreatedOn) 'DepositDate',
				'DR' + CONVERT(varchar(20), ReceiptNo) 'ReceiptNo',
				PatientId,
				CASE
				  WHEN DepositType = 'Deposit' THEN Amount
				  ELSE 0
				END AS 'AdvanceReceived',
				CASE
				  WHEN DepositType = 'ReturnDeposit' THEN Amount
				  ELSE 0
				END AS 'AdvancedSettled',
				CASE
				  WHEN DepositType = 'Deposit' THEN Amount
				  WHEN DepositType = 'ReturnDeposit' THEN -Amount
				  ELSE 0
				END AS 'TotalAmount',
				CreatedBy 'CreatedBy',
				CounterId 'CounterId'
			FROM BIL_TXN_Deposit
			WHERE ReceiptNo IS NOT NULL
			AND (DepositType = 'DEPOSIT'
			OR DepositType = 'ReturnDeposit')

		UNION ALL

		SELECT
			CONVERT(date, CreatedOn) 'DepositDate',
       we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			CASE
			WHEN SettlementId IS NOT NULL THEN 'SR' + CONVERT(varchar(20), SettlementId)
			ELSE 'SR'
			END AS 'ReceiptNo',
			PatientId,
			0 AS 'AdvanceReceived',
			Amount AS 'AdvancedSettled',
			-Amount AS 'TotalAmount',
			CreatedBy 'CreatedBy',
			CounterId 'CounterId'
		FROM BIL_TXN_Deposit
     --we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
		WHERE ((DepositType = 'depositdeduct'
		AND SettlementId IS NOT NULL)
		OR DepositType = 'ReturnDeposit')
		AND CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())) deposits,


		EMP_Employee emp,
		PAT_Patient pat,
		BIL_CFG_Counter cntr
		WHERE deposits.PatientId = pat.PatientId
		AND emp.EmployeeId = deposits.CreatedBy
		AND deposits.CounterId = cntr.CounterId
		AND deposits.DepositDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
		AND (deposits.CounterId LIKE '%' + ISNULL(@CounterId, deposits.CounterId) + '%')
		AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')) dum
		ORDER BY dum.ReceiptNo

  -getting addional summary amounts for report
		SELECT
			SUM(ISNULL(AdvanceReceived, 0)) 'AdvanceReceived',
			SUM(ISNULL(AdvanceSettled, 0)) 'AdvanceSettled',
			SUM(ISNULL(ProvisionalAmount,0)) 'Provisional',
			ISNULL((SELECT SUM(TotalAmount) FROM BIL_TXN_BillingTransaction
		WHERE BillStatus = 'unpaid'
		AND CONVERT(DATE,CreatedOn) BETWEEN @FromDate AND @ToDate),0) 'CreditAmount'
		FROM [FN_BIL_GetDepositNProvisionalBetnDateRange](@FromDate, @ToDate)
END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailySales_20th_Nov_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[SP_Report_BIL_DailySales_20th_Nov_2018] --- [SP_Report_BIL_DailySales] '2018-10-09','2018-10-09',null,null
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy varchar(max)=null
AS
/*
FileName: [sp_Report_BIL_DailySales]
CreatedBy/date: sud/2018-07-27
Description: to get the price, Tax, total,along with recipt number between given date input
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      sud/2018-07-26                      modified after HAMS Deployment (NEEDS REVISION)\
2.		ramavtar/2018-10-09					added return remark
3.      sud/2018-11-16                      ReturnDeposit handled for Inpatient-Discharge case, 
                                            here DepositType comes as 'ReturnDeposit', and there's no settlementId or billingTransactionid. 
---------------------------------------------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)
  BEGIN
    SELECT
      *
    FROM (
		SELECT DISTINCT
			CONVERT(varchar(20), dates.ReportDate) AS [Date],
			txnInfo.InvoiceCode + CONVERT(varchar(20), txnInfo.InvoiceNo) 'ReceiptNo',
			pat.PatientCode AS HospitalNo,
			pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
			ISNULL(txn.SubTotal, 0) AS 'Price',
			ISNULL(txn.DiscountAmount, 0) AS 'DiscountAmount',
			ISNULL(bilRet.ReturnAmount, 0) AS 'ReturnedAmount',
			0 AS 'AdvanceReceived',
			ISNULL(depRet.Amount, 0) AS 'AdvanceSettlement',
			ISNULL(txn.TaxTotal, 0) AS 'Tax',
			ISNULL(txn.TotalAmount, 0) - ISNULL(depRet.Amount, 0) - ISNULL(bilRet.ReturnAmount, 0) AS 'TotalAmount',
			emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
			txnInfo.CounterId AS 'CounterId',
			ISNULL(bilRet.ReturnedTax, 0) AS 'ReturnedTax',
			ISNULL(bilRet.Remarks,'') 'ReturnRemark'
		FROM ((SELECT
					Dates 'ReportDate'
				FROM [FN_COMMON_GetAllDatesBetweenRange](ISNULL(@FromDate, GETDATE()), ISNULL(@ToDate, GETDATE()))) dates

    LEFT JOIN (
    - These two tables works as an Anchor Table (LEFT Table) to join with other tables--
    -Need BillingTransactionId, CreatedBy, CounterID to be joined with all other Right side tables---
    SELECT
      CONVERT(date, CreatedOn) 'TxnDate',
      BillingTransactionId,
      InvoiceCode,
      InvoiceNo,
      PatientID,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_BillingTransaction
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())

    UNION

    SELECT DISTINCT
      CONVERT(date, CreatedOn) AS TxnDate,
      BillingTransactionId,
      InvoiceCode,
      RefInvoiceNum,
      PatientId,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())) txnInfo
      ON dates.ReportDate = txnInfo.TxnDate
    -Join with Patient and Employee Table to get their names etc---
    INNER JOIN PAT_Patient pat
      ON txnInfo.PatientId = pat.PatientId
    INNER JOIN EMP_Employee emp
      ON txnInfo.CreatedBy = emp.EmployeeId

    LEFT JOIN BIL_TXN_BillingTransaction txn
      ON dates.ReportDate = CONVERT(date, txn.CreatedOn)
      AND txnInfo.BillingTransactionId = txn.BillingTransactionId
      AND txnInfo.CounterId = txn.CounterId
      AND txnInfo.CreatedBy = txn.CreatedBy

    LEFT OUTER JOIN (
    - deposit deduct happens both from Transaction and settlement
     take only those from Transaction in this query..
     condition is: BillingTransaction Is NOT NULL--
    SELECT
      CONVERT(date, CreatedOn) AS DepositRetDate,
      Amount,
      BillingTransactionId,
      CounterId,
      CreatedBy
    FROM BIL_TXN_Deposit
    WHERE DepositType = 'depositdeduct'
    AND BillingTransactionId IS NOT NULL) depRet
      ON dates.ReportDate = depRet.DepositRetDate
      AND txnInfo.BillingTransactionId = depRet.BillingTransactionId
      AND txnInfo.CounterId = depRet.CounterId
      AND txnInfo.CreatedBy = depRet.CreatedBy
    LEFT JOIN (

    -Sud: 9May'18--our return table is now changed--
    -get only returned bills---
    SELECT
      CONVERT(date, CreatedOn) AS bilReturnDate,
      BillingTransactionId,
      RefInvoiceNum,
      TotalAmount 'ReturnAmount',
      TaxTotal AS 'ReturnedTax',
      CounterId,
      CreatedBy,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r) bilRet
      ON dates.ReportDate = bilret.bilReturnDate
      AND txnInfo.BillingTransactionId = bilRet.BillingTransactionId
      AND txnInfo.CounterId = bilRet.CounterId
      AND txnInfo.CreatedBy = bilRet.CreatedBy
    )
    WHERE dates.ReportDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE()) + 1
    AND (txnInfo.CounterId LIKE '%' + ISNULL(@CounterId, txnInfo.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')

    UNION ALL

    SELECT
      CONVERT(date, deposits.DepositDate) 'DepositDate',
      deposits.ReceiptNo 'ReceiptNo',
      pat.PatientCode 'HospitalNo',
      pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
      0 'Price',
      0 'DiscountAmount',
      0 'ReturnedAmount',
      deposits.AdvanceReceived 'AdvanceReceived',
      deposits.AdvancedSettled 'AdvancedSettled',
      0 'Tax',
      deposits.TotalAmount 'TotalAmount',
      emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
      deposits.CounterId 'CounterId',
      0 'ReturnedTax',
	  '' 'ReturnRemark'
    FROM (SELECT
           CONVERT(date, CreatedOn) 'DepositDate',
           'DR' + CONVERT(varchar(20), ReceiptNo) 'ReceiptNo',
           PatientId,
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             ELSE 0
           END AS 'AdvanceReceived',
           CASE
             WHEN DepositType = 'ReturnDeposit' THEN Amount
             ELSE 0
           END AS 'AdvancedSettled',
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             WHEN DepositType = 'ReturnDeposit' THEN -Amount
             ELSE 0
           END AS 'TotalAmount',
           CreatedBy 'CreatedBy',
           CounterId 'CounterId'
         FROM BIL_TXN_Deposit
         WHERE ReceiptNo IS NOT NULL
         AND (DepositType = 'DEPOSIT'
         OR DepositType = 'ReturnDeposit')

         UNION ALL
     
	    Select Convert(Date,CreatedOn) 'DepositDate',
			we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			CASE WHEN SettlementId IS NOT NULL THEN  'SR'+Convert(varchar(20),SettlementId) 
			ELSE 'SR' END AS 'ReceiptNo', 

				   PatientId,
				   0 AS 'AdvanceReceived',
				   Amount AS 'AdvancedSettled',
				   -Amount AS 'TotalAmount',
				   CreatedBy  'CreatedBy',
				   CounterId 'CounterId'
			from BIL_TXN_Deposit
			--we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			WHERE (( DepositType='depositdeduct'  AND  SettlementId IS NOT NULL ) OR DepositType='ReturnDeposit')
			and Convert(Date,CreatedOn)  BETWEEN  ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE()) 

		 
		 ) deposits,


         EMP_Employee emp,
         PAT_Patient pat,
         BIL_CFG_Counter cntr
    WHERE deposits.PatientId = pat.PatientId
    AND emp.EmployeeId = deposits.CreatedBy
    AND deposits.CounterId = cntr.CounterId
    AND deposits.DepositDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
    AND (deposits.CounterId LIKE '%' + ISNULL(@CounterId, deposits.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
	) dum
    ORDER BY dum.ReceiptNo
  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailySales_22nd_Nov_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DailySales_22nd_Nov_2018] --- [SP_Report_BIL_DailySales] '2018-10-09','2018-10-09',null,null
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy varchar(max)=null
AS
/*
FileName: [sp_Report_BIL_DailySales]
CreatedBy/date: sud/2018-07-27
Description: to get the price, Tax, total,along with recipt number between given date input
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      sud/2018-07-26                      modified after HAMS Deployment (NEEDS REVISION)\
2.		ramavtar/2018-10-09					added return remark
3.      sud/2018-11-16                      ReturnDeposit handled for Inpatient-Discharge case, 
                                            here DepositType comes as 'ReturnDeposit', and there's no settlementId or billingTransactionid. 
---------------------------------------------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)
  BEGIN
    SELECT
      *
    FROM (
		SELECT DISTINCT
			CONVERT(varchar(20), dates.ReportDate) AS [Date],
			txnInfo.InvoiceCode + CONVERT(varchar(20), txnInfo.InvoiceNo) 'ReceiptNo',
			pat.PatientCode AS HospitalNo,
			pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
			ISNULL(txn.SubTotal, 0) AS 'Price',
			ISNULL(txn.DiscountAmount, 0) AS 'DiscountAmount',
			ISNULL(bilRet.ReturnAmount, 0) AS 'ReturnedAmount',
			0 AS 'AdvanceReceived',
			ISNULL(depRet.Amount, 0) AS 'AdvanceSettlement',
			ISNULL(txn.TaxTotal, 0) AS 'Tax',
			ISNULL(txn.TotalAmount, 0) - ISNULL(depRet.Amount, 0) - ISNULL(bilRet.ReturnAmount, 0) AS 'TotalAmount',
			emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
			txnInfo.CounterId AS 'CounterId',
			ISNULL(bilRet.ReturnedTax, 0) AS 'ReturnedTax',
			ISNULL(bilRet.Remarks,'') 'ReturnRemark'
		FROM ((SELECT
					Dates 'ReportDate'
				FROM [FN_COMMON_GetAllDatesBetweenRange](ISNULL(@FromDate, GETDATE()), ISNULL(@ToDate, GETDATE()))) dates

    LEFT JOIN (
    - These two tables works as an Anchor Table (LEFT Table) to join with other tables--
    -Need BillingTransactionId, CreatedBy, CounterID to be joined with all other Right side tables---
    SELECT
      CONVERT(date, CreatedOn) 'TxnDate',
      BillingTransactionId,
      InvoiceCode,
      InvoiceNo,
      PatientID,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_BillingTransaction
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())

    UNION

    SELECT DISTINCT
      CONVERT(date, CreatedOn) AS TxnDate,
      BillingTransactionId,
      InvoiceCode,
      RefInvoiceNum,
      PatientId,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())) txnInfo
      ON dates.ReportDate = txnInfo.TxnDate
    -Join with Patient and Employee Table to get their names etc---
    INNER JOIN PAT_Patient pat
      ON txnInfo.PatientId = pat.PatientId
    INNER JOIN EMP_Employee emp
      ON txnInfo.CreatedBy = emp.EmployeeId

    LEFT JOIN BIL_TXN_BillingTransaction txn
      ON dates.ReportDate = CONVERT(date, txn.CreatedOn)
      AND txnInfo.BillingTransactionId = txn.BillingTransactionId
      AND txnInfo.CounterId = txn.CounterId
      AND txnInfo.CreatedBy = txn.CreatedBy

    LEFT OUTER JOIN (
    - deposit deduct happens both from Transaction and settlement
     take only those from Transaction in this query..
     condition is: BillingTransaction Is NOT NULL--
    SELECT
      CONVERT(date, CreatedOn) AS DepositRetDate,
      Amount,
      BillingTransactionId,
      CounterId,
      CreatedBy
    FROM BIL_TXN_Deposit
    WHERE DepositType = 'depositdeduct'
    AND BillingTransactionId IS NOT NULL) depRet
      ON dates.ReportDate = depRet.DepositRetDate
      AND txnInfo.BillingTransactionId = depRet.BillingTransactionId
      AND txnInfo.CounterId = depRet.CounterId
      AND txnInfo.CreatedBy = depRet.CreatedBy
    LEFT JOIN (

    -Sud: 9May'18--our return table is now changed--
    -get only returned bills---
    SELECT
      CONVERT(date, CreatedOn) AS bilReturnDate,
      BillingTransactionId,
      RefInvoiceNum,
      TotalAmount 'ReturnAmount',
      TaxTotal AS 'ReturnedTax',
      CounterId,
      CreatedBy,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r) bilRet
      ON dates.ReportDate = bilret.bilReturnDate
      AND txnInfo.BillingTransactionId = bilRet.BillingTransactionId
      AND txnInfo.CounterId = bilRet.CounterId
      AND txnInfo.CreatedBy = bilRet.CreatedBy
    )
    WHERE dates.ReportDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE()) + 1
    AND (txnInfo.CounterId LIKE '%' + ISNULL(@CounterId, txnInfo.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')

    UNION ALL

    SELECT
      CONVERT(date, deposits.DepositDate) 'DepositDate',
      deposits.ReceiptNo 'ReceiptNo',
      pat.PatientCode 'HospitalNo',
      pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
      0 'Price',
      0 'DiscountAmount',
      0 'ReturnedAmount',
      deposits.AdvanceReceived 'AdvanceReceived',
      deposits.AdvancedSettled 'AdvancedSettled',
      0 'Tax',
      deposits.TotalAmount 'TotalAmount',
      emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
      deposits.CounterId 'CounterId',
      0 'ReturnedTax',
	  '' 'ReturnRemark'
    FROM (SELECT
           CONVERT(date, CreatedOn) 'DepositDate',
           'DR' + CONVERT(varchar(20), ReceiptNo) 'ReceiptNo',
           PatientId,
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             ELSE 0
           END AS 'AdvanceReceived',
           CASE
             WHEN DepositType = 'ReturnDeposit' THEN Amount
             ELSE 0
           END AS 'AdvancedSettled',
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             WHEN DepositType = 'ReturnDeposit' THEN -Amount
             ELSE 0
           END AS 'TotalAmount',
           CreatedBy 'CreatedBy',
           CounterId 'CounterId'
         FROM BIL_TXN_Deposit
         WHERE ReceiptNo IS NOT NULL
         AND (DepositType = 'DEPOSIT'
         OR DepositType = 'ReturnDeposit')

         UNION ALL
     
	    Select Convert(Date,CreatedOn) 'DepositDate',
			we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			CASE WHEN SettlementId IS NOT NULL THEN  'SR'+Convert(varchar(20),SettlementId) 
			ELSE 'SR' END AS 'ReceiptNo', 

				   PatientId,
				   0 AS 'AdvanceReceived',
				   Amount AS 'AdvancedSettled',
				   -Amount AS 'TotalAmount',
				   CreatedBy  'CreatedBy',
				   CounterId 'CounterId'
			from BIL_TXN_Deposit
			--we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			WHERE (( DepositType='depositdeduct'  AND  SettlementId IS NOT NULL ) OR DepositType='ReturnDeposit')
			and Convert(Date,CreatedOn)  BETWEEN  ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE()) 

		 
		 ) deposits,


         EMP_Employee emp,
         PAT_Patient pat,
         BIL_CFG_Counter cntr
    WHERE deposits.PatientId = pat.PatientId
    AND emp.EmployeeId = deposits.CreatedBy
    AND deposits.CounterId = cntr.CounterId
    AND deposits.DepositDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
    AND (deposits.CounterId LIKE '%' + ISNULL(@CounterId, deposits.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
	) dum
    ORDER BY dum.ReceiptNo
  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailySales_27th_Nov_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DailySales_27th_Nov_2018] --- [SP_Report_BIL_DailySales] '2018-10-09','2018-10-09',null,null
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy varchar(max)=null
AS
/*
FileName: [sp_Report_BIL_DailySales]
CreatedBy/date: sud/2018-07-27
Description: to get the price, Tax, total,along with recipt number between given date input
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      sud/2018-07-26                      modified after HAMS Deployment (NEEDS REVISION)\
2.		ramavtar/2018-10-09					added return remark
3.      sud/2018-11-16                      ReturnDeposit handled for Inpatient-Discharge case, 
                                            here DepositType comes as 'ReturnDeposit', and there's no settlementId or billingTransactionid. 
---------------------------------------------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)
  BEGIN
    SELECT
      *
    FROM (
		SELECT DISTINCT
			CONVERT(varchar(20), dates.ReportDate) AS [Date],
			txnInfo.InvoiceCode + CONVERT(varchar(20), txnInfo.InvoiceNo) 'ReceiptNo',
			pat.PatientCode AS HospitalNo,
			pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
			ISNULL(txn.SubTotal, 0) AS 'Price',
			ISNULL(txn.DiscountAmount, 0) AS 'DiscountAmount',
			ISNULL(bilRet.ReturnAmount, 0) AS 'ReturnedAmount',
			0 AS 'AdvanceReceived',
			ISNULL(depRet.Amount, 0) AS 'AdvanceSettlement',
			ISNULL(txn.TaxTotal, 0) AS 'Tax',
			ISNULL(txn.TotalAmount, 0) - ISNULL(depRet.Amount, 0) - ISNULL(bilRet.ReturnAmount, 0) AS 'TotalAmount',
			emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
			txnInfo.CounterId AS 'CounterId',
			ISNULL(bilRet.ReturnedTax, 0) AS 'ReturnedTax',
			ISNULL(bilRet.Remarks,'') 'ReturnRemark'
		FROM ((SELECT
					Dates 'ReportDate'
				FROM [FN_COMMON_GetAllDatesBetweenRange](ISNULL(@FromDate, GETDATE()), ISNULL(@ToDate, GETDATE()))) dates

    LEFT JOIN (
    - These two tables works as an Anchor Table (LEFT Table) to join with other tables--
    -Need BillingTransactionId, CreatedBy, CounterID to be joined with all other Right side tables---
    SELECT
      CONVERT(date, CreatedOn) 'TxnDate',
      BillingTransactionId,
      InvoiceCode,
      InvoiceNo,
      PatientID,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_BillingTransaction
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
AND BillStatus != 'unpaid' ---ramavtar:20-nov-18 filterring out unpaid (credit bills)
    UNION

    SELECT DISTINCT
      CONVERT(date, CreatedOn) AS TxnDate,
      BillingTransactionId,
      InvoiceCode,
      RefInvoiceNum,
      PatientId,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())) txnInfo
      ON dates.ReportDate = txnInfo.TxnDate
    -Join with Patient and Employee Table to get their names etc---
    INNER JOIN PAT_Patient pat
      ON txnInfo.PatientId = pat.PatientId
    INNER JOIN EMP_Employee emp
      ON txnInfo.CreatedBy = emp.EmployeeId

    LEFT JOIN BIL_TXN_BillingTransaction txn
      ON dates.ReportDate = CONVERT(date, txn.CreatedOn)
      AND txnInfo.BillingTransactionId = txn.BillingTransactionId
      AND txnInfo.CounterId = txn.CounterId
      AND txnInfo.CreatedBy = txn.CreatedBy

    LEFT OUTER JOIN (
    - deposit deduct happens both from Transaction and settlement
     take only those from Transaction in this query..
     condition is: BillingTransaction Is NOT NULL--
    SELECT
      CONVERT(date, CreatedOn) AS DepositRetDate,
      Amount,
      BillingTransactionId,
      CounterId,
      CreatedBy
    FROM BIL_TXN_Deposit
    WHERE DepositType = 'depositdeduct'
    AND BillingTransactionId IS NOT NULL) depRet
      ON dates.ReportDate = depRet.DepositRetDate
      AND txnInfo.BillingTransactionId = depRet.BillingTransactionId
      AND txnInfo.CounterId = depRet.CounterId
      AND txnInfo.CreatedBy = depRet.CreatedBy
    LEFT JOIN (

    -Sud: 9May'18--our return table is now changed--
    -get only returned bills---
    SELECT
      CONVERT(date, CreatedOn) AS bilReturnDate,
      BillingTransactionId,
      RefInvoiceNum,
      TotalAmount 'ReturnAmount',
      TaxTotal AS 'ReturnedTax',
      CounterId,
      CreatedBy,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r) bilRet
      ON dates.ReportDate = bilret.bilReturnDate
      AND txnInfo.BillingTransactionId = bilRet.BillingTransactionId
      AND txnInfo.CounterId = bilRet.CounterId
      AND txnInfo.CreatedBy = bilRet.CreatedBy
    )
    WHERE dates.ReportDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE()) + 1
    AND (txnInfo.CounterId LIKE '%' + ISNULL(@CounterId, txnInfo.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')

    UNION ALL

    SELECT
      CONVERT(date, deposits.DepositDate) 'DepositDate',
      deposits.ReceiptNo 'ReceiptNo',
      pat.PatientCode 'HospitalNo',
      pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
      0 'Price',
      0 'DiscountAmount',
      0 'ReturnedAmount',
      deposits.AdvanceReceived 'AdvanceReceived',
      deposits.AdvancedSettled 'AdvancedSettled',
      0 'Tax',
      deposits.TotalAmount 'TotalAmount',
      emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
      deposits.CounterId 'CounterId',
      0 'ReturnedTax',
	  '' 'ReturnRemark'
    FROM (SELECT
           CONVERT(date, CreatedOn) 'DepositDate',
           'DR' + CONVERT(varchar(20), ReceiptNo) 'ReceiptNo',
           PatientId,
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             ELSE 0
           END AS 'AdvanceReceived',
           CASE
             WHEN DepositType = 'ReturnDeposit' THEN Amount
             ELSE 0
           END AS 'AdvancedSettled',
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             WHEN DepositType = 'ReturnDeposit' THEN -Amount
             ELSE 0
           END AS 'TotalAmount',
           CreatedBy 'CreatedBy',
           CounterId 'CounterId'
         FROM BIL_TXN_Deposit
         WHERE ReceiptNo IS NOT NULL
         AND (DepositType = 'DEPOSIT'
         OR DepositType = 'ReturnDeposit')

         UNION ALL
     
	    Select Convert(Date,CreatedOn) 'DepositDate',
			we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			CASE WHEN SettlementId IS NOT NULL THEN  'SR'+Convert(varchar(20),SettlementId) 
			ELSE 'SR' END AS 'ReceiptNo', 

				   PatientId,
				   0 AS 'AdvanceReceived',
				   Amount AS 'AdvancedSettled',
				   -Amount AS 'TotalAmount',
				   CreatedBy  'CreatedBy',
				   CounterId 'CounterId'
			from BIL_TXN_Deposit
			--we don't have settlement id for Inpatient-ReturnDeposit (automatic) case--sud:16Nov'18
			WHERE (( DepositType='depositdeduct'  AND  SettlementId IS NOT NULL ) OR DepositType='ReturnDeposit')
			and Convert(Date,CreatedOn)  BETWEEN  ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE()) 

		 
		 ) deposits,


         EMP_Employee emp,
         PAT_Patient pat,
         BIL_CFG_Counter cntr
    WHERE deposits.PatientId = pat.PatientId
    AND emp.EmployeeId = deposits.CreatedBy
    AND deposits.CounterId = cntr.CounterId
    AND deposits.DepositDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
    AND (deposits.CounterId LIKE '%' + ISNULL(@CounterId, deposits.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
	) dum
    ORDER BY dum.ReceiptNo
  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DailySales_old]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DailySales_old] --- [SP_Report_BIL_DailySales] '2018-10-09','2018-10-09',null,null
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy varchar(max)=null
AS
/*
FileName: [sp_Report_BIL_DailySales]
CreatedBy/date: sud/2018-07-27
Description: to get the price, Tax, total,along with recipt number between given date input
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      sud/2018-07-26                      modified after HAMS Deployment (NEEDS REVISION)\
2.		ramavtar/2018-10-09					added return remark
---------------------------------------------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)
  BEGIN
    SELECT
      *
    FROM (
		SELECT DISTINCT
			CONVERT(varchar(20), dates.ReportDate) AS [Date],
			txnInfo.InvoiceCode + CONVERT(varchar(20), txnInfo.InvoiceNo) 'ReceiptNo',
			pat.PatientCode AS HospitalNo,
			pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
			ISNULL(txn.SubTotal, 0) AS 'Price',
			ISNULL(txn.DiscountAmount, 0) AS 'DiscountAmount',
			ISNULL(bilRet.ReturnAmount, 0) AS 'ReturnedAmount',
			0 AS 'AdvanceReceived',
			ISNULL(depRet.Amount, 0) AS 'AdvanceSettlement',
			ISNULL(txn.TaxTotal, 0) AS 'Tax',
			ISNULL(txn.TotalAmount, 0) - ISNULL(depRet.Amount, 0) - ISNULL(bilRet.ReturnAmount, 0) AS 'TotalAmount',
			emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
			txnInfo.CounterId AS 'CounterId',
			ISNULL(bilRet.ReturnedTax, 0) AS 'ReturnedTax',
			ISNULL(bilRet.Remarks,'') 'ReturnRemark'
		FROM ((SELECT
					Dates 'ReportDate'
				FROM [FN_COMMON_GetAllDatesBetweenRange](ISNULL(@FromDate, GETDATE()), ISNULL(@ToDate, GETDATE()))) dates

    LEFT JOIN (
    - These two tables works as an Anchor Table (LEFT Table) to join with other tables--
    -Need BillingTransactionId, CreatedBy, CounterID to be joined with all other Right side tables---
    SELECT
      CONVERT(date, CreatedOn) 'TxnDate',
      BillingTransactionId,
      InvoiceCode,
      InvoiceNo,
      PatientID,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_BillingTransaction
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())

    UNION

    SELECT DISTINCT
      CONVERT(date, CreatedOn) AS TxnDate,
      BillingTransactionId,
      InvoiceCode,
      RefInvoiceNum,
      PatientId,
      CreatedBy,
      CounterId,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r
    WHERE CONVERT(date, CreatedOn) BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())) txnInfo
      ON dates.ReportDate = txnInfo.TxnDate
    -Join with Patient and Employee Table to get their names etc---
    INNER JOIN PAT_Patient pat
      ON txnInfo.PatientId = pat.PatientId
    INNER JOIN EMP_Employee emp
      ON txnInfo.CreatedBy = emp.EmployeeId

    LEFT JOIN BIL_TXN_BillingTransaction txn
      ON dates.ReportDate = CONVERT(date, txn.CreatedOn)
      AND txnInfo.BillingTransactionId = txn.BillingTransactionId
      AND txnInfo.CounterId = txn.CounterId
      AND txnInfo.CreatedBy = txn.CreatedBy

    LEFT OUTER JOIN (
    - deposit deduct happens both from Transaction and settlement
     take only those from Transaction in this query..
     condition is: BillingTransaction Is NOT NULL--
    SELECT
      CONVERT(date, CreatedOn) AS DepositRetDate,
      Amount,
      BillingTransactionId,
      CounterId,
      CreatedBy
    FROM BIL_TXN_Deposit
    WHERE DepositType = 'depositdeduct'
    AND BillingTransactionId IS NOT NULL) depRet
      ON dates.ReportDate = depRet.DepositRetDate
      AND txnInfo.BillingTransactionId = depRet.BillingTransactionId
      AND txnInfo.CounterId = depRet.CounterId
      AND txnInfo.CreatedBy = depRet.CreatedBy
    LEFT JOIN (

    -Sud: 9May'18--our return table is now changed--
    -get only returned bills---
    SELECT
      CONVERT(date, CreatedOn) AS bilReturnDate,
      BillingTransactionId,
      RefInvoiceNum,
      TotalAmount 'ReturnAmount',
      TaxTotal AS 'ReturnedTax',
      CounterId,
      CreatedBy,
	  Remarks
    FROM BIL_TXN_InvoiceReturn r) bilRet
      ON dates.ReportDate = bilret.bilReturnDate
      AND txnInfo.BillingTransactionId = bilRet.BillingTransactionId
      AND txnInfo.CounterId = bilRet.CounterId
      AND txnInfo.CreatedBy = bilRet.CreatedBy
    )
    WHERE dates.ReportDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE()) + 1
    AND (txnInfo.CounterId LIKE '%' + ISNULL(@CounterId, txnInfo.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')

    UNION ALL

    SELECT
      CONVERT(date, deposits.DepositDate) 'DepositDate',
      deposits.ReceiptNo 'ReceiptNo',
      pat.PatientCode 'HospitalNo',
      pat.FirstName + ISNULL(' ' + pat.MiddleName, '') + ' ' + pat.LastName AS PatientName,
      0 'Price',
      0 'DiscountAmount',
      0 'ReturnedAmount',
      deposits.AdvanceReceived 'AdvanceReceived',
      deposits.AdvancedSettled 'AdvancedSettled',
      0 'Tax',
      deposits.TotalAmount 'TotalAmount',
      emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName AS CreatedBy,
      deposits.CounterId 'CounterId',
      0 'ReturnedTax',
	  '' 'ReturnRemark'
    FROM (SELECT
           CONVERT(date, CreatedOn) 'DepositDate',
           'DR' + CONVERT(varchar(20), ReceiptNo) 'ReceiptNo',
           PatientId,
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             ELSE 0
           END AS 'AdvanceReceived',
           CASE
             WHEN DepositType = 'ReturnDeposit' THEN Amount
             ELSE 0
           END AS 'AdvancedSettled',
           CASE
             WHEN DepositType = 'Deposit' THEN Amount
             WHEN DepositType = 'ReturnDeposit' THEN -Amount
             ELSE 0
           END AS 'TotalAmount',
           CreatedBy 'CreatedBy',
           CounterId 'CounterId'
         FROM BIL_TXN_Deposit
         WHERE ReceiptNo IS NOT NULL
         AND (DepositType = 'DEPOSIT'
         OR DepositType = 'ReturnDeposit')

         UNION ALL
         SELECT
           CONVERT(date, CreatedOn) 'DepositDate',
           'SR' + CONVERT(varchar(20), SettlementId) 'ReceiptNo',
           PatientId,
           0 AS 'AdvanceReceived',
           Amount AS 'AdvancedSettled',
           -Amount AS 'TotalAmount',
           CreatedBy 'CreatedBy',
           CounterId 'CounterId'
         FROM BIL_TXN_Deposit
         WHERE DepositType = 'depositdeduct'
         AND SettlementId IS NOT NULL) deposits,
         EMP_Employee emp,
         PAT_Patient pat,
         BIL_CFG_Counter cntr
    WHERE deposits.PatientId = pat.PatientId
    AND emp.EmployeeId = deposits.CreatedBy
    AND deposits.CounterId = cntr.CounterId
    AND deposits.DepositDate BETWEEN ISNULL(@FromDate, GETDATE()) AND ISNULL(@ToDate, GETDATE())
    AND (deposits.CounterId LIKE '%' + ISNULL(@CounterId, deposits.CounterId) + '%')
    AND (emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName LIKE '%' + ISNULL(@CreatedBy, emp.FirstName + ISNULL(' ' + emp.MiddleName, '') + ' ' + emp.LastName) + '%')
	) dum
    ORDER BY dum.ReceiptNo
  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DepartmentItemSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BIL_DepartmentItemSummary]
[SP_Report_BIL_DepartmentItemSummary] '01-22-2018','01-22-2019',NULL
@ToDate DATETIME = NULL,
@FromDate DATETIME = NULL,
@SrvDeptName NVARCHAR(MAX) = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.	UpdatedBy/Date			Remarks
--------------------------------------------------------
1		Ramavtar/11Sept'18      Initial Draft
2		Ramavtar/30Nov'18		added summary and filtered report data for provisional and cancel
3       Sud/13Mar'19            Changed to function FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional 
                                  from: FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary
4.      Dinesh/27th May'19		Added ReferredDoctorName 
--------------------------------------------------------
*/
BEGIN
	SELECT
		fnItems.BillingDate 'Date',
		COALESCE(fnItems.ReturnDate, fnItems.CancelledDate, fnItems.PaidDate, fnItems.CreditDate, fnItems.ProvisionalDate) 'Date',
		ISNULL(fnItems.ProviderName, 'NoDoctor') AS 'DoctorName',
		ISNULL(fnItems.ReferredDoctorName, 'NoDoctor') AS 'ReferredDoctorName',
		pat.PatientCode,
		pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName 'PatientName',
		[dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary] (fnItems.ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
		fnItems.ServiceDepartmentName,  ---sud:13Mar'19--changed to above
		fnItems.ItemName,
		fnItems.Price,
		fnItems.Quantity,
		fnItems.SubTotal,
		fnItems.DiscountAmount,
		fnItems.TotalAmount,
		fnItems.ReturnTotalAmount 'ReturnAmount',
		fnItems.TotalAmount - fnItems.ReturnTotalAmount 'NetAmount'
	FROM (SELECT
			* FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate)
			 WHERE BillingType !='CreditReceived'
			 -sud:13Mar'19--changed to above
		     FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary(@FromDate, @ToDate)
		     WHERE BillStatus != 'cancelled' AND BillStatus != 'provisional'

		) fnItems


	JOIN PAT_Patient pat ON fnItems.PatientId = pat.PatientId
    WHERE [dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary] (fnItems.ServiceDepartmentName,ItemName) = @SrvDeptName
	      WHERE fnItems.ServiceDepartmentName = @SrvDeptName ---sud:13Mar'19--changed to above

	ORDER BY 1 DESC
table2: provisional, cancel, credit amounts for summary
	SELECT 
		SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
		SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
		SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount',
		(SELECT SUM(ISNULL(AdvanceReceived,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceReceived',
		(SELECT SUM(ISNULL(AdvanceSettled,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceSettled'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary(@FromDate, @ToDate)
	WHERE ServiceDepartmentName = @SrvDeptName
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DepartmentRevenue]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author/Date:    NageshBB-Ajay/23Jan'19
 Description:    show department wise revenue details
 Remarks: 
revenue department select cases 
outpatient CASES 
== == == == == == == == == == == == == ==
#1
  iF BillingType = 'outpatient' & & REQUESTED BY NULL Revenue for -> DepartmentId (Parent of ServiceDepartmentId)
#2
  IF BillingType = 'outpatient' & & REQUESTED BY NOT NULL Revenue for -> BilDeptIdByRequestedBy inpatient 
 
inpatient CASES 
== == == == == == == == == == == == == ==
#3
  If BillingType = 'inpatient' & & RequestedBy is Not Null then Revenue for -> BilDeptIdByRequestedBy
#4
  If BillingType = 'inpatient' & & RequestedBy is NULL Revenue for -> AdtDocDepartmentId

[SP_Report_BIL_DepartmentRevenue] '2019-01-14','2019-01-22'
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BIL_DepartmentRevenue]
  @FromDate DATETIME = NULL,
  @ToDate DATETIME = NULL
AS
/*
Change History
—------------------------------------------------------—
S.No.    UpdatedBy/Date          Remarks
—------------------------------------------------------—
1.    NageshBB-Ajay/23 Jan 2019           created sp
—------------------------------------------------------—
*/
BEGIN
SELECT 
reportData.DepartmentId,
d.DepartmentName,
sd.ServiceDepartmentId,
sd.ServiceDepartmentName,   
reportData.ItemName,
SUM(ISNULL(reportData.SubTotal, 0)) 'SubTotal',
SUM(ISNULL(reportData.DiscountAmount, 0)) AS 'Discount',
SUM(ISNULL(reportData.ReturnAmount, 0)) AS 'Refund',
SUM(ISNULL(reportData.TotalAmount, 0) - ISNULL(reportData.ReturnAmount, 0)) AS 'NetTotal'
FROM 
	(SELECT
		(CASE
			WHEN 
				f.BillingType='outpatient' AND bi.RequestedBy IS NULL
			THEN d.DepartmentId
			WHEN 
				(f.BillingType='outpatient' OR f.BillingType='inpatient') AND bi.RequestedBy IS NOT NULL
			THEN (SELECT DepartmentId FROM EMP_Employee WHERE EmployeeId = bi.RequestedBy)
			WHEN 
				f.BillingType='inpatient' AND bi.RequestedBy IS NULL 
			THEN (SELECT ee.DepartmentId  FROM ADT_PatientAdmission ad
					JOIN EMP_Employee ee ON ad.AdmittingDoctorId = ee.EmployeeId
					WHERE PatientVisitId = bi.PatientVisitId AND PatientId = bi.PatientId)
		END) AS DepartmentId,
	f.*
	FROM dbo.FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate) f
	JOIN BIL_TXN_BillingTransactionItems bi ON f.BillingTransactionItemId = bi.BillingTransactionItemId
	JOIN BIL_MST_ServiceDepartment sd ON sd.ServiceDepartmentId = f.ServiceDepartmentId
	JOIN MST_Department d  ON d.DepartmentId = sd.DepartmentId) AS reportData
JOIN BIL_MST_ServiceDepartment sd ON reportData.ServiceDepartmentId=sd.ServiceDepartmentId
JOIN MST_Department d ON reportData.DepartmentId=d.DepartmentId
WHERE reportData.BillStatus != 'cancelled' 
      AND reportData.BillStatus != 'provisional'
      AND (reportData.PaymentMode != 'credit' OR reportData.CreditDate IS NOT NULL)
    GROUP BY 
    reportData.DepartmentId,
    d.DepartmentName,
    sd.ServiceDepartmentId,
    sd.ServiceDepartmentName,  
    reportData.ItemName

  ORDER BY 2
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DepartmentSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 SP_Report_BIL_DepartmentSummary 
CREATE PROCEDURE [dbo].[SP_Report_BIL_DepartmentSummary] -- SP_Report_BIL_DepartmentSummary '2020-12-07','2020-12-07'
  @FromDate DATETIME = NULL,
  @ToDate DATETIME = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.	UpdatedBy/Date			Remarks
--------------------------------------------------------
1		Ramavtar/11Sept'18      Initial Draft
2		Ramavtar/30Nov'18		added summary and filtered report data for provisional and cancel
3       Sud/13Mar'19            Changed to function FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional 
                                  from: FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary
4.		Dinesh/ 28th May'19		Added Credit Received amount in summary as previously it was not cleared and taking from previous dates
5.      Dinesh /7thDec'2020     Handled Settled Discount Amount 
--------------------------------------------------------
*/
BEGIN
	table1: report data
	 SELECT
	    [dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary] (ServiceDepartmentName,ItemName) 'ServiceDepartment',
		fnItems.ServiceDepartmentName 'ServiceDepartment',
		SUM(ISNULL(fnItems.Quantity, 0)) 'Quantity',
		SUM(ISNULL(fnItems.SubTotal, 0)) 'SubTotal',
		SUM(ISNULL(fnItems.DiscountAmount, 0)) 'DiscountAmount',
		SUM(ISNULL(fnItems.TotalAmount, 0)) 'TotalAmount',
		SUM(ISNULL(fnItems.ReturnTotalAmount, 0)) 'ReturnAmount',
	    SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnTotalAmount, 0)) AS 'NetSales',
	    SUM(ISNULL(CreditAmount, 0)) AS 'CreditAmount',
		SUM(ISNULL(CreditReceived, 0)) AS 'CreditReceivedAmount'

	FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate)  fnItems

	GROUP BY  
	  [dbo].[FN_BIL_GetSrvDeptReportingName_DepartmentSummary] (ServiceDepartmentName,ItemName) 
	ORDER BY 1
	SELECT
		fnItems.ServiceDepartmentName 'ServiceDepartment',
		SUM(ISNULL(fnItems.Quantity, 0)) 'Quantity',
		SUM(ISNULL(fnItems.SubTotal, 0)) 'SubTotal',
		SUM(ISNULL(fnItems.DiscountAmount, 0)) 'DiscountAmount',
		SUM(ISNULL(fnItems.TotalAmount, 0)) 'TotalAmount',
		SUM(ISNULL(fnItems.ReturnAmount, 0)) 'ReturnAmount',
		SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnAmount, 0)) 'NetSales'
	FROM (SELECT
		*
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary(@FromDate, @ToDate)
	WHERE BillStatus != 'cancelled' AND BillStatus != 'provisional') fnItems
	GROUP BY fnItems.ServiceDepartmentName
	ORDER BY 1
	table2: provisional, cancel, credit amounts for summary
	SELECT 
		SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
		SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
		SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount',
		(SELECT SUM(ISNULL(CreditReceived, 0)) FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate,@ToDate))  AS 'CreditReceivedAmount',
		(SELECT SUM(ISNULL(AdvanceReceived,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceReceived',
		(SELECT SUM(ISNULL(AdvanceSettled,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceSettled',
		(SELECT SUM(ISNULL(SettledDiscountAmount,0)) FROM [FN_BIL_GetSettledAmountBetnDateRange](@FromDate,@ToDate)) 'SettledDiscountAmount'
		--dinesh : settlement Discount is handled over here 
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DepartmentSummary(@FromDate, @ToDate)
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DepartmentSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[SP_Report_BIL_DepartmentSummaryReport]
@FromDate Date=null ,
@ToDate Date=null,
@billingType varchar(20)='all' -- available values: all, insurance, normal
AS
/*
FileName: [SP_Report_BIL_DepartmentSummerrReport]
CreatedBy/date: Pratik:14Nov'21

Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date				Remarks
-------------------------------------------------------------------------------
1.      Pratik:14Nov'21            inital Draft

-----------------------------------------------------------------------------
*/
BEGIN

-Set @IsInsurance flag from input billing type. Boolean comparison is faster than string comparison.--
Declare @IsInsurance BIT;
 IF(LOWER(@billingType)='insurance')
BEGIN
 SET @IsInsurance = 1;
END
ELSE IF(LOWER(@billingType)='normal')
BEGIN
 SET @IsInsurance = 0;
END
ELSE IF(LOWER(@billingType)='all')
BEGIN
 SET @IsInsurance = NULL;
END

-start of:sales information----
Select 
	 ServDeptName,
	SUM(ISNULL(CashSales,0)) CashSales, 
	SUM(ISNULL(CashDiscount,0)) CashDiscount,
	SUM(ISNULL(CreditSales, 0)) CreditSales,
	SUM(ISNULL(CreditDiscount,0)) CreditDiscount,
	SUM(ISNULL(GrossSales,0)) GrossSales,
	SUM(ISNULL(TotalDiscount, 0)) TotalDiscount,
	SUM(ISNULL(ReturnCashSales, 0)) ReturnCashSales,
	SUM(ISNULL(ReturnCashDiscount,0)) ReturnCashDiscount,
	SUM(ISNULL(ReturnCreditSales,0)) ReturnCreditSales,
	SUM(ISNULL(ReturnCreditDiscount,0)) ReturnCreditDiscount,
	SUM(ISNULL(TotalSalesReturn,0)) TotalSalesReturn,
	SUM(ISNULL(TotalReturnDiscount,0)) TotalReturnDiscount,
	SUM(ISNULL(NetSales,0)) NetSales,
	SUM(ISNULL(SaleQuantity,0)) 'TotalSaleQuantity',
	SUM(ISNULL(ReturnQuantity,0)) 'TotalReturnQuantity',
    SUM(ISNULL(SaleQuantity,0)-ISNULL(ReturnQuantity,0)) 'NetQuantity'


	from 

	(
	-Sales-----
	SELECT Convert(Date,txn.CreatedOn) 'BillingDate',
	srv.ServiceDepartmentName AS ServDeptName,
	CASE WHEN txn.PaymentMode !='credit' THEN  itm.SubTotal ELSE 0 END AS CashSales, 
	CASE WHEN txn.PaymentMode !='credit' THEN  itm.DiscountAmount ELSE 0 END AS CashDiscount, 
	CASE WHEN txn.PaymentMode ='credit' THEN  itm.SubTotal ELSE 0 END AS CreditSales, 
	CASE WHEN txn.PaymentMode ='credit' THEN  itm.DiscountAmount ELSE 0 END AS CreditDiscount, 
	itm.SubTotal AS GrossSales,
	itm.DiscountAmount AS TotalDiscount,
	0 AS ReturnCashSales, 
	0 AS ReturnCashDiscount,
	0 AS ReturnCreditSales, 
	0 AS ReturnCreditDiscount, 
	0 AS TotalSalesReturn, 
	0 AS TotalReturnDiscount,
	-Net Sales = Gross Sales - Total Discount - (Total Sales Return - Total Return Discount)
	here return is zero so we're calculating only sales part --
	itm.SubTotal - itm.DiscountAmount AS 'NetSales',
	itm.Quantity AS SaleQuantity,
	0 AS ReturnQuantity

	from BIL_TXN_BillingTransaction txn
	  INNER JOIN BIL_TXN_BillingTransactionItems itm
		  ON txn.BillingTransactionId = itm.BillingTransactionId 
	 INNER JOIN BIL_MST_ServiceDepartment srv
	   ON itm.ServiceDepartmentId=srv.ServiceDepartmentId

	WHERE ISNULL(txn.IsInsuranceBilling,0)=@IsInsurance
	  Where (ISNULL(@IsInsurance, ISNULL(txn.IsInsuranceBilling, 0)) = ISNULL(txn.IsInsuranceBilling, 0))

	UNION ALL
	-Sales Return-----
	SELECT Convert(Date,ret.CreatedOn) 'ReturnDate',
	srv.ServiceDepartmentName AS ServDeptName,
	0 AS CashSales, 0 AS CashDiscount,
	0 AS CreditSales,0 AS CreditDiscount,
	0 AS GrossSales,
	0 AS TotalDiscount,
	CASE WHEN ret.PaymentMode != 'credit' THEN  retItm.RetSubTotal ELSE 0 END AS ReturnCashSales, 
	CASE WHEN ret.PaymentMode != 'credit' THEN  retItm.RetDiscountAmount ELSE 0 END AS ReturnCashDiscount, 
	CASE WHEN ret.PaymentMode = 'credit' THEN  retItm.RetSubTotal ELSE 0 END AS ReturnCreditSales, 
	CASE WHEN ret.PaymentMode = 'credit' THEN  retItm.RetDiscountAmount ELSE 0 END AS ReturnCreditDiscount, 
	retItm.RetSubTotal as TotalSalesReturn,
	retItm.RetDiscountAmount AS TotalReturnDiscount,
	-Net Sales = Gross Sales - Total Discount - (Total Sales Return - Total Return Discount)
	here return is zero so we're calculating only sales part --
	- (retItm.RetSubTotal - retItm.RetDiscountAmount) AS 'NetSales',
	 0 AS SaleQuantity,
	 retitm.RetQuantity 'ReturnQuantity'

	from BIL_TXN_InvoiceReturn ret
	  INNER JOIN BIL_TXN_InvoiceReturnItems retItm
		  ON ret.BillReturnId = retItm.BillReturnId 
	 INNER JOIN BIL_MST_ServiceDepartment srv
	   ON retItm.ServiceDepartmentId=srv.ServiceDepartmentId

	WHERE ISNULL(ret.IsInsuranceBilling,0)=@IsInsurance
	  Where (ISNULL(@IsInsurance, ISNULL(ret.IsInsuranceBilling, 0)) = ISNULL(ret.IsInsuranceBilling, 0))
	) A

	Where A.BillingDate Between @FromDate AND @ToDate
	Group by ServDeptName
	Order by ServDeptName
	-end of:sales information----

	----Table:2--- Get Deposits Information Between Given Date Range--
	Select Sum(Isnull(AdvanceReceived,0)) 'Tot_DepReceived',
	Sum(Isnull(AdvanceReturned,0)) 'Tot_DepReturned',
	Sum(Isnull(AdvanceSettled,0)) 'Tot_DepositDeduct'
	From FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate) 

	------Table:3--- Get Settellment Information Between Given Date Range--
	Select Sum(Isnull(PayableAmount,0)) 'CollectionFromRecivables',Sum(Isnull(DiscountAmount,0))'CashSettlementDiscount'
	From BIL_TXN_Settlements 
	where CreatedOn between  @FromDate and @ToDate
	group by  CONVERT(date, CreatedOn)

End


GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DialysisPatientDetail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BIL_DialysisPatientDetail]  		
	@FromDate datetime=null,
	@ToDate datetime=null		
AS
/*
FileName: [SP_Report_BIL_PAT_NeighbourhoodCardDetail]
CreatedBy/date: Rusha/05-31-2019
Description: T oget details report of dialysis patient
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/06-03-2019					   get details report of dialysis patient
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			SELECT CONVERT(date,pat.CreatedOn) AS [Date],pat.DialysisCode, pat.PatientCode AS HospitalNo, 
			CONCAT_WS(' ',pat.FirstName, pat.MiddleName,pat.LastName) AS PatientName,
			pat.age+ '/' + substring(pat.Gender, 1, 1) as 'Gender', pat.Age, CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS RequestedBy
			FROM PAT_Patient AS pat	
			join EMP_Employee as emp on emp.EmployeeId = pat.CreatedBy		
			WHERE pat.DialysisCode is not null AND CONVERT(date, pat.CreatedOn) BETWEEN ISNULL

(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
		END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DischargeBreakup]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DischargeBreakup] 
@PatientVisitId int=null 
,@PatientId INT
AS
/*
FileName: [SP_Report_BIL_DischargeBreakup]
CreatedBy/date: Nagesh/2018-07-21
Description: Get billing details for discharge bill breakup for patient by visit id or patientId
Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1       Nagesh/2018-07-21          Created need finalize for some improvements later
2		nagesh/2018/08/20			updated as per dinesh sir guidance and hams requirement
3		Salakha/2019/09/09			updated to exclude cancelled billig items
-----------------------------------------------------------------------------
*/

BEGIN
BEGIN 
If(@PatientId IS NOT NULL)
BEGIN
Declare @FromDate DateTime, @ToDate DateTime
SELECT  @FromDate=AdmissionDate, @ToDate=DischargeDate
FROM ADT_PatientAdmission
WHERE PatientVisitId=@PatientVisitId

;With BilDischargeCTE as
  (
 select bti.BillingTransactionItemId,dept.DepartmentName, 
bti.ServiceDepartmentName,
bti.PaidDate as billDate, 
bti.ItemName as [description],
bti.Quantity as qty,
bti.subtotal as amount,
bti.DiscountAmount as discount,
bti.TaxableAmount as subTotal,
bti.Tax as vat
,bti.TotalAmount as total
 from BIL_TXN_BillingTransactionItems bti
 join BIL_MST_ServiceDepartment sdept
 on sdept.ServiceDepartmentId=bti.ServiceDepartmentId
 join MST_Department dept
 on dept.DepartmentId=sdept.DepartmentId
If user misses to Select RequestedByDr. in Billing Page, then PatiengVisitId Comes as Null,
in that case we've to take from CreatedOn Field.---
 where PatientId=@PatientId and  ( bti.PatientVisitId=@PatientVisitId OR  bti.CreatedOn Between @FromDate and @ToDate ) and bti.BillStatus !='cancel' and bti.BillStatus !='adtCancel'     
) select 
Case 
WHEN [DepartmentName]='ADMINISTRATION' and ServiceDepartmentName !='CONSUMEABLES' THEN 'ADMINISTRATIVE'
when ServiceDepartmentName='CONSUMEABLES' then 'CONSUMEABLES'
WHEN [DepartmentName]='OT' and [DepartmentName]!='' THEN 'OT'
when [Description]='BED CHARGES' then 'BED'
when [Description]='INDOOR-DOCTOR''S VISIT FEE (PER DAY)' then 'DOCTOR AND NURSING CARE'
when [DepartmentName]='MEDICINE' then 'MEDICINE'
WHEN [DepartmentName]='SURGERY' then 'SURGERY'
ELSE DepartmentName
END
AS departmentName,
billDate,[description],qty,amount,discount,subTotal,vat,total 
from BilDischargeCTE 
END
END  
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DoctorDeptItemsSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_Report_BIL_DoctorDeptItemsSummary] @FromDate datetime = NULL,
@ToDate datetime = NULL,
@DoctorId int = NULL,
@SrvDeptName varchar(max) = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date          Remarks
--------------------------------------------------------
1    Ramavtar/04Sept'18    		initail draft
2	 Ramavtar/30Nov'18			summary added 
3	 Ramavtar/17Dec'18		 change in where condition (checking for credit records)
4.	 Ramavtar/18Dec'18			getting data for all service dept
5.   Sud/21Feb'19             using new function to get doc-dept-items.
6.   sud:13Mar'19            Join with FN_BIL_GetSrvDeptReportingName_DoctorSummary to get actual service department name, 
                             since it's now removed from  FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional
7.   sud:10Aug'20            InvoiceNumber column added in Return data, Order by Date ASC
--------------------------------------------------------
*/
BEGIN
	IF(@SrvDeptName IS NOT NULL)
		BEGIN
			
			SELECT
			    BillingDate 'Date',
				fnItems.InvoiceNumber,
			    ISNULL(fnItems.ProviderName, 'NoDoctor') AS 'DoctorName',
			    pat.PatientCode,
			    pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName 'PatientName',
			     fnItems.ServiceDepartmentName,   --sud:13Mar'19--used below line 
			   [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (fnItems.ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
			    fnItems.ItemName,
			    fnItems.Price, --fnItems.Price,
			    ISNULL(fnItems.Quantity, 0) - ISNULL(fnItems.ReturnQuantity, 0) Quantity,
			    fnItems.SubTotal,
			    fnItems.DiscountAmount,
			    fnItems.TotalAmount,
			    fnItems.ReturnTotalAmount 'ReturnAmount',
			    fnItems.TotalAmount - fnItems.ReturnTotalAmount 'NetAmount'
			FROM (SELECT
			    *
			FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate)) fnItems
			JOIN PAT_Patient pat ON fnItems.PatientId = pat.PatientId
			WHERE 
			  
			   fnItems.ServiceDepartmentName = @SrvDeptName   --sud:13Mar'19--used below line 
               [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (fnItems.ServiceDepartmentName,ItemName) = @SrvDeptName
				AND ISNULL(fnItems.ProviderId, 0) = @DoctorId
				and fnItems.BillingType !='CreditReceived'
			ORDER BY 1 


			-Table 2: returning provisional amount---
			SELECT 
				SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
				SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
				SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount'
			FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary(@FromDate,@ToDate)
			WHERE ServiceDepartmentName = @SrvDeptName
				AND ISNULL(ProviderId,0) = @DoctorId
		END

		
	ELSE IF(@SrvDeptName IS NULL)
		BEGIN
			
			
			SELECT
			    BillingDate 'Date',
				fnItems.InvoiceNumber,
			    ISNULL(fnItems.ProviderName, 'NoDoctor') AS 'DoctorName',
			    pat.PatientCode,
			    pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName 'PatientName',
			      fnItems.ServiceDepartmentName,   --sud:13Mar'19--used below line 
			   [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (fnItems.ServiceDepartmentName,ItemName) AS 'ServiceDepartmentName',
			    fnItems.ItemName,
			    fnItems.Price, --fnItems.Price,
			    ISNULL(fnItems.Quantity, 0) - ISNULL(fnItems.ReturnQuantity, 0) Quantity,
			    fnItems.SubTotal,
			    fnItems.DiscountAmount,
			    fnItems.TotalAmount,
			    fnItems.ReturnTotalAmount 'ReturnAmount',
			    fnItems.TotalAmount - fnItems.ReturnTotalAmount 'NetAmount'
			FROM (SELECT
			    *
			FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate)) fnItems
			JOIN PAT_Patient pat ON fnItems.PatientId = pat.PatientId
			WHERE 
			  fnItems.ServiceDepartmentName = @SrvDeptName  AND  --- no need to compare srvDepartment when it's null..
				 ISNULL(fnItems.ProviderId, 0) = @DoctorId
				and fnItems.BillingType !='CreditReceived'
			ORDER BY 1 


			-Table 2: returning provisional amount---
			SELECT 
				SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
				SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
				SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount'
			FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary(@FromDate,@ToDate)
			WHERE ISNULL(ProviderId,0) = @DoctorId			
		END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DoctorDeptSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_Report_BIL_DoctorDeptSummary]	--SP_Report_BIL_DoctorDeptSummary '2018-07-01', '2018-11-22'
  @FromDate DATETIME = NULL,
  @ToDate DATETIME = NULL,
  @DoctorId INT = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date          Remarks
--------------------------------------------------------
1    Sud/02Sept'18           Initial Draft
2	 Ramavtar/30Nov'18		 summary added 
3	 Ramavtar/17Dec'18		 change in where condition (checking for credit records)
4    sud: 21Feb'19           Updated as per new function
5    sud:13Mar'19            Join with FN_BIL_GetSrvDeptReportingName_DoctorSummary to get actual service department name, 
                             since it's now removed from  FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional
--------------------------------------------------------
*/
BEGIN

   - updated by sud: 21Feb'19-- earlier query below is commented--
   SELECT
        ISNULL(Providerid, 0) 'DoctorId',
        CASE WHEN ISNULL(ProviderId, 0) != 0 THEN ProviderName ELSE 'No Doctor' END AS 'DoctorName',

		[dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName) AS 'ServiceDepartment',--sud:13Mar'19
		-ServiceDepartmentName 'ServiceDepartment',

		SUM(ISNULL(Quantity, 0) - ISNULL(ReturnQuantity, 0)) 'Quantity',
        SUM(ISNULL(SubTotal, 0)) 'SubTotal',
        SUM(ISNULL(DiscountAmount, 0)) AS 'DiscountAmount',
        SUM(ISNULL(ReturnTotalAmount, 0)) AS 'ReturnAmount',
		SUM(ISNULL(TotalAmount, 0)) AS 'TotalAmount',
        SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnTotalAmount, 0)) AS 'NetSales',

		 SUM(ISNULL(CreditAmount, 0)) AS 'CreditAmount',
		 SUM(ISNULL(CreditReceived, 0)) AS 'CreditReceivedAmount'

    FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate) fnItems
	 WHERE (ISNULL(@DoctorId, ISNULL(fnItems.ProviderId, 0)) = ISNULL(fnItems.ProviderId, 0))

	    GROUP BY 
		[dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (ServiceDepartmentName,ItemName),
		ProviderId,
		ProviderName	
	ORDER BY 2 

    -Table:2 Get Provisional Amount in above Date Filter---
    SELECT 
		SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
		SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
		SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary(@FromDate, @ToDate)
	WHERE (ISNULL(@DoctorId, ISNULL(ProviderId, 0)) = ISNULL(ProviderId, 0))
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DoctorReferrals]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DoctorReferrals] 
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@ProviderName varchar(max)=null

AS
/*
FileName: SP_Report_BIL_DoctorReferrals
CreatedBy/date: Umed/2017-09-04 (YYYY-MM-DD)
Description: To get the Referral Count of Patient by Doctor wise along with other details
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2017-09-04	                     created the script
2       sud/12Dec'17                         altered output columns 
3       Umed/16April-18                     Alter Script (Added OrderBy Date in Desc)
------------------------------------------------------
*/

BEGIN
  select  VisitDate,
         ISNULL(NULLIF(emp.Salutation,'')+'. ','') + emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+emp.LastName 'ProviderName',
	     Convert(float,SUM(1)) 'TotalReferrals',
	     Convert(float,SUM( 1/Convert(float,TotalReferrals))) 'ReferralCount',
         Convert(float,SUM( bttxit.TotalAmount/Convert(float,TotalReferrals))) 'ReferralAmount'
from BIL_TXN_BillingTransactionItems bttxit,
	      dbo.FN_APPT_GetReferalVisitInformation() vis,
		  EMP_Employee emp
where	
	 bttxit.ServiceDepartmentName='OPD' AND
	 bttxit.RequisitionId = vis.InitialVisitId AND
	 vis.ProviderId=emp.EmployeeId AND
	 VisitDate BETWEEN ISNULL(@FromDate,Convert(date,GETDATE()))  AND ISNULL(@ToDate+1,Convert(date,GETDATE()))
	 AND ISNULL(NULLIF(emp.Salutation,'')+'. ','') + emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+emp.LastName LIKE '%'+ISNULL(@ProviderName,'')+'%'
Group By VisitDate, vis.ProviderId
     ,ISNULL(NULLIF(emp.Salutation,'')+'. ','') + emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+emp.LastName
Order By VisitDate desc
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DoctorReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DoctorReport]	--- [SP_Report_BIL_DoctorReport] '2018-08-08','2018-08-08'
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@ProviderName varchar(max)=null
AS
/*
FileName: [SP_Report_BIL_DoctorReport]
CreatedBy/date: nagesh/2017-05-25
Description: to get count of appointments per Department between given dates.
Remarks:    
Change History
-------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------
1       nagesh/2017-05-25	                     created the script
2       umed / 2017-06-14                        Modify the script i.e format 
                                                 and remove time from paid date  
3.      dinesh/ 2017-08-04						 Modified the script and maintained the Return as well as Cancel Status 
4       Umed/2018-04-17                         Added Order by Date in Desc Order
5.		ramavtar/2018-05-31						correction in where condition 
												(providerName didnt had space in between First & Last name)
6.		ramavtar/2018-08-17						changed the SP,now getting txn values from function 'FN_BIL_GetTxnItemsInfoWithDateSeparation'
------------------------------------------------------------------
*/
BEGIN
    IF (@FromDate IS NOT NULL)
        OR (@ToDate IS NOT NULL)
        OR (@ProviderName IS NOT NULL)
        OR (LEN(@ProviderName) > 0)
    BEGIN
        SELECT
            COALESCE(fnItm.ReturnDate, fnItm.CreditDate, fnItm.PaidDate, fnItm.CancelledDate, fnItm.ProvisionalDate) 'Date',
            ISNULL(fnItm.ProviderName, 'NoDoctor') 'Doctor',
            p.PatientCode 'HospitalNo',
            p.FirstName + ISNULL(p.MiddleName + ' ', '') + p.LastName 'PatientName',
            fnItm.ServiceDepartmentName 'Department',
            fnItm.ItemName 'Item',
            ISNULL(vmItm.Price, 0) 'Rate',
            ISNULL(vmItm.Quantity, 0) 'Quantity',
            fnItm.SubTotal 'SubTotal',
            fnItm.DiscountAmount 'Discount',
            fnItm.TotalAmount 'Total',
            fnItm.ReturnAmount 'ReturnAmount',
            fnItm.CancelledAmount 'CancelTotal',
            ISNULL(fnItm.TotalAmount, 0) - ISNULL(fnItm.CancelledAmount, 0) - ISNULL(fnItm.ReturnAmount, 0) 'NetAmount'
        FROM FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate) fnItm
        JOIN VW_BIL_TxnItemsInfoWithDateSeparation vmItm
            ON fnItm.BillingTransactionItemId = vmItm.BillingTransactionItemId
        JOIN PAT_Patient p
            ON fnItm.PatientId = p.PatientId
        WHERE fnItm.ProviderName LIKE '%' + ISNULL(@ProviderName, '') + '%'
        ORDER BY COALESCE(fnItm.ReturnDate, fnItm.CreditDate, fnItm.PaidDate, fnItm.CancelledDate, fnItm.ProvisionalDate) DESC
    END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DoctorRevenue]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_DoctorRevenue] 
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@ProviderName varchar(70)=null
	AS
/*
 FileName: SP_Report_BIL_DoctorRevenue
 Created: 12Dec'17 <Sudarshan>
 Description: To Get Doctor's Activity and the Revenue generated by them in certain date range
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      12Dec'17               created          
 2      16/04/2018-UmedSuthar     Modified 
                               (Order By Date )     
 -----------------------------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)
	BEGIN
--------------		
	SELECT Convert(date,txnI.BillingDate) 'Date',ProviderName 'Doctor'
	,SUM(CASE WHEN s.ServiceDepartmentName='USG' THEN txnI.TotalAmount ELSE 0 END) AS 'USG'
	,SUM(CASE WHEN s.ServiceDepartmentName='USG' THEN txnI.Quantity ELSE 0 END) AS 'USGCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='Ortho Procedures' THEN txnI.TotalAmount ELSE 0 END) AS 'ORTHOPROCEDURES'
	,SUM(CASE WHEN s.ServiceDepartmentName='Ortho Procedures' THEN txnI.Quantity ELSE 0 END) AS 'ORTHOPROCEDURESCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='CT Scan' THEN txnI.TotalAmount ELSE 0 END) AS 'CT'
	,SUM(CASE WHEN s.ServiceDepartmentName='CT Scan' THEN txnI.Quantity ELSE 0 END) AS 'CTCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='OPD' THEN txnI.TotalAmount ELSE 0 END) AS 'OPD'
	,SUM(CASE WHEN s.ServiceDepartmentName='OPD' THEN txnI.Quantity ELSE 0 END) AS 'OPDCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='General Surgery Charges' THEN txnI.TotalAmount ELSE 0 END) AS 'GSURG'
	,SUM(CASE WHEN s.ServiceDepartmentName='General Surgery Charges' THEN txnI.Quantity ELSE 0 END) AS 'GSURGCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='OBS/GYN Surgery' THEN txnI.TotalAmount ELSE 0 END) AS 'GYNSURG'
	,SUM(CASE WHEN s.ServiceDepartmentName='OBS/GYN Surgery' THEN txnI.Quantity ELSE 0 END) AS 'GYNSURGCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='ENT Operation' THEN txnI.TotalAmount ELSE 0 END) AS 'ENT'
	,SUM(CASE WHEN s.ServiceDepartmentName='ENT Operation' THEN txnI.Quantity ELSE 0 END) AS 'ENTCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='Dental' THEN txnI.TotalAmount ELSE 0 END) AS 'DENTAL'
	,SUM(CASE WHEN s.ServiceDepartmentName='Dental' THEN txnI.Quantity ELSE 0 END) AS 'DENTALCOUNT'
	,SUM(CASE WHEN s.ServiceDepartmentName='OT' THEN txnI.TotalAmount ELSE 0 END) AS 'OT'
	,SUM(CASE WHEN s.ServiceDepartmentName='OT' THEN txnI.Quantity ELSE 0 END) AS 'OTCOUNT'
	FROM [FN_BIL_GetActiveBilTxnItemsOfDoctors]() txnI, BIL_MST_ServiceDepartment s
	WHERE txnI.ProviderName is not null and txnI.ServiceDepartmentId=s.ServiceDepartmentId
		AND txnI.BillingDate between @FromDate and @ToDate+1 -- todate+1 since input comes as: 2017-06-22 12:00:00 AM from DatePicker.
		AND txnI.ProviderName like '%'+ISNULL(@ProviderName,'')+'%'
		-this will exclude all OPDs where there is a refereral to other doctor, since we can't take whole count in it--
		AND 1 = ( CASE WHEN s.ServiceDepartmentName !='OPD' THEN 1 
		          WHEN s.ServiceDepartmentName = 'OPD' AND txni.RequisitionId NOT IN 
		                                             (select distinct InitialVisitId 
													   from FN_APPT_GetReferalVisitInformation()) THEN 1 ELSE 0 END)
	  
	GROUP BY Convert(date,txnI.BillingDate), ProviderName
	ORDER BY DATE desc , ProviderName
-----------
  End--end of IF
End--end of SP
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_DoctorSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author/Date:		Sud/02Sept'18
 Description:		to show doctor summary
 Remarks: 
-[SP_Report_BIL_DoctorSummary] '2020-12-08','2020-12-08'
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BIL_DoctorSummary]
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1.		Sud/02Sept'18			     Initial Draft
2.		Ramavtar/12Nov'18			 sorting by doctorname
3.	    Ramavtar/30Nov'18			 summary added
4.		Ramavtar/17Dec'18			change in where condition (checking for credit records)
5.      Sud/21Feb'19                Changed as per new function <needs revision>
6.      Dinesh/8Dec'20              Handling of SettlementDiscount Amount (Need Revision)
--------------------------------------------------------
*/
BEGIN
  
 SELECT
        ISNULL(Providerid, 0) 'DoctorId',
        CASE WHEN ISNULL(ProviderId, 0) != 0 THEN ProviderName ELSE 'No Doctor' END AS 'DoctorName',
        SUM(ISNULL(SubTotal, 0)) 'SubTotal',
        SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
        SUM(ISNULL(ReturnTotalAmount, 0)) AS 'Refund',
        SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnTotalAmount, 0)) AS 'NetTotal',

		 SUM(ISNULL(CreditAmount, 0)) AS 'CreditAmount',
		 SUM(ISNULL(CreditReceived, 0)) AS 'CreditReceivedAmount'

    FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate)
	    GROUP BY 
		ProviderId,
		ProviderName	
	ORDER BY 2 

    SELECT
        ISNULL(Providerid, 0) 'DoctorId',
        CASE WHEN ISNULL(ProviderId, 0) != 0 THEN ProviderName ELSE 'NoDoctor' END AS 'DoctorName',
        SUM(ISNULL(SubTotal, 0)) 'SubTotal',
        SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
        SUM(ISNULL(ReturnAmount, 0)) AS 'Refund',
        SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnAmount, 0)) AS 'NetTotal'
    FROM FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate)
	WHERE BillStatus != 'cancelled' 
			AND BillStatus != 'provisional'
			--AND (PaymentMode != 'credit' OR CreditDate IS NOT NULL)
    GROUP BY 
		ProviderId,
		ProviderName	
	ORDER BY 2 



	SELECT 
		SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
		SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
		SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount',
		sud:7Feb'18--Added CreditReceivedAmount with below condition--
		SUM(CASE WHEN BillStatus='paid' AND PaymentMode='credit' AND PaidDate is not null and CreditDate is null THEN PaidAmount ELSE 0 END) 'CreditReceivedAmount',
		sud:7Feb'18: Added CreditReturnAmount <Needs Revision>
		SUM(CASE WHEN BillStatus='return' AND PaymentMode='credit' AND PaidDate IS NULL THEN ReturnAmount ELSE 0 END) 'CreditReturnAmount',
		(SELECT SUM(ISNULL(AdvanceReceived,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceReceived',
		(SELECT SUM(ISNULL(AdvanceSettled,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceSettled',
		(SELECT SUM(ISNULL(SettledDiscountAmount,0)) FROM [FN_BIL_GetSettledAmountBetnDateRange](@FromDate,@ToDate)) 'SettledDiscountAmount'
FROM FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate)
FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary(@FromDate, @ToDate)--for testing: sud-29Jan2019--revert to above
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_IncomeSegregation]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BIL_IncomeSegregation]
	@FromDate Date=null ,
	@ToDate Date=null,
	@billingType varchar(20)='all' -- available values: all, insurance, normal
AS
/*
FileName: [SP_Report_BIL_IncomeSegregation]
CreatedBy/date: Sud:5May'21
Description: to get the income head of different department and sales related data
Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date				Remarks
-------------------------------------------------------------------------------
1.      Sud:5May'21                Complete rewrite after new requirement and credit note in place. [JiraId:LPH-900]
2.      Sud:11Aug'21               Adding Quantity Fields and get billingtype as input parameter.
3.      Sud:26Aug'21               Removing Group Logic for ServiceDepartment Name. 
                                   Since it's different for different hospitals and hence creating confusions/issues.
-----------------------------------------------------------------------------
*/
BEGIN

-Set @IsInsurance flag from input billing type. Boolean comparison is faster than string comparison.--
Declare @IsInsurance BIT;
 IF(LOWER(@billingType)='insurance')
BEGIN
 SET @IsInsurance = 1;
END
ELSE IF(LOWER(@billingType)='normal')
BEGIN
 SET @IsInsurance = 0;
END
ELSE IF(LOWER(@billingType)='all')
BEGIN
 SET @IsInsurance = NULL;
END

-start of:sales information----
Select 
	 ServDeptName,
	SUM(ISNULL(CashSales,0)) CashSales, 
	SUM(ISNULL(CashDiscount,0)) CashDiscount,
	SUM(ISNULL(CreditSales, 0)) CreditSales,
	SUM(ISNULL(CreditDiscount,0)) CreditDiscount,
	SUM(ISNULL(GrossSales,0)) GrossSales,
	SUM(ISNULL(TotalDiscount, 0)) TotalDiscount,
	SUM(ISNULL(ReturnCashSales, 0)) ReturnCashSales,
	SUM(ISNULL(ReturnCashDiscount,0)) ReturnCashDiscount,
	SUM(ISNULL(ReturnCreditSales,0)) ReturnCreditSales,
	SUM(ISNULL(ReturnCreditDiscount,0)) ReturnCreditDiscount,
	SUM(ISNULL(TotalSalesReturn,0)) TotalSalesReturn,
	SUM(ISNULL(TotalReturnDiscount,0)) TotalReturnDiscount,
	SUM(ISNULL(NetSales,0)) NetSales,
	SUM(ISNULL(SaleQuantity,0)) 'TotalSaleQuantity',
	SUM(ISNULL(ReturnQuantity,0)) 'TotalReturnQuantity',
    SUM(ISNULL(SaleQuantity,0)-ISNULL(ReturnQuantity,0)) 'NetQuantity'

	from 

	(
	-Sales-----
	SELECT Convert(Date,txn.CreatedOn) 'BillingDate',
	srv.ServiceDepartmentName AS ServDeptName,
	CASE WHEN txn.PaymentMode !='credit' THEN  itm.SubTotal ELSE 0 END AS CashSales, 
	CASE WHEN txn.PaymentMode !='credit' THEN  itm.DiscountAmount ELSE 0 END AS CashDiscount, 
	CASE WHEN txn.PaymentMode ='credit' THEN  itm.SubTotal ELSE 0 END AS CreditSales, 
	CASE WHEN txn.PaymentMode ='credit' THEN  itm.DiscountAmount ELSE 0 END AS CreditDiscount, 
	itm.SubTotal AS GrossSales,
	itm.DiscountAmount AS TotalDiscount,
	0 AS ReturnCashSales, 
	0 AS ReturnCashDiscount,
	0 AS ReturnCreditSales, 
	0 AS ReturnCreditDiscount, 
	0 AS TotalSalesReturn, 
	0 AS TotalReturnDiscount,
	-Net Sales = Gross Sales - Total Discount - (Total Sales Return - Total Return Discount)
	here return is zero so we're calculating only sales part --
	itm.SubTotal - itm.DiscountAmount AS 'NetSales',
	itm.Quantity AS SaleQuantity,
	0 AS ReturnQuantity

	from BIL_TXN_BillingTransaction txn
	  INNER JOIN BIL_TXN_BillingTransactionItems itm
		  ON txn.BillingTransactionId = itm.BillingTransactionId 
	 INNER JOIN BIL_MST_ServiceDepartment srv
	   ON itm.ServiceDepartmentId=srv.ServiceDepartmentId

	WHERE ISNULL(txn.IsInsuranceBilling,0)=@IsInsurance
	  Where (ISNULL(@IsInsurance, ISNULL(txn.IsInsuranceBilling, 0)) = ISNULL(txn.IsInsuranceBilling, 0))

	UNION ALL
	-Sales Return-----
	SELECT Convert(Date,ret.CreatedOn) 'ReturnDate',
	srv.ServiceDepartmentName AS ServDeptName,
	0 AS CashSales, 0 AS CashDiscount,
	0 AS CreditSales,0 AS CreditDiscount,
	0 AS GrossSales,
	0 AS TotalDiscount,
	CASE WHEN ret.PaymentMode != 'credit' THEN  retItm.RetSubTotal ELSE 0 END AS ReturnCashSales, 
	CASE WHEN ret.PaymentMode != 'credit' THEN  retItm.RetDiscountAmount ELSE 0 END AS ReturnCashDiscount, 
	CASE WHEN ret.PaymentMode = 'credit' THEN  retItm.RetSubTotal ELSE 0 END AS ReturnCreditSales, 
	CASE WHEN ret.PaymentMode = 'credit' THEN  retItm.RetDiscountAmount ELSE 0 END AS ReturnCreditDiscount, 
	retItm.RetSubTotal as TotalSalesReturn,
	retItm.RetDiscountAmount AS TotalReturnDiscount,
	-Net Sales = Gross Sales - Total Discount - (Total Sales Return - Total Return Discount)
	here return is zero so we're calculating only sales part --
	- (retItm.RetSubTotal - retItm.RetDiscountAmount) AS 'NetSales',
	 0 AS SaleQuantity,
	 retitm.RetQuantity 'ReturnQuantity'

	from BIL_TXN_InvoiceReturn ret
	  INNER JOIN BIL_TXN_InvoiceReturnItems retItm
		  ON ret.BillReturnId = retItm.BillReturnId 
	 INNER JOIN BIL_MST_ServiceDepartment srv
	   ON retItm.ServiceDepartmentId=srv.ServiceDepartmentId

	WHERE ISNULL(ret.IsInsuranceBilling,0)=@IsInsurance
	  Where (ISNULL(@IsInsurance, ISNULL(ret.IsInsuranceBilling, 0)) = ISNULL(ret.IsInsuranceBilling, 0))
	) A

	Where A.BillingDate Between @FromDate AND @ToDate
	Group by ServDeptName
	Order by ServDeptName
	-end of:sales information----

	-Sud:13Aug--Uncommenting below code has other impacts, pls consult with Sud if needed be.. Thanks--
	----Table:2--- Get Deposits Information Between Given Date Range--
	Select Sum(Isnull(AdvanceReceived,0)) 'Tot_DepReceived',
	Sum(Isnull(AdvanceSettled,0)) 'Tot_DepSettled'
	From FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)

End

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_PAT_NeighbourhoodCardDetail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BIL_PAT_NeighbourhoodCardDetail]  		
	@FromDate datetime=null,
	@ToDate datetime=null		
AS
/*
FileName: [SP_Report_BIL_PAT_NeighbourhoodCardDetail]
CreatedBy/date: Rusha/05-31-2019
Description: To get the Details of Breakage Items From different Ward 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/05-31-2019					   get details of patient for neighbourhood card report
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			SELECT CONVERT(date,ncd.CreatedOn) AS IssuedDate,ncd.PatientId, ncd.PatientCode AS HospitalNo, 
			CONCAT_WS(' ',pat.FirstName, pat.MiddleName,pat.LastName) AS PatientName,
			pat.Gender, pat.DateOfBirth,CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS RequestedBy
			FROM PAT_NeighbourhoodCardDetail AS ncd
			JOIN PAT_Patient AS pat ON pat.PatientId = ncd.PatientId
			JOIN EMP_Employee AS emp ON emp.EmployeeId = ncd.CreatedBy
			WHERE CONVERT(date, ncd.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
		END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_PAT_PackageSalesDetail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BIL_PAT_PackageSalesDetail] 
	@FromDate datetime=null,
	@ToDate datetime=null		
AS
/*
FileName: [SP_Report_BIL_PAT_PackageSalesDetail] '2017-10-09','2019-11-29'	
CreatedBy/date: Sanjit 12-2-2019
Description: To get the Details of Package Sale from Billing
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			SELECT Distinct btx.BillingTransactionId AS BillingTransactionId, CONCAT(btx.InvoiceCode,btx.InvoiceNo) AS InvoiceNo, CONVERT(date,btx.CreatedOn) AS IssuedDate,btx.PatientId,btx.PatientVisitId, pat.PatientCode AS HospitalNo, 
			CONCAT_WS(' ',pat.FirstName, pat.MiddleName,pat.LastName) AS PatientName,
			pat.age+ '/' + substring(pat.Gender, 1, 1) as 'AgeSex',btx.PackageName,btx.TotalAmount As Price
			,ISNULL(emp.FullName,'SELF') AS RequestedBy
			FROM BIL_TXN_BillingTransaction AS btx
			Join BIL_TXN_BillingTransactionItems AS btxItm ON btx.BillingTransactionId = btxItm.BillingTransactionId
			JOIN PAT_Patient AS pat ON pat.PatientId = btx.PatientId
			Left JOIN EMP_Employee AS emp ON emp.EmployeeId = btxItm.RequestedBy
			WHERE btx.PackageId>0 and CONVERT(date, btx.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			ORDER By BillingTransactionId desc
		END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_PatientCreditSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BIL_PatientCreditSummary] 
@FromDate Date=null ,
@ToDate Date=null	
AS
/*
FileName: [dbo].[SP_Report_BIL_PatientCreditSummary] '2018-01-01', '2019-03-05'
CreatedBy/date: Umed/20-07-2017
Description: to get Sum of Total Amount collected of each patient Between Given Dates 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/20-07-2017	                   created the script
2        Umed/25-07-2017                   added lasttxndate and done sum of totalamt and added SN
3.		Ramavtar/05June'18				changed whole script for Credit Summary -- still need review and changes in this report
4.		Dinesh/21st Feb'19					Date filter added includng date, Remarks and Invoice No
5.      Shankar/13th Feb'20                Added subtotal, discount amount and credit organization.
----------------------------------------------------------------------------------------------------
*/
BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN 
    
SELECT
  (CAST(ROW_NUMBER() OVER (ORDER BY pat.PatientCode) AS int)) AS SN,
  txn.CreatedOn,
  txn.PatientId,
  pat.PatientCode,
  pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName 'PatientName',
  txn.InvoiceNo,
  txn.Remarks,
  org.OrganizationName,
  txn.DiscountAmount,
  txn.SubTotal,
  SUM(txn.TotalAmount) 'TotalAmount'
FROM BIL_TXN_BillingTransaction txn
JOIN BIL_MST_Credit_Organization org
  ON txn.OrganizationId = org.OrganizationId
JOIN PAT_Patient pat
  ON txn.PatientId = pat.PatientId
WHERE txn.BillStatus = 'unpaid'
AND ISNULL(txn.ReturnStatus, 0) != 1 and CONVERT(date,txn.CreatedOn) between @FromDate and @ToDate
GROUP BY txn.PatientId,
         pat.PatientCode,
         pat.FirstName,
         pat.LastName,
         pat.MiddleName,
		 txn.InvoiceNo,
		 txn.Remarks,
		 txn.CreatedOn,
		 org.OrganizationName,
		 txn.DiscountAmount,
		 txn.SubTotal
		 
END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_ReferralItemsSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author/Date:		Sud/Pratik/16Oct'19
 Description:		to show referral Item summary, We're taking details of all items of given referrerId in a date range.
 Remarks:        
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BIL_ReferralItemsSummary] 
@FromDate datetime = NULL,
@ToDate datetime = NULL,
@ReferrerId int = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date          Remarks
--------------------------------------------------------
1    Sud/Pratik/13Oct'19    		initail draft
--------------------------------------------------------
*/
BEGIN
			SELECT
			    BillingDate 'Date',
			    ISNULL(fnItems.ReferredDoctorName, 'No Doctor') AS 'ReferrerName',
			    pat.PatientCode,
			    pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName 'PatientName',
			   [dbo].[FN_BIL_GetSrvDeptReportingName_DoctorSummary] (fnItems.ServiceDepartmentName, ItemName) AS 'ServiceDepartmentName',
			    fnItems.ItemName,
			    fnItems.Price,
			    ISNULL(fnItems.Quantity, 0) - ISNULL(fnItems.ReturnQuantity, 0) Quantity,
			    fnItems.SubTotal,
			    fnItems.DiscountAmount,
			    fnItems.TotalAmount,
			    fnItems.ReturnTotalAmount 'ReturnAmount',
			    fnItems.TotalAmount - fnItems.ReturnTotalAmount 'NetAmount'
			FROM 
	
			  FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate) fnItems

			JOIN PAT_Patient pat ON fnItems.PatientId = pat.PatientId
			WHERE 
			      ISNULL(fnItems.ReferrerId, 0) = @ReferrerId
				and fnItems.BillingType !='CreditReceived'
			ORDER BY 1 DESC


			-Table 2: returning provisional amount---
			SELECT 
				SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
				SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
				SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount'
			FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary(@FromDate,@ToDate)
			WHERE  ISNULL(ReferrerId,0) = @ReferrerId


END  --End of SP


GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BIL_ReferralSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author/Date:		Sud/Pratik/13Oct'19
 Description:		to show referral summary
 Remarks:         External or internal can be filtered by IsExternal Flag
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BIL_ReferralSummary]     ----EXEC [SP_Report_BIL_ReferralSummary]   '2019-08-01','2019-10-01'
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@IsExternal bit=null
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1.		Sud/Pratik/13Oct'19			     Initial Draft
--------------------------------------------------------
*/
BEGIN
  

SELECT
        ISNULL(ReferrerId, 0) 'ReferrerId',
        CASE WHEN ISNULL(ReferrerId, 0) != 0 THEN ReferredDoctorName ELSE 'No Doctor' END AS 'ReferrerName',
		IsExtReferrer,
		ISNULL(emp.IsExternal,0) AS 'IsExtReferrer',
        SUM(ISNULL(SubTotal, 0)) 'SubTotal',
        SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
        SUM(ISNULL(ReturnTotalAmount, 0)) AS 'Refund',
        SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnTotalAmount, 0)) AS 'NetTotal',

		 SUM(ISNULL(CreditAmount, 0)) AS 'CreditAmount',
		 SUM(ISNULL(CreditReceived, 0)) AS 'CreditReceivedAmount'

    FROM FN_BILL_Get_BillingTxnItemSeggregation_ByBillingType_NoProvisional(@FromDate, @ToDate) itm
	LEFT JOIN EMP_Employee emp
	on itm.ReferrerId = emp.EmployeeId

	WHERE ISNULL(emp.IsExternal,0) = ISNULL(@IsExternal, ISNULL(emp.IsExternal,0))  --Take all records if InputParameter is null.

	GROUP BY 
		ReferrerId,
		ReferredDoctorName,
		ISNULL(emp.IsExternal,0)	
	ORDER BY 2


	SELECT 
		SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
		SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
		SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount',
		sud:7Feb'18--Added CreditReceivedAmount with below condition--
		SUM(CASE WHEN BillStatus='paid' AND PaymentMode='credit' AND PaidDate is not null and CreditDate is null THEN PaidAmount ELSE 0 END) 'CreditReceivedAmount',
		sud:7Feb'18: Added CreditReturnAmount <Needs Revision>
		SUM(CASE WHEN BillStatus='return' AND PaymentMode='credit' AND PaidDate IS NULL THEN ReturnAmount ELSE 0 END) 'CreditReturnAmount',
		(SELECT SUM(ISNULL(AdvanceReceived,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceReceived',
		(SELECT SUM(ISNULL(AdvanceSettled,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceSettled'
FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_DoctorSummary(@FromDate, @ToDate)
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILDSB_DailyRevenueTrend]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_Report_BILDSB_DailyRevenueTrend]
AS
/*
  Need to check the data correctness of this storedProc: sudarshan:9Jul2017
*/
BEGIN
  declare @Today date= Convert(date,getdate()) ,@StartDate datetime = Convert(date,getdate()-6)

  select d.Dates as 'Date', 
  ISNULL(bil.TotalAmount,0) - ISNULL(billCancel.CancelAmount,0) - ISNULL(billRet.ReturnAmount,0)    'Revenue'
  from [FN_COMMON_GetAllDatesBetweenRange] (@StartDate,@Today) d

       LEFT JOIN   
	   (   select convert(date,createdOn) BillDate, sum(isnull(totalAmount,0)) TotalAmount
			from BIL_TXN_BillingTransactionItems
			group by convert(date,createdOn)
			
	  ) bil

	    ON d.Dates = bil.BillDate
		LEFT  JOIN
		( 
		  -Get only those which were cancelled on this day---
		   SELECT CONVERT(DATE,CancelledOn) CancelDate, sum(isnull(totalAmount,0)) CancelAmount
			FROM BIL_TXN_BillingTransactionItems
			WHERE  BillStatus='cancel' 
			 AND CONVERT(DATE,CancelledOn) BETWEEN @StartDate and @Today
			 GROUP BY CONVERT(DATE,CancelledOn) 

		) billCancel

		ON d.Dates=billCancel.CancelDate

		 LEFT  JOIN
		( 
		   select convert(date,ReturnDate)as ReturnDate,Sum(ISNULL(TotalAmount,0)) 'ReturnAmount' 
		   from BIL_TXN_BillingReturn
		   Where convert(date,ReturnDate) BETWEEN @StartDate and @Today
		   Group by convert(date,ReturnDate)

		) billRet
		ON d.Dates=billRet.ReturnDate


    order by d.Dates DESC


End--end of SP

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILDSB_MonthlyBillingTrend]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BILDSB_MonthlyBillingTrend]
AS
/*
  Need to check the data correctness of this storedProc: sudarshan:9Jul2017
*/
BEGIN
dividing by thousand since we're showing 'Amount in Thousands in the dashboards.'
 Select SUBSTRING(mth.MthName,1,8) 'month',
		convert(float,ISNULL(paid.Paid,0))/1000 'Paid',
		convert(float,ISNULL(unpaid.Unpaid,0))/1000 'Unpaid',
		convert(float,ISNULL(Tax.Tax,0))/1000 'Tax'
  from 
 
  output format of date is: 2017-July, 2017-June, etc
	( select convert(varchar(4), Year(Dates)) +'-'+ DATENAME(MONTH,Dates) MthName, YEAR(Dates)*12+MONTH(Dates) seq
	   from [FN_Temp_GetLast7Months] () ) mth

	LEFT OUTER JOIN
	(
		 output format of date is: 2017-July, 2017-June, etc
		select convert(varchar(4), Year(PaidDate)) +'-'+ DATENAME(MONTH,PaidDate) MthName, Sum(TotalAmount) 'Paid' 
		from BIL_TXN_BillingTransactionItems
		where PaidDate is not null
		Group by convert(varchar(4), Year(PaidDate)) +'-'+ DATENAME(MONTH,PaidDate)
	) paid
	  ON mth.MthName = paid.MthName

	LEFT OUTER JOIN
		(
      output format of date is: 2017-July, 2017-June, etc
		   select convert(varchar(4), Year(CreatedOn)) +'-'+ DATENAME(MONTH,CreatedOn) MthName, Sum(TotalAmount) 'Unpaid' 
		   from BIL_TXN_BillingTransactionItems
		   where PaidDate is NULL OR ( convert(date,paiddate) != convert(date,createdon) )
		   Group by convert(varchar(4), Year(CreatedOn)) +'-'+ DATENAME(MONTH,CreatedOn)
		) unpaid

	  ON mth.MthName = unpaid.MthName

	LEFT OUTER JOIN
		(
		 output format of date is: 2017-July, 2017-June, etc
		  select convert(varchar(4), Year(PaidDate)) +'-'+ DATENAME(MONTH,PaidDate) MthName, Sum(Tax) 'Tax' 
		   from BIL_TXN_BillingTransactionItems
		   where PaidDate is not null
		   Group by convert(varchar(4), Year(PaidDate)) +'-'+ DATENAME(MONTH,PaidDate)
		) Tax

	ON mth.MthName = Tax.MthName
Order by mth.seq desc
END


/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_DepartmentSalesDaybook]    Script Date: 5/2/2018 2:24:13 PM ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_BillCancelReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- END: Sanjit: 05th August '20, updated script for IsVerificationEnabled in good receipt------------


Pratik: Start: 2020-07-30: --> Cancel Bill Reports updated

CREATE PROCEDURE [dbo].[SP_Report_BILL_BillCancelReport] --EXEC SP_Report_BILL_BillCancelReport '2020-06-30','2020-07-30'
@FromDate DateTime=null,
@ToDate DateTime=null
AS
/*
FileName: [[SP_Report_BILL_BillCancelReport]]
CreatedBy/date: Umed/20-07-2017
Description: to get Sum of Total Amount of Cancel Bill of each patient Between Given Dates 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/20-07-2017	                   created the script
2       Umed/31-07-2017                    alter the script added cancel remarks and User
3       pratik/2020-07-30                  Added ItemName,ServiceDepartmentName etc col
------------------------------------------------------
*/
BEGIN
    
SELECT  pat.PatientCode AS HospitalNo,
		 pat.ShortName as 'PatientName',
		 bltxnItm.ServiceDepartmentName as 'ServiceDepartmentName',
		 bltxnItm.ItemName as 'ItemName',
		 bltxnItm.Quantity as 'Quantity',
		 ISNULL(bltxnItm.TotalAmount,0) AS TotalAmount,
		 bltxnItm.CreatedOn 'CreatedOn' ,
		 emp.FullName as 'CreatedBy',
		 bltxnItm.CancelledOn 'CancelledOn',
		 empCancel.FullName as 'CancelledBy',
		 bltxnItm.CancelRemarks AS CancelRemarks

FROM BIL_TXN_BillingTransactionItems bltxnItm
INNER JOIN PAT_Patient pat ON pat.PatientId = bltxnItm.PatientId
inner join EMP_Employee emp on emp.EmployeeId = bltxnItm.CreatedBy
inner join EMP_Employee empCancel on empCancel.EmployeeId = bltxnItm.CancelledBy
WHERE  
 CONVERT(date,bltxnItm.CancelledOn) BETWEEN ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())
	  and bltxnItm.BillStatus='cancel'
	  and bltxnItm.CancelledOn is not null
order by bltxnItm.CancelledOn desc
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Bill_BillDenomination]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Bill_BillDenomination]	--- [SP_Report_BIL_DoctorReport] '2018-08-08','2018-08-08'
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@UserId int=null
AS

BEGIN
    IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)

    BEGIN
        SELECT
		u.EmployeeId 'UserId',
		u.FirstName 'FirstName',
		u.MiddleName 'MiddleName',
		u.LastName 'LastName',

		hu.FirstName 'hFirstName',
		hu.MiddleName 'hMiddleName',
		hu.LastName 'hLastName',

		h.HandoverType 'HandoverType',
		h.HandoverUserId 'HandoverUserId',
		h.HandoverAmount 'HandoverAmount',
		h.CreatedOn 'CreatedOn',
		d.ServiceDepartmentName 'DepartmentName'

		from EMP_Employee u
		join BIL_MST_Handover h on u.EmployeeId=h.UserId
		join EMP_Employee hu on hu.EmployeeId=h.HandoverUserId
		join BIL_MST_ServiceDepartment d on u.DepartmentId = d.DepartmentId

        WHERE u.EmployeeId=@UserId AND CONVERT(date,h.CreatedOn) between @FromDate AND @ToDate
		ORDER BY h.CreatedOn DESC
    END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Bill_BillDenominationAllList]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Bill_BillDenominationAllList]	--- SP_Report_Bill_BillDenominationAllList '2020-02-14','2020-02-15'
	@FromDate DateTime=null,
	@ToDate DateTime=null
AS
/*
Change History:
-------------------
S.No.  Date/User             Remarks
----------------------------
1.    Unknown/Unknown       Initial Draft
2.    15Feb'20/Sud          Made basic revision in joins so that it appears in report. Need Complete Re-Write soon. 
*/

BEGIN
    IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)

    BEGIN

	  SELECT
		emp.EmployeeId 'UserId',
		emp.FirstName 'FirstName',
		emp.MiddleName 'MiddleName',
		emp.LastName 'LastName',

		emp2.FirstName 'hFirstName',
		emp2.MiddleName 'hMiddleName',
		emp2.LastName 'hLastName',

		h.HandoverType 'HandoverType',
		h.HandoverUserId 'HandoverUserId',
		h.HandoverAmount 'HandoverAmount',
		h.CreatedOn 'CreatedOn',
		'' as DepartmentName
		d.ServiceDepartmentName 'DepartmentName'

		from EMP_Employee emp
		    join BIL_MST_Handover h on emp.EmployeeId = h.UserId
		    left join EMP_Employee emp2 on emp2.EmployeeId= h.HandoverUserId
		WHERE CONVERT(date,h.CreatedOn) between @FromDate AND @ToDate
		ORDER BY h.CreatedOn DESC

    END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_CounterNUsersCollectionDaily]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BILL_CounterNUsersCollectionDaily]
		@FromDate Datetime=null ,
		@ToDate DateTime=null
AS
/*
FileName: [SP_Report_BILL_CounterCollection]
CreatedBy/date: dinesh/2017-07-09
Description: to get countercollection between given range..
Remarks:
 * Removed usage of FN_BILL_GetCounterNUserCollectionDaily after CashTransactionTable is introduced..
 * we can remove above function if above doesn't have any other dependencies.. 

Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       dinesh/2017-07-09	                   created
2        sudarshan/2017-07-15                 modified to re-use this SP for both Counter and UserCollections
3       sud/29May'18                        updated as per new billing structure
4.      sud/5May'21                         Updated after adding EMPCashTransaction table structure. 
5.      Sud/13Jun'21                        Excluding HandoverGiven amount from deduction.
------------------------------------------------------
*/
BEGIN
	----TABLE1------USER DAILY COLLECTION---------------------
	SELECT CONVERT(Date,TransactionDate) 'BillDate' 
	, cash.EmployeeId, emp.FullName 'EmployeeName',
	SUM(ISNULL(InAmount,0)- ISNULL(OutAmount,0)) 'UserDayCollection'
	FROM TXN_EmpCashTransaction cash INNER JOIN EMP_Employee emp 
	   on cash.EmployeeId=emp.EmployeeId
	Where CONVERT(Date,TransactionDate) BETWEEN @FromDate and @ToDate
	AND TransactionType NOT IN ('HandoverGiven') -- add other txntype here as required.

	Group by CONVERT(Date,TransactionDate), cash.EmployeeId, emp.FullName

	--TABLE2---------COUNTER DAILY COLLECTION---------------------
	SELECT CONVERT(Date,TransactionDate) 'BillDate' 
	, cash.CounterID, cntr.CounterName,
	SUM(ISNULL(InAmount,0)- ISNULL(OutAmount,0)) 'CounterDayCollection'
	FROM TXN_EmpCashTransaction cash INNER JOIN BIL_CFG_Counter cntr 
	   on cash.CounterID=cntr.CounterId
	Where CONVERT(Date,TransactionDate) BETWEEN @FromDate and @ToDate
	AND TransactionType NOT IN ('HandoverGiven') -- add other txntype here as required.
	Group by CONVERT(Date,TransactionDate), cash.CounterID, cntr.CounterName

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_CustomReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BILL_CustomReport] 
 @FromDate date=null,
 @ToDate date=null,
 @ReportName varchar(200)=null
 AS
 /*
FileName: [SP_Report_BILL_CustomReport]
CreatedBy/date: Nagesh/2018-08-27
Description: sp for custom report like 100% on opd 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      Nagesh/2018-08-27	        created the script
2	   Ramavtar/12Nov'18			correcting parameter passed to fn-> FN_BIL_GetSrvDeptReportingName
------------------------------------------------------
*/
 BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
			SELECT count(*) as NoOfPatient from BIL_TXN_BillingTransactionItems bil 
			WHERE (ServiceDepartmentName='OPD' and DiscountPercent=100 AND  ISNULL(ReturnStatus,0) != 1)
			AND CONVERT(date, bil.CreatedOn) Between @FromDate AND @ToDate

			;with T as 
			(
				SELECT  CONVERT(DATE,bil.CreatedOn) AS [Date],
				ItemName,dbo.FN_BIL_GetSrvDeptReportingName(bil.ServiceDepartmentName,ItemName)as ServDepartmentName,Quantity,TotalAmount 
				from BIL_TXN_BillingTransactionItems  bil
				WHERE PatientId in 
				(   SELECT PatientId FROM BIL_TXN_BillingTransactionItems 
					WHERE (ServiceDepartmentName='OPD' and DiscountPercent=100 and ISNULL(ReturnStatus,0) != 1) 
					AND CONVERT(DATE, bil.CreatedOn) Between @FromDate AND @ToDate
				)   
			AND CONVERT(date, bil.CreatedOn) Between @FromDate AND @ToDate
			AND ISNULL(ReturnStatus,0) != 1      
			) 
			SELECT  CASE WHEN  [ItemName]='Vitamin D' OR ItemName='Health Card' THEN ItemName
               ELSE ServDepartmentName END  as Particulars
				,SUM(Quantity) AS TotalNumber, 
				SUM(TotalAmount) AS TotalIncome
				FROM T
				GROUP BY ( CASE WHEN  [ItemName]='Vitamin D' OR ItemName='Health Card' THEN ItemName
               ELSE ServDepartmentName END )
		END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_DailyMISReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BILL_DailyMISReport] --'2018-07-27','2018-07-27'
@FromDate datetime = NULL,
@ToDate datetime = NULL
AS
/*
FileName: SP_Report_BILL_DailyMISReport
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date		Remarks
-----------------------------------------------------
1       Ramavtar/2018-08-30	    created the script
2       Sud/2018-08-30          revised for provisional and billstatus
3		Ajay/2018-12-12			getting data for SummaryView
4		Ajay/2018-12-14			getting data from [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report]
5		Ram/Ajay 17Dec2018		corrected calculation
------------------------------------------------------
*/
BEGIN
  ;
  WITH BilTxnItemsCTE
  AS (SELECT
    bil.BillingTransactionItemId,
    pat.PatientCode AS HospitalNo,
    pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ', '') + pat.LastName AS PatientName,
    bil.ProviderName,
    dept.DepartmentName,
    bil.ServiceDepartmentName,
    CONVERT(varchar(25), @FromDate) + '-to-' + CONVERT(varchar(25), @ToDate) 'billDate',
    ISNULL(bil.PaidDate,bil.CreatedDate) AS billDate,
    bil.ItemName AS [description],
    bil.Price,
    bil.Quantity AS qty,
    bil.SubTotal AS subTotal,
    bil.DiscountAmount AS discount,
    ISNULL(bil.ReturnAmount, 0) AS ReturnAmount,
    bil.TotalAmount AS total,
    bil.BillStatus, --sud:30Aug'18
    bil.ProvisionalAmount AS 'ProvisionalAmount',--sud:30Aug'18 (We'll need this as well)
    ISNULL(bil.BillingType, 'OutPatient')
    AS BillingType
  FROM (SELECT
    *
  FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate)) bil
  JOIN PAT_Patient pat
    ON bil.PatientId = pat.PatientId
  JOIN BIL_MST_ServiceDepartment sdept
    ON sdept.ServiceDepartmentId = bil.ServiceDepartmentId
  JOIN MST_Department dept
    ON dept.DepartmentId = sdept.DepartmentId
  WHERE bil.CreatedDate BETWEEN @FromDate AND @ToDate
  )
  SELECT
    CASE
      WHEN [DepartmentName] = 'ADMINISTRATION' AND
        ServiceDepartmentName != 'CONSUMEABLES' THEN 'ADMINISTRATIVE'
      WHEN ServiceDepartmentName = 'CONSUMEABLES' THEN 'CONSUMEABLES'
      WHEN [DepartmentName] = 'OT' AND
        [DepartmentName] != '' THEN 'OT'
      WHEN [Description] = 'BED CHARGES' THEN 'BED'
      WHEN [Description] = 'INDOOR-DOCTOR''S VISIT FEE (PER DAY)' THEN 'DOCTOR AND NURSING CARE'
      WHEN [DepartmentName] = 'MEDICINE' THEN 'MEDICINE'
      WHEN [DepartmentName] = 'SURGERY' THEN 'SURGERY'
      ELSE DepartmentName
    END AS departmentName,
    HospitalNo 'hospitalNo',
    PatientName 'patientName',
    ProviderName 'providerName',
    BillingType,
    description 'itemName',
    Price 'price',
    qty 'quantity',
    subTotal 'subTotal',
    discount 'discount',
    ReturnAmount 'return',
    ISNULL(total, 0) - ISNULL(ReturnAmount, 0) 'netTotal',
    BillStatus 'billStatus',
    ProvisionalAmount AS 'provisional'
  FROM BilTxnItemsCTE
  ORDER BY departmentName ASC, BillingType DESC, PatientName ASC

--->	OPD
	SELECT
		ISNULL(fn.ProviderId, 0) 'ProviderId',--ProviderId
		ISNULL(fn.ProviderName, 'NoDoctor') 'ProviderName',--ProviderName
		COUNT(
			CASE
				WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PatientId
				WHEN fn.BillStatus != 'return' THEN fn.PatientId
			END) - COUNT(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.PatientId END) 'Count',
		SUM(
			CASE
				WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
				WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
				ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
	FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
	JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
	WHERE fn.ItemName = 'Consultation Charge'
		AND fn.BillStatus != 'provisional'
		AND fn.BillStatus != 'cancelled'
		AND fn.BillStatus != 'credit'
		AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
	GROUP BY fn.ProviderId,
		fn.ProviderName
	ORDER BY 2

--->	Health Card
	SELECT
		fn.ItemName 'ItemName',
		SUM(
			CASE
				WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
				WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
				ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Count',
		SUM(
			CASE
				WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
				WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
				ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
	FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
	JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
	WHERE fn.ItemName LIKE '%Health Card%'
		AND fn.BillStatus != 'provisional'
		AND fn.BillStatus != 'cancelled'
		AND fn.BillStatus != 'credit'
		AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
	GROUP BY fn.ItemName

--->	LAB
	SELECT
		VisitType,
		ai.ServiceDepartmentName,
		SUM([Count]) 'Count',
		SUM([TotalAmount]) 'TotalAmount'
	FROM (
		SELECT
			CASE
				WHEN fn.visitType = 'inpatient' THEN 'IPD'
				WHEN fn.visitType = 'outpatient' THEN 'OPD'
				ELSE fn.VisitType
			END AS VisitType,
			fn.ServiceDepartmentName,
			SUM(CASE
				WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
				WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
				ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Count',
			SUM(CASE
				WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
				WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
				ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
		FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
			INNER JOIN BIL_MST_ServiceDepartment sd ON fn.ServiceDepartmentId = sd.ServiceDepartmentId
			JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
		WHERE sd.IntegrationName = 'LAB'
			AND fn.BillStatus != 'cancelled'
			AND fn.BillStatus != 'provisional'
			AND fn.BillStatus != 'credit'
			AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
		GROUP BY fn.VisitType,
           fn.ServiceDepartmentName
	) ai
	GROUP BY ai.ServiceDepartmentName,
           VisitType
  UNION ALL
  SELECT
    ' ',
    'Total',
    SUM(
		CASE
			WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
			WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
			ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Total Count',
	SUM(
		CASE
			WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
			WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
			ELSE 0
		END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
  FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
	INNER JOIN BIL_MST_ServiceDepartment sd ON fn.ServiceDepartmentId = sd.ServiceDepartmentId
	JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
  WHERE sd.IntegrationName = 'LAB'
	AND fn.BillStatus != 'cancelled'
	AND fn.BillStatus != 'provisional'
	AND fn.BillStatus != 'credit'
	AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
  ORDER BY VisitType

--->	Radiology
	SELECT
		CASE
			WHEN bt.visitType = 'inpatient' THEN 'IPD'
			WHEN bt.visitType = 'outpatient' THEN 'OPD'
			ELSE bt.VisitType
		END AS VisitType,
		bt.ServiceDepartmentName,
		SUM(CASE
			WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
			WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
			ELSE 0
		END) - SUM(CASE WHEN fn.BillStatus = 'return' AND bt.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Count',
		SUM(CASE
			WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
			WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
			ELSE 0
		END) - SUM(CASE WHEN fn.BillStatus = 'return' AND bt.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
	FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
		INNER JOIN BIL_TXN_BillingTransactionItems bt ON fn.BillingTransactionItemId = bt.BillingTransactionItemId
		INNER JOIN BIL_MST_ServiceDepartment sd ON bt.ServiceDepartmentId = sd.ServiceDepartmentId
	WHERE sd.IntegrationName = 'Radiology'
		AND fn.BillStatus != 'cancelled'
		AND fn.BillStatus != 'provisional'
		AND fn.BillStatus != 'credit'
		AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
	GROUP BY bt.VisitType,
		bt.ServiceDepartmentName
  UNION ALL
	SELECT
		' ',
		'Total',
		SUM(CASE
			WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
			WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
			ELSE 0
		END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Total Count',
		SUM(CASE
			WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
			WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
			ELSE 0
		END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
	FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
		INNER JOIN BIL_MST_ServiceDepartment sd ON fn.ServiceDepartmentId = sd.ServiceDepartmentId
		JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
	WHERE sd.IntegrationName = 'Radiology'
		AND fn.BillStatus != 'cancelled'
		AND fn.BillStatus != 'provisional'
		AND fn.BillStatus != 'credit'
		AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
	ORDER BY VisitType

--->	Health Clinic
	SELECT
		x.ItemName,
		SUM(Quantity) 'Unit',
		SUM(TotalAmount) 'TotalAmount'
	FROM (
		SELECT
			CASE
			  WHEN fn.ItemName LIKE '%ECHO%' THEN 'ECHO'
			  WHEN fn.ItemName LIKE '%TMT%' THEN 'TMT'
			  WHEN fn.ItemName LIKE '%ECG%' THEN 'ECG'
			  WHEN fn.ItemName LIKE '%Holter%' THEN 'Holter'
			  ELSE 'Unknown'
			END AS ItemName,
			SUM(CASE
			  WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
			  WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
			  ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Quantity',
			SUM(CASE
			  WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
			  WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
			  ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
		FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
		JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
		WHERE fn.BillStatus != 'cancelled'
			AND fn.BillStatus != 'provisional'
			AND fn.BillStatus != 'credit'
			AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
		GROUP BY fn.ItemName
	) AS x
	WHERE x.ItemName != 'Unknown'
	GROUP BY x.ItemName

--->	OT
	SELECT
		fn.ProviderID,
		fn.ProviderName,
		dept.DepartmentName,
		fn.ItemName,
		SUM(
			CASE 
				WHEN fn.BillStatus = 'return' AND  ((fn.PaymentMode = 'credit' AND fn.CreditDate IS NOT NULL) OR (fn.PaymentMode != 'credit' AND fn.PaidDate IS NOT NULL)) THEN fn.Quantity
				WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
				ELSE 0
			END) - SUM(CASE WHEN fn.BillStatus = 'return' THEN fn.Qty_Temp ELSE 0 END) 'Quantity',
		SUM(CASE WHEN fn.BillStatus = 'provisional' THEN fn.ProvisionalAmount ELSE 0 END) 'Prov_Amount',
		SUM(CASE WHEN fn.BillStatus = 'credit' THEN fn.CreditAmount ELSE 0 END) 'Credit_Amount',
		SUM(
			CASE
				WHEN fn.BillStatus = 'return' AND ((fn.PaymentMode = 'credit' AND fn.CreditDate IS NOT NULL) OR (fn.PaymentMode != 'credit' AND fn.PaidDate IS NOT NULL)) THEN fn.Total_Temp
				WHEN fn.BillStatus != 'return' THEN fn.Total_Temp
				ELSE 0 
			END) - SUM(CASE WHEN fn.BillStatus = 'return' THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
	FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
		INNER JOIN EMP_Employee emp ON fn.ProviderId = emp.EmployeeId
		INNER JOIN MST_Department dept ON emp.DepartmentId = dept.DepartmentId
	WHERE fn.ItemName LIKE '%operation%'
		AND fn.BillStatus != 'cancelled'
		AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL OR fn.BillStatus = 'provisional')
	GROUP BY fn.ProviderId,
		fn.ProviderName,
		dept.DepartmentName,
		fn.ItemName,
		fn.ServiceDepartmentName

--->	Labor
		SELECT
			x.ItemName,
			SUM(Quantity) 'Unit',
			SUM(TotalAmount) 'TotalAmount'
		FROM (
			SELECT
				CASE
					WHEN fn.ItemName LIKE '%labor%' THEN 'LABOR Normal'
					WHEN fn.ItemName LIKE '%LSCS%' THEN 'LABOR LSCS'
					ELSE 'Unknown'
				END AS ItemName,
				SUM(
					CASE
						WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
						WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
						ELSE 0
					END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Quantity',
				SUM(
					CASE
						WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
						WHEN fn.BillStatus != 'return' THEN fn.PaidAmount ELSE 0
					END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
			FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
			JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
			WHERE fn.BillStatus != 'cancelled'
				AND fn.BillStatus != 'provisional'
				AND fn.BillStatus != 'credit'
				AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
			GROUP BY fn.ItemName
		) AS x
		WHERE x.ItemName != 'Unknown'
		GROUP BY x.ItemName

--->	IPD
	SELECT
	    'No. of Admssions' AS 'PatientType',
		COUNT(patientAdmissionId) 'Count'
	FROM ADT_PatientAdmission
	WHERE CONVERT(date, AdmissionDate) BETWEEN @FromDate AND @ToDate
		
	UNION ALL
	SELECT
		'No. of Discharges',
		COUNT(patientAdmissionId)
	FROM ADT_PatientAdmission
	WHERE CONVERT(date, DischargeDate) BETWEEN @FromDate AND @ToDate
		AND DischargeDate IS NOT NULL

	UNION ALL
	SELECT
	    'Total No. of Admitted Patient' AS 'PatientType',
		COUNT(patientAdmissionId) 'Count'
	FROM ADT_PatientAdmission
	WHERE  Convert(date,DischargeDate) is null and AdmissionStatus = 'admitted'

--->	rest other servicedepartments count and income list
	SELECT
		x.ItemName,
		SUM(Quantity) 'Unit',
		SUM(TotalAmount) 'TotalAmount'
	FROM (
		SELECT
			CASE
				WHEN fn.ItemName LIKE '%ECHO%' THEN 'ECHO'
				WHEN fn.ItemName LIKE '%TMT%' THEN 'TMT'
				WHEN fn.ItemName LIKE '%ECG%' THEN 'ECG'
				WHEN fn.ItemName LIKE '%Holter%' THEN 'Holter'
				WHEN fn.ItemName LIKE '%CONSULTATION%' THEN 'OPD'
				WHEN fn.ItemName LIKE '%Health Card%' THEN 'Health Card'
				WHEN sd.IntegrationName LIKE 'LAB' THEN 'LABS'
				WHEN sd.IntegrationName LIKE 'RADIOLOGY' THEN 'RADIOLOGY'
				WHEN fn.ItemName LIKE '%Operation%' THEN 'OPERATION CHARGES'
				ELSE 'Hospital Other Charges'
			END AS ItemName,
			SUM(
				CASE
					WHEN fn.BillStatus = 'return' AND  fn.PaidDate IS NOT NULL THEN fn.Qty_Temp
					WHEN fn.BillStatus != 'return' THEN fn.Qty_Temp
					ELSE 0
				END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.Qty_Temp ELSE 0 END) 'Quantity',
			SUM(
				CASE
					WHEN fn.BillStatus = 'return' AND fn.PaidDate IS NOT NULL THEN fn.PaidAmount
					WHEN fn.BillStatus != 'return' THEN fn.PaidAmount
					ELSE 0
				END) - SUM(CASE WHEN fn.BillStatus = 'return' AND vw.PaidDate IS NOT NULL THEN fn.ReturnAmount ELSE 0 END) 'TotalAmount'
		FROM [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report](@FromDate, @ToDate) fn
		INNER JOIN BIL_MST_ServiceDepartment sd ON sd.ServiceDepartmentId = fn.ServiceDepartmentId
		JOIN [VW_BIL_TxnItemsInfoWithDateSeparation_MIS_Report] vw ON fn.BillingTransactionItemId = vw.BillingTransactionItemId
		WHERE fn.BillStatus != 'cancelled'
			AND fn.BillStatus != 'provisional'
			AND fn.BillStatus != 'credit'
			AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL)
		GROUP BY fn.ItemName,
			sd.IntegrationName
	) AS x
	GROUP BY x.ItemName
	UNION ALL
  ---To deduct return amount from the previous days 
	SELECT
		'Earlier Return Amount' 'Item Name',
		' ' AS ' ',
		-SUM(sum.TotalAmount) 'Total Amount'
	FROM (SELECT
		DISTINCT
		(ret.BillReturnId),
		ret.TotalAmount
		FROM (SELECT
		br.CreatedOn 'Ret Date',
		bt.ItemName,
		bt.Quantity 'Unit',
		bt.PaidDate 'PaidDate',
		br.BillReturnId 'BillReturnId',
		br.TotalAmount 'TotalAmount'
	FROM BIL_TXN_InvoiceReturn br
	INNER JOIN BIL_TXN_BillingTransactionItems bt ON br.BillingTransactionId = bt.BillingTransactionId
	WHERE CONVERT(date, br.createdon) BETWEEN @FromDate AND @ToDate
		AND 1 = 2 
		AND CONVERT(date, bt.CreatedOn) != CONVERT(date, br.CreatedOn)) ret) sum
	UNION ALL
	SELECT
		'Advance Received' AS 'ItemName',
		' ',
		ISNULL(SUM(Amount), 0) 'Total Amount'
	FROM BIL_TXN_Deposit
	WHERE CONVERT(date, createdon) BETWEEN @FromDate AND @ToDate
		AND DepositType = 'Deposit'
	UNION ALL
	SELECT
	    'Advance Settled' AS 'ItemName',
		' ',
		ISNULL(-SUM(Amount), 0)
	FROM BIL_TXN_Deposit
	WHERE CONVERT(date, createdon) BETWEEN @FromDate AND @ToDate
		AND DepositType = 'depositdeduct'
	UNION ALL
	SELECT
		'Advance Returned' AS 'ItemName',
		' ',
		-ISNULL(SUM(Amount), 0)
	FROM BIL_TXN_Deposit
	WHERE CONVERT(date, createdon) BETWEEN @FromDate AND @ToDate
		AND DepositType = 'ReturnDeposit'

--->	Pharmacy
	select   'Total' as Type,sum(Quantity) as Quantity,  sum(TotalAmount-ReturnAmount) as 'TotalAmount'
	from ( 
          SELECT  sum(inv.PaidAmount)as TotalAmount, sum(inv.TotalQuantity) as Quantity ,0 as ReturnAmount, sum(inv.DiscountAmount) as DiscountAmount
            FROM [PHRM_TXN_Invoice] inv       
              where  convert(date, inv.CreateOn)   BETWEEN @FromDate and @ToDate 

			  union all
			 
			  select  0 as TotalAmount,sum(invRet.Quantity) as RetQuantity,sum(invRet.TotalAmount ) as ReturnAmount,  sum(-(invRet.DiscountPercentage/100)*invRet.SubTotal ) as DiscountPercentage
			  From[PHRM_TXN_InvoiceReturnItems] invRet
			  
			  where convert(date, invRet.CreatedOn)  BETWEEN @FromDate and @ToDate and invRet.InvoiceId is not null
			  
			  )tabletotal
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_DailyMISReport_25th_December_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 =============================================
 Author:		Ramavtar/30Aug'18
 Description:	daily mis report getting billing items with its department and billingtype info
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BILL_DailyMISReport_25th_December_2018]
   [SP_Report_BILL_DailyMISReport]'2018-12-14','2018-12-14'
@FromDate DATETIME = NULL,
@ToDate DATETIME = NULL
AS
/*
FileName: SP_Report_BILL_DailyMISReport
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date		Remarks
-----------------------------------------------------
1       Ramavtar/2018-08-30	    created the script
2       Sud/2018-08-30          revised for provisional and billstatus
3		Ajay/2018-12-12			getting data for SummaryView
4		Ajay/2018-12-14			getting data from [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report]
------------------------------------------------------
*/
BEGIN

;WITH BilTxnItemsCTE AS
(
SELECT
	bil.BillingTransactionItemId, 
	pat.PatientCode AS HospitalNo,
	pat.FirstName + ' ' + ISNULL(pat.MiddleName + ' ','') + pat.LastName AS PatientName,
	bil.ProviderName,
	dept.DepartmentName,
	bil.ServiceDepartmentName,
	CONVERT(Varchar(25),@FromDate)+'-to-'+CONVERT(Varchar(25),@ToDate) 'billDate',
	ISNULL(bil.PaidDate,bil.CreatedDate) AS billDate,
	bil.ItemName AS [description],
	bil.Price,
	bil.Quantity AS qty,
    bil.SubTotal AS subTotal,
    bil.DiscountAmount AS discount,
	ISNULL(bil.ReturnAmount,0) AS ReturnAmount,
    bil.TotalAmount AS total,
	bil.BillStatus, --sud:30Aug'18
	bil.ProvisionalAmount As 'ProvisionalAmount',--sud:30Aug'18 (We'll need this as well)
	ISNULL(bil.BillingType,'OutPatient')
	 AS BillingType
FROM (Select * from [FN_BIL_GetTxnItemsInfoWithDateSeparation_MIS_Report]  (@FromDate,@ToDate)) bil
JOIN PAT_Patient pat ON bil.PatientId = pat.PatientId
JOIN BIL_MST_ServiceDepartment sdept ON sdept.ServiceDepartmentId = bil.ServiceDepartmentId
JOIN MST_Department dept  ON dept.DepartmentId = sdept.DepartmentId
WHERE bil.CreatedDate BETWEEN @FromDate AND @ToDate
)
SELECT
	CASE 
		WHEN [DepartmentName] = 'ADMINISTRATION' AND ServiceDepartmentName != 'CONSUMEABLES' THEN 'ADMINISTRATIVE' 
		WHEN ServiceDepartmentName = 'CONSUMEABLES' THEN 'CONSUMEABLES' 
		WHEN [DepartmentName] = 'OT' AND [DepartmentName] != '' THEN 'OT' 
		WHEN [Description] = 'BED CHARGES' THEN 'BED' 
		WHEN [Description] = 'INDOOR-DOCTOR''S VISIT FEE (PER DAY)' THEN 'DOCTOR AND NURSING CARE' 
		WHEN [DepartmentName] = 'MEDICINE' THEN 'MEDICINE' 
		WHEN [DepartmentName] = 'SURGERY' THEN 'SURGERY' 
	ELSE DepartmentName END AS departmentName,
	HospitalNo 'hospitalNo',
	PatientName 'patientName',
	ProviderName 'providerName',
	BillingType,
    description 'itemName',
	Price 'price',
    qty 'quantity',
    subTotal 'subTotal',
    discount 'discount',
	ReturnAmount 'return',
    ISNULL(total,0) - ISNULL(ReturnAmount,0) 'netTotal',
	BillStatus 'billStatus',
	ProvisionalAmount as 'provisional'
FROM BilTxnItemsCTE
order by departmentName ASC, BillingType DESC, PatientName ASC

OPD----
select provider,OPDCount and TotalAmount
select ProviderId,em.FirstName + ' '+ ISNULL(em.MiddleName,'') + ' '+ em.LastName as 'ProviderName',
Count(Quantity) 'Count' ,SUM(TotalAmount) 'TotalAmount' from BIL_TXN_BillingTransactionItems bt
join EMP_Employee em on bt.ProviderId = em.EmployeeId
where ItemName like '%Consultation%' and convert(date,bt.PaidDate) between @FromDate and @ToDate and ReturnStatus is null
 group by providerId,em.FirstName + ' '+ ISNULL(em.MiddleName,'') + ' '+ em.LastName

Health Card----
select ItemName as 'ItemName',Count (Quantity) 'Count',SUM(TotalAmount) 'TotalAmount' from 
BIL_TXN_BillingTransactionItems
where ItemName like '%Health Card%' and convert(date,PaidDate) between @FromDate and @ToDate and ReturnStatus is null
group by ItemName

LAB--
select  VisitType ,ai.ServiceDepartmentName,sum(count) 'Count',sum([Total Amount]) 'TotalAmount'from (
select 
case when visitType = 'inpatient' then 'IPD'
when visitType= 'outpatient' then 'OPD'
ELSE VisitType END AS VisitType,
case when bt.ServiceDepartmentName='BIOCHEMISTRY' then 'BIOCHEMISTRY'
when bt.ServiceDepartmentName='HEMATOLOGY' then 'HEMATOLOGY'
when bt.ServiceDepartmentName='MICROBIOLOGY' then 'MICROBIOLOGY'
when bt.ServiceDepartmentName='IMMUNOHISTROCHEMISTRY' then 'IMMUNOHISTROCHEMISTRY'
when bt.ServiceDepartmentName ='EXTERNAL LAB - 2' OR bt.ServiceDepartmentName='EXTERNAL LAB - 1' OR bt.ServiceDepartmentName='LABORATORY'
OR bt.ServiceDepartmentName='SEROLOGY' OR bt.ServiceDepartmentName='CLINICAL PATHOLOGY' OR bt.ServiceDepartmentName='LAB CHARGES' then 'PATHOLOGY'
ELSE bt.ServiceDepartmentName END as ServiceDepartmentName,
Count(Quantity)'Count',SUM(TotalAmount)'Total Amount' from BIL_TXN_BillingTransactionItems bt inner join BIL_MST_ServiceDepartment sd on 
bt.ServiceDepartmentId = sd.ServiceDepartmentId
where sd.IntegrationName = 'LAB' and convert(date,bt.PaidDate) between @FromDate and @ToDate and ReturnStatus is null group by VisitType,bt.ServiceDepartmentName
) ai
group by ai.ServiceDepartmentName,VisitType
UNION ALL
select '' ,'Total',Count(Quantity)'Total Count',SUM(TotalAmount) 'TotalAmount' from BIL_TXN_BillingTransactionItems bt 
inner join BIL_MST_ServiceDepartment sd on bt.ServiceDepartmentId = sd.ServiceDepartmentId
where sd.IntegrationName = 'LAB' and convert(date,bt.PaidDate) between @FromDate and @ToDate  and ReturnStatus is null order by VisitType

Radiology--
select 
case when visitType = 'inpatient' then 'IPD'
when visitType= 'outpatient' then 'OPD'
ELSE VisitType END AS VisitType,bt.ServiceDepartmentName,Count(Quantity)'Count',SUM(TotalAmount)'TotalAmount' from BIL_TXN_BillingTransactionItems bt inner join BIL_MST_ServiceDepartment sd on bt.ServiceDepartmentId = sd.ServiceDepartmentId
where sd.IntegrationName = 'Radiology' and convert(date,bt.PaidDate)=@FromDate and ReturnStatus is null group by VisitType,bt.ServiceDepartmentName
UNION ALL
select ' ','Total' ,Count(Quantity)'Count',SUM(TotalAmount) 'TotalAmount' from BIL_TXN_BillingTransactionItems bt inner join BIL_MST_ServiceDepartment sd on bt.ServiceDepartmentId = sd.ServiceDepartmentId
where sd.IntegrationName = 'Radiology' and convert(date,bt.PaidDate)=@FromDate and ReturnStatus is null order by VisitType


Health Clinic--
select x.ItemName,Sum(Quantity) 'Unit',Sum(TotalAmount) 'TotalAmount' from (
SELECT
case when bt.ItemName like '%ECHO%' then 'ECHO'
 when bt.ItemName like '%TMT%' then 'TMT'
 when bt.ItemName like '%ECG%' then 'ECG'
 when bt.ItemName like '%Holter%' then 'Holter'
 ELSE 'Unknown' END as ItemName ,
ELSE ISNULL (' ',0) END 'SD',
    SUM(ISNULL(bt.Quantity, 0))  'Quantity',
    SUM(ISNULL(bt.TotalAmount, 0)) 'TotalAmount'
  FROM BIL_MST_ServiceDepartment sd join 
      BIL_TXN_BillingTransactionItems bt on sd.ServiceDepartmentId= bt.ServiceDepartmentId
  WHERE  ReturnStatus is null and
  convert(date,bt.PaidDate) between @FromDate and @ToDate
  group by bt.ItemName
  )as x
  where x.ItemName !='Unknown'
  group by x.ItemName

OT--
select ProviderID, ProviderName,DepartmentName ,bt.ItemName,Count (Quantity) 'Quantity',SUM(TotalAmount) 'TotalAmount' from BIL_TXN_BillingTransactionItems 
bt, EMP_Employee em, MST_Department md ,BIL_MST_ServiceDepartment sd
where ItemName like '%operation%'  and convert(date,bt.CreatedOn) between @FromDate and @ToDate and em.EmployeeId= bt.ProviderId and bt.ServiceDepartmentId=sd.ServiceDepartmentId
 and em.DepartmentId=md.DepartmentId
 and ReturnStatus is null group by ProviderId, ProviderName, md.DepartmentName, bt.ItemName, bt.ServiceDepartmentName
UNION ALL
select ProviderID, ProviderName,DepartmentName ,bt.ItemName,Count (Quantity) 'Quantity',SUM(TotalAmount) 'TotalAmount' from BIL_TXN_BillingTransactionItems 
bt, EMP_Employee em, MST_Department md ,BIL_MST_ServiceDepartment sd
where  ItemName like '%Urology Package%' and convert(date,bt.CreatedOn) between @FromDate and @ToDate and em.EmployeeId= bt.ProviderId and bt.ServiceDepartmentId=sd.ServiceDepartmentId
 and em.DepartmentId=md.DepartmentId
 and ReturnStatus is null group by ProviderId, ProviderName, md.DepartmentName, bt.ItemName, bt.ServiceDepartmentName

Labor--
select x.ItemName,Sum(Quantity) 'Unit',Sum(TotalAmount) 'TotalAmount' from (
SELECT
case 
 when bt.ItemName like '%labor%' then 'LABOR Normal'
 when bt.ItemName like '%LSCS%' then 'LABOR LSCS'
 ELSE 'Unknown' END as ItemName ,
ELSE ISNULL (' ',0) END 'SD',
    SUM(ISNULL(bt.Quantity, 0))  'Quantity',
    SUM(ISNULL(bt.TotalAmount, 0)) 'TotalAmount'
  FROM BIL_MST_ServiceDepartment sd join 
      BIL_TXN_BillingTransactionItems bt on sd.ServiceDepartmentId= bt.ServiceDepartmentId
  WHERE  ReturnStatus is null and
  convert(date,bt.PaidDate) between @FromDate and @ToDate
  group by bt.ItemName
  )as x
  where x.ItemName !='Unknown'
  group by x.ItemName
	
IPD--
count of Admitted, Discharged Patient
SELECT  
		'No. of Admitted Patient' as 'PatientType' ,
		 COUNT(patientAdmissionId) 'Count'
	FROM ADT_PatientAdmission
	WHERE CONVERT(date,AdmissionDate) BETWEEN @FromDate AND @ToDate AND DischargeDate IS NULL
UNION ALL
SELECT 
		'No. of Discharged Patient',
		COUNT(patientAdmissionId) 
	FROM ADT_PatientAdmission
	WHERE CONVERT(date,DischargeDate) BETWEEN @FromDate AND @ToDate AND DischargeDate IS NOT NULL

rest other servicedepartments count and income list--
select x.ItemName,Sum(Quantity) 'Unit',Sum(TotalAmount) 'TotalAmount' from (
SELECT
case when bt.ItemName like '%ECHO%' then 'ECHO'
 when bt.ItemName like '%TMT%' then 'TMT'
 when bt.ItemName like '%ECG%' then 'ECG'
 when bt.ItemName like '%Holter%' then 'Holter'
 when bt.ItemName like '%CONSULTATION%' then 'OPD'
 when bt.ItemName like '%Health Card%' then 'Health Card'
 when sd.IntegrationName like 'LAB' then 'LABS'
 when sd.IntegrationName like 'RADIOLOGY' then 'RADIOLOGY'
 when bt.ItemName like '%Operation%' then 'OPERATION CHARGES'
 ELSE 'Hospital Other Charges' END as ItemName ,
ELSE ISNULL (' ',0) END 'SD',
    SUM(ISNULL(bt.Quantity, 0))  'Quantity',
    SUM(ISNULL(bt.TotalAmount, 0)) 'TotalAmount'
  FROM BIL_MST_ServiceDepartment sd join 
      BIL_TXN_BillingTransactionItems bt on sd.ServiceDepartmentId= bt.ServiceDepartmentId
  WHERE  ReturnStatus is null and
  convert(date,bt.PaidDate) between @FromDate and @ToDate
  group by bt.ItemName,sd.IntegrationName
  )as x
  where x.ItemName !='Unknown'
  group by x.ItemName
  
  UNION ALL
  ---To deduct return amount from the previous days 
   select 'Earlier Return Amount' 'Item Name', ' 'as ' ',isnull(-SUM(sum.TotalAmount),0) 'Total Amount' from (
 select Distinct(ret.BillReturnId),ret.TotalAmount from (
 select br.CreatedOn 'Ret Date',bt.ItemName,bt.Quantity 'Unit',bt.PaidDate 'PaidDate',br.BillReturnId 'BillReturnId',br.TotalAmount 'TotalAmount' from BIL_TXN_InvoiceReturn br 
 inner join BIL_TXN_BillingTransactionItems bt on br.BillingTransactionId=bt.BillingTransactionId 
  where convert(date,br.createdon) between @FromDate and @ToDate and convert(date,bt.CreatedOn) !=convert(date,br.CreatedOn) 
  )ret
  )sum
 
 UNION ALL

  select 'Advance Received' as 'ItemName',' ',ISNULL(SUM(Amount),0) 'Total Amount' from BIL_TXN_Deposit
  where convert(date,createdon) between @FromDate and @ToDate 
  and DepositType='Deposit'
  UNION ALL
  select 'Advance Settled' as 'ItemName',' ',ISNULL(-SUM(Amount),0) from BIL_TXN_Deposit
  where convert(date,createdon) between @FromDate and @ToDate 
  and DepositType='depositdeduct' 
   UNION ALL
  select 'Advance Returned' as 'ItemName',' ',-ISNULL(SUM(Amount),0) from BIL_TXN_Deposit
  where convert(date,createdon) between @FromDate and @ToDate 
  and DepositType='ReturnDeposit' 

Pharmacy--
select   'Total' as Type,sum(Quantity) as Quantity,  sum(TotalAmount-ReturnAmount) as 'TotalAmount'
	from ( 
          SELECT  sum(inv.PaidAmount)as TotalAmount, sum(inv.TotalQuantity) as Quantity ,0 as ReturnAmount, sum(inv.DiscountAmount) as DiscountAmount
            FROM [PHRM_TXN_Invoice] inv       
              where  convert(date, inv.CreateOn)   BETWEEN @FromDate and @ToDate

			  union all
			 
			  select  0 as TotalAmount,sum(invRet.Quantity) as RetQuantity,sum(invRet.TotalAmount ) as ReturnAmount,  sum(-(invRet.DiscountPercentage/100)*invRet.SubTotal ) as DiscountPercentage
			  From[PHRM_TXN_InvoiceReturnItems] invRet
			  
			  where convert(date, invRet.CreatedOn)  BETWEEN @FromDate and @ToDate
			  
			  )tabletotal
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_DepartmentSalesDaybook]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BILL_DepartmentSalesDaybook]--[SP_Report_BILL_DepartmentSalesDaybook] '2018-08-08','2018-08-08' 
	@FromDate Date=null ,
	@ToDate Date=null	,
	@IsInsurance bit=0
AS
/*
FileName: [SP_Report_BILL_DepartmentSalesDaybook]
CreatedBy/date: Dinesh/2018-08-01
Description: to get the collection department wise 
Remarks:    
Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1       Dinesh/2018-08-01					NA										
1       Sud/06Aug'29                 Added clause for Insurance

*/


BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN 
			;With DepartmentWiseSalesCTE as
  (
  
  select 
  (Cast(ROW_NUMBER() OVER (ORDER BY  ServiceDepartmentName)   as int)) as SN,
  Convert(date,vwTxnItm.BillingDate) 'Date',
        sd.ServiceDepartmentName, itms.ItemName,
   CASE when (sd.ServiceDepartmentName='Biochemistry' ) 
       OR(sd.ServiceDepartmentName='HEMATOLOGY' )
       OR(sd.ServiceDepartmentName='ATOMIC ABSORTION') 
       OR(sd.ServiceDepartmentName='CLNICAL PATHOLOGY' )
       OR(sd.ServiceDepartmentName='CYTOLOGY'  )
       OR(sd.ServiceDepartmentName='KIDNEY BIOPSY'  )
       OR(sd.ServiceDepartmentName='SKIN BIOPSY'  )
       OR(sd.ServiceDepartmentName='CONJUNCTIVAL BIOPSY' )
	   OR(sd.ServiceDepartmentName='EXTERNAL LAB-3' )
	   OR(sd.ServiceDepartmentName='EXTERNAL LAB - 1' )
	   OR(sd.ServiceDepartmentName='EXTERNAL LAB - 2'  )
	   OR(sd.ServiceDepartmentName='HISTOPATHOLOGY'  )
	   OR(sd.ServiceDepartmentName='IMMUNOHISTROCHEMISTRY'  )
	   OR(sd.ServiceDepartmentName='MOLECULAR DIAGNOSTICS'  )
	   OR(sd.ServiceDepartmentName='SPECIALISED BIOPHYSICS ASSAYS'  )
	   OR(sd.ServiceDepartmentName='SEROLOGY'  )
	   OR(sd.ServiceDepartmentName='LABORATORY'  )
	   OR(sd.ServiceDepartmentName='MICROBIOLOGY'  )



    then 'LABS'  
	when (sd.ServiceDepartmentName='DUCT')
OR(sd.ServiceDepartmentName='MAMMOLOGY')
OR(sd.ServiceDepartmentName='PERFORMANCE TEST') 
OR(sd.ServiceDepartmentName='MRI')
OR(sd.ServiceDepartmentName='C.T. SCAN')
OR(sd.ServiceDepartmentName='ULTRASOUND')
OR(sd.ServiceDepartmentName='ULTRASOUND COLOR DOPPLER')
OR(sd.ServiceDepartmentName='BMD-BONEDENSITOMETRY')
OR(sd.ServiceDepartmentName='OPG-ORTHOPANTOGRAM')
OR(sd.ServiceDepartmentName='MAMMOGRAPHY')
OR(sd.ServiceDepartmentName='X-RAY')
OR(sd.ServiceDepartmentName='DEXA')
OR(sd.ServiceDepartmentName='IMAGING')
then ('RADIOLOGY')
when(sd.ServiceDepartmentName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
OR(sd.ServiceDepartmentName='CARDIOVASCULAR SURGERY')
then 'CTVS'
     ELSE sd.ServiceDepartmentName END as 'ServDeptName',
	 ISNULL(vwTxnItm.PaidQuantity,0)+ISNULL(vwTxnItm.UnpaidQuantity,0) as Quantity ,
     ISNULL(vwTxnItm.PaidSubTotal,0)+ISNULL(vwTxnItm.UnpaidSubTotal,0)  as SubTotal,
     ISNULL(vwTxnItm.PaidTax,0)+ISNULL(vwTxnItm.UnpaidTax,0) as Tax,
     ISNULL(vwTxnItm.PaidDiscountAmount,0)+ISNULL(vwTxnItm.UnpaidDiscountAmount,0) as DiscountAmount,
     ISNULL(vwTxnItm.PaidTotalAmount,0)+ISNULL(vwTxnItm.UnpaidTotalAmount,0) as TotalAmount,
	---------Testing Remove later on ---------------
	
	ISNULL(vwTxnItm.CancelSubTotal,0) as CancelSubTotal,
	 ISNULL(vwTxnItm.CancelDiscountAmount,0) as CancelDiscountAmount,
	  ISNULL(cancelonsameday.CancelTotalAmountDay,0) as CancelTotalAmountDay,
	    ISNULL(cancelonsameday.CancelDiscountAmountDay,0) as CancelDiscountDay,
	 
	 ---------Testing Remove later on ---------------
   ISNULL(vwTxnItm.CancelTotalAmount,0) 'CancelAmount',
   ISNULL(vwTxnItm.CancelTax,0) 'CancelTax',
    ( case when BillStatus='return' then (ISNULL(vwTxnItm.ReturnTotalAmount,0)) 
	 ELSE 0 END) as ReturnAmount,
     ISNULL(vwTxnItm.ReturnTax,0) AS ReturnTax
    from BIL_MST_ServiceDepartment sd, BIL_CFG_BillItemPrice itms, VW_BIL_TxnItemsInfo vwTxnItm 

	  where   vwTxnItm.BillingDate between Convert(date, @FromDate) AND  Convert(date, @ToDate) 
       AND vwTxnItm.ServiceDepartmentId  = sd.ServiceDepartmentId
     AND vwTxnItm.ItemId=itms.ItemId
     AND sd.ServiceDepartmentId = itms.ServiceDepartmentId
	 AND  ISNULL(vwTxnItm.IsInsurance,0)= @IsInsurance

      
) 
Select 
convert(date,@FromDate) 'FromDate',
     convert(date,@ToDate) 'ToDate',
     txnItms.ServDeptName 'ServDeptName',
	 sum(txnItms.Quantity) 'Quantity',
     sum(txnItms.SubTotal) 'Price',
     round(sum(txnItms.Tax),2) as 'Tax',
     sum(txnItms.DiscountAmount) 'DiscountAmount',
     sum(txnItms.TotalAmount) 'TotalAmount',
     sum(txnItms.ReturnAmount) 'ReturnAmount',
     sum(txnItms.ReturnTax) 'ReturnTax',
   Sum(txnItms.CancelAmount) 'CancelAmount',
   Sum(txnItms.CancelTax) 'CancelTax',
   Sum(txnItms.TotalAmount)-Sum(txnItms.Tax)-sum(txnItms.ReturnAmount) 'NetSales'
   Sum(txnItms.CancelTotalAmountDay) 'CancelTotalAmountDay',
  Sum (txnItms.CancelDiscountDay) 'CancelDiscountDay'
from DepartmentWiseSalesCTE txnItms 
group by txnItms.ServDeptName

	END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_DoctorWiseIncomeSummary_OPIP]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author/Date:		Sud/08Aug2018
 Description:		to show DoctorWise IncomeSummary (Inpatient + Outpatient)
 Remarks: We're taking AssignedTo Field Only in BillingTransactionItem table. 
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BILL_DoctorWiseIncomeSummary_OPIP]
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@ProviderId INT = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Sud/08Aug'18			created the script
2		Ramavtar/08Aug'18		getting doctor name from employee table
3.      sud/22Aug'18            updated for IP Records
--------------------------------------------------------
*/
BEGIN

SELECT
  ISNULL(OPD.ProviderName, IPD.ProviderName) 'DoctorName',
  ISNULL(OPD.SubTotal, 0) 'OP_Collection',
  ISNULL(OPD.Discount, 0) 'OP_Discount',
  ISNULL(OPD.Refund, 0) 'OP_Refund',
  ISNULL(OPD.NetTotal, 0) 'OP_NetTotal',
  ISNULL(IPD.SubTotal, 0) 'IP_Collection',
  ISNULL(IPD.Discount, 0) 'IP_Discount',
  ISNULL(IPD.Refund, 0) 'IP_Refund',
  ISNULL(IPD.NetTotal, 0) 'IP_NetTotal',
  ISNULL(OPD.NetTotal, 0) + ISNULL(IPD.NetTotal, 0) 'Grand_Total'
FROM (SELECT
		CASE
			WHEN ProviderId IS NOT NULL THEN ProviderName
			ELSE 'NoDoctor'
		END AS 'ProviderName',
		SUM(ISNULL(SubTotal, 0)) 'SubTotal',
		SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
		SUM(ISNULL(ReturnAmount, 0)) AS 'Refund',
		SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnAmount, 0)) AS 'NetTotal'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate)
	WHERE BillingType = 'OutPatient' AND BillStatus != 'cancelled'
		AND (ISNULL(@ProviderId, ISNULL(ProviderId, 0)) = ISNULL(ProviderId, 0))
	GROUP BY ProviderId,ProviderName) OPD
FULL OUTER JOIN (
	SELECT
		CASE
			WHEN ProviderId IS NOT NULL THEN ProviderName
			ELSE 'NoDoctor'
		END AS 'ProviderName',
		SUM(ISNULL(SubTotal, 0)) 'SubTotal',
		SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
		SUM(ISNULL(ReturnAmount, 0)) AS 'Refund',
		SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnAmount, 0)) AS 'NetTotal'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate)
	WHERE BillingType = 'Inpatient' AND BillStatus != 'cancelled'
		AND (ISNULL(@ProviderId, ISNULL(ProviderId, 0)) = ISNULL(ProviderId, 0))
	GROUP BY ProviderId,ProviderName) IPD
ON OPD.ProviderName = IPD.ProviderName
ORDER BY DoctorName

-- table2: summary
SELECT 
		SUM(CASE WHEN BillStatus='provisional' THEN ProvisionalAmount ELSE 0 END) 'ProvisionalAmount',
		SUM(CASE WHEN BillStatus='cancelled' THEN CancelledAmount ELSE 0 END) 'CancelledAmount',
		SUM(CASE WHEN BillStatus='credit' THEN CreditAmount ELSE 0 END) 'CreditAmount',
		(SELECT SUM(ISNULL(AdvanceReceived,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceReceived',
		(SELECT SUM(ISNULL(AdvanceSettled,0)) FROM FN_BIL_GetDepositNProvisionalBetnDateRange(@FromDate,@ToDate)) 'AdvanceSettled'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation(@FromDate, @ToDate)
	WHERE (ISNULL(@ProviderId, ISNULL(ProviderId, 0)) = ISNULL(ProviderId, 0))
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_Invoice_Return]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BILL_Invoice_Return] 
      @FromDate DateTime=null,
      @ToDate DateTime=null
    
AS
/*
FileName: [SP_BILL_Report_Invoice_Return]
CreatedBy/date: Ashim/24-07-2017
Description: This sp will give sum of total amount return by each item along with its necesorry details recipt no, hospital no, patient name, service department name,return date, and return remarks
Remarks:   
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
--------------------------------------------------------
1       Ashim/09-05-2017                created the script
2.      Sud:26Aug'21                   * Converting the comparision to type=DATE, earlier it was DateTime
                                       * Taking EmployeeName and PatientName from single column (FullName, ShortName) of respective tables.  
---------------------------------------------------------
*/
BEGIN
        SELECT
                CONVERT(DATE,br.CreatedOn) AS [Date],
                br.BillingTransactionId,
                (br.FiscalYear + '-' + br.InvoiceCode + CONVERT(varchar(10), br.RefInvoiceNum) ) AS RefInvoiceNo,
                p.PatientCode,
                p.ShortName AS PatientName,
				br.BillReturnId,
                br.CreditNoteNumber,
                br.SubTotal,
                br.DiscountAmount,
                br.TaxableAmount,
                br.TaxTotal,
                br.TotalAmount,
				br.PaymentMode,
                br.Remarks,
				cntr.CounterName,
                emp.FullName  as 'User'
        FROM    BIL_TXN_InvoiceReturn br
        JOIN    PAT_Patient p ON p.PatientId=br.PatientId
        JOIN    EMP_Employee emp ON emp.EmployeeId = br.CreatedBy
		JOIN	BIL_CFG_Counter cntr ON br.CounterId = cntr.CounterId
        WHERE  CONVERT(DATE,br.CreatedOn)
                  BETWEEN Convert(Date,@FromDate) and Convert(Date,@ToDate)
        ORDER BY  CONVERT(DATE,br.CreatedOn) desc
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_Invoice_Return_Detail]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BILL_Invoice_Return_Detail] @BillReturnId int null
AS

/*
FileName: [SP_Report_BILL_Invoice_Return_Detail]
CreatedBy/date: Krishna/27-10-2021
Description: This SP will give details of Returned items on the return bill report grid after view details is clicked and BillReturnId is passed to this SP.
Remarks:   
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
--------------------------------------------------------
1       Krishna/27-10-2021                created the script

---------------------------------------------------------
*/

BEGIN

	SELECT 
		rtItm.ItemName, 
		txnItm.Quantity,
		rtItm.RetQuantity,
		rtItm.RetSubTotal,
		rtItm.RetDiscountAmount,
		rtItm.RetTotalAmount
		FROM BIL_TXN_InvoiceReturnItems rtItm 
		JOIN BIL_TXN_BillingTransactionItems txnItm ON rtItm.BillingTransactionItemId = txnItm.BillingTransactionItemId 
		WHERE rtItm.BillReturnId = @BillReturnId;
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_PatientBillHistory]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_BILL_PatientBillHistory]  -- SP_Report_BILL_PatientBillHistory null,null,'1809003399'
	@FromDate datetime = NULL,
	@ToDate datetime = NULL,
	@PatientCode nvarchar(max) = NULL
AS
/*
FileName: [SP_Report_BILL_PatientBillHistory]
CreatedBy/date: nagesh/2017-05-25
Description: to get the total of Billed, Unbilled, and Returned along with the other data
Remarks:    NEEDS LOT OF IMPROVISATION ON THIS SP--sudarshan(29jul'17)
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       nagesh/2017-05-25	                created the script
2		ashim/2017-07-11					modified the script
3		ashim/2017-07-28					modifications for bug fix
											(ReceiptNo and ItemPrice,ItemName-ReturnedBill)
4		ramavtar/2018-10-04					change parameter (replaced PatientId with PatientCode)
5		ramavtar/2018-10-15					change in SP (corrected where clause in paid,unpaid.. change table in case of return taking from BIL_TXN_InvoiceReturn.. 
											added require columns (remark, corrected receiptNo)
------------------------------------------------------
*/
BEGIN

  IF (@FromDate IS NOT NULL AND @ToDate IS NOT NULL AND @PatientCode IS NOT NULL)
  BEGIN

    Paid Bill History
    WITH PaidBillHistory
    AS (SELECT
		ROW_NUMBER() OVER (ORDER BY BillingTransactionItemId) AS SrNo,
		SrvDept.ServiceDepartmentName AS [Department],
		ItemName AS Item,
		Price AS Rate,
		Quantity,
		TransactionItem.SubTotal AS Amount,
		ISNULL(TransactionItem.DiscountAmount, 0) AS Discount,
		TransactionItem.Tax,
		ISNULL(TransactionItem.TotalAmount, 0) AS SubTotal,
		CONVERT(date, TransactionItem.PaidDate) AS [PaidDate],
		Txn.InvoiceNo AS ReceiptNo
    FROM BIL_TXN_BillingTransactionItems TransactionItem
	INNER JOIN BIL_TXN_BillingTransaction Txn ON TransactionItem.BillingTransactionId = Txn.BillingTransactionId
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN PAT_Patient pat ON TransactionItem.PatientId = pat.PatientId
    WHERE TransactionItem.BillStatus = 'paid' AND pat.PatientCode = @PatientCode 
		AND CONVERT(date,TransactionItem.PaidDate) BETWEEN @FromDate AND @ToDate
		AND TransactionItem.ReturnStatus IS NULL)
    
	SELECT * FROM PaidBillHistory ORDER BY CONVERT(date, PaidDate) DESC;

    Unpaid Bill History
    WITH UnpaidBillHistory
    AS (SELECT
		ROW_NUMBER() OVER (ORDER BY BillingTransactionItemId) AS SrNo,
		SrvDept.ServiceDepartmentName AS [Department],
		ItemName AS Item,
		Price AS Rate,
		Quantity,
		TransactionItem.SubTotal AS Amount,
		ISNULL(TransactionItem.DiscountAmount, 0) AS Discount,
		TransactionItem.Tax,
		ISNULL(TransactionItem.TotalAmount, 0) AS SubTotal,
		CONVERT(date, TransactionItem.RequisitionDate) AS [Date],
		Txn.InvoiceNo AS ReceiptNo
    FROM BIL_TXN_BillingTransactionItems TransactionItem
	INNER JOIN BIL_TXN_BillingTransaction Txn ON TransactionItem.BillingTransactionId = Txn.BillingTransactionId
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN PAT_Patient pat ON TransactionItem.PatientId = pat.PatientId
    WHERE TransactionItem.BillStatus = 'unpaid' AND pat.PatientCode = @PatientCode
		AND TransactionItem.ReturnStatus IS NULL
		AND CONVERT(date,RequisitionDate) BETWEEN @FromDate AND @ToDate)
    
	SELECT * FROM UnpaidBillHistory ORDER BY CONVERT(date, [Date]) DESC;

    Returned Bill History
    WITH ReturnedBillHistory
    AS (SELECT
		ROW_NUMBER() OVER (ORDER BY BillReturn.BillReturnId) AS SrNo,
		SrvDept.ServiceDepartmentName AS Department,
		TransactionItem.ItemName AS Item,
		TransactionItem.Price AS Rate,
		TransactionItem.Quantity,
		TransactionItem.SubTotal AS Amount,
		BillReturn.Remarks AS Remarks,
		ISNULL(TransactionItem.DiscountAmount, 0) AS Discount,
		TransactionItem.Tax,
		ISNULL(TransactionItem.TotalAmount, 0) AS ReturnedAmount,
		CONVERT(date,BillReturn.CreatedOn) 'ReturnDate',
		Txn.InvoiceNo AS ReceiptNo,
		Emp.FirstName + ISNULL(' ' + Emp.MiddleName + ' ', ' ') + Emp.LastName AS ReturnedBy
    FROM BIL_TXN_InvoiceReturn BillReturn
	INNER JOIN BIL_TXN_BillingTransaction Txn ON BillReturn.BillingTransactionId = Txn.BillingTransactionId
	INNER JOIN BIL_TXN_BillingTransactionItems TransactionItem ON Txn.BillingTransactionId = TransactionItem.BillingTransactionId
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN EMP_Employee Emp ON BillReturn.CreatedBy = Emp.EmployeeId
    INNER JOIN PAT_Patient pat ON BillReturn.PatientId = pat.PatientId
    WHERE pat.PatientCode = @PatientCode
		AND CONVERT(date,BillReturn.CreatedOn) BETWEEN @FromDate AND @ToDate)

    SELECT * FROM ReturnedBillHistory ORDER BY CONVERT(date, ReturnDate) DESC;

    Deposit
    WITH DepositHistory
    AS (SELECT
      ROW_NUMBER() OVER (ORDER BY DepositId) AS SrNo,
      CONVERT(date, dep.CreatedOn) AS [Date],
      DepositType,
      Amount,
      Remarks,
	  ReceiptNo
    FROM BIL_TXN_Deposit dep
    INNER JOIN PAT_Patient pat ON dep.PatientId = pat.PatientId
    WHERE pat.PatientCode = @PatientCode
		AND CONVERT(date,dep.CreatedOn) BETWEEN @FromDate AND @ToDate)
    
	SELECT * FROM DepositHistory ORDER BY CONVERT(date, Date) DESC;

    Cancel Bill History
    WITH CancelBillHistory
    AS (SELECT
      ROW_NUMBER() OVER (ORDER BY BillingTransactionItemId) AS SrNo,
      SrvDept.ServiceDepartmentName AS [Department],
      ItemName AS Item,
      Price AS Rate,
      Quantity,
      CancelRemarks AS Remarks,
      SubTotal AS Amount,
      TotalAmount AS CancelledAmount,
      CONVERT(date, CancelledOn) AS CancelledDate,
      Emp.FirstName + ISNULL(' ' + Emp.MiddleName + ' ', ' ') + Emp.LastName AS CancelledBy,
      ISNULL(DiscountAmount, 0) AS Discount,
      Tax,
      ISNULL(TotalAmount, 0) AS SubTotal,
      CONVERT(date, RequisitionDate) AS [Date]
    FROM BIL_TXN_BillingTransactionItems TransactionItem
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN EMP_Employee Emp ON TransactionItem.CancelledBy = Emp.EmployeeId
    INNER JOIN PAT_Patient pat ON TransactionItem.PatientId = pat.PatientId
    WHERE BillStatus = 'cancel' AND pat.PatientCode = @PatientCode
		AND CONVERT(date,RequisitionDate) BETWEEN @FromDate AND @ToDate)
    
	SELECT * FROM CancelBillHistory ORDER BY CONVERT(date, [Date]) DESC;

  END
  ELSE IF (@FromDate IS NULL AND @ToDate IS NULL AND @PatientCode IS NOT NULL)
  BEGIN
	    Paid Bill History
    WITH PaidBillHistory
    AS (SELECT
		ROW_NUMBER() OVER (ORDER BY BillingTransactionItemId) AS SrNo,
		SrvDept.ServiceDepartmentName AS [Department],
		ItemName AS Item,
		Price AS Rate,
		Quantity,
		TransactionItem.SubTotal AS Amount,
		ISNULL(TransactionItem.DiscountAmount, 0) AS Discount,
		TransactionItem.Tax,
		ISNULL(TransactionItem.TotalAmount, 0) AS SubTotal,
		CONVERT(date, TransactionItem.PaidDate) AS [PaidDate],
		Txn.InvoiceNo AS ReceiptNo
    FROM BIL_TXN_BillingTransactionItems TransactionItem
	INNER JOIN BIL_TXN_BillingTransaction Txn ON TransactionItem.BillingTransactionId = Txn.BillingTransactionId
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN PAT_Patient pat ON TransactionItem.PatientId = pat.PatientId
    WHERE TransactionItem.BillStatus = 'paid' AND pat.PatientCode = @PatientCode
		AND TransactionItem.ReturnStatus IS NULL)
    
	SELECT * FROM PaidBillHistory ORDER BY CONVERT(date, PaidDate) DESC;

    Unpaid Bill History
    WITH UnpaidBillHistory
    AS (SELECT
		ROW_NUMBER() OVER (ORDER BY BillingTransactionItemId) AS SrNo,
		SrvDept.ServiceDepartmentName AS [Department],
		ItemName AS Item,
		Price AS Rate,
		Quantity,
		TransactionItem.SubTotal AS Amount,
		ISNULL(TransactionItem.DiscountAmount, 0) AS Discount,
		TransactionItem.Tax,
		ISNULL(TransactionItem.TotalAmount, 0) AS SubTotal,
		CONVERT(date, TransactionItem.RequisitionDate) AS [Date],
		Txn.InvoiceNo AS ReceiptNo
    FROM BIL_TXN_BillingTransactionItems TransactionItem
	INNER JOIN BIL_TXN_BillingTransaction Txn ON TransactionItem.BillingTransactionId = Txn.BillingTransactionId
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN PAT_Patient pat ON TransactionItem.PatientId = pat.PatientId
    WHERE TransactionItem.BillStatus = 'unpaid' AND pat.PatientCode = @PatientCode
		AND TransactionItem.ReturnStatus IS NULL)
    
	SELECT * FROM UnpaidBillHistory ORDER BY CONVERT(date, [Date]) DESC;

    Returned Bill History
    WITH ReturnedBillHistory
    AS (SELECT
		ROW_NUMBER() OVER (ORDER BY BillReturn.BillReturnId) AS SrNo,
		SrvDept.ServiceDepartmentName AS Department,
		TransactionItem.ItemName AS Item,
		TransactionItem.Price AS Rate,
		TransactionItem.Quantity,
		TransactionItem.SubTotal AS Amount,
		BillReturn.Remarks AS Remarks,
		ISNULL(TransactionItem.DiscountAmount, 0) AS Discount,
		TransactionItem.Tax,
		ISNULL(TransactionItem.TotalAmount, 0) AS ReturnedAmount,
		CONVERT(date,BillReturn.CreatedOn) 'ReturnDate',
		Txn.InvoiceNo AS ReceiptNo,
		Emp.FirstName + ISNULL(' ' + Emp.MiddleName + ' ', ' ') + Emp.LastName AS ReturnedBy
    FROM BIL_TXN_InvoiceReturn BillReturn
	INNER JOIN BIL_TXN_BillingTransaction Txn ON BillReturn.BillingTransactionId = Txn.BillingTransactionId
	INNER JOIN BIL_TXN_BillingTransactionItems TransactionItem ON Txn.BillingTransactionId = TransactionItem.BillingTransactionId
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN EMP_Employee Emp ON BillReturn.CreatedBy = Emp.EmployeeId
    INNER JOIN PAT_Patient pat ON BillReturn.PatientId = pat.PatientId
    WHERE pat.PatientCode = @PatientCode)

    SELECT * FROM ReturnedBillHistory ORDER BY CONVERT(date, ReturnDate) DESC;

    Deposit
    WITH DepositHistory
    AS (SELECT
      ROW_NUMBER() OVER (ORDER BY DepositId) AS SrNo,
      CONVERT(date, dep.CreatedOn) AS [Date],
      DepositType,
      Amount,
      Remarks,
	  ReceiptNo
    FROM BIL_TXN_Deposit dep
    INNER JOIN PAT_Patient pat ON dep.PatientId = pat.PatientId
    WHERE pat.PatientCode = @PatientCode)
    
	SELECT * FROM DepositHistory ORDER BY CONVERT(date, Date) DESC;

    Cancel Bill History
    WITH CancelBillHistory
    AS (SELECT
      ROW_NUMBER() OVER (ORDER BY BillingTransactionItemId) AS SrNo,
      SrvDept.ServiceDepartmentName AS [Department],
      ItemName AS Item,
      Price AS Rate,
      Quantity,
      CancelRemarks AS Remarks,
      SubTotal AS Amount,
      TotalAmount AS CancelledAmount,
      CONVERT(date, CancelledOn) AS CancelledDate,
      Emp.FirstName + ISNULL(' ' + Emp.MiddleName + ' ', ' ') + Emp.LastName AS CancelledBy,
      ISNULL(DiscountAmount, 0) AS Discount,
      Tax,
      ISNULL(TotalAmount, 0) AS SubTotal,
      CONVERT(date, RequisitionDate) AS [Date]
    FROM BIL_TXN_BillingTransactionItems TransactionItem
    INNER JOIN BIL_MST_ServiceDepartment SrvDept ON TransactionItem.ServiceDepartmentId = SrvDept.ServiceDepartmentId
    INNER JOIN EMP_Employee Emp ON TransactionItem.CancelledBy = Emp.EmployeeId
    INNER JOIN PAT_Patient pat ON TransactionItem.PatientId = pat.PatientId
    WHERE BillStatus = 'cancel' AND pat.PatientCode = @PatientCode)
    
	SELECT * FROM CancelBillHistory ORDER BY CONVERT(date, [Date]) DESC;

  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_PatientCensus]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author/Date:		RAMAVTAR/03Aug2018
 Description:		report shows doctor-department wise income and patient's count
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BILL_PatientCensus] -- [SP_Report_BILL_PatientCensus] '2019-1-20','2019-02-05',NULL,24
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@ProviderId int = NULL,
	@DepartmentId int = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Ramavtar/03Aug'18			created the script
2		Ramavtar/9Aug'18		getting summary of deposit, and deposit-return (as table 3),
								excluding entry where billstatus == cancel and for return items we are not including its amount in totalcollection
3.      sud  --					updated after creating common function. 
4.      dinesh /14thSep'18      grouped and  merged the labcharges and miscellaneous to the respective single view header 
5.		ramavtar/05Oct'18		getting provider name from employee table instead of txn table
6.		ramavtar/03Dec'18		revamp of SP -> as per new requirement
7.		ramavtar/05Dec'18		filter more case of paid/credit bills
8.		ramavtar/13Dec'18		taking quantity
9.      Dinesh/05th_Feb'19      Doctor Department Department included in report to segregate doctors according to department
--------------------------------------------------------
*/
BEGIN
	SELECT 
		tbl.Provider,
		tbl.ServiceDepartmentName,
		tbl.totC1,
		tbl.retC1,
		tbl.totA1,
		tbl.retA1,
		tbl.totC2,
		tbl.totA2,
		tbl.totC3,
		tbl.retC3,
		tbl.totA3,
		tbl.retA3,
		(tbl.totC1 - tbl.retC1) + (tbl.totC3 - tbl.retC3) AS 'totTC',
		(tbl.totA1 - tbl.retA1) + (tbl.totA3 - tbl.retA3) AS 'totTA' 
	FROM (
	SELECT 
		ISNULL(fn.ProviderName,'NoDoctor') AS 'Provider',
		fn.ServiceDepartmentName,
		SUM(CASE
				WHEN fn.BillStatus = 'paid' AND vm.ProvisionalDate IS NULL AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL) THEN fn.Quantity
				WHEN fn.BillStatus = 'credit' AND vm.ProvisionalDate IS NULL THEN fn.Quantity
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NULL AND ((fn.PaymentMode = 'credit' AND fn.CreditDate IS NOT NULL) OR (fn.PaymentMode != 'credit' AND fn.PaidDate IS NOT NULL)) THEN fn.Quantity
				ELSE 0
			END) AS 'totC1',
		SUM(CASE
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NULL THEN fn.Quantity ELSE 0
			END) AS 'retC1',
		SUM(CASE 
				WHEN vm.ProvisionalDate IS NULL AND fn.BillStatus = 'paid' AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL) THEN fn.PaidAmount
				WHEN vm.ProvisionalDate IS NULL AND fn.BillStatus = 'credit' THEN fn.CreditAmount
				WHEN vm.ProvisionalDate IS NULL AND fn.BillStatus = 'return' AND ((fn.PaymentMode = 'credit' AND fn.CreditDate IS NOT NULL) OR (fn.PaymentMode != 'credit' AND fn.PaidDate IS NOT NULL)) THEN fn.ReturnAmount
				ELSE 0
			END) AS 'totA1',
		SUM(CASE
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NULL THEN fn.ReturnAmount
				ELSE 0
			END) AS 'retA1',
		SUM(CASE
				WHEN fn.BillStatus = 'provisional' THEN fn.Quantity
				ELSE 0
			END) AS 'totC2',
		SUM(CASE 
				WHEN fn.BillStatus = 'provisional' THEN fn.ProvisionalAmount 
				ELSE 0 
			END) AS 'totA2',
		SUM(CASE 
				WHEN fn.BillStatus = 'credit' AND vm.ProvisionalDate IS NOT NULL THEN fn.Quantity
				WHEN fn.BillStatus = 'paid' AND vm.ProvisionalDate IS NOT NULL AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL) THEN fn.Quantity
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NOT NULL AND ((fn.PaymentMode = 'credit' AND fn.CreditDate IS NOT NULL) OR (fn.PaymentMode != 'credit' AND fn.PaidDate IS NOT NULL))  THEN fn.Quantity
				ELSE 0
			END) AS 'totC3',
		SUM(CASE
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NOT NULL
				THEN fn.Quantity ELSE 0 
			END) AS 'retC3',
		SUM(CASE
				WHEN fn.BillStatus = 'paid' AND vm.ProvisionalDate IS NOT NULL AND (fn.PaymentMode != 'credit' OR fn.CreditDate IS NOT NULL) THEN fn.PaidAmount
				WHEN fn.BillStatus = 'credit' AND vm.ProvisionalDate IS NOT NULL THEN fn.CreditAmount
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NOT NULL AND ((fn.PaymentMode = 'credit' AND fn.CreditDate IS NOT NULL) OR (fn.PaymentMode != 'credit' AND fn.PaidDate IS NOT NULL)) THEN fn.ReturnAmount
				ELSE 0
			END) AS 'totA3',
		SUM(CASE
				WHEN fn.BillStatus = 'return' AND vm.ProvisionalDate IS NOT NULL THEN fn.ReturnAmount
				ELSE 0
			END) AS 'retA3'
		,
		SUM(CASE
				WHEN fn.BillStatus = 'paid' OR fn.BillStatus = 'credit' THEN 1 ELSE 0 
			END) AS 'totTC',
		SUM(CASE 
				WHEN fn.BillStatus = 'paid' THEN fn.PaidAmount
				WHEN fn.BillStatus = 'credit' THEN fn.CreditAmount
				ELSE 0
			END) AS 'totTA'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparation_PatientCensus(@FromDate,@ToDate) fn
	JOIN VW_BIL_TxnItemsInfoWithDateSeparation vm ON fn.BillingTransactionItemId = vm.BillingTransactionItemId
	WHERE ISNULL(@ProviderId,ISNULL(fn.ProviderId,0)) = ISNULL(fn.ProviderId,0)
	and ISNULL(@DepartmentId,ISNULL(fn.DepartmentId,0))= ISNULL(fn.DepartmentId,0)
	GROUP BY fn.ProviderName,fn.ServiceDepartmentName,fn.DepartmentId
	ORDER BY 1,2
	) tbl
	order by tbl.Provider,tbl.ServiceDepartmentName

SELECT Distinct dep.AdvanceReceived,dep.AdvanceSettled,prov.Provisional,prov.Unpaid 
FROM 
(
	SELECT
		SUM(ISNULL(AdvanceReceived, 0)) 'AdvanceReceived',
		SUM(ISNULL(AdvanceSettled, 0)) 'AdvanceSettled'
	FROM [FN_BIL_GetDepositNProvisionalBetnDateRange] (@FromDate, @ToDate)
) dep,
(
   Select SUM(ProvisionalAmount-CancelledAmount) 'Provisional',
       SUM(CreditAmount) 'Unpaid'
	   from  [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation_PatientCensus](@FromDate, @ToDate)
)prov
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_PatientCensus_30th_Nov_2018]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author/Date:		RAMAVTAR/03Aug2018
 Description:		report shows doctor-department wise income and patient's count
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BILL_PatientCensus_30th_Nov_2018] -- [SP_Report_BILL_PatientCensus] '2018-09-23','2018-09-23'
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Ramavtar/03Aug'18			created the script
2		Ramavtar/9Aug'18		getting summary of deposit, and deposit-return (as table 3),
								excluding entry where billstatus == cancel and for return items we are not including its amount in totalcollection
3.      sud  --					updated after creating common function. 
4.      dinesh /14thSep'18      grouped and  merged the labcharges and miscellaneous to the respective single view header 
5.		ramavtar/05Oct'18		getting provider name from employee table instead of txn table
--------------------------------------------------------
*/
BEGIN

DECLARE @cols AS NVARCHAR(MAX),
		@query AS NVARCHAR(MAX)

select @cols = STUFF((SELECT DISTINCT ',' + 
( CASE when (i.ServiceDepartmentName='ATOMIC ABSORTION')
OR(i.ServiceDepartmentName='BIOCHEMISTRY')
OR(i.ServiceDepartmentName='CLNICAL PATHOLOGY')
OR(i.ServiceDepartmentName='CLINICAL PATHOLOGY')
OR(i.ServiceDepartmentName='CYTOLOGY')
OR(i.ServiceDepartmentName='KIDNEY BIOPSY')
OR(i.ServiceDepartmentName='SKIN BIOPSY')
OR(i.ServiceDepartmentName='CONJUNCTIVAL BIOPSY')
OR(i.ServiceDepartmentName='EXTERNAL LAB-3')
OR(i.ServiceDepartmentName='EXTERNAL LAB - 1')
OR(i.ServiceDepartmentName='EXTERNAL LAB - 2')
OR(i.ServiceDepartmentName='HISTOPATHOLOGY')
OR(i.ServiceDepartmentName='IMMUNOHISTROCHEMISTRY')
OR(i.ServiceDepartmentName='MOLECULAR DIAGNOSTICS')
OR(i.ServiceDepartmentName='SPECIALISED BIOPHYSICS ASSAYS')
OR(i.ServiceDepartmentName='SEROLOGY')
OR(i.ServiceDepartmentName='MICROBIOLOGY')
OR(i.ServiceDepartmentName='HEMATOLOGY')
OR(i.ServiceDepartmentName='LABORATORY')
OR(i.ServiceDepartmentName='LAB CHARGES')
    then QUOTENAME ('PATHOLOGY')
	when(i.ServiceDepartmentName='DUCT')
OR(i.ServiceDepartmentName='MAMMOLOGY')
OR(i.ServiceDepartmentName='PERFORMANCE TEST') 
OR(i.ServiceDepartmentName='MRI')
OR(i.ServiceDepartmentName='C.T. SCAN')
OR(i.ServiceDepartmentName='ULTRASOUND')
OR(i.ServiceDepartmentName='ULTRASOUND COLOR DOPPLER')
OR(i.ServiceDepartmentName='BMD-BONEDENSITOMETRY')
OR(i.ServiceDepartmentName='OPG-ORTHOPANTOGRAM')
OR(i.ServiceDepartmentName='MAMMOGRAPHY')
OR(i.ServiceDepartmentName='X-RAY')
OR(i.ServiceDepartmentName='DEXA')
OR(i.ServiceDepartmentName='IMAGING')
then ('RADIOLOGY')
when (i.ServiceDepartmentName='MISCELLANEOUS')
OR (i.ServiceDepartmentName='MISCELLENOUS CHARGES')
then ('MISCELLANEOUS')
when(i.ServiceDepartmentName='NON INVASIVE CARDIO VASCULAR INVESTIGATIONS')
OR(i.ServiceDepartmentName='CARDIOVASCULAR SURGERY')
then 'CTVS'
	ELSE
 QUOTENAME(i.ServiceDepartmentName) END) 
               FROM BIL_TXN_BillingTransactionItems i
			   WHERE CONVERT(DATE,i.CreatedOn) BETWEEN @FromDate AND @ToDate
			   FOR XML PATH(''), TYPE
               ).value('.', 'NVARCHAR(MAX)') 
               ,1,1,'')	

-to remove the start and end bracket from column names in return table.
SELECT 'DoctorName' + ISNULL(',' + REPLACE(REPLACE(@cols, '[', ''), ']', ''), '') + ',TotalPatient,TotalCollection' AS ColumnName

set @query = 
'
SELECT A.*, B.TotalPatient, B.TotalCollection 
	FROM (
		SELECT ProviderName AS DoctorName,' + @cols + ' 
			FROM (
                SELECT 
					CASE 
						WHEN txn.ProviderId IS NOT NULL 
						THEN emp.Salutation + ''. '' + emp.FirstName + '' '' + ISNULL(emp.MiddleName + '' '','''') + emp.LastName
						ELSE ''No Doctor''
					END AS ProviderName,
					ServiceDepartmentName,
					BillingTransactionItemId
				 FROM [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation] 
				 ('''+CONVERT(VARCHAR(10),@FromDate, 101)+''' ,'''+CONVERT(VARCHAR(10),@ToDate, 101)+''' ) txn
				 LEFT JOIN EMP_Employee emp ON txn.ProviderId = emp.EmployeeId
				) x
				PIVOT 
				(
				COUNT(BillingTransactionItemId)
                FOR 
				ServiceDepartmentName
				IN (' + @cols + ')
				) p 
	) A			
	JOIN
	(
	SELECT 
		CASE 
			WHEN txn.ProviderId IS NOT NULL 
			THEN emp.Salutation + ''. '' + emp.FirstName + '' '' + ISNULL(emp.MiddleName + '' '','''') + emp.LastName
			ELSE ''No Doctor''
		END AS ProviderName,
		(COUNT(Distinct PatientId)) as TotalPatient, 
		SUM(PaidAmount - ReturnAmount + ProvisionalAmount - CancelledAmount + CreditAmount ) as TotalCollection
	FROM [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation]('''+CONVERT(VARCHAR(10),@FromDate, 101)+''' ,'''+CONVERT(VARCHAR(10),@ToDate, 101)+''' ) txn
	LEFT JOIN EMP_Employee emp ON txn.ProviderId = emp.EmployeeId
	GROUP BY emp.Salutation,
			 emp.FirstName,
			 emp.FirstName,
			 emp.MiddleName,
			 emp.LastName,
			 txn.ProviderId
	) B 
	ON A.DoctorName = B.ProviderName
	ORDER BY DoctorName
'

print(@query)
 execute(@query);
 -Table: 3: Get Summary of Deposit, Deposit-Return, Provisional & Unpaid to show in patient census--
SELECT Distinct dep.AdvanceReceived,dep.AdvanceSettled,prov.Provisional,prov.Unpaid 
FROM 
(
	SELECT
		SUM(ISNULL(AdvanceReceived, 0)) 'AdvanceReceived',
		SUM(ISNULL(AdvanceSettled, 0)) 'AdvanceSettled'
	FROM [FN_BIL_GetDepositNProvisionalBetnDateRange] (@FromDate, @ToDate)
) dep,
(
   Select SUM(ProvisionalAmount-CancelledAmount) 'Provisional',
       SUM(CreditAmount) 'Unpaid'
	   from  [dbo].[FN_BIL_GetTxnItemsInfoWithDateSeparation](@FromDate, @ToDate)
)prov
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_PatientCensus_old]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author/Date:		RAMAVTAR/03Aug2018
 Description:		report shows doctor-department wise income and patient's count
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_BILL_PatientCensus_old]
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Ramavtar/03Aug'18			created the script
2		Ramavtar/08Aug'18			getting patient count as distinct(patientid) instead of billingTxnItems
--------------------------------------------------------
*/
BEGIN

DECLARE @cols AS NVARCHAR(MAX),
		@query AS NVARCHAR(MAX)

select @cols = STUFF((SELECT DISTINCT ',' + QUOTENAME(i.ServiceDepartmentName) 
               FROM BIL_TXN_BillingTransactionItems i
			   WHERE CONVERT(DATE,i.CreatedOn) BETWEEN @FromDate AND @ToDate
			   FOR XML PATH(''), TYPE
               ).value('.', 'NVARCHAR(MAX)') 
               ,1,1,'')	

-to remove the start and end bracket from column names in return table.
SELECT 'DoctorName' + ISNULL(',' + REPLACE(REPLACE(@cols, '[', ''), ']', ''), '') + ',TotalPatient,TotalCollection' AS ColumnName

set @query = 
'
SELECT A.*, B.TotalPatient, B.TotalCollection 
	FROM (
		SELECT ProviderName AS DoctorName,' + @cols + ' 
			FROM (
                SELECT ISNULL(ProviderName,''No Doctor'') as ProviderName,ServiceDepartmentName,BillingTransactionItemId
					FROM BIL_TXN_BillingTransactionItems
					WHERE CONVERT(DATE,CreatedOn) BETWEEN ''' + CONVERT(VARCHAR(10),@FromDate, 101) + ''' AND ''' +  CONVERT(VARCHAR(10),@ToDate, 101) + '''
				) x
				PIVOT 
				(
				COUNT(BillingTransactionItemId)
                FOR ServiceDepartmentName IN (' + @cols + ')
				) p 
	) A			
	JOIN
	(
	SELECT ISNULL(ProviderName,''No Doctor'') as ProviderName,(COUNT(Distinct PatientId)) as TotalPatient, SUM(TotalAmount) as TotalCollection
		FROM BIL_TXN_BillingTransactionItems
		WHERE CONVERT(DATE,CreatedOn) BETWEEN ''' + CONVERT(VARCHAR(10),@FromDate, 101) + ''' AND ''' +  CONVERT(VARCHAR(10),@ToDate, 101) + '''
		GROUP BY ProviderName
	)B 
	ON A.DoctorName = B.ProviderName
'
execute(@query);
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_Return_Bills]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----------------------------[SP_Report_Deposit_Balance]------------------------------

-------------------[SP_Report_BILL_Return_Bills]-----------------------

CREATE PROCEDURE [dbo].[SP_Report_BILL_Return_Bills] 
	  @FromDate DateTime=null,
	  @ToDate DateTime=null
	 
AS
/*
FileName: [SP_Report_BILL_Return_Bills]
CreatedBy/date: Umed/24-07-2017
Description: This sp will give sum of total amount return by each item along with its necesorry details recipt no, hospital no, patient name, service department name,return date, and return remarks
Remarks:    
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
--------------------------------------------------------
1       Umed/24-07-2017	                   created the script
2       Umed/02-08-2017                   Remove coutername and Added user and added Hospital no 
3       Umed/24-04-2018                   Removed Duplicate ReturnDate Column and Apply Order By Date in Desc
---------------------------------------------------------
*/
BEGIN
    
     
		SELECT 
				CONVERT(DATE,br.CreatedOn) AS [Date],
				BillingTransactionId AS 'ReceiptNo',
				p.PatientCode,
				(p.FirstName+' '+ISNULL(p.MiddleName,'')+''+p.LastName) AS PatientName, 
				sd.ServiceDepartmentName,
				bip.ItemName,
				br.TotalAmount,
				--ReturnDate,
				---C.CounterName,
				(emp.FirstName+' '+ISNULL(emp.MiddleName,'')+' ' +emp.LastName) as Users ,
				ReturnRemarks 
		FROM    BIL_TXN_BillingReturn br
		JOIN    PAT_Patient p ON p.PatientId=br.PatientId
		JOIN    EMP_Employee emp ON emp.EmployeeId = br.CreatedBy
		JOIN    BIL_MST_ServiceDepartment sd ON sd.ServiceDepartmentId=br.ServiceDepartmentId
		JOIN    BIL_CFG_BillItemPrice bip ON br.ItemId=bip.ItemId and br.ServiceDepartmentId=bip.ServiceDepartmentId 
		WHERE  CONVERT(DATE,br.CreatedOn) 
			      BETWEEN ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())+1
        ORDER BY  CONVERT(DATE,br.CreatedOn) desc

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_SalesDaybook]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_BILL_SalesDaybook]
	  @FromDate Date=null,
	  @ToDate Date=null,
	  @IsInsurance bit=0
AS
/*
[SP_Report_BILL_SalesDaybook] '2018-08-18','2018-08-18'
FileName: [SP_Report_BILL_SalesDaybook]
CreatedBy/date: nagesh/2017-05-25
Description: to get the total of Billed, Unbilled, and Returned along with the total cash collection
Remarks:    We're querying same table multiple times here, check if we can do it in a better way.
       : Need to check again for CashDiscount and Trade Discount
	   : Apply date filter in each sub-query as well--
	   : totalAmount equals be TotalAmount-ReturnAmount in all cases---
Change History
-----------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                                            Remarks
-----------------------------------------------------------------------------------
1       nagesh/umed/dinesh from May2017 to Nov2017	      created the script
2.      sud: 27May'18                                     modified as per new table designs      
3.      sud: 19Aug'18                                     Re-calculation for TotalAmount in Return Case. 
4.      sud: 6Aug'19                                      Added parameter for Insurance
5.		sud/Dhanashri: 27Sep'21							  If PaymentMode=Credit then that goes as Credit Sales no matter if it was paid on the same day
														  We're taking Only PaidAmount from Settlement
------------------------------------------------------------------------------------
*/
BEGIN
 
     SELECT  d.BillingDate, 
	ISNULL(sales.CashSubtotal,0) Paid_SubTotal,
	ISNULL(sales.CashDiscount,0) Paid_DiscountAmount,
	ISNULL(sales.CashTotalAmount,0) Paid_TotalAmount,
	ISNULL(sales.CreditSubtotal,0)  CrSales_SubTotal,
	ISNULL(sales.CreditDiscount,0) CrSales_DiscountAmount,
	ISNULL(sales.CreditTotalAmount,0) CrSales_TotalAmount,
	ISNULL(retSales.Return_CashSubtotal,0) AS CashRet_SubTotal,
	ISNULL(retSales.Return_CashDiscount,0) AS CashRet_DiscountAmount,
	ISNULL(retSales.Return_CashTotalAmount,0) AS CashRet_TotalAmount,
	ISNULL(retSales.Return_CreditSubtotal,0) AS CrRet_SubTotal,
	ISNULL(retSales.Return_CreditDiscount,0) AS CrRet_DiscountAmount,
	ISNULL(retSales.Return_CreditTotalAmount,0) AS CrRet_TotalAmount,
	ISNULL(sett.Settl_PaidAmount,0) AS 'CreditReceivedAmount',
	ISNULL(dep.DepositReceived,0) AS DepositReceived,
	ISNULL(dep.DepositDeducted,0) AS DepositDeducted,
	ISNULL(dep.DepositRefund,0) AS DepositRefund,
	ISNULL(sales.CashSubtotal,0)+ISNULL(sales.CreditSubtotal,0) 'SubTotal',
	ISNULL(sales.CashDiscount,0)+ISNULL(sales.CreditDiscount,0) 'DiscountAmount',
	ISNULL(retSales.Return_CashSubtotal,0)+ISNULL(retSales.Return_CreditSubtotal,0) 'TotalSalesReturn',
	ISNULL(retSales.Return_CashDiscount,0)+ISNULL(retSales.Return_CreditDiscount,0) 'TotalReturnDiscount',
	ISNULL(sales.CashTotalAmount,0)+ISNULL(sales.CreditTotalAmount,0) - (ISNULL(retSales.Return_CashTotalAmount,0)+ISNULL(retSales.Return_CreditTotalAmount,0)) 'TotalAmount',
	-Net Cash Sales Only = ( CashTotalAmt - CashReturnTotalAmount)
	ISNULL(sales.CashTotalAmount,0) - ISNULL(retSales.Return_CashTotalAmount,0) 
	   + ISNULL(dep.DepositReceived,0) - ISNULL(dep.DepositDeducted,0) - ISNULL(dep.DepositRefund,0)
	   + ISNULL(sett.Settl_PaidAmount,0) 'CashCollection'
FROM 
(
  SELECT Dates 'BillingDate' 
  FROM [FN_COMMON_GetAllDatesBetweenRange] (ISNULL(@FromDate,GETDATE()),ISNULL(@ToDate,GETDATE()))
) d 
LEFT JOIN 
 (
   Cash Sales Information
  Credit Sales Informations
  Select Convert(date,txn.CreatedOn) 'BillingDate',
      SUM( 
	    CASE WHEN PaymentMode='cash' THEN ISNULL(txn.SubTotal,0)
	    ELSE 0 END
		) 'CashSubtotal' ,
      SUM( 
	    CASE WHEN PaymentMode='cash' THEN ISNULL(txn.DiscountAmount,0)
	    ELSE 0 END
		) 'CashDiscount' ,
      SUM( 
	    CASE WHEN PaymentMode='cash' THEN ISNULL(txn.TotalAmount,0)
	    ELSE 0 END
		) 'CashTotalAmount' ,

      SUM( 
	    CASE WHEN PaymentMode='credit' THEN ISNULL(txn.SubTotal,0)
	    ELSE 0 END
		) 'CreditSubtotal' ,
      SUM( 
	    CASE WHEN PaymentMode='credit' THEN ISNULL(txn.DiscountAmount,0)
	    ELSE 0 END
		) 'CreditDiscount' ,
      SUM( 
	    CASE WHEN PaymentMode='credit' THEN ISNULL(txn.TotalAmount,0)
	    ELSE 0 END
		) 'CreditTotalAmount' 

  FROM BIL_TXN_BillingTransaction txn 
  WHERE  ---txn.PaymentMode = 'cash'
         Convert(Date,txn.CreatedOn) BETWEEN @FromDate and @ToDate
  Group by Convert(Date,txn.CreatedOn)
) sales 
ON d.BillingDate = sales.BillingDate


  Cash Return Information
  Credit Return Information
LEFT JOIN
(
  Select Convert(date,ret.CreatedOn) 'BillingDate',
      SUM( 
	    CASE WHEN PaymentMode='cash' THEN ISNULL(ret.SubTotal,0)
	    ELSE 0 END
		) 'Return_CashSubtotal' ,
      SUM( 
	    CASE WHEN PaymentMode='cash' THEN ISNULL(ret.DiscountAmount,0)
	    ELSE 0 END
		) 'Return_CashDiscount',
      SUM( 
	    CASE WHEN PaymentMode='cash' THEN ISNULL(ret.TotalAmount,0)
	    ELSE 0 END
		) 'Return_CashTotalAmount' ,

      SUM( 
	    CASE WHEN PaymentMode='credit' THEN ISNULL(ret.SubTotal,0)
	    ELSE 0 END
		) 'Return_CreditSubtotal' ,
      SUM( 
	    CASE WHEN PaymentMode='credit' THEN ISNULL(ret.DiscountAmount,0)
	    ELSE 0 END
		) 'Return_CreditDiscount' ,
      SUM( 
	    CASE WHEN PaymentMode='credit' THEN ISNULL(ret.TotalAmount,0)
	    ELSE 0 END
		) 'Return_CreditTotalAmount' 

  FROM BIL_TXN_InvoiceReturn ret 
  WHERE Convert(Date,ret.CreatedOn) BETWEEN @FromDate and @ToDate
  Group by Convert(Date,ret.CreatedOn)
) retSales  ON d.BillingDate = retSales.BillingDate


Settement> Cash Discount Information
LEFT JOIN 
(
Select Convert(date,sett.SettlementDate) 'BillingDate',
         SUM(ISNULL(sett.PaidAmount,0) ) 'Settl_PaidAmount'
from BIL_TXN_Settlements sett 
GROUP BY Convert(date,sett.SettlementDate)
) sett ON d.BillingDate = sett.BillingDate

 Deposit Informations
LEFT JOIN
(
  Select Convert(date,dep.CreatedOn) 'BillingDate',
      SUM( Case WHEN dep.DepositType='Deposit' then ISNULL(dep.Amount,0) ELSE 0 END ) AS 'DepositReceived',
      SUM( Case WHEN dep.DepositType='depositdeduct' then ISNULL(dep.Amount,0) ELSE 0  END) AS 'DepositDeducted',
      SUM( Case WHEN dep.DepositType='ReturnDeposit' then ISNULL(dep.Amount,0) ELSE 0  END) AS 'DepositRefund'  
  from BIL_TXN_Deposit dep
  Where Convert(date,dep.CreatedOn) BETWEEN @FromDate and @ToDate
  Group BY Convert(date,dep.CreatedOn)
) dep ON d.BillingDate = dep.BillingDate

order by d.BillingDate
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_TotalItemsBill]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_Report_BILL_TotalItemsBill] 	-- [SP_Report_BILL_TotalItemsBill] '2021-06-15', '2021-07-15', null,null,null
        @FromDate DATE = NULL,
		@ToDate DATE = NULL,
		@billingType varchar(20)='all',
		@ServiceDepartmentName VARCHAR(200) = null,
		@ItemName VARCHAR(200) = null
AS
/*
FileName: [sp_Report_TotalItemsBill]
CreatedBy/date: Sud:20Aug'21
Description: To get details of sales and returnsales at item level
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date               Remarks
-----------------------------------------------------
1.       Sud:20Aug'21                 Complete re-write as per new logic
------------------------------------------------------
*/
BEGIN
 
-Set @IsInsurance flag from input billing type. Boolean comparison is faster than string comparison.--
Declare @IsInsurance BIT;
 IF(LOWER(@billingType)='insurance')
BEGIN
 SET @IsInsurance = 1;
END
ELSE IF(LOWER(@billingType)='normal')
BEGIN
 SET @IsInsurance = 0;
END
ELSE IF(LOWER(@billingType)='all')
BEGIN
 SET @IsInsurance = NULL;
END

Select * from 

(
 -start: Section:1--- Sales Information at Item Level (CashSales, Credit Sales)-----
	Select 
		Convert(Date,txn.CreatedOn) 'TransactionDate',
   		txn.InvoiceCode+'-'+Convert(varchar(20),txn.InvoiceNo) 'ReceiptNo',
		Case WHEN txn.PaymentMode ='credit' THEN 'CreditSales'
			ELSE 'CashSales' END AS BillingType,
        txnItm.VisitType 'VisitType',
		p.PatientCode 'HospitalNumber',
		p.ShortName 'PatientName', 
		srv.ServiceDepartmentName,
		txnItm.ItemName,
		txnItm.Price,
		txnItm.Quantity,
		txnItm.SubTotal 'SubTotal',
		txnItm.DiscountAmount 'DiscountAmount',
		txnItm.TotalAmount 'TotalAmount',
		CASE WHEN  ISNULL(txnItm.ProviderId,0)=0 THEN 'NoDoctor' 
			ELSE empAssign.FullName END AS AssignedToDoctor,
		CASE WHEN  ISNULL(txnItm.RequestedBy,0)=0 THEN 'SELF' 
			ELSE empRef.FullName END AS ReferredByDoctor,
		txnItm.Remarks 'Remarks',
		'NA' AS 'ReferenceReceiptNo',
		empUsr.FullName AS 'UserName',
		ISNULL(memb.MembershipTypeName,'General') 'DiscountScheme',  --if not found then it's General
		-we're taking insurance flag from invoice table---
		Case WHEN ISNULL(txn.IsInsuranceBilling,0)=1 THEN 'YES'
		     ELSE 'NO' END AS IsInsurance

	From  BIL_TXN_BillingTransaction txn 
		 INNER JOin BIL_TXN_BillingTransactionItems txnItm on txn.BillingTransactionId = txnItm.BillingTransactionId
		 INNER JOIN BIL_MST_ServiceDepartment srv ON txnItm.ServiceDepartmentId=srv.ServiceDepartmentId
		 INNER JOIN  PAT_Patient P  on txn.PatientId =p.PatientId
		 INNER JOIN EMP_Employee empUsr ON empUsr.EmployeeId = txn.CreatedBy 
		 LEFT JOIN EMP_Employee empRef on empRef.EmployeeId = txnItm.RequestedBy
		 LEFT JOIN EMP_Employee empAssign on empAssign.EmployeeId = txnItm.ProviderId
		 LEFT JOIN PAT_CFG_MembershipType memb on txnItm.DiscountSchemeId=memb.MembershipTypeId
		 
	where  Convert(Date, txn.CreatedOn) between @FromDate and @Todate
		and  (ISNULL(@IsInsurance, ISNULL(txn.IsInsuranceBilling, 0)) = ISNULL(txn.IsInsuranceBilling, 0))
		AND (srv.ServiceDepartmentName LIKE '%' + ISNULL(@ServiceDepartmentName, srv.ServiceDepartmentName) + '%')
        AND (txnItm.ItemName LIKE '%' + ISNULL(@ItemName, txnItm.ItemName) + '%')
   -end: Section:1--- Sales Information at Item Level (CashSales, Credit Sales)-----

	UNION ALL

 -start: Section:2--- Return Sales Information at Item Level (Return CashSales, Return CreditSales)-----
	Select 
		Convert(Date,ret.CreatedOn) 'TransactionDate',
   		'CRN-'+Convert(varchar(20),ret.CreditNoteNumber) 'CreditNoteNumber',
		Case WHEN ret.PaymentMode ='credit' THEN 'ReturnCreditSales'
			ELSE 'ReturnCashSales' END AS BillingType,
        retItm.VisitType 'VisitType',
		p.PatientCode 'HospitalNumber',
		p.ShortName 'PatientName', 
		srv.ServiceDepartmentName,
		retItm.ItemName,
		retItm.Price,
		retItm.RetQuantity,
		retItm.RetSubTotal 'SubTotal',
		retItm.RetDiscountAmount 'DiscountAmount',
		retItm.RetTotalAmount 'TotalAmount',
		CASE WHEN  ISNULL(retItm.ProviderId,0)=0 THEN 'NoDoctor' 
			ELSE empAssign.FullName END AS AssignedToDoctor,
		CASE WHEN  ISNULL(retItm.RequestedBy,0)=0 THEN 'SELF' 
			ELSE empRef.FullName END AS ReferredByDoctor,
		retItm.RetRemarks 'Remarks',
		ret.InvoiceCode+'-'+Convert(varchar(20),ret.RefInvoiceNum) AS 'ReferenceReceiptNo',
		empUsr.FullName AS 'UserName',
		ISNULL(memb.MembershipTypeName,'General') 'DiscountScheme',  --if not found then it's General
		-we're taking insurance flag from credit note level---
		Case WHEN ISNULL(ret.IsInsuranceBilling,0)=1 THEN 'YES'
		     ELSE 'NO' END AS IsInsurance

	From  BIL_TXN_InvoiceReturn ret 
		 INNER JOin BIL_TXN_InvoiceReturnItems retItm on ret.BillReturnId = retItm.BillReturnId
		 INNER JOIN BIL_MST_ServiceDepartment srv ON retItm.ServiceDepartmentId=srv.ServiceDepartmentId
		 INNER JOIN  PAT_Patient P  on ret.PatientId =p.PatientId
		 INNER JOIN EMP_Employee empUsr ON empUsr.EmployeeId = ret.CreatedBy 
		 LEFT JOIN EMP_Employee empRef on empRef.EmployeeId = retItm.RequestedBy
		 LEFT JOIN EMP_Employee empAssign on empAssign.EmployeeId = retItm.ProviderId
		 LEFT JOIN PAT_CFG_MembershipType memb on retItm.DiscountSchemeId=memb.MembershipTypeId

	WHERE  Convert(Date, ret.CreatedOn) between @FromDate and @Todate
	AND  (ISNULL(@IsInsurance, ISNULL(ret.IsInsuranceBilling, 0)) = ISNULL(ret.IsInsuranceBilling, 0))
	AND (srv.ServiceDepartmentName LIKE '%' + ISNULL(@ServiceDepartmentName, srv.ServiceDepartmentName) + '%')
    AND (retItm.ItemName LIKE '%' + ISNULL(@ItemName, retItm.ItemName) + '%')
	-end: Section:2--- Return Sales Information at Item Level (Return CashSales, Return CreditSales)-----

) itmDetails


Order by TransactionDate--, HospitalNumber

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_BILL_UserWiseCashCollectionReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_Report_BILL_UserWiseCashCollectionReport] 
CreatedBy/date: Aniket/17-10-2021
Description: To get the Details of User Wise Cash Collection report
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.    Aniket/17-10-2021                    created the script
--------------------------------------------------------------------------
*/
Create PROCEDURE [dbo].[SP_Report_BILL_UserWiseCashCollectionReport]
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@UserId INT = NULL
AS
BEGIN

SELECT
  ISNULL(OPD.UserName, IPD.UserName) 'UserName',
  ISNULL(OPD.SubTotal, 0) 'OP_Collection',
  ISNULL(OPD.Discount, 0) 'OP_Discount',
  ISNULL(OPD.Refund, 0) 'OP_Refund',
  ISNULL(OPD.ReturnDiscount, 0) 'OP_ReturnDiscount',
  ISNULL(OPD.NetTotal, 0) 'OP_NetTotal',
  ISNULL(IPD.SubTotal, 0) 'IP_Collection',
  ISNULL(IPD.Discount, 0) 'IP_Discount',
  ISNULL(IPD.Refund, 0) 'IP_Refund',
  ISNULL(IPD.ReturnDiscount, 0) 'IP_ReturnDiscount',
  ISNULL(IPD.NetTotal, 0) 'IP_NetTotal',
  ((ISNULL(OPD.NetTotal, 0) + ISNULL(IPD.NetTotal, 0))) + ((ISNULL(depOut.AdvanceReceived, 0) - ISNULL(depOut.AdvanceSettled, 0))) 'Grand_Total',
  ISNULL(depOut.AdvanceReceived, 0) 'DepositAmount',
  ISNULL(depOut.AdvanceSettled, 0) 'DepositReturn'

FROM (SELECT
		CASE
			WHEN UserId IS NOT NULL THEN UserName
			ELSE 'NoDoctor'
		END AS 'UserName',
		SUM(ISNULL(SubTotal, 0)) 'SubTotal',
		SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
		SUM(ISNULL(ReturnAmount, 0)) AS 'Refund',
		SUM(ISNULL(ReturnDiscount, 0)) AS 'ReturnDiscount',
		SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnAmount, 0)) AS 'NetTotal'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparationForUserCashCollectionReport(@FromDate, @ToDate)
	WHERE BillingType = 'OutPatient' AND BillStatus != 'cancelled'
		AND (ISNULL(@UserId, ISNULL(UserId, 0)) = ISNULL(UserId, 0))
	GROUP BY UserId,UserName) OPD
FULL OUTER JOIN (
	SELECT
		CASE
			WHEN UserId IS NOT NULL THEN UserName
			ELSE 'NoUser'
		END AS 'UserName',
		SUM(ISNULL(SubTotal, 0)) 'SubTotal',
		SUM(ISNULL(DiscountAmount, 0)) AS 'Discount',
		SUM(ISNULL(ReturnAmount, 0)) AS 'Refund',
		SUM(ISNULL(ReturnDiscount, 0)) AS 'ReturnDiscount',
		SUM(ISNULL(TotalAmount, 0) - ISNULL(ReturnAmount, 0)) AS 'NetTotal'
	FROM FN_BIL_GetTxnItemsInfoWithDateSeparationForUserCashCollectionReport(@FromDate, @ToDate) tbl
	WHERE BillingType = 'Inpatient' AND BillStatus != 'cancelled'
		AND (ISNULL(@UserId, ISNULL(UserId, 0)) = ISNULL(UserId, 0))
		AND (tbl.UserId = @UserId Or @UserId is null)
	GROUP BY UserId,UserName) IPD
ON OPD.UserName = IPD.UserName
LEFT JOIN 
(SELECT
        SUM(CASE WHEN DepositType = 'Deposit' THEN Amount ELSE 0 END) AS 'AdvanceReceived',
        SUM(CASE WHEN DepositType = 'depositdeduct' OR DepositType = 'ReturnDeposit' THEN Amount ELSE 0 END) AS 'AdvanceSettled',
		emp.FullName
    FROM BIL_TXN_Deposit as dep1
	join EMP_Employee as emp on dep1.CreatedBy= emp.EmployeeId
    WHERE CONVERT(date, dep1.CreatedOn) BETWEEN CONVERT(date, ISNULL(@FromDate, GETDATE())) AND CONVERT(date, ISNULL(@ToDate, GETDATE()))
	Group By FullName) as depOut on OPD.UserName = depOut.FullName
ORDER BY UserName

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_DailyCollectionVsHandoverReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[SP_Report_DailyCollectionVsHandoverReport]  
(@FromDate DATE, @ToDate DATE)
AS
 =============================================
 Author:        <Pratik Mani Lamichhane>
 Create date: <10 Aug 2021>
 Description:    <DailyCollection Vs Handover Report>
 =============================================
BEGIN

 

Select empMst.EmployeeId, emp1.FullName,
        ISNULL(colln.CollectionAmount,0) 'CollectionTillDate', 
        ISNULL(deps.HandoverAmount,0) 'HandoverTillDate',
        ISNULL(colln.CollectionAmount,0)-ISNULL(deps.HandoverAmount,0) 'DueAmount',
        empMst.Dates as [Date]

 

from 
(
    Select * from (Select Distinct EmployeeId from TXN_EmpCashTransaction) employee
    CROSS JOIN (Select * from FN_COMMON_GetAllDatesBetweenRange(@FromDate,@ToDate)) dates
) empMst 

 

LEFT JOIN EMP_Employee emp1  ON empMst.EmployeeId = emp1.EmployeeId 

 

LEFT JOIN
(
    SELECT EmployeeId,
    Sum(ISNULL(InAmount,0)) - Sum(ISNULL(OutAmount,0)) 'CollectionAmount',
    CONVERT(DATE,TransactionDate) as 'CollectionDate'
    FROM TXN_EmpCashTransaction  
    Where  TransactionType !='HandoverGiven' and Convert(Date,TransactionDate) BETWEEN Convert(Date,@FromDate) and Convert(Date,@ToDate)
    Group by EmployeeId,CONVERT(DATE,TransactionDate)
) colln ON empMst.EmployeeId = colln.EmployeeId AND empMst.Dates = CollectionDate

 


 LEFT JOIN
(
    SELECT EmployeeId,
    Sum(Isnull(OutAmount,0)) 'HandoverAmount',
    CONVERT(DATE,TransactionDate) as 'HandoverTransactionDate'
    FROM TXN_EmpCashTransaction  
    Where TransactionType ='HandoverGiven' and Convert(Date,TransactionDate) BETWEEN Convert(Date,@FromDate) and Convert(Date,@ToDate)
    Group by EmployeeId,CONVERT(DATE,TransactionDate)
) deps ON empMst.EmployeeId = deps.EmployeeId AND empMst.Dates = HandoverTransactionDate

 Where ISNULL(colln.CollectionAmount,0) !=0 OR  ISNULL(deps.HandoverAmount,0)!=0
 Order by emp1.FullName
 End

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_DepartmentWiseDiscountSchemeReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_DepartmentWiseDiscountSchemeReport] -- [SP_Report_DepartmentWiseDiscountSchemeReport] '2021-06-23','2021-09-23'
	@FromDate Datetime null=null ,
	@ToDate DateTime null=null,
	@MembershipTypeId int null=null,
	@ServiceDepartmentId int null=null,
	@PaymentMode nvarchar(4000) null = null
AS
/*
FileName: [SP_Report_SchemeWiseDiscountReport]
CreatedBy/date: Aniket/2021-10-06
Description: to get the Scheme Wise Discount Report for the hospital
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       Aniket/2021-10-06					Altered the Script
---------------------------------------------------------------------------------------
*/
BEGIN
		Select * from 
(
Select   	
memb.MembershipTypeId as MembershipTypeId, 
memb.MembershipTypeName, 
memb.CommunityName,
PaymentMode,
BillingTransactionId,
serv.ServiceDepartmentName as ServiceDepartmentName,
serv.ServiceDepartmentId as ServiceDepartmentId,
CashTotalAmount 'CashAmount',
CreditTotalAmount 'CreditAmount',
ISNULL(sales.TotalAmount,0) AS 'TotalAmount',
ISNULL(sales.Subtotal,0) AS SalesSubtotal, 
ISNULL(sales.DiscountAmount,0) AS 'TotalDiscount', 
ISNULL(sales.TotalAmount,0) - ISNULL(NetRefundAmount,0) 'NetAmount',
sales.TotalQuantity,
DiscountRefund,
NetRefundAmount
from 
PAT_CFG_MembershipType  memb
Left Join 
(
Select itm.DiscountSchemeId,
itm.ServiceDepartmentId,
SUM(itm.SubTotal) 'Subtotal',
SUM(ISNULL(itm.DiscountAmount,0)) 'DiscountAmount',
SUM(itm.TotalAmount) 'TotalAmount',
SUM(itm.Quantity) 'TotalQuantity',
txn.PaymentMode as 'PaymentMode',
txn.BillingTransactionId as 'BillingTransactionId',
SUM(ISNULL(retTxnitm.RetTotalAmount,0)) AS 'NetRefundAmount',
SUM(ISNULL(retTxnitm.RetDiscountAmount,0)) AS 'DiscountRefund',
SUM( (Case WHen txn.PaymentMode ='cash' then itm.TotalAmount
ELSE 0 END )) AS CashTotalAmount,
SUM( (Case WHen txn.PaymentMode ='credit' then itm.TotalAmount
ELSE 0 END )) AS CreditTotalAmount
  
    from BIL_TXN_BillingTransaction txn
    Left join BIL_TXN_BillingTransactionItems itm on txn.BillingTransactionId = itm.BillingTransactionId
	Left join BIL_TXN_InvoiceReturnItems retTxnitm
on itm.BillingTransactionItemId = retTxnitm.BillingTransactionItemId
Where Convert(Date, txn.CreatedOn) Between @FromDate and @ToDate
Group by itm.DiscountSchemeId,itm.ServiceDepartmentId,txn.PaymentMode, txn.BillingTransactionId
) sales
ON memb.MembershipTypeId= sales.DiscountSchemeId 

join BIL_MST_ServiceDepartment serv on sales.ServiceDepartmentId= serv.ServiceDepartmentId
  
)tbl

Where ( 
        ISNULL(SalesSubtotal,0) !=0
        ISNULL(CashAmount,0) !=0
    OR  ISNULL(CreditAmount,0) !=0
    OR  ISNULL(TotalAmount,0) !=0
    OR  ISNULL(TotalDiscount,0) !=0
    OR  ISNULL(NetRefundAmount,0) !=0  
    OR  ISNULL(DiscountRefund,0) !=0
    )
	AND ((MembershipTypeId = @MembershipTypeId Or @MembershipTypeId is null) AND (ServiceDepartmentId = @ServiceDepartmentId Or @ServiceDepartmentId is null) AND (PaymentMode = @PaymentMode Or @PaymentMode is null))
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Deposit_Balance]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Deposit_Balance]   
AS
/*
FileName: [SP_Report_Deposit_Balance]
CreatedBy/date: dinesh/2017-07-19
Description: To get the deposit Balance of the Patient
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2017-05-25                     created the script
2       Umed/2018-04-23                  Apply Round Off on Deposit Balance Because During Export it Dont Require
3.     Ramavtar/2018-06-05              change the whole SP.. bring deposit amount of patients
4.     Narayan/2019-09-16               added  DepositId column.
5.     Arpan/Shankar/2020-03-24         deduct both depositdeduct and returndeposit from deposit
6.     Sud/5-oct-2020                   Adding PhoneNumber to deposit balance report
7.     Sud/Pratik: 12Sep'21             Showing Deposits of only patient having some deposits remaining.
------------------------------------------------------
*/
BEGIN
Declare @FromDate DATE= '2015-01-01' -- Need to get from the beginning of the Software..
, @ToDate Date= Convert(Date,Getdate()) --Need to check UPTO-Today.

  Select * from 
  (
    Select PatientId, PatientCode, PatientName, DateOfBirth,
      Gender, PhoneNumber, SUM(ISNULL(DepositReceived,0)) 'TotalDeposit',
    SUM(ISNULL(DepositDeducted,0)) 'TotalDeducted',
    SUM(ISNULL(DepositReturned,0)) 'TotalRefunded',
    SUM(ISNULL(DepositReceived,0))- SUM((ISNULL(DepositDeducted,0)+ISNULL(DepositReturned,0))) 'Balance'
    from FN_RPT_BIL_GetDepositTransationsInDatRange (@FromDate,@ToDate,null,null)
    Group by PatientId, PatientCode, PatientName, DateOfBirth, Gender, PhoneNumber
  ) A
  Where Balance !=0 
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Discount]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[SP_Report_Discount] -- [dbo].[SP_Report_Discount] '2018-07-05','2018-07-05',null,null
		@FromDate Datetime=null ,
		@ToDate DateTime=null,
		@CounterId varchar(max)=null,
		@CreatedBy varchar(max)=null
AS
/*
FileName: [[SP_Report_Discount]]
CreatedBy/date: Dinesh/2018-07-05
Description: to get the Discount Report for the hospital
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       Dinesh/2018-07-05					Created the Script
---------------------------------------------------------------------------------------
*/
BEGIN
	IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL) 
		BEGIN
					Select 
				   convert(varchar(20),dates.ReportDate) AS [Date],
				    txnInfo.InvoiceCode+ Convert(varchar(20),txnInfo.InvoiceNo) 'ReceiptNo', 
					pat.PatientCode as HospitalNo,
					pat.FirstName+ISNULL(' '+pat.MiddleName,'')+' '+ pat.LastName AS PatientName,
  					ISNULL(txn.SubTotal,0) as 'Price',
					ISNULL(txn.DiscountAmount,0) AS 'DiscountAmount', 
					ISNULL(txn.TaxTotal,0) as 'Tax',
					ISNULL(txn.TotalAmount,0) TotalAmount,
					txn.Remarks as Remarks,
					emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+ emp.LastName AS CreatedBy,
					txnInfo.CounterId as 'CounterId'
			FROM

			 ( select Dates 'ReportDate' from [FN_COMMON_GetAllDatesBetweenRange] (ISNULL(@FromDate,GETDATE()),ISNULL(@ToDate,GETDATE())) )  dates

			 LEFT JOIN

			 (
					 SELECT Convert(date, CreatedOn) 'TxnDate', BillingTransactionId, InvoiceCode, InvoiceNo,  PatientID , CreatedBy , CounterId
					  FROM BIL_TXN_BillingTransaction
					  WHERE Convert(date, CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())

					  UNION
                SELECT Distinct CONVERT(DATE,CreatedOn)as TxnDate, BillingTransactionId, InvoiceCode, RefInvoiceNum,  PatientId, CreatedBy, CounterId
				from BIL_TXN_InvoiceReturn r 
                 WHERE Convert(date, CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())

			) txnInfo
			ON dates.ReportDate=txnInfo.TxnDate
			-Join with Patient and Employee Table to get their names etc---
			INNER JOIN
			PAT_Patient pat on txnInfo.PatientId=pat.PatientId
			INNER JOIN EMP_Employee emp on txnInfo.CreatedBy=emp.EmployeeId

			LEFT JOIN BIL_TXN_BillingTransaction txn
			   ON dates.ReportDate=Convert(date,txn.CreatedOn) AND txnInfo.BillingTransactionId = txn.BillingTransactionId
			   and txnInfo.CounterId = txn.CounterId AND txnInfo.CreatedBy=txn.CreatedBy

			LEFT JOIN
			(
				select convert(date,CreatedOn) as DepositDate,DepositAmount as Amount,BillingTransactionId, CounterId, CreatedBy
				from  BIL_TXN_BillingTransaction bt 
				  where TransactionType='Deposit' 
			) deposit
				ON dates.ReportDate=deposit.DepositDate 
				   and txnInfo.BillingTransactionId = deposit.BillingTransactionId
				   AND txnInfo.CounterId = deposit.CounterId
				   AND txnInfo.CreatedBy=deposit.CreatedBy

			
            WHERE dates.ReportDate BETWEEN  ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1   
                AND		(txnInfo.CounterId like '%'+ISNULL(@CounterId,txnInfo.CounterId)+'%') 
				AND		(emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+ emp.LastName like '%'+ISNULL(@CreatedBy,emp.FirstName+ISNULL(' '+emp.MiddleName,'')+' '+ emp.LastName)+'%')
				AND txn.DiscountAmount>0
				AND txn.ReturnStatus='False'
            ORDER BY dates.ReportDate desc
		END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Dispatch_Details]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Dispatch_Details]
  @DispatchId int = 0
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Kushal/18 Oct 2019				Created Script 
2		Sanjit/5 Mar 2020				divided by zero bug fix using case statement
3.      Sud/3Mar'20						Changed Department to Store (needs revision)
4.		Sanjit/10Apr'20					Added Remarks in SP	
5.		Sanjit/17Apr'20					Added few more properties to use it in Dispatch Receipt.
6.		Sanjit/12Sep'21					Stock Refactoring Changes
--------------------------------------------------------
*/
BEGIN
  IF(@DispatchId > 0)
	BEGIN
    SELECT
      D.DispatchId,
      RI.RequisitionId,
      RI.RequisitionNo,
      RI.IssueNo,
      R.RequisitionDate,
      D.CreatedOn AS DispatchedDate,
      RI.RequisitionItemId,
      D.ItemId,
      I.Code,
      I.ItemName,
      RI.Quantity,
      RI.PendingQuantity,
      RI.ReceivedQuantity,
      D.DispatchedQuantity,
      (SELECT TOP(1)
        CostPrice
      FROM INV_TXN_StockTransaction
      WHERE TransactionType IN ('dispatched-item-to','dispatched-item-from','dispensary-dispatched-item','dispatched-item') AND ReferenceNo = D.DispatchItemsId) AS CostPrice,
      D.DispatchedQuantity * (SELECT TOP(1)
        CostPrice
      FROM INV_TXN_StockTransaction
      WHERE TransactionType IN ('dispatched-item-to','dispatched-item-from','dispensary-dispatched-item','dispatched-item') AND ReferenceNo = D.DispatchItemsId ) AS Amt,
      RI.RequisitionItemStatus,
      RE.FullName AS RequestedByName,
      DE.FullName AS DispatchedByName,
      D.ReceivedBy,
      D.Remarks,
      SS.Name 'SourceStoreName',
      TS.Name 'TargetStoreName'
    FROM
      INV_TXN_DispatchItems D
      INNER JOIN INV_MST_Item I ON I.ItemId = D.ItemId
      INNER JOIN INV_TXN_RequisitionItems RI ON RI.RequisitionItemId = D.RequisitionItemId
      INNER JOIN INV_TXN_Requisition R ON R.RequisitionId = RI.RequisitionId
      INNER JOIN PHRM_MST_Store SS ON SS.StoreId= D.SourceStoreId
      INNER JOIN PHRM_MST_Store TS ON TS.StoreId= D.TargetStoreId
      INNER JOIN EMP_Employee DE ON DE.EmployeeId = D.CreatedBy
      INNER JOIN EMP_Employee RE ON RE.EmployeeId = R.CreatedBy
    WHERE D.DispatchId = @DispatchId
  END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_DOC_DoctorSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[SP_Report_DOC_DoctorSummary]
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@ProviderId int=null
	AS
/*
 FileName: SP_Report_DOC_DoctorSummary
 Created: 05April'18 <Ashim>
 Description: To Get Doctor's Summary count from different activities.
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      05April'18               created          
 -----------------------------------------------------------------------
*/
BEGIN



  IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL)
	BEGIN

start: get data from BIL_TXN_BillingTransactionItems and PAT_PatientVisits and store into TempTable---
CREATE TABLE #TempTable(TxnDate datetime, ItemName varchar(MAX), Quantity int,ProviderId int)
Insert #TempTable (TxnDate,ItemName,Quantity,ProviderId)
(SELECT CreatedOn as 'TxnDate',
	ServiceDepartmentName as 'ItemName',
	this is Active Quantity--
	Quantity-ISNULL(ReturnQuantity,0) 'Quantity',
	ProviderId 
from BIL_TXN_BillingTransactionItems
where ProviderId is not null
and BillStatus !='cancel'
and Quantity-ISNULL(ReturnQuantity,0) != 0)

Insert #TempTable (TxnDate,ItemName,Quantity,ProviderId)
(select VisitDate as 'TxnDate', AppointmentType as 'ItemName', 1 as 'Quantity', ProviderId
from PAT_PatientVisits)
end: get data from BIL_TXN_BillingTransactionItems and PAT_PatientVisits and store into TempTable---


--------------		
	SELECT Convert(date,t.TxnDate) 'Date'
	,SUM(CASE WHEN t.ItemName='USG' THEN t.Quantity ELSE 0 END) AS 'USG'
	,SUM(CASE WHEN t.ItemName='Ortho Procedures' THEN t.Quantity ELSE 0 END) AS 'OrthoProcedures'
	,SUM(CASE WHEN t.ItemName='CT Scan' THEN t.Quantity ELSE 0 END) AS 'CT'
	,SUM(CASE WHEN t.ItemName='New' THEN t.Quantity ELSE 0 END) AS 'OPD'
	,SUM(CASE WHEN t.ItemName='referral' THEN t.Quantity ELSE 0 END) AS 'Referral'
	,SUM(CASE WHEN t.ItemName='followup' THEN t.Quantity ELSE 0 END) AS 'FollowUp'
	,SUM(CASE WHEN t.ItemName='General Surgery Charges' THEN t.Quantity ELSE 0 END) AS 'GeneralSurgery'
	,SUM(CASE WHEN t.ItemName='OBS/GYN Surgery' THEN t.Quantity ELSE 0 END) AS 'GynSurgery'
	,SUM(CASE WHEN t.ItemName='ENT Operation' THEN t.Quantity ELSE 0 END) AS 'ENT'
	,SUM(CASE WHEN t.ItemName='Dental' THEN t.Quantity ELSE 0 END) AS 'Dental'
	,SUM(CASE WHEN t.ItemName='OT' THEN t.Quantity ELSE 0 END) AS 'OT'
	FROM #TempTable t
	WHERE  t.TxnDate between  @FromDate and @ToDate+1 
		AND t.ProviderId =@ProviderId
	  
	GROUP BY Convert(date,t.TxnDate)
	ORDER BY DATE
	DROP TABLE #TempTable
-----------
  End--end of IF
End--end of SP
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Gov_InpatientMorbidity]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SP_Report_Gov_InpatientMorbidity]
    @FromDate DATE = NULL,
    @ToDate DATE= NULL

AS
/*
FileName: [SP_Report_Gov_InpatientMorbidity]
CreatedBy/date: Bikash/Sudarshan/2021-09-14
Description: to get inpatient disease wise (morbidity)  data.
Remarks:
            
Change History
----------------------------------------------------------------------------
S.No.    UpdatedBy/Date							 Remarks
------------------------------------------------------------------------------
1.       Bikash/Sud: 30Sept'21                Corrected for Death Count taking from separate table..
--------------------------------------------------------------------------------
*/

BEGIN
   Age Range
	CREATE TABLE #AgeRange
	(
		AgeSerialNo INT,
		AgeRange varchar(100)
	);
	INSERT INTO #AgeRange
		(AgeSerialNo, AgeRange)
	VALUES
		(1, '0-28Days'),
		(2, '29Days-1Year'),
		(3, '01-04Years'),
		(4, '05-14Years' ),
		(5, '15-19Years'),
		(6, '20-29Years'),
		(7, '30-39Years'),
		(8, '40-49Years'),
		(9, '50-59Years'),
		(10, '>=60Years')

	 Gender Range
	CREATE TABLE #Genders
	(
		Gender VARCHAR(100)
	);
	INSERT INTO #Genders
		( Gender)
	VALUES
		('Male'),
		('Female');

		 Query started --- 

	SELECT  ICD10Code as ICDCode, ICD10Name as ICDCodeName,
			SUM(ISNULL([0-28Days_Female],0)) as v0Day_to_28_Days_Female,
			SUM(ISNULL([0-28Days_Male],0)) as v0Day_to_28_Days_Male,
			SUM(ISNULL([29Days-1Year_Female],0)) as v29Days_to_1yr_Female,		
			SUM(ISNULL([29Days-1Year_Male],0)) as v29Days_to_1yr_Male,
			SUM(ISNULL([01-04Years_Female],0)) as v1yr_to_4yr_Female,
			SUM(ISNULL([01-04Years_Male],0)) as v1yr_to_4yr_Male,
			SUM(ISNULL([05-14Years_Female],0)) as v5yr_to_14yr_Female,
			SUM(ISNULL([05-14Years_Male],0)) as v5yr_to_14yr_Male,
			SUM(ISNULL([15-19Years_Female],0)) as v15yr_to_19yr_Female,
			SUM(ISNULL([15-19Years_Male],0)) as v15yr_to_19yr_Male,
			SUM(ISNULL([20-29Years_Female],0)) as v20yr_to_29yr_Female,
			SUM(ISNULL([20-29Years_Male],0)) as v20yr_to_29yr_Male,
			SUM(ISNULL([30-39Years_Female],0)) as v30yr_to_39yr_Female,
			SUM(ISNULL([30-39Years_Male],0)) as v30yr_to_39yr_Male,
			SUM(ISNULL([40-49Years_Female],0)) as v40yr_to_49yr_Female,
			SUM(ISNULL([40-49Years_Male],0)) as v40yr_to_49yr_Male,
			SUM(ISNULL([50-59Years_Female],0)) as v50yr_to_59yr_Female,
			SUM(ISNULL([50-59Years_Male],0)) as v50yr_to_59yr_Male,
			SUM(ISNULL([>=60Years_Female],0)) as gt_60yr_Female,
			SUM(ISNULL([>=60Years_Male],0)) as gt_60yr_Male	,	
		
			SUM(ISNULL(TotalDeaths_Female,0)) as TotalDeaths_Female,
			SUM(ISNULL(TotalDeaths_Male,0)) as TotalDeaths_Male

	FROM
		(
			SELECT displayData.ColumnHeaders, displayData.ICD10Name, displayData.ICD10Code,
					Sum(ISNULL(TotalPatient,0)) as TotalPatientCount,
					Sum (ISNULL(deathOnly.MaleCount,0)) as TotalDeaths_Male,
					Sum (ISNULL(deathOnly.FemaleCount,0)) as TotalDeaths_Female
			FROM
				(
					SELECT ICD10Code,ICD10Name, AgeRange + '_' + Gender as ColumnHeaders, AgeSerialNo
					FROM 				
					(					
							SELECT distinct I.ICD10Code, I.ICD10Name
							FROM MR_RecordSummary MRec
							INNER JOIN PAT_Patient P ON MRec.PatientId = P.PatientId
							INNER JOIN ADT_PatientAdmission adm ON adm.PatientVisitId=MRec.PatientVisitId
							INNER JOIN MR_TXN_Inpatient_Diagnosis I ON MRec.MedicalRecordId=I.MedicalRecordId
							WHERE Convert(Date,adm.DischargeDate) BETWEEN @FromDate AND @ToDate
					
					) As diseaseD
					LEFT JOIN
					(
						Select age.AgeSerialNo,age.AgeRange, gender.Gender
						FROM #AgeRange age
						LEFT JOIN #Genders gender ON 1=1
					) ageGender
					ON 1 = 1 
				) 
				AS displayData
					LEFT JOIN
					(
						SELECT  ICD10Code, ICD10Name, AgeRange + '_' + Gender as ColumnHeaders, 
						SUM(PatientCount)'TotalPatient'
						,SUM( Case When DischargeTypeName='Death' and Gender='Male' then PatientCount ELSE 0 END) AS Death_Male
						,SUM( Case When DischargeTypeName='Death' and Gender='Female' then PatientCount ELSE 0 END) AS Death_Female
						FROM
							(
								SELECT age.AgeRange, discharge.DischargeTypeName, gender.Gender, 
									SUM(ISNULL(PatientCount,0)) as PatientCount, MR.ICD10ID, MR.ICD10Code, MR.ICD10Name
								FROM #AgeRange age
									LEFT JOIN #Genders gender ON 1=1
									LEFT JOIN ADT_DischargeType discharge ON 1=1
									INNER JOIN 
									(
										Select *, ISNULL(COUNT(*),0) as PatientCount
										From
											(
												SELECT MRec.DischargeTypeId, 
												dbo.[GetDobAgeRangeInpatientOutcome] (P.DateOfBirth, adm.DischargeDate) as AgeRange, 
												P.Gender,I.ICD10ID, I.ICD10Code, I.ICD10Name
												FROM MR_RecordSummary MRec
													INNER JOIN PAT_Patient P ON MRec.PatientId = P.PatientId
													INNER JOIN ADT_PatientAdmission adm ON adm.PatientVisitId=MRec.PatientVisitId
													INNER JOIN MR_TXN_Inpatient_Diagnosis I ON MRec.MedicalRecordId=I.MedicalRecordId
													WHERE Convert(Date,adm.DischargeDate) BETWEEN @FromDate AND @ToDate
											) initdata
										GROUP BY initdata.DischargeTypeId, 
										initdata.AgeRange,initdata.Gender, 
										ICD10ID, ICD10Code, ICD10Name

									) MR ON MR.DischargeTypeId = discharge.DischargeTypeId 
											AND age.AgeRange = MR.AgeRange
											AND LOWER(MR.Gender) = LOWER(gender.Gender)
								WHERE discharge.IsActive = 1
								GROUP BY age.AgeRange, discharge.DischargeTypeName, gender.Gender,
								MR.ICD10ID,MR.ICD10Code,MR.ICD10Name
							) t
						Group By  AgeRange, Gender,  ICD10Code, ICD10Name
					)countData 
				ON countData.ColumnHeaders = displayData.ColumnHeaders and countData.ICD10Code = displayData.ICD10Code

				LEFT JOIN (
						SELECT ipDiag.ICD10ID, ipDiag.ICD10Code, ipDiag.ICD10Name, 
						   SUM( Case When pat.Gender='Male' then 1 ELSE  0 End) AS MaleCount,
						   SUM(Case When pat.Gender='Female' then 1 ELSE 0 End) AS FemaleCount
						from MR_RecordSummary mr 
							inner join PAT_PatientVisits vis on mr.PatientVisitId=vis.PatientVisitId
							inner join ADT_PatientAdmission adm on vis.PatientVisitId= adm.PatientVisitId 
							inner join ADT_DischargeType discType on mr.DischargeTypeId=discType.DischargeTypeId
							LEFT join MR_TXN_Inpatient_Diagnosis ipDiag on ipDiag.MedicalRecordId=mr.MedicalRecordId
							inner join PAT_Patient pat on pat.PatientId= mr.PatientId
						Where adm.AdmissionStatus='discharged'
							  and Convert(Date,adm.DischargeDate) between @FromDate and @ToDate
							  and discType.DischargeTypeName='Death'
						Group by ipDiag.ICD10ID,
							 ipDiag.ICD10Code, ipDiag.ICD10Name
			
				) deathOnly ON displayData.ICD10Code=deathOnly.ICD10Code 

			GROUP BY  displayData.ColumnHeaders, displayData.ICD10Name, displayData.ICD10Code
		
	) As ft 
	PIVOT
	(
		SUM(ft.TotalPatientCount)
		FOR ft.ColumnHeaders IN
		(
			[0-28Days_Male],
			[0-28Days_Female],
			[29Days-1Year_Male],
			[29Days-1Year_Female],
			[01-04Years_Male],
			[01-04Years_Female],
			[05-14Years_Male],
			[05-14Years_Female],
			[15-19Years_Male],
			[15-19Years_Female],
			[20-29Years_Male],
			[20-29Years_Female],
			[30-39Years_Male],
			[30-39Years_Female],
			[40-49Years_Male],
			[40-49Years_Female],
			[50-59Years_Male],
			[50-59Years_Female],
			[>=60Years_Male],
			[>=60Years_Female]
		)
	) AS pivot_table
	GROUP BY ICD10Name, ICD10Code
	ORDER by  ICD10Name

	Drop temporary tables---
	DROP TABLE #AgeRange
	DROP TABLE #Genders


END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Gov_InpatientOutcome]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_Report_Gov_Inpatient_Outcome]
CreatedBy/date: Ramavtar/2017-10-13
Description: to get count of number of admitted patient by Gender between given dates and count of discharge patient by gender and discharge types between given dates; 
Remarks:
            
Change History
----------------------------------------------------------------------------
S.No.    UpdatedBy/Date							 Remarks
------------------------------------------------------------------------------
1       Ramavtar/2017-10-13					Created the script
2		Bikash/10th-Aug'2021				Modified Inpatient Outcome (table1)
3		Bikash/10th-Aug'2021				Added IGestational Week vs Gravida vs Patient Count (table2) 
4		Bikash/10th-Aug'2021				Added Maternal Age and gestational week data set (table 3)
5		Bikash/10th-Aug'2021				Added Free Health Service Summary (table 6)
6		Bikash/10th-Aug'2021				Added Free Health Service and Social Service Proramme dataset (table 7) 
7		Bikash/10th-Aug'2021				Added Death data set (table 5)
8		Bikash/10th-Aug'2021				Added No. of Surgeries dataset (table 4)
9		Bikash/11th-Aug'2021				Modified No. of Surgeries dataset (table 4), visit type added 
9		Bikash/12th-Aug'2021				Modified Death dataset (table 5), optimized
10		Bikash/12th-Sept'2021				Modified Death Category  i.e. <48hr and >=48hr added (table 1)
11		Bikash/13th-Sept'2021				Modified: Patient Age calculation on Discharged Date and Gestational week logic changed(table 1, table2 and table 3)
--------------------------------------------------------------------------------
*/
CREATE PROCEDURE  [dbo].[SP_Report_Gov_InpatientOutcome]
    @FromDate DATE = NULL,
    @ToDate DATE= NULL

AS
BEGIN
    IF(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>0 OR LEN(@ToDate)>0)
BEGIN

         Start: Inpatient Outcome Data Set
        ----------------------- Table 1 ---------------------------
         Start: Inpatient Outcome Data Set
         Age Range

        CREATE TABLE #AgeRange
        (
            AgeSerialNo INT,
            AgeRange varchar(100),
            AgeDisplayName varchar(100)

        );
        INSERT INTO #AgeRange
            (AgeSerialNo, AgeRange,AgeDisplayName)
        VALUES
            (1, '0-28Days','v0Day_to_28_Days'),
            (2, '29Days-1Year','v29Days_to_1yr'),
            (3, '01-04Years','v1yr_to_4yr'),
            (4, '05-14Years','v5yr_to_14yr' ),
            (5, '15-19Years','v15yr_to_19yr'),
            (6, '20-29Years','v20yr_to_29yr'),
            (7, '30-39Years','v30yr_to_39yr'),
            (8, '40-49Years','v40yr_to_49yr'),
            (9, '50-59Years','v50yr_to_59yr'),
            (10, '>=60Years','gt_60yr')

         Gender Range
        CREATE TABLE #Genders
        (
            SN INT,
            Gender VARCHAR(100)
        );
        INSERT INTO #Genders
            ( Gender)
        VALUES
            ('Male'),
            ('Female')
         Query Starts from here
        SELECT AgeRange, Recovered_Male, Recovered_Female, [Not_Improved_Male], 
		[Not_Improved_Female], Referred_Male, Referred_Female, LAMA_Male, 
		LAMA_Female, Absconded_Male, Absconded_Female, [Death_Lt48_Male], 
		[Death_Lt48_Female], [Death_Gt48_Male], [Death_Gt48_Female]
        FROM
            (
    
        SELECT age.AgeSerialNo, age.AgeRange, discharge.DischargeTypeName + '_' + gender.Gender as ColumnsHeader, 
		SUM(ISNULL(PatientCount,0)) as PatientCount
            FROM #AgeRange age
                LEFT JOIN #Genders gender ON 1=1
                LEFT JOIN (SELECT
                    CASE when de.DeathType IS NULL then Replace(dt.DischargeTypeName,' ','_') 
					   else (CASE When de.DeathType = '<48' then dt.DischargeTypeName +'_Lt48' 
					         When de.DeathType = '>48' then dt.DischargeTypeName +'_Gt48'  End ) END as DischargeTypeName,
                    IsActive
                FROM ADT_DischargeType dt
                    LEFT JOIN ADT_MST_DeathType de on dt.DischargeTypeId = de.DischargeTypeId
                WHERE dt.IsActive =1
                    ) discharge ON 1=1
                LEFT JOIN
                (
                    SELECT *,
                    ISNULL(Count(*),0) as PatientCount
                FROM (
								 SELECT
                        CASE when dth.DeathType IS NULL then Replace(dt.DischargeTypeName,' ','_') 
						   else (CASE When dth.DeathType = '<48' then dt.DischargeTypeName +'_Lt48' 
						          When dth.DeathType = '>48' then dt.DischargeTypeName +'_Gt48'  End ) END as DischargeTypeName,
                        pat.Gender,
                        dbo.[GetDobAgeRangeInpatientOutcome] (pat.DateOfBirth, adm.DischargeDate) as AgeRange
                    from MR_RecordSummary mr
                        INNER JOIN ADT_PatientAdmission adm on mr.PatientVisitId=adm.PatientVisitId
                        Left JOIN PAT_Patient pat on pat.PatientId = mr.PatientId
                        Left JOIN ADT_DischargeType  dt on dt.DischargeTypeId = mr.DischargeTypeId
                        Left JOIN ADT_MST_DeathType dth on dth.DeathTypeId = mr.DeathPeriodTypeId

                    WHERE CONVERT(DATE,adm.DischargeDate) BETWEEN @FromDate AND @ToDate

											) AS gp
                GROUP BY DischargeTypeName, Gender, AgeRange
                    
                ) MR ON MR.DischargeTypeName = discharge.DischargeTypeName 
				AND MR.AgeRange = age.AgeRange AND MR.Gender = gender.Gender

            WHERE discharge.IsActive = 1
            GROUP BY age.AgeSerialNo,age.AgeRange, discharge.DischargeTypeName, gender.Gender

) t
  PIVOT
  (
    SUM(t.PatientCount)
    FOR t.ColumnsHeader IN
    (
      [Recovered_Male],
      [Recovered_Female],
      [Not_Improved_Male],
      [Not_Improved_Female],
      [Referred_Male],
      [Referred_Female],
      [LAMA_Male],
      [LAMA_Female],
      [Absconded_Male],
      [Absconded_Female],
      [Death_Lt48_Male],
      [Death_Lt48_Female],
      [Death_Gt48_Male],
      [Death_Gt48_Female]
    )
  ) AS pivot_table

        ORDER BY AgeSerialNo

        DROP TABLE #AgeRange
        DROP TABLE #Genders
         End: Inpatient Outcome Data Set



        -------------------- Table 2 -----------------
        Start: Gestational Week vs Gravida vs Patient Count
         Create the table in the specified schema
        CREATE TABLE #GestationalWeeksRange
        (
            RangeDisplayName varchar(100),
            RangeStartsOn FLOAT,
            RangeEndsOn FLOAT
        );
        INSERT INTO #GestationalWeeksRange
            (RangeDisplayName,RangeStartsOn, RangeEndsOn)
        VALUES
            ('22-27', 22, 27),
            ('28-36', 28, 36),
            ('37-41', 37, 41),
            ('> 41', 42, 999999)


        SELECT GravidaName,
            [22-27] as GestWeek1,
            [28-36] as GestWeek2,
            [37-41] as GestWeek3,
            [> 41] as GestWeek4
        FROM (
    SELECT G.GravitaName as GravidaName, GWR.RangeDisplayName, SUM(ISNULL(GravidaData.PatientCount,0)) AS PatientCount
            FROM ADT_MST_Gravita G
                INNER JOIN #GestationalWeeksRange GWR ON 1 = 1
                LEFT JOIN
                (
        SELECT
                    GestationalWeek, MRS.GravitaId, count(*) 'PatientCount'
                FROM MR_RecordSummary MRS
                    INNER JOIN PAT_Patient P ON MRS.PatientId = P.PatientId
                    INNER JOIN ADT_PatientAdmission adm on MRS.PatientVisitId=adm.PatientVisitId
                    LEFT JOIN ADT_MST_DischargeConditionType dcon on dcon.DischargeConditionId = MRS.DischargeConditionId
                WHERE LOWER(dcon.Condition) = 'delivery' AND P.Gender = 'Female'
                    and Convert(Date, adm.DischargeDate) BETWEEN @FromDate AND @ToDate
                GROUP BY MRS.GestationalWeek, MRS.GravitaId
    ) GravidaData ON
    GravidaData.GravitaId = G.GravitaId AND GravidaData.GestationalWeek BETWEEN  GWR.RangeStartsOn  AND GWR.RangeEndsOn
            GROUP BY G.GravitaName, GWR.RangeDisplayName
) t
PIVOT
(
    SUM(t.PatientCount)
    FOR t.RangeDisplayName IN
    (
        [22-27], 
        [28-36], 
        [37-41], 
        [> 41]
    )
) AS pivot_table;
        DROP TABLE [#GestationalWeeksRange]
        End: Gestational Week vs Gravida vs Patient Count



        ------------------------------ Table 3 ------------------------------------------------------------------------
        --- Start: Maternal Age and gestational week data set

        Temporary Gestational Table
        CREATE TABLE #GestationalWeeksRange2
        (
            RangeDisplayName varchar(100),
            RangeStartsOn FLOAT,
            RangeEndsOn FLOAT
        );
        INSERT INTO #GestationalWeeksRange2
            (RangeDisplayName,RangeStartsOn, RangeEndsOn)
        VALUES
            ('22-27', 22, 27),
            ('28-36', 28, 36),
            ('37-41', 37, 41),
            ('> 41', 42, 999999)

         Temporary age table
        CREATE TABLE #AgeRange2
        (
            AgeSequence int,
            AgeDisplayName varchar(100)
        );


        INSERT INTO #AgeRange2
            (AgeSequence,AgeDisplayName)
        VALUES
            (1, '<20'),
            (2, '20-34'),
            (3, '>34')



        SELECT AgeRange,
            [22-27] as GestWeek1,
            [28-36] as GestWeek2,
            [37-41] as GestWeek3,
            [> 41] as GestWeek4
        FROM
            (
    SELECT AR.AgeSequence, AR.AgeDisplayName 'AgeRange', GWR.RangeDisplayName 'GestationalWeek', SUM(ISNULL(ageGestationalData.PatientCount,0)) 'PatientCount'
            FROM #GestationalWeeksRange2 GWR
                INNER JOIN #AgeRange2 AR ON 1=1
                LEFT JOIN
                (
		   select *,
                    Count(*) 'PatientCount'
                from
                    (
				SELECT
                        MRS.GestationalWeek,
                        dbo.[GetDobAgeRangeGestationalWeek](P.DateOfBirth, adm.DischargeDate) as AgeRange

                    FROM MR_RecordSummary MRS
                        INNER JOIN PAT_Patient P ON MRS.PatientId = P.PatientId
                        INNER JOIN ADT_PatientAdmission adm on MRS.PatientVisitId=adm.PatientVisitId
                        LEFT JOIN ADT_MST_DischargeConditionType dcon on dcon.DischargeConditionId = MRS.DischargeConditionId
                    WHERE LOWER(dcon.Condition) = 'delivery' AND P.Gender = 'Female'
                        And CONVERT(Date, adm.DischargeDate) BETWEEN @FromDate AND @ToDate
			) mr
                GROUP BY  GestationalWeek, AgeRange

    ) ageGestationalData
                ON ageGestationalData.GestationalWeek  BETWEEN  GWR.RangeStartsOn  AND GWR.RangeEndsOn AND
                    ageGestationalData.AgeRange = AR.AgeDisplayName
            GROUP BY AR.AgeSequence ,AR.AgeDisplayName, GWR.RangeDisplayName
) t
PIVOT
(
    SUM(t.PatientCount)
    FOR t.GestationalWeek IN
    (
        [22-27], 
        [28-36], 
        [37-41], 
        [> 41]
    )
) AS pivot_table
        Order By AgeSequence
        DROP TABLE #GestationalWeeksRange2
        DROP TABLE #AgeRange2
        --- End: Maternal Age and gestational week data set

        ------------------------ Table 4 -----------------------------------------------

         Start: No of Surgeries dataset

        Create table #SurgeryType_VisitType
        (
            SN int,
            SurgeryDisplayName varchar(50),
            SurgeryType varchar(50),
            VisitType varchar(50)
        );

        insert into #SurgeryType_VisitType
        values
            (1, 'Major', 'Major', '' ),
            (2, 'Intermediate', 'Intermediate', ''),
            (3, 'Outpatient', 'Minor', 'outpatient'),
            (4, 'Inpatient', 'Minor', 'inpatient'),
            (5, 'Emergency', 'Minor', 'emergency'),
            (6, 'Plaster', 'Plaster', '');


        Select SurgeryDisplayName,
            ISNULL(COUNT(case when Gender='Male' Then ISNULL(Gender,0) End),0 ) as MaleCount,
            ISNULL(COUNT(case when Gender='Female' Then ISNULL(Gender,0) End),0) as FemaleCount

        from #SurgeryType_VisitType sj
            left join
            (
    select pat.PatientId, pat.Gender, bt.ItemName, bp.Category, bt.VisitType
            from BIL_TXN_BillingTransactionItems bt
                inner join PAT_Patient pat on pat.PatientId = bt.PatientId
                Left JOIN BIL_CFG_BillItemPrice bp ON bt.ServiceDepartmentId = bp.ServiceDepartmentId and bt.ItemId = bp.ItemId
                INNER JOIN BIL_TXN_BillingTransaction inv ON bt.BillingTransactionId = inv.BillingTransactionId
                LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON bt.BillingTransactionItemId = brtn.BillingTransactionItemId

            WHERE bp.IsOT = 1
                And bt.DiscountAmount >0
                and bt.BillStatus !='cancel'
                AND bt.BillStatus != 'adtCancel'
                AND bt.BillStatus != 'provisional'
                AND brtn.BillReturnItemId IS NULL
                AND CONVERT(date,inv.CreatedOn) BETWEEN @FromDate AND @ToDate
  )AS dt on dt.Category = sj.SurgeryType and (dt.VisitType = sj.VisitType or sj.VisitType = '')
        Group by sj.SN, sj.SurgeryDisplayName
        ORDER BY sj.SN

        DROP TABLE #SurgeryType_VisitType
         End:  No of Surgeries dataset

        ------------------------ Table 5 -----------------------------------------------

         Start: Death data set
        SELECT Condition,
            COUNT (CASE WHEN Gender = 'Male' THEN IsNull(Gender,0)End) as MaleCount,
            COUNT (CASE WHEN Gender = 'Female' THEN IsNull(Gender,0)End) as FemaleCount
        FROM
            ( Select dct.DischargeConditionId, dct.Condition, dct.DischargeTypeId
            FROM ADT_MST_DischargeConditionType dct
                INNER JOIN ADT_DischargeType dt on dct.DischargeTypeId = dt.DischargeTypeId
            WHERE LOWER(dt.DischargeTypeName) ='death' and IsActive=1
    ) as deathTypes
            LEFT JOIN (
    select pat.PatientId, r.DischargeTypeId, r.DischargeConditionId, pat.Gender
            FROM MR_RecordSummary r
                INNER JOIN ADT_PatientAdmission adm
                on r.PatientVisitId=adm.PatientVisitId
                INNER JOIN PAT_Patient pat on pat.PatientId = r.PatientId
            WHERE
       CONVERT(date, adm.DischargeDate) BETWEEN @FromDate AND @ToDate
    ) as mr
            on mr.DischargeConditionId = deathTypes.DischargeConditionId and mr.DischargeTypeId = deathTypes.DischargeTypeId
        GROUP BY Condition
        ORDER by Condition


         End: Death data set
        ------------------------ Table 6 -----------------------------------------------

        -- Start: Free Health Service Summary 

        create table #ExcemptionType
        (
            CostExemption varchar (50),
            exemptionRangeStart int,
            exemptionRangeEnd int,
        );
        insert into #ExcemptionType
        values
            ('Partially', 1, 99),
            ('Complete', 100, 100);


        Select patCount.CostExemption, patCount.NoOfPatient, costCal.ExemptedAmount
        from
            (
   Start: Partially or completely excemption amount calculation
  Select CostExemption, SUM(ISNULL(DiscountAmount,0)) as ExemptedAmount
            from #ExcemptionType et
                Left Join
                (
	DiscountPercent calculation changed by sud: 30Aug'21----
    SELECT ISNULL(ISNULL(t.DiscountAmount,0)/ISNULL(NULLIF(t.SubTotal,0),1),0)*100 'DiscountPercent',
                    t.DiscountAmount
                FROM BIL_TXN_BillingTransactionItems  t
                    INNER JOIN BIL_TXN_BillingTransaction tx on t.BillingTransactionId = tx.BillingTransactionId
                    INNER JOIN BIL_TXN_BillingTransaction inv ON tx.BillingTransactionId = inv.BillingTransactionId
                    LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON t.BillingTransactionItemId = brtn.BillingTransactionItemId

                WHERE t.DiscountAmount >0 and t.BillStatus !='cancel'
                    AND t.BillStatus !='cancel' AND t.BillStatus != 'adtCancel'
                    AND t.BillStatus != 'provisional' AND brtn.BillReturnItemId IS NULL
                    AND CONVERT(date,inv.CreatedOn) BETWEEN @FromDate AND @ToDate

    ) as ft on ft.DiscountPercent between et.exemptionRangeStart and et.exemptionRangeEnd
            group by et.CostExemption
   Start: Partially or completely excemption amount calculation
  ) as costCal

            Inner Join
            (
  --- Start: Patient count only
  SELECT CostExemption,
                Count(ISNULL(PatientId,0)) as NoOfPatient
            from (
    Select distinct CostExemption, PatientId
                from #ExcemptionType et
                    Left Join
                    (
      SELECT ISNULL(ISNULL(t.DiscountAmount,0)/ISNULL(NULLIF(t.SubTotal,0),1),0)*100 'DiscountPercent',
                        t.PatientId
                    FROM BIL_TXN_BillingTransactionItems  t
                        INNER JOIN BIL_TXN_BillingTransaction tx on t.BillingTransactionId = tx.BillingTransactionId
                        INNER JOIN BIL_TXN_BillingTransaction inv ON tx.BillingTransactionId = inv.BillingTransactionId
                        LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON t.BillingTransactionItemId = brtn.BillingTransactionItemId

                    WHERE t.DiscountAmount >0 and t.BillStatus !='cancel'
                        AND t.BillStatus !='cancel' AND t.BillStatus != 'adtCancel'
                        AND t.BillStatus != 'provisional' AND brtn.BillReturnItemId IS NULL
                        AND CONVERT(date,inv.CreatedOn) BETWEEN @FromDate AND @ToDate

    ) as sft on sft.DiscountPercent between et.exemptionRangeStart and et.exemptionRangeEnd
  )as ft
            group by CostExemption
  --- End: Patient count only
  ) as patCount on patCount.CostExemption = costCal.CostExemption

        Drop table #ExcemptionType
        -- End: Free Health Service Summary  

        ------------------------ Table 7 -----------------------------------------------

         Start: Free Health Service and Social Service Programme dataset

        Select
            MembershipTypeName,
            ISNULL(SUM ( case when VisitType ='outpatient' then PatCount End),0) as OutpatientsCount,
            ISNULL(SUM ( case when VisitType ='inpatient' then PatCount End),0) as InpatientsCount,
            ISNULL(SUM ( case when VisitType ='emergency' then PatCount End),0) as ErPatientsCount
        from (
  select MembershipTypeName, VisitType
    , Count(PatientId) as PatCount
            from
                (
    select distinct mt.MembershipTypeName, t.PatientId, t.VisitType
                from BIL_TXN_BillingTransactionItems t
                    inner join PAT_CFG_MembershipType mt on mt.MembershipTypeId = t.DiscountSchemeId
                    INNER JOIN BIL_TXN_BillingTransaction inv ON t.BillingTransactionId = inv.BillingTransactionId
                    LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON t.BillingTransactionItemId = brtn.BillingTransactionItemId

                WHERE LOWER(mt.CommunityName) ='social service unit'
                    And t.DiscountAmount >0 and t.BillStatus !='cancel'
                    AND t.BillStatus !='cancel' AND t.BillStatus != 'adtCancel'
                    AND t.BillStatus != 'provisional' AND brtn.BillReturnItemId IS NULL
                    AND CONVERT(date,inv.CreatedOn) BETWEEN @FromDate AND @ToDate

    ) as sft
            group by MembershipTypeName, VisitType

) as ft
        group by MembershipTypeName
     End : Free Health Service and Social Service Programme dataset 

    END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Gov_Summary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

end: Sud: 18Jan'21--GovInsurance> Claim Report enhancement---


 Start: Bikash 18thJan'22, "Total Laboratory Service Provided" count data set Added 
CREATE PROCEDURE [dbo].[SP_Report_Gov_Summary] --'2021-09-17','2021-10-17'
	@FromDate DATE = NULL
	,@ToDate DATE = NULL
	/*
FileName: [SP_Report_Gov_Summary]
CreatedBy/date: Sagar/2017-06-06
Description: to get count of no of Outpatient Services, ER services and Diagnostic services by Gender between given dates.
Remarks:    default getdate() for FromDate and ToDate.
         : ToDate is incremented by 1 since otherwise it doesn't take 

[NOTE] : This SP returns 2 TABLES  (table1: Outpatient and ER services, table2: DiagnosticServices)
            
Change History
--------------------------------------------------------------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
--------------------------------------------------------------------------------------------------------------------------------------------
1       Sagar/2017-06-06	               Created the script 
2       Sagar/2017-06-14                   Altered the Script
3       Sud/2017-12-14                     Added Emergency services to the return table
4       Aniket/2021-07-27                  Added Free Services     
5      Bikash/2021-07-30                  Added Referral data dataset, Total Patient Admitted, Total Inpatient Days and Immunization dataset 
6      Bikash/2021-08-01                  Modified Hospital Service, Free Services dataset and Diagnostics and Other Services dataset 
7.	Bikash/Sanjit/Pawan 2021-11-09			Table 1 modified - Outpatient dataset: new, old, total and emergency logic modified; AgeRange Calculation logic based on visitDate added
8.  Bikash/Sudarshan 2021-11-13				Hard-Coded Emergency Department Code made Dynamic, and Table 4 - Immunization dataset updated from patient visit table
9.  Bikash/Sudarshan 2021-11-16				Table 7 - Total Inpatient Days Calculation: 'Bed Charge' taken from IntegrationName and Returned Bed item deduction logic improvised
10. Bikash/ 2021-11-23						Table 1 modefied - Emergency patient count removed from "Total Clients Served" count of Hospital Services column
11. Bikash 2022-01-18						Table 8, "Total Laboratory Service Provided" count data set Added 
---------------------------------------------------------------------------------------------------------------------------------------------
*/
AS
BEGIN
	IF (
			@FromDate > '2021-09-16'
			AND @ToDate > '2021-09-16' -- for date - Ashoj 2078++
			AND (
				@FromDate IS NOT NULL
				OR @ToDate IS NOT NULL
				OR LEN(@FromDate) > 0
				OR LEN(@ToDate) > 0
				)
			)
	BEGIN
		
		DECLARE @TblAgeGroup TABLE (
			AgeRange VARCHAR(20)
			,Seq INT
			)

		INSERT INTO @TblAgeGroup
		VALUES (
			'0-9 Years'
			,1
			)

		INSERT INTO @TblAgeGroup
		VALUES (
			'10-19 Years'
			,2
			)

		INSERT INTO @TblAgeGroup
		VALUES (
			'20-59 Years'
			,3
			)

		INSERT INTO @TblAgeGroup
		VALUES (
			'>=60 Years'
			,4
			)

	--- Getting Emergency Department Codes
	Declare @EmgDeptsCodeCSV Varchar(200)=((select ParameterValue from CORE_CFG_Parameters where ParameterGroupName='GovReports' and ParameterName='HospSummary_EmergencyDeptsCodeCSV'));


		---table 1-- Outpatient and Emergency Services---
		IF (
				@FromDate > '2021-10-17'
				AND @ToDate > '2021-10-17'
				) --- for date - greater than Ashoj 2078 (i.e. Kartik ++)
		BEGIN
			SELECT A.AgeRange
				,ISNULL(B.NewFemalePatients, 0) AS FemaleNew_Out
				,ISNULL(B.NewMalePatients, 0) AS MaleNew_Out
				,ISNULL(B.NewFemalePatients, 0) + ISNULL(B.OldFemalePatients, 0) AS FemaleTotal_Out
				,ISNULL(B.NewMalePatients, 0) + ISNULL(B.OldMalePatients, 0) AS MaleTotal_Out
				,ISNULL(C.ErFemalePatients, 0) AS Female_ER
				,ISNULL(C.ErMalePatients, 0) AS Male_ER
				,ISNULL(B.OldFemalePatients, 0) AS FemaleOld_Out
				,ISNULL(B.OldMalePatients, 0) AS MaleOld_Out
			FROM @TblAgeGroup A
			Altered the Script Left joined with TblAgeGroup table specially created to 
			give order to the AgeRange Column also Replaced Null values with 0 
			LEFT JOIN (
				SELECT AgeRange
					,
					-----New Client Served (i.e. AppointmentType = new)-----------------
					SUM(CASE 
							WHEN op.Gender = 'Female'
								AND LOWER(AppointmentType) = 'new'
								THEN 1
							END) AS NewFemalePatients
					,SUM(CASE 
							WHEN op.Gender = 'Male'
								AND LOWER(AppointmentType) = 'new'
								THEN 1
							END) AS NewMalePatients
					,
					------For Old Client Served (i.e. AppointmentType = FollowUp and Referred)-----------
					SUM(CASE 
							WHEN oP.Gender = 'Female'
								AND LOWER(AppointmentType) != 'new'
								THEN 1
							END) AS OldFemalePatients
					,SUM(CASE 
							WHEN oP.Gender = 'Male'
								AND LOWER(AppointmentType) != 'new'
								THEN 1
							END) AS OldMalePatients
				FROM (
					SELECT pat.Gender
						,v.AppointmentType
						,dbo.GetDobAgeRange(DateOfBirth, v.VisitDate) AgeRange
					FROM PAT_PatientVisits v
					INNER JOIN PAT_Patient pat ON v.PatientId = pat.PatientId
					INNER JOIN MST_Department dept ON v.DepartmentId = dept.DepartmentId
					WHERE v.VisitType != 'inpatient'
						AND v.IsActive = 1
						AND BillingStatus != 'returned'
						AND CONVERT(DATE, v.VisitDate) BETWEEN @FromDate AND @ToDate
						AND UPPER(dept.DepartmentCode) NOT IN (Select Item from SplitString(@EmgDeptsCodeCSV,','))
					) op
				GROUP BY AgeRange
				) B ON A.AgeRange = B.AgeRange
			LEFT JOIN (
				SELECT AgeRange
					,
					-----Emergency Client Served-----------------
					SUM(CASE 
							WHEN op.Gender = 'Female'
								THEN 1
							END) AS ErFemalePatients
					,SUM(CASE 
							WHEN op.Gender = 'Male'
								THEN 1
							END) AS ErMalePatients
				FROM (
					SELECT pat.Gender
						,v.AppointmentType
						,dbo.GetDobAgeRange(DateOfBirth, v.VisitDate) AgeRange
					FROM PAT_PatientVisits v
					INNER JOIN PAT_Patient pat ON v.PatientId = pat.PatientId
					INNER JOIN MST_Department dept ON v.DepartmentId = dept.DepartmentId
					WHERE v.VisitType != 'inpatient'
						AND v.IsActive = 1
						AND BillingStatus != 'returned'
						AND Convert(DATE, VisitDate) BETWEEN @FromDate
							AND @ToDate
						AND UPPER(dept.DepartmentCode) IN (Select Item from SplitString(@EmgDeptsCodeCSV,','))
					) op
				GROUP BY AgeRange
				) C ON A.AgeRange = C.AgeRange
			ORDER BY A.Seq
		END
		ELSE -- for Ashoj 2078 (to match already provided excel data)
		BEGIN
			SELECT A.AgeRange
				,ISNULL(B.FemalePatients, 0) AS FemaleNew_Out
				,ISNULL(B.MalePatients, 0) AS MaleNew_Out
				,ISNULL(b.TotalFemalePatients, 0) AS FemaleTotal_Out
				,ISNULL(b.TotalMalePatients, 0) AS MaleTotal_Out
				,ISNULL(C.Female, 0) AS Female_ER
				,ISNULL(C.Male, 0) AS Male_ER
			FROM @TblAgeGroup A
			Altered the Script Left joined with TblAgeGroup table specially created to 
			give order to the AgeRange Column also Replaced Null values with 0 
			LEFT JOIN (
				SELECT dbo.GetDobAgeRange(DateOfBirth, @FromDate) AgeRange
					,
					-----New Client Served-----------------
					SUM(CASE 
							WHEN op.Gender = 'Female'
								AND CreatedOn BETWEEN @FromDate
									AND @ToDate
								THEN 1
							END) AS FemalePatients
					,SUM(CASE 
							WHEN op.Gender = 'Male'
								AND CreatedOn BETWEEN @FromDate
									AND @ToDate
								THEN 1
							END) AS MalePatients
					,
					------For Total Client Served-----------
					SUM(CASE 
							WHEN oP.Gender = 'Female'
								THEN 1
							END) AS TotalFemalePatients
					,SUM(CASE 
							WHEN oP.Gender = 'Male'
								THEN 1
							END) AS TotalMalePatients
				FROM (
					SELECT v.PatientId
						,pat.Gender
					FROM PAT_PatientVisits v
					INNER JOIN PAT_Patient pat ON v.PatientId = pat.PatientId						
						AND CONVERT(DATE, v.CreatedOn) BETWEEN @FromDate AND @ToDate
					) iP
					,PAT_Patient oP
				WHERE ip.PatientId = op.PatientId
				GROUP BY dbo.GetDobAgeRange(DateOfBirth, @FromDate)
				) B ON A.AgeRange = B.AgeRange
			LEFT JOIN (
				SELECT dbo.GetDobAgeRange(DateOfBirth, @FromDate) AgeRange
					,
					-----Emergency Client Served-----------------
					SUM(CASE 
							WHEN op.Gender = 'Female'
								THEN 1
							ELSE 0
							END) AS Female
					,SUM(CASE 
							WHEN op.Gender = 'Male'
								THEN 1
							ELSE 0
							END) AS Male
				FROM (
					SELECT PatientId
						,Gender
					FROM (
						SELECT DISTINCT patV.DepartmentId
							,patV.VisitType
							,patV.PatientId
							,pat.Gender
							,pat.DateOfBirth
						FROM PAT_PatientVisits patV
						INNER JOIN PAT_Patient pat ON pat.PatientId = patV.PatientId
						INNER JOIN MST_Department dept ON patV.DepartmentId = dept.DepartmentId
						WHERE patV.VisitType != 'inpatient'
							AND Convert(DATE, VisitDate) BETWEEN @FromDate
								AND @ToDate
							AND UPPER(dept.DepartmentCode) IN (Select Item from SplitString(@EmgDeptsCodeCSV,','))
						) AS ft
					) iP
					,PAT_Patient oP
				WHERE ip.PatientId = op.PatientId
				GROUP BY dbo.GetDobAgeRange(DateOfBirth, @FromDate)
				) C ON A.AgeRange = C.AgeRange
			ORDER BY A.Seq
		END

		-----------------------------------------------------------------------------------------
		 Table 2
		 Diagnosis and Other Services
		SELECT ReportingItemName
			,Unit
			,TotalCount
		FROM (
			start: section-1: number wise counting---
			SELECT ReportingItemName
				,'Number' AS Unit
				,Count(CASE 
						WHEN BillingTransactionId IS NOT NULL
							THEN BillingTransactionId
						END) AS TotalCount
				,0 AS OrderPriority
			FROM (
				SELECT rpLjt.ReportingItemName
					,txnTable.BillingTransactionId
					,txnTable.Gender
				FROM (
					start: Get reporting item with ServiceDeptId and ItemId---
					SELECT rpim.BillItemPriceId
						,rptTable.ReportingItemName
						,bp.ServiceDepartmentId
						,bp.ItemId
					FROM (
						SELECT ReportingItemsId
							,ReportingItemName
						FROM MST_RPT_DynamicReportingItems
						WHERE IsActive = 1
							AND DynamicReportId = (
								SELECT DynamicReportId
								FROM MST_RPT_DynamicReportName
								WHERE ReportCode = 'RPT_DiagnosticAndOtherServices'
								)
							AND RptCountUnit = 'number'
						) AS rptTable
					LEFT JOIN BIL_MAP_ReportingItem_BillingItems rpim ON rpim.ReportingItemsId = rptTable.ReportingItemsId
					LEFT JOIN BIL_CFG_BillItemPrice bp ON bp.BillItemPriceId = rpim.BillItemPriceId
						end: Get reporting item with ServiceDeptId and ItemId---
					) AS rpLjt
				LEFT JOIN (
					SELECT btxi.BillingTransactionId
						,btxi.ServiceDepartmentId
						,btxi.ItemId
						,pat.Gender
					FROM BIL_TXN_BillingTransactionItems btxi
					INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
					INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
					LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId
					WHERE btxi.BillStatus != 'cancel'
						AND btxi.BillStatus != 'adtCancel'
						AND btxi.BillStatus != 'provisional'
						AND brtn.BillReturnItemId IS NULL
						AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
							AND @ToDate
					) AS txnTable ON rpLjt.ItemId = txnTable.ItemId
					AND rpLjt.ServiceDepartmentId = txnTable.ServiceDepartmentId
				) AS fTable
			GROUP BY fTable.ReportingItemName
			end: section-1: number wise counting---
			
			UNION ALL
			
			start: section-2: person wise counting---
			SELECT ReportingItemName
				,'Person' AS Unit
				,Count(CASE 
						WHEN PatientId IS NOT NULL
							THEN PatientId
						END) AS TotalCount
				,1 AS OrderPriority
			FROM (
				start: get ReportingName, PatientName with Gender, ServiceDeptId, Itemid--
				SELECT rpLjt.ReportingItemName
					,txnTable.PatientId
					,txnTable.Gender
					,txnTable.ServiceDepartmentId
					,txnTable.ItemId
				FROM (
					start: Get reporting item with ServiceDeptId and ItemId---
					SELECT rpim.BillItemPriceId
						,rptTable.ReportingItemName
						,bp.ServiceDepartmentId
						,bp.ItemId
					FROM (
						SELECT ReportingItemsId
							,ReportingItemName
						FROM MST_RPT_DynamicReportingItems
						WHERE IsActive = 1
							AND DynamicReportId = (
								SELECT DynamicReportId
								FROM MST_RPT_DynamicReportName
								WHERE ReportCode = 'RPT_DiagnosticAndOtherServices'
								)
							AND RptCountUnit = 'person'
						) AS rptTable
					LEFT JOIN BIL_MAP_ReportingItem_BillingItems rpim ON rpim.ReportingItemsId = rptTable.ReportingItemsId
					LEFT JOIN BIL_CFG_BillItemPrice bp ON bp.BillItemPriceId = rpim.BillItemPriceId
						end: Get reporting item with ServiceDeptId and ItemId---
					) AS rpLjt
				LEFT JOIN (
					SELECT DISTINCT btxi.ServiceDepartmentId
						,btxi.ItemId
						,pat.Gender
						,pat.PatientId
					FROM BIL_TXN_BillingTransactionItems btxi
					INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
					INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
					LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId
					WHERE btxi.BillStatus != 'cancel'
						AND btxi.BillStatus != 'adtCancel'
						AND btxi.BillStatus != 'provisional'
						AND brtn.BillReturnItemId IS NULL
						AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
							AND @ToDate
					) AS txnTable ON rpLjt.ItemId = txnTable.ItemId
					AND rpLjt.ServiceDepartmentId = txnTable.ServiceDepartmentId
					end: get ReportingName, PatientName with Gender, ServiceDeptId, Itemid--
				) AS fTable
			GROUP BY fTable.ReportingItemName
				end: section-2: person wise counting---
				end of union
			) X
		ORDER BY X.OrderPriority
			,X.ReportingItemName DESC

		-----------------------------------------------------------------------------------------
		---table 3--
		---Free Services 
		SELECT ReportingItemName
			,COUNT(CASE 
					WHEN fTable.Gender = 'Male'
						THEN fTable.Gender
					END) AS MaleCount
			,COUNT(CASE 
					WHEN fTable.Gender = 'Female'
						THEN fTable.Gender
					END) AS FemaleCount
		FROM (
			SELECT rpLjt.ReportingItemName
				,txnTable.BillingTransactionId
				,txnTable.Gender
			FROM (
				SELECT rpim.BillItemPriceId
					,rptTable.ReportingItemName
					,bp.ServiceDepartmentId
					,bp.ItemId
				FROM (
					SELECT ReportingItemsId
						,ReportingItemName
					FROM MST_RPT_DynamicReportingItems
					WHERE IsActive = 1
						AND DynamicReportId = (
							SELECT DynamicReportId
							FROM MST_RPT_DynamicReportName
							WHERE ReportCode = 'RPT_FreeServiceToImpoverishedCitizen'
							)
					) AS rptTable
				LEFT JOIN BIL_MAP_ReportingItem_BillingItems rpim ON rpim.ReportingItemsId = rptTable.ReportingItemsId
				LEFT JOIN BIL_CFG_BillItemPrice bp ON bp.BillItemPriceId = rpim.BillItemPriceId
				) AS rpLjt
			LEFT JOIN (
				SELECT btxi.BillingTransactionId
					,btxi.ServiceDepartmentId
					,btxi.ItemId
					,pat.Gender
				FROM BIL_TXN_BillingTransactionItems btxi
				INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
				INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
				LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId
				WHERE btxi.BillStatus != 'cancel'
					AND btxi.BillStatus != 'adtCancel'
					AND btxi.BillStatus != 'provisional'
					AND ISNULL(btxi.DiscountAmount, 0) / ISNULL(NULLIF(btxi.SubTotal, 0), 1) * 100 = 100 --this is calculation for subtotal
					AND brtn.BillReturnItemId IS NULL
					AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
						AND @ToDate
				) AS txnTable ON rpLjt.ItemId = txnTable.ItemId
				AND rpLjt.ServiceDepartmentId = txnTable.ServiceDepartmentId
			) AS fTable
		GROUP BY fTable.ReportingItemName

		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		- Table 4-- 
		 Total Immunization Patient Served 

		Declare @VaccDepartmentName varchar(200) = (Select top 1 ParameterValue from CORE_CFG_Parameters where ParameterName='immunizationdeptname' 
													 and ParameterGroupName='Common');											 
		Declare @DeptId INT=(Select Top(1) DepartmentId from MST_Department where DepartmentName=@VaccDepartmentName);


		SELECT COUNT(*) AS TotalVaccinationClientServed
		FROM PAT_PatientVisits patV
		WHERE  patV.DepartmentId = @DeptId
			AND patV.IsActive = 1
			AND patV.BillingStatus != 'returned'
			AND CONVERT(date,patV.VisitDate) BETWEEN @FromDate AND @ToDate;

		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		 Table 5-- 
		 Inpatient Referred Out table
		SELECT COUNT(CASE 
					WHEN Gender = 'Male'
						THEN ISNULL(Gender, 0)
					END) AS IpRO_MaleCount
			,COUNT(CASE 
					WHEN Gender = 'Female'
						THEN ISNULL(Gender, 0)
					END) AS IpRO_FemaleCount
		FROM (
			SELECT mrs.PatientId
				,pat.Gender
			FROM MR_RecordSummary mrs
			JOIN ADT_DischargeType dt ON mrs.DischargeTypeId = dt.DischargeTypeId
			JOIN PAT_Patient pat ON mrs.PatientId = pat.PatientId
			INNER JOIN ADT_PatientAdmission adm ON mrs.PatientVisitId = adm.PatientVisitId
			WHERE dt.DischargeTypeName = 'Referred'
				AND CONVERT(DATE, adm.DischargeDate) BETWEEN @FromDate
					AND @ToDate
			) AS t

		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		 table 6
		 Total Patient Admitted table 
		SELECT COUNT(PatientId) AS TotalPatientsAdmitted
		FROM ADT_PatientAdmission
		WHERE AdmissionStatus != 'cancel'
			AND AdmissionDate BETWEEN @FromDate
				AND @ToDate;

		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		 table 7
		 Total Inpatient Days Table
		-Checks/Conditions:
		 ServiceDepartment for Bed Charge taken by IntegrationName in ServiceDept master table.
		 ReturnQty needs to be SUM since one item can be returned multiple times
		 Possible Issues: Since we're taking TotalDays from Billing, the report may vary(slightly) if a bed charge is returned on next month.
		    - Correction solution to this will be to take from ADT tables, which can be done only after 2022-Feb (after implementiong In/Out logic in Bed Transfer/Discahrges).
		SELECT SUM( ISNULL(bi.Quantity,0)-ISNULL(bedChrgReturn.RetQuantity,0)) AS TotalInpatientDays
			FROM BIL_TXN_BillingTransactionItems bi
			INNER JOIN ADT_PatientAdmission adm ON bi.PatientVisitId = adm.PatientVisitId
			INNER JOIN BIL_MST_ServiceDepartment srv
			   on bi.ServiceDepartmentId=srv.ServiceDepartmentId

		    LEFT JOIN (
						select BillingTransactionItemId,
						SUM(RetQuantity) 'RetQuantity'

						from 
						BIL_TXN_InvoiceReturnItems retItm
						INNER JOIN BIL_MST_ServiceDepartment srv
						   on retItm.ServiceDepartmentId=srv.ServiceDepartmentId
						WHERE IntegrationName='Bed Charges'
						Group by BillingTransactionItemId
						) bedChrgReturn  ON bi.BillingTransactionItemId=bedChrgReturn.BillingTransactionItemId
			WHERE 
			   srv.IntegrationName='Bed Charges'
               AND CONVERT(DATE, adm.DischargeDate) BETWEEN @FromDate AND @ToDate
				AND adm.AdmissionStatus != 'cancel'

		-----------------------------------------------------------------------------------------------------------------------------------
		------------------------------------------------------------------------------------------------------------------------------------
		- table 8 ---
		SELECT COUNT (Distinct pat.PatientId) as TotalLaboratoryServiceProvidedPersonCount
			FROM 
			BIL_TXN_BillingTransactionItems btxi
			INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
			INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
			LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId

			WHERE 
			btxi.BillStatus != 'cancel'
			AND btxi.BillStatus != 'adtCancel'
			AND btxi.BillStatus != 'provisional'
			AND brtn.BillReturnItemId IS NULL
			AND btxi.ServiceDepartmentId in (select ServiceDepartmentId from BIL_MST_ServiceDepartment where IntegrationName ='LAB')
			AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
			AND @ToDate

		-----------------------------------------------------------------------------------------------------------------------------------
		------------------------------------------------------------------------------------------------------------------------------------



	END
	ELSE -- for date - before Ashoj 2078 (to match already provided excel data to LPH)
	BEGIN
		DECLARE @TblAgeGroup2 TABLE (
			AgeRange VARCHAR(20)
			,Seq INT
			)

		INSERT INTO @TblAgeGroup2
		VALUES (
			'0-9 Years'
			,1
			)

		INSERT INTO @TblAgeGroup2
		VALUES (
			'10-19 Years'
			,2
			)

		INSERT INTO @TblAgeGroup2
		VALUES (
			'20-59 Years'
			,3
			)

		INSERT INTO @TblAgeGroup2
		VALUES (
			'>=60 Years'
			,4
			)

		---table 1-- Outpatient and Emergency Services---
		SELECT A.AgeRange
			,ISNULL(B.FemalePatients, 0) AS FemaleNew_Out
			,ISNULL(B.MalePatients, 0) AS MaleNew_Out
			,ISNULL(b.TotalFemalePatients, 0) AS FemaleTotal_Out
			,ISNULL(b.TotalMalePatients, 0) AS MaleTotal_Out
			,ISNULL(C.Female, 0) AS Female_ER
			,ISNULL(C.Male, 0) AS Male_ER
		FROM @TblAgeGroup2 A
		Altered the Script Left joined with TblAgeGroup table specially created to 
		give order to the AgeRange Column also Replaced Null values with 0 
		LEFT JOIN (
			SELECT dbo.GetDobAgeRange(DateOfBirth, @FromDate) AgeRange
				,
				-----New Client Served-----------------
				SUM(CASE 
						WHEN op.Gender = 'Female'
							AND CreatedOn BETWEEN @FromDate
								AND @ToDate
							THEN 1
						END) AS FemalePatients
				,SUM(CASE 
						WHEN op.Gender = 'Male'
							AND CreatedOn BETWEEN @FromDate
								AND @ToDate
							THEN 1
						END) AS MalePatients
				,
				------For Total Client Served-----------
				SUM(CASE 
						WHEN oP.Gender = 'Female'
							THEN 1
						END) AS TotalFemalePatients
				,SUM(CASE 
						WHEN oP.Gender = 'Male'
							THEN 1
						END) AS TotalMalePatients
			FROM (
				SELECT DISTINCT a.PatientId
					,a.Gender
				FROM PAT_Patient a
				INNER JOIN BIL_TXN_BillingTransactionItems b ON a.PatientId = b.PatientId
				WHERE b.RequisitionDate BETWEEN @FromDate
						AND @ToDate
				) iP
				,PAT_Patient oP
			WHERE ip.PatientId = op.PatientId
			GROUP BY dbo.GetDobAgeRange(DateOfBirth, @FromDate)
			) B ON A.AgeRange = B.AgeRange
		LEFT JOIN (
			SELECT dbo.GetDobAgeRange(DateOfBirth, @FromDate) AgeRange
				,
				-----New Client Served-----------------
				SUM(CASE 
						WHEN op.Gender = 'Female'
							THEN 1
						ELSE 0
						END) AS Female
				,SUM(CASE 
						WHEN op.Gender = 'Male'
							THEN 1
						ELSE 0
						END) AS Male
			FROM (
				SELECT PatientId
					,Gender
				FROM (
					SELECT DISTINCT patV.DepartmentId
						,patV.VisitType
						,patV.PatientId
						,pat.Gender
						,pat.DateOfBirth
					FROM PAT_PatientVisits patV
					INNER JOIN PAT_Patient pat ON pat.PatientId = patV.PatientId
					INNER JOIN MST_Department dept ON patV.DepartmentId = dept.DepartmentId
					WHERE patV.VisitType != 'inpatient'
						AND Convert(DATE, VisitDate) BETWEEN @FromDate
							AND @ToDate
						AND dept.DepartmentCode IN (
							'EMG'
							,'EMG_LABO'
							)
					) AS ft
				) iP
				,PAT_Patient oP
			WHERE ip.PatientId = op.PatientId
			GROUP BY dbo.GetDobAgeRange(DateOfBirth, @FromDate)
			) C ON A.AgeRange = C.AgeRange
		ORDER BY A.Seq

		-----------------------------------------------------------------------------------------
		 Table 2
		 Diagnosis and Other Services
		SELECT ReportingItemName
			,Unit
			,TotalCount
		FROM (
			start: section-1: number wise counting---
			SELECT ReportingItemName
				,'Number' AS Unit
				,Count(CASE 
						WHEN BillingTransactionId IS NOT NULL
							THEN BillingTransactionId
						END) AS TotalCount
				,0 AS OrderPriority
			FROM (
				SELECT rpLjt.ReportingItemName
					,txnTable.BillingTransactionId
					,txnTable.Gender
				FROM (
					start: Get reporting item with ServiceDeptId and ItemId---
					SELECT rpim.BillItemPriceId
						,rptTable.ReportingItemName
						,bp.ServiceDepartmentId
						,bp.ItemId
					FROM (
						SELECT ReportingItemsId
							,ReportingItemName
						FROM MST_RPT_DynamicReportingItems
						WHERE IsActive = 1
							AND DynamicReportId = (
								SELECT DynamicReportId
								FROM MST_RPT_DynamicReportName
								WHERE ReportCode = 'RPT_DiagnosticAndOtherServices'
								)
							AND RptCountUnit = 'number'
						) AS rptTable
					LEFT JOIN BIL_MAP_ReportingItem_BillingItems rpim ON rpim.ReportingItemsId = rptTable.ReportingItemsId
					LEFT JOIN BIL_CFG_BillItemPrice bp ON bp.BillItemPriceId = rpim.BillItemPriceId
						end: Get reporting item with ServiceDeptId and ItemId---
					) AS rpLjt
				LEFT JOIN (
					SELECT btxi.BillingTransactionId
						,btxi.ServiceDepartmentId
						,btxi.ItemId
						,pat.Gender
					FROM BIL_TXN_BillingTransactionItems btxi
					INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
					INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
					LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId
					WHERE btxi.BillStatus != 'cancel'
						AND btxi.BillStatus != 'adtCancel'
						AND btxi.BillStatus != 'provisional'
						AND brtn.BillReturnItemId IS NULL
						AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
							AND @ToDate
					) AS txnTable ON rpLjt.ItemId = txnTable.ItemId
					AND rpLjt.ServiceDepartmentId = txnTable.ServiceDepartmentId
				) AS fTable
			GROUP BY fTable.ReportingItemName
			end: section-1: number wise counting---
			
			UNION ALL
			
			start: section-2: person wise counting---
			SELECT ReportingItemName
				,'Person' AS Unit
				,Count(CASE 
						WHEN PatientId IS NOT NULL
							THEN PatientId
						END) AS TotalCount
				,1 AS OrderPriority
			FROM (
				start: get ReportingName, PatientName with Gender, ServiceDeptId, Itemid--
				SELECT rpLjt.ReportingItemName
					,txnTable.PatientId
					,txnTable.Gender
					,txnTable.ServiceDepartmentId
					,txnTable.ItemId
				FROM (
					start: Get reporting item with ServiceDeptId and ItemId---
					SELECT rpim.BillItemPriceId
						,rptTable.ReportingItemName
						,bp.ServiceDepartmentId
						,bp.ItemId
					FROM (
						SELECT ReportingItemsId
							,ReportingItemName
						FROM MST_RPT_DynamicReportingItems
						WHERE IsActive = 1
							AND DynamicReportId = (
								SELECT DynamicReportId
								FROM MST_RPT_DynamicReportName
								WHERE ReportCode = 'RPT_DiagnosticAndOtherServices'
								)
							AND RptCountUnit = 'person'
						) AS rptTable
					LEFT JOIN BIL_MAP_ReportingItem_BillingItems rpim ON rpim.ReportingItemsId = rptTable.ReportingItemsId
					LEFT JOIN BIL_CFG_BillItemPrice bp ON bp.BillItemPriceId = rpim.BillItemPriceId
						end: Get reporting item with ServiceDeptId and ItemId---
					) AS rpLjt
				LEFT JOIN (
					SELECT DISTINCT btxi.ServiceDepartmentId
						,btxi.ItemId
						,pat.Gender
						,pat.PatientId
					FROM BIL_TXN_BillingTransactionItems btxi
					INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
					INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
					LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId
					WHERE btxi.BillStatus != 'cancel'
						AND btxi.BillStatus != 'adtCancel'
						AND btxi.BillStatus != 'provisional'
						AND brtn.BillReturnItemId IS NULL
						AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
							AND @ToDate
					) AS txnTable ON rpLjt.ItemId = txnTable.ItemId
					AND rpLjt.ServiceDepartmentId = txnTable.ServiceDepartmentId
					end: get ReportingName, PatientName with Gender, ServiceDeptId, Itemid--
				) AS fTable
			GROUP BY fTable.ReportingItemName
				end: section-2: person wise counting---
				end of union
			) X
		ORDER BY X.OrderPriority
			,X.ReportingItemName DESC

		-----------------------------------------------------------------------------------------
		---table 3--
		---Free Services 
		SELECT ReportingItemName
			,COUNT(CASE 
					WHEN fTable.Gender = 'Male'
						THEN fTable.Gender
					END) AS MaleCount
			,COUNT(CASE 
					WHEN fTable.Gender = 'Female'
						THEN fTable.Gender
					END) AS FemaleCount
		FROM (
			SELECT rpLjt.ReportingItemName
				,txnTable.BillingTransactionId
				,txnTable.Gender
			FROM (
				SELECT rpim.BillItemPriceId
					,rptTable.ReportingItemName
					,bp.ServiceDepartmentId
					,bp.ItemId
				FROM (
					SELECT ReportingItemsId
						,ReportingItemName
					FROM MST_RPT_DynamicReportingItems
					WHERE IsActive = 1
						AND DynamicReportId = (
							SELECT DynamicReportId
							FROM MST_RPT_DynamicReportName
							WHERE ReportCode = 'RPT_FreeServiceToImpoverishedCitizen'
							)
					) AS rptTable
				LEFT JOIN BIL_MAP_ReportingItem_BillingItems rpim ON rpim.ReportingItemsId = rptTable.ReportingItemsId
				LEFT JOIN BIL_CFG_BillItemPrice bp ON bp.BillItemPriceId = rpim.BillItemPriceId
				) AS rpLjt
			LEFT JOIN (
				SELECT btxi.BillingTransactionId
					,btxi.ServiceDepartmentId
					,btxi.ItemId
					,pat.Gender
				FROM BIL_TXN_BillingTransactionItems btxi
				INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
				INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
				LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId
				WHERE btxi.BillStatus != 'cancel'
					AND btxi.BillStatus != 'adtCancel'
					AND btxi.BillStatus != 'provisional'
					AND ISNULL(btxi.DiscountAmount, 0) / ISNULL(NULLIF(btxi.SubTotal, 0), 1) * 100 = 100 --this is calculation for subtotal
					AND brtn.BillReturnItemId IS NULL
					AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
						AND @ToDate
				) AS txnTable ON rpLjt.ItemId = txnTable.ItemId
				AND rpLjt.ServiceDepartmentId = txnTable.ServiceDepartmentId
			) AS fTable
		GROUP BY fTable.ReportingItemName

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
		----------- Table 4 Start ----------------------
				 Total Immunization Patient Served 
		
		SELECT COUNT(DISTINCT PatientId) AS TotalVaccinationClientServed
		FROM PAT_Patient
		WHERE IsVaccinationPatient = 1
			AND CreatedOn BETWEEN @FromDate
				AND @ToDate;

		----------- Table 4 END ----------------------

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
		 Table 5-- 
		 Inpatient Referred Out table
		SELECT COUNT(CASE 
					WHEN Gender = 'Male'
						THEN ISNULL(Gender, 0)
					END) AS IpRO_MaleCount
			,COUNT(CASE 
					WHEN Gender = 'Female'
						THEN ISNULL(Gender, 0)
					END) AS IpRO_FemaleCount
		FROM (
			SELECT mrs.PatientId
				,pat.Gender
			FROM MR_RecordSummary mrs
			JOIN ADT_DischargeType dt ON mrs.DischargeTypeId = dt.DischargeTypeId
			JOIN PAT_Patient pat ON mrs.PatientId = pat.PatientId
			WHERE dt.DischargeTypeName = 'Referred'
				AND ISNULL(mrs.ReferredDate, mrs.CreatedOn) BETWEEN @FromDate
					AND @ToDate
			) AS t

		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		 table 6
		 Total Patient Admitted table 
		SELECT COUNT(PatientId) AS TotalPatientsAdmitted
		FROM ADT_PatientAdmission
		WHERE AdmissionStatus != 'cancel'
			AND AdmissionDate BETWEEN @FromDate
				AND @ToDate;

		-----------------------------------------------------------------------------
		-----------------------------------------------------------------------------
		 table 7
		 Total Inpatient Days Table
		DECLARE @ServiceDepartId2 INT = (
				SELECT ServiceDepartmentId
				FROM BIL_MST_ServiceDepartment
				WHERE ServiceDepartmentName = 'Bed Charge'
					AND IsActive = 1
				);

		SELECT SUM(qty.Quantity) AS TotalInpatientDays
		FROM (
			SELECT CASE 
					WHEN ISNULL(ReturnQuantity, 0) > 0
						THEN Quantity - ReturnQuantity
					ELSE Quantity
					END AS Quantity
			FROM BIL_TXN_BillingTransactionItems
			WHERE ServiceDepartmentId = @ServiceDepartId2
				AND Convert(DATE, CreatedOn) BETWEEN ''
					AND @ToDate
			) AS qty;
			-----------------------------------------------------------------------------------------------------------------------------------


		-----------------------------------------------------------------------------------------------------------------------------------
		------------------------------------------------------------------------------------------------------------------------------------
		- table 8 ---
		SELECT COUNT (Distinct pat.PatientId) as TotalLaboratoryServiceProvidedPersonCount
			FROM 
			BIL_TXN_BillingTransactionItems btxi
			INNER JOIN PAT_Patient pat ON pat.PatientId = btxi.PatientId
			INNER JOIN BIL_TXN_BillingTransaction inv ON btxi.BillingTransactionId = inv.BillingTransactionId
			LEFT JOIN BIL_TXN_InvoiceReturnItems brtn ON btxi.BillingTransactionItemId = brtn.BillingTransactionItemId

			WHERE 
			btxi.BillStatus != 'cancel'
			AND btxi.BillStatus != 'adtCancel'
			AND btxi.BillStatus != 'provisional'
			AND brtn.BillReturnItemId IS NULL
			AND btxi.ServiceDepartmentId in (select ServiceDepartmentId from BIL_MST_ServiceDepartment where IntegrationName ='LAB')
			AND CONVERT(DATE, inv.CreatedOn) BETWEEN @FromDate
			AND @ToDate

		-----------------------------------------------------------------------------------------------------------------------------------
		------------------------------------------------------------------------------------------------------------------------------------
	END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_HandoverDetailReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_HandoverDetailReport]  ---Exec SP_Report_HandoverDetailReport '2021-06-16','2021-08-09', 28
(@FromDate DATE, @ToDate DATE, @EmployeeId INT)
AS
 =============================================
 Author:		<Pratik Mani Lamichhane>
 Create date: <10 Aug 2021>
 Description:	<Handover Detail Report>
 =============================================
BEGIN
select handoverTxn.BankName,handoverTxn.VoucherNumber,
	handoverTxn.HandoverAmount, handoverTxn.DueAmount, 
	d.DepartmentName,handoverTxn.CreatedOn 'HandoverDate',
	handoverTxn.HandoverByEmpId, handoverEmp.FullName 'UserName',
	handoverTxn.ReceivedById,receiverEmp.FullName 'ReceivedBy',
	handoverTxn.ReceivedOn,handoverTxn.ReceiveRemarks,
	counter.CounterName
	from BIL_TXN_CashHandover handoverTxn

	join BIL_CFG_Counter counter on counter.CounterId= handoverTxn.CounterId
	join EMP_Employee handoverEmp on handoverEmp.EmployeeId= handoverTxn.HandoverByEmpId
	join EMP_Employee receiverEmp on receiverEmp.EmployeeId= handoverTxn.ReceivedById
	left join MST_Department d on receiverEmp.DepartmentId = d.DepartmentId 
	
	where handoverTxn.IsActive=1 
	and CONVERT(date,handoverTxn.CreatedOn) between @FromDate AND @ToDate
	and	handoverTxn.HandoverByEmpId = @EmployeeId
		
 End

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_HandoverSummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_HandoverSummaryReport]  ---Exec SP_Report_HandoverSummaryReport
@FiscalYrId INT
AS
/* =============================================
 Author:		<Pratik Mani Lamichhane>
 Create date: <10 Aug 2021>
 Description:	<Handover Summary Report>
 Change History:
---------------------------------
1. Sud/27-Oct'21   Added FiscalYearId param to get previous Date's due amount and 
                   changed the calculation accordingly
       -Note: Need to implement FY-Opening-Due Table later on, since we're calculating from all past data..

2. Krishna/13th Jan'22  Added ReceivePendingAmount and TotalDueAmount(EMR:4763)

 ============================================= */
BEGIN
-If fiscalyearid not found then set that to CurrentFY
IF(ISNULL(@FiscalYrId,0)=0)
BEGIN
  SET @FiscalYrId=(Select FiscalYearId from BIL_CFG_FiscalYears where Getdate()>StartYear AND GETDATE()< EndYear)
END

Declare  @FyStartDate DATE, @FyEndDate Date

Select @FyStartDate = Convert(Date,StartYear), @FyEndDate= Convert(Date,EndYear)
from BIL_CFG_FiscalYears
Where FiscalYearId = @FiscalYrId

Select empMst.EmployeeId, emp1.FullName,
    ISNULL(prevFy.Prev_DueAmt,0) 'PreviousDueAmount',
    ISNULL(colln.CollectionAmount,0) 'CollectionTillDate', 
    ISNULL(deps.HandoverAmount,0) 'HandoverTillDate',
    ISNULL(prevFy.Prev_DueAmt,0) + Isnull(colln.CollectionAmount,0)-ISNULL(deps.HandoverAmount,0) 'DueAmount' ,
	ISNULL(hTxn.ReceivePendingAmount,0) 'ReceivePendingAmount',
	(ISNULL(prevFy.Prev_DueAmt,0) + Isnull(colln.CollectionAmount,0)-ISNULL(deps.HandoverAmount,0)) + ISNULL(hTxn.ReceivePendingAmount,0) 'TotalDueAmount'
	

from 
( Select Distinct EmployeeId from TXN_EmpCashTransaction ) empMst 

LEFT JOIN EMP_Employee emp1  ON empMst.EmployeeId = emp1.EmployeeId 

Left join 
(
	Select EmployeeId,
	Sum(Isnull(InAmount,0))- Sum(Isnull(OutAmount,0)) 'Prev_DueAmt'
	from TXN_EmpCashTransaction
	Where Convert(Date,TransactionDate) < Convert(Date, @FyStartDate)
	Group by EmployeeId
)prevFy

ON empMst.EmployeeId=prevFy.EmployeeId


LEFT JOIN
(
    SELECT EmployeeId,
    Sum(ISNULL(InAmount,0)) - Sum(ISNULL(OutAmount,0)) 'CollectionAmount'
    FROM TXN_EmpCashTransaction  
    Where  TransactionType !='HandoverGiven'
	    and Convert(Date,TransactionDate) Between @FyStartDate and @FyEndDate
	    
    Group by EmployeeId
) colln
 ON empMst.EmployeeId = colln.EmployeeId

 LEFT JOIN
(
    SELECT EmployeeId,
    Sum(Isnull(OutAmount,0)) 'HandoverAmount'
    FROM TXN_EmpCashTransaction  
    Where TransactionType ='HandoverGiven'
	and Convert(Date,TransactionDate) Between @FyStartDate and @FyEndDate
    Group by EmployeeId
) deps
 ON empMst.EmployeeId = deps.EmployeeId

 LEFT JOIN 
 (
	SELECT HandoverByEmpId,
	SUM(ISNULL(HandoverAmount,0)) 'ReceivePendingAmount'
	FROM BIL_TXN_CashHandover
	WHERE ReceivedById IS NULL 
	AND Convert(Date,CreatedOn) BETWEEN @FyStartDate AND @FyEndDate
	GROUP BY HandoverByEmpId
 )hTxn
 ON empMst.EmployeeId = hTxn.HandoverByEmpId

 Order by emp1.FullName
 End

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_HDSK_EmployeeInfo]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_HDSK_EmployeeInfo] 
		/*
FileName: [SP_Report_HDSK_EmployeeInfo]
CreatedBy/date: Sagar/2017-06-21
Description: To Get Employee Information in Helpdesk Module.
Remarks:   Getting Information about Employee from 3 tables.
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Sagar/2017-06-21	               Created the script 
2       Umed/2017-08-14                 Modified script as per sudarsan sir Suggestion 
                                       (Left-Join Employee with Role table) ISNULL with Employee name, added Designation , Extention, SpeedDial, Office Hour
------------------------------------------------------
*/
AS
BEGIN
select ISNULL(emp.Salutation,'')+' '+ emp.FirstName+ ISNULL(' '+emp.MiddleName,'')+' '+emp.LastName AS EmployeeName
       ,emrl.EmployeeRoleName AS Designation 
	   , dep.DepartmentName
	   ,emp.ContactNumber, emp.Extension, emp.SpeedDial, ISNULL(emp.OfficeHour,'0') AS OfficeHour, emp.RoomNo 'RoomNumber'

FROM     EMP_Employee emp
         LEFT JOIN EMP_EmployeeRole emrl
		 ON emrl.EmployeeRoleId = emp.EmployeeRoleId 
		 INNER JOIN MST_Department dep 
		 ON dep.DepartmentId = emp.DepartmentId

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_INCTV_Doc_ItemGroupSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*-- =============================================
 Author:		 18Mar'20/Pratik 
 Description:	To get incentive report group by Items for Selected Doctor between selected range.
 Change History-----
S.No.   Date/Author    Remarks
-------------------------------------
1.     18Mar'20/Pratik   Initial Draft
2.     6June'21/Pratik   Correcting Total Qty of Incentive Fraction Item
 =============================================*/
CREATE PROCEDURE [dbo].[SP_Report_INCTV_Doc_ItemGroupSummary]  --EXEC SP_Report_INCTV_Doc_ItemGroupSummary '2020-03-01','2020-03-17',112
	@FromDate date = NULL,
    @ToDate date = NULL,
    @EmployeeId int = NULL
AS
BEGIN
	
SELECT ItemName,
	Count(*) 'TotalQty_old',
	SUM(Case WHEN ISNULL(IsReturnTxn,0)=0 THEN 1 ELSE -1 END) 'TotalQty',
	SUM(TotalBillAmount) 'TotalBillAmt',
	SUm(IncentiveAmount) 'TotalIncentiveAmount', SUM(TDSAmount) 'TotalTDSAmount'

FROM INCTV_TXN_IncentiveFractionItem incItm

WHERE  IncentiveReceiverId = @EmployeeId 
AND Convert(Date,incItm.TransactionDate) Between @FromDate AND @ToDate
and ISNULL(IsActive,0)=1

Group by ItemName
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_INCTV_DoctorPayment]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*-- Author: Pratik/31March'20
 Description:	To get Incentive payment reports at doctor level for given date range
Change History:
--------------------------------------------------------------
S.No.  Author/Date                   Remarks
--------------------------------------------------------------
1.    Pratik/31March'20              Initial Draft
2.	  Ashish/29April'20				add two clm Voucher no. & remarks for get in report.
--------------------------------------------------------------

*/
CREATE PROCEDURE [dbo].[SP_Report_INCTV_DoctorPayment] --EXEC SP_Report_INCTV_DoctorPayment '2019-07-20','2020-3-31'
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
BEGIN
  SELECT Convert(Date,PaymentDate) 'PaymentDate',
  emp.FullName 'ReceiverName',payinfo.ReceiverId,PaymentInfoId,
  ISNULL(payinfo.TotalAmount,0) 'TotalAmount',
  ISNULL(payinfo.TDSAmount,0) 'TDSAmount',
  ISNULL(payinfo.NetPayAmount,0) 'NetPayAmount',
  ISNULL(payinfo.AdjustedAmount,0) 'AdjustedAmount',
  ISNULL(payinfo.VoucherNumber,0) 'VoucherNumber',
  ISNULL(payinfo.Remarks,0) 'Remarks',
  (select FullName from EMP_Employee where EmployeeId=payinfo.CreatedBy) as 'CreatedBy'
  from
  INCTV_TXN_PaymentInfo payinfo
  join EMP_Employee emp
  on emp.EmployeeId=payinfo.ReceiverId

  WHERE Isnull(payinfo.IsActive,0)=1
	    AND Convert(Date,payinfo.PaymentDate) Between @FromDate AND @ToDate  

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_INCTV_DoctorSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*-- Author: Pratik/20Nov'19
 Description:	To get Incentive reports at doctor level for given date range
Change History:
--------------------------------------------------------------
S.No.  Author/Date                   Remarks
--------------------------------------------------------------
1.    Pratik/20Nov'19               Initial Draft
2.    Sud/26Feb'20                  TDSPercentage added in Summary.
3.    Pratik/18Mar'20               No need of IncentiveType, TDSPercent, just show the summary at doctor level for given date range. 
--------------------------------------------------------------

*/
CREATE PROCEDURE [dbo].[SP_Report_INCTV_DoctorSummary] --EXEC SP_Report_INCTV_DoctorSummary '2019-07-20','2019-11-22'
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
BEGIN
Select  emp.FullName AS ReferrerName, incItm.IncentiveReceiverId AS ReferrerId
   ,SUM(incItm.IncentiveAmount) 'DocTotalAmount',
   SUM(incItm.TDSAmount) 'TDSAmount'
   ,SUM(incItm.IncentiveAmount - incItm.TDSAmount) 'NetPayableAmount'
	from INCTV_TXN_IncentiveFractionItem incItm		
		 INNER JOIN EMP_Employee emp
		   ON incItm.IncentiveReceiverId=emp.EmployeeId

	WHERE 
	    Isnull(incItm.IsActive,0)=1
	    AND Convert(Date,incItm.TransactionDate) Between @FromDate AND @ToDate  

  Group By emp.FullName, incItm.IncentiveReceiverId
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_INCTV_ReferralItemsSummary]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_INCTV_ReferralItemsSummary]  --EXEC SP_Report_INCTV_ReferralItemsSummary '2020-01-17','2020-02-17',93
	@FromDate date = NULL,
    @ToDate date = NULL,
    @EmployeeId int = NULL
AS
/*-- =============================================
 Author:		Pratik/20Nov'19
 Description:	To get Incentive reports at items level for input doctor. 
Change History-----
S.No.   Date/Author    Remarks
-------------------------------------
1.     20Nov'19/Pratik   Initial Draft
2.     12Feb'20/Sud      TDS percent hardcoded for temporary purpose, need to revise it soon. 
3.     25Feb'20/Pratik   TDS percentage is calculated from employee profile 
4.     06Aug'21/Aniket   Previous Adjusted Amount is added from INCTV_TXN_PaymentInfo
5.     24Aug'21/Aniket   Updated query, replaced right join with left join.
6.    09Nov'21/Pratik    updated query, added return status, subtotal and discount amount of billing items 

 =============================================*/
BEGIN
	Select  emp.FullName IncentiveReceiverName, incItm.TransactionDate, incItm.InvoiceNoFormatted, incItm.IncentiveType 'IncomeType', 
	       incItm.PatientId, pat.FirstName+' '+pat.LastName 'PatientName', pat.PatientCode 'HospitalNum', 
		   incItm.ItemName, incItm.TotalBillAmount 'TotalAmount', incItm.IncentivePercent, incItm.IncentiveAmount,incItm.TDSPercentage 'TDSPercentage',
		   incItm.IsReturnTxn , txnitm.SubTotal,txnitm.DiscountAmount,
		   Here TDS Percent is hard-coded, we need to add them to Fractionitem table and calculate from there, not from here--sud: 12Feb'20
		   incItm.TDSAmount 'TDSAmount', incItm.IncentiveAmount - incItm.TDSAmount 'NetPayableAmt',
		   incItm.InctvTxnItemId,incItm.IsPaymentProcessed,--,incItm.BillingTransactionId, incItm.BillingTransactionItemId
		   ISNULL((select top 1 AdjustedAmount from INCTV_TXN_PaymentInfo p order by p.CreatedOn desc),0) 'PreviousAdjustedAmount'
		   
	from INCTV_TXN_IncentiveFractionItem incItm		
	     INNER JOIN PAT_Patient pat
		 ON incItm.PatientId=pat.PatientId
		 INNER JOIN EMP_Employee emp
		 ON incItm.IncentiveReceiverId=emp.EmployeeId
	     LEFT JOIN INCTV_TXN_PaymentInfo p
		 ON incItm.IncentiveReceiverId = p.ReceiverId
		 join BIL_TXN_BillingTransactionItems txnitm
		 on incItm.BillingTransactionItemId = txnitm.BillingTransactionItemId
		 
	WHERE 
	    IncentiveReceiverId = @EmployeeId
		and Isnull(incItm.IsActive,0)=1
	    AND Convert(Date,incItm.TransactionDate) Between @FromDate AND @ToDate
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_INV_CurrentStockItemDetails_By_StoreId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-end: Sud: 1-Oct'20--Incentive--


 START : VIKAS: 1-Oct-2020: Correction for storeName, price column. 
CREATE PROCEDURE [dbo].[SP_Report_INV_CurrentStockItemDetails_By_StoreId] 
@StoreIds NVARCHAR(400) = '', @ItemId INT=null  
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Nagesh/19 Sep 2020			 updated script for available quantity column
2		NageshBB/22 sep 2020		 exclued items which available quantity is 0 and added storename column
3. 		Vikas/1-Oct-2020 			 Added missed column storeName and Price.
-------------------------------------------------------------------
*/
DECLARE @mainStoreId INT=null;
SET @mainStoreId = (select StoreId from PHRM_MST_Store where [Name]='Main Store')	

IF(@mainStoreId IN (SELECT DISTINCT(value) FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> ''))

BEGIN
	SELECT 
	X.GoodsReceiptNo,
	GoodsReceiptDate,
	x.Quantity,
	X.Price,
	X.AvailableQuantity,
	X.StoreName
	FROM (
			select 

			gr.GoodsReceiptDate, 
			gr.GoodsReceiptNo,
			stk.AvailableQuantity,
			gritm.ReceivedQuantity+gritm.FreeQuantity Quantity ,
			stk.Price,
			'Main Store' as StoreName
		from INV_TXN_Stock stk
			join INV_TXN_GoodsReceiptItems gritm on stk.GoodsReceiptItemId = gritm.GoodsReceiptItemId
			join INV_TXN_GoodsReceipt gr on gritm.GoodsReceiptId = gr.GoodsReceiptID			
		where stk.ItemId=@ItemId and stk.AvailableQuantity>0
		UNION 
		SELECT 
			gr.GoodsReceiptDate, 
			gr.GoodsReceiptNo,
			stk.AvailableQuantity,
			gritm.ReceivedQuantity+gritm.FreeQuantity,
			stk.Price,
			store.Name as StoreName			
		FROM WARD_INV_Stock stk
			join INV_TXN_GoodsReceiptItems gritm on stk.GoodsReceiptItemId = gritm.GoodsReceiptItemId
			join INV_TXN_GoodsReceipt gr on gritm.GoodsReceiptId = gr.GoodsReceiptID
			join PHRM_MST_Store store on store.StoreId =stk.StoreId
		WHERE  stk.AvailableQuantity>0 AND 
		  stk.ItemId=@ItemId AND stk.StoreId IN (SELECT DISTINCT(value) FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> '')

		) as X
		
GROUP BY GoodsReceiptDate,X.GoodsReceiptNo,X.Price,x.Quantity,x.AvailableQuantity,x.StoreName
	order by x.StoreName,convert(date,x.GoodsReceiptDate)
END

ELSE
	BEGIN
		SELECT 
			gr.GoodsReceiptDate, 
			gr.GoodsReceiptNo,
			stk.AvailableQuantity,
			(gritm.ReceivedQuantity)+ (gritm.FreeQuantity) as Quantity,
			stk.Price,
			store.Name as StoreName
		FROM WARD_INV_Stock stk
			join INV_TXN_GoodsReceiptItems gritm on stk.GoodsReceiptItemId = gritm.GoodsReceiptItemId
			join INV_TXN_GoodsReceipt gr on gritm.GoodsReceiptId = gr.GoodsReceiptID
			join PHRM_MST_Store store on store.StoreId =stk.StoreId
		WHERE  stk.AvailableQuantity>0 AND 
		stk.ItemId=@ItemId AND stk.StoreId IN (SELECT DISTINCT(value) FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> '')
		GROUP BY GoodsReceiptDate,gr.GoodsReceiptNo,stk.Price,gritm.ReceivedQuantity,gritm.FreeQuantity,stk.AvailableQuantity,store.Name
	    order by store.Name, convert(date,gr.GoodsReceiptDate)
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_INV_CurrentStockLevel]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_INV_CurrentStockLevel] 
@StoreIds NVARCHAR(400) = '',
@showZeroQuantity BIT = 1
AS
/*
Execution Example:
	exec SP_Report_INV_CurrentStockLevel @StoreIds='7,8'
	exec SP_Report_INV_CurrentStockLevel @StoreIds='13', @showZeroQuantity = 0
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		NageshBB/22 Sep 2020			updated script for get subcategory name column
2		NageshBB/08 Dec 2020			updated script for fix wrong storeId get issue resolution when main storeId is not there
3       sanjit/ramesh/rohit/9thSep'21   updated after Inv Stock refactoring
-------------------------------------------------------------------
*/
BEGIN
	SELECT 
		store.StoreId,
		store.Name as StoreName,
		itm.ItemType,
		subCat.SubCategoryName,
		itm.ItemId,
		itm.Code, 
		itm.ItemName,
		SUM(storeStk.AvailableQuantity) as AvailableQuantity,
		SUM(storeStk.AvailableQuantity * stkMaster.CostPrice) as StockValue
	FROM INV_TXN_StoreStock storeStk
		INNER JOIN INV_MST_Stock stkMaster on storeStk.StockId = stkMaster.StockId
		INNER JOIN PHRM_MST_Store store on storeStk.StoreId = store.StoreId
		INNER JOIN INV_MST_Item itm on storeStk.ItemId = itm.ItemId
		INNER JOIN INV_MST_ItemSubCategory subCat on subCat.SubCategoryId = itm.SubCategoryId
	WHERE 
		stkMaster.IsActive = 1 
		AND storeStk.StoreId IN (SELECT value FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> '')
	GROUP BY
		itm.ItemType,
		subCat.SubCategoryName,
		itm.ItemId,
		itm.Code, 
		itm.ItemName,
		store.StoreId,
		store.Name
	HAVING
		SUM(storeStk.AvailableQuantity) > 0 OR @showZeroQuantity = 1 --to disable quantity filter if showZeroQuantity is true

	UNION

	SELECT 
		store.StoreId,
		store.Name as StoreName,
		itm.ItemType,
		subCat.SubCategoryName,
		itm.ItemId,
		itm.Code, 
		itm.ItemName,
		COUNT(fas.FixedAssetStockId) as AvailableQuantity,
		SUM(fas.ItemRate * 1) as StockValue -- ItemRate * 1 is done as each fixed asset table's row is 1 item
	FROM INV_TXN_FixedAssetStock fas
		INNER JOIN INV_MST_Item itm on fas.ItemId = itm.ItemId
		INNER JOIN INV_MST_ItemSubCategory subCat on subCat.SubCategoryId = itm.SubCategoryId
		INNER JOIN PHRM_MST_Store store on ((fas.StoreId = store.StoreId and fas.SubStoreId is null) or fas.SubStoreId = store.StoreId)
	WHERE 
		fas.IsActive = 1 
		AND store.StoreId IN (SELECT value FROM STRING_SPLIT(@StoreIds, ',') WHERE RTRIM(value) <> '')
	GROUP BY
		store.StoreId,
		store.Name,
		itm.ItemType,
		subCat.SubCategoryName,
		itm.ItemId,
		itm.Code, 
		itm.ItemName
	ORDER BY
		itm.ItemName
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_CancelGoodsReceiptReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Inventory_CancelGoodsReceiptReport]
@FromDate DateTime=null,
@ToDate DateTime=null
AS
/*
FileName: [SP_Report_Inventory_CancelGoodsReceiptReport] 
CreatedBy/date: Shankar/2019-09-26
Description: report for cancelled GR in inventory
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.		NageshBB/13 Sep 2020			Column list updated for gr cancelled 
-----------------------------------------------------
*/
BEGIN
GR No, VendorBillDate, VendorName, BillNo, TotalAmount, CancelledDate, CancelledBy, CancelRemarks
		If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>=0 OR LEN(@ToDate)>=0)
				BEGIN
					SELECT  
					gr.GoodsReceiptID,
					gr.GoodsReceiptNo,
					CONVERT(date,gr.GoodsReceiptDate) as GoodsReceiptDate,
					v.VendorName, 
					GR.BillNo,
					gr.TotalAmount,
					gr.CancelledOn,
					gr.CancelledBy,
					gr.CancelRemarks
					FROM    INV_TXN_GoodsReceipt gr				
					INNER JOIN INV_MST_Vendor v ON v.VendorId = gr.VendorId
				    WHERE CONVERT(date,gr.CancelledOn) BETWEEN convert(date,@FromDate) and convert(date,@ToDate)
			     	and gr.IsCancel = 1										
				END
	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_CancelPurchaseOrderReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Inventory_CancelPurchaseOrderReport] 
@FromDate DateTime=null,
@ToDate DateTime=null

AS
/*
FileName: [SP_Report_Inventory_CancelPurchaseOrderReport] 
CreatedBy/date: Shankar/2019-09-26
Description: report for cancelled PO in inventory
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.		NageshBB/13 Sep 2020			column list updated for cancel po
-----------------------------------------------------
*/
BEGIN
PO Id, PO-Date, VendorName, TotalAmount, CancelledDate, CancelledBy, CancelRemarks
		If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>=0 OR LEN(@ToDate)>=0)
				BEGIN
					SELECT  
					po.PurchaseOrderId,
					CONVERT(date,po.PoDate) as PoDate,							
					v.VendorName,							
					po.TotalAmount,
					po.CancelledOn,
					po.CancelledBy,
					po.CancelRemarks
					FROM    INV_TXN_PurchaseOrder po
					INNER JOIN INV_MST_Vendor v on v.VendorId = po.VendorId					 
				    WHERE CONVERT(date,po.CancelledOn) BETWEEN convert(date,@FromDate) and convert(date,@ToDate)
			     	and po.IsCancel = 1							
				END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_ComparePoAndGR]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----

CREATE PROCEDURE [dbo].[SP_Report_Inventory_ComparePoAndGR]

AS
BEGIN

	BEGIN
		select ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS SNo, itm.ItemName, vendor.VendorName, pitms.CreatedOn,pitms.Quantity,(gitms.ReceivedQuantity + gitms.FreeQuantity) RecevivedQuantity, gitms.CreatedOn Receivedon, gr.GoodsReceiptID, gr.PurchaseOrderId
  	,unit.UOMName,Itm.Code
 from INV_TXN_GoodsReceipt gr
 join INV_TXN_GoodsReceiptItems gitms on gitms.GoodsReceiptId = gr.GoodsReceiptId
 join INV_TXN_PurchaseOrderItems pitms on pitms.PurchaseOrderId = gr.PurchaseOrderId 
 join INV_MST_Item itm on gitms.ItemId = itm.ItemId
 join INV_MST_Vendor vendor on vendor.VendorId = gr.VendorId
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
 where gitms.ItemId = pitms.ItemId and gr.IsCancel = 0
 order by gr.PurchaseOrderId desc

	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_CurrentStockLevel]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Inventory_CurrentStockLevel] 
@ItemName VARCHAR(max)=null 



AS
/*
FileName: [SP_Report_Inventory_CurrentStockLevel]
CreatedBy/date: Umed/2017-06-21
Description: to get Details such as Avaliable qty of stock with other data such as Min stock qty , budgeted and item rate of respective Items
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2017-06-21	                   created the script
------------------------------------------------------
*/

BEGIN

		If( (@ItemName IS NOT NULL) OR (LEN(@ItemName) > 0) )
				BEGIN
				         
						SELECT DISTINCT itm.ItemName,
							   SUM(stk.AvailableQuantity) AS AvailableQuantity,
								itm.MinStockQuantity,
								itm.BudgetedQuantity, 
								 gdrp.ItemRate
						 FROM INV_TXN_Stock stk
						INNER JOIN INV_MST_Item itm ON itm.ItemId = stk.ItemId 
						INNER JOIN INV_TXN_GoodsReceiptItems gdrp ON gdrp.GoodsReceiptItemId = stk.GoodsReceiptItemId
						WHERE itm.ItemName like '%'+ISNULL(@ItemName,'')+'%'
						GROUP BY itm.ItemName, itm.MinStockQuantity,itm.BudgetedQuantity,itm.StandardRate , gdrp.ItemRate
				END
        ELSE 

		     BEGIN
				         
						SELECT DISTINCT itm.ItemName,
							   SUM(stk.AvailableQuantity) AS AvailableQuantity,
								itm.MinStockQuantity,
								itm.BudgetedQuantity, 
								 gdrp.ItemRate
						 FROM INV_TXN_Stock stk
						INNER JOIN INV_MST_Item itm ON itm.ItemId = stk.ItemId 
						INNER JOIN INV_TXN_GoodsReceiptItems gdrp ON gdrp.GoodsReceiptItemId = stk.GoodsReceiptItemId
						GROUP BY itm.ItemName, itm.MinStockQuantity,itm.BudgetedQuantity,itm.StandardRate , gdrp.ItemRate
				
				END
 
END









GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_CurrentStockLevel_ItemId]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

END: NageshBB: 17 Jul 2020 -- update fiscal year id as per transaction date

-START: Sanjes: 17th Jul 2020: minor changes in db(SP_Report_Inventory_CurrentStockLevel_ItemId)
CREATE PROCEDURE [dbo].[SP_Report_Inventory_CurrentStockLevel_ItemId] 
		@ItemId int = 0 
AS
/*
Change History
--------------------------------------------------------
S.No.    UpdatedBy/Date					Remarks
--------------------------------------------------------
1		Rusha/04 June 2019			    updated the script by adding vendor and company column
2       Shankar/16 Sept 2019            updated the script for IsCancel 
3		Kushal/30 Sept 2019				Updated Script for Item ID, total Value, Expiry Date, Sub Category 
4       Narayan/19 Nov 2019             Updated Script for ItemType.
5       SANJESH/17 Jul 2020             Replace Join with LEFT JOIN for Company table joining
-------------------------------------------------------------------
*/
BEGIN
		If(@ItemId > 0)
			BEGIN
				SELECT com.CompanyName,ven.VendorName,itm.Code,itm.ItemName,itmsub.SubCategoryName,
						stk.BatchNO,
						SUM(stk.AvailableQuantity) AS AvailableQuantity,
						SUM(itm.MinStockQuantity) AS MinimumQuantity,
						gdrp.ExpiryDate AS ExpiryDate,
						SUM(gdrp.FreeQuantity) AS BudgetedQuantity,
						SUM(gdrp.ItemRate) AS ItemRate,
						SUM( gdrp.ItemRate * stk.AvailableQuantity) AS TotalValue, itm.ItemType,												
						gdrp.CreatedOn,
						unit.UOMName
					FROM INV_TXN_Stock stk
				INNER JOIN INV_MST_Item itm ON itm.ItemId = stk.ItemId 
				INNER JOIN INV_TXN_GoodsReceiptItems gdrp ON gdrp.GoodsReceiptItemId = stk.GoodsReceiptItemId
				JOIN INV_TXN_GoodsReceipt as grd on grd.GoodsReceiptID = gdrp.GoodsReceiptId and grd.IsCancel = 0
				JOIN INV_MST_Vendor as ven on ven.VendorId = grd.VendorId
				LEFT JOIN INV_MST_Company AS com on com.CompanyId = itm.CompanyId
				JOIN INV_MST_ItemSubCategory as itmsub on itm.SubCategoryId = itmsub.SubCategoryId
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
				WHERE stk.ItemId = @ItemId
				GROUP BY com.CompanyName,unit.UOMName,ven.VendorName,itm.ItemName,itm.Code,stk.BatchNO,gdrp.CreatedOn,itmsub.SubCategoryName,gdrp.ExpiryDate,itm.ItemType
			END
        ELSE 
		    BEGIN
				SELECT com.CompanyName,ven.VendorName,itm.Code,itm.ItemName,itmsub.SubCategoryName,
						stk.BatchNO,
						SUM(stk.AvailableQuantity) AS AvailableQuantity,
						SUM(itm.MinStockQuantity) AS MinimumQuantity,
						gdrp.ExpiryDate AS ExpiryDate,
						SUM(gdrp.FreeQuantity) AS BudgetedQuantity,
						SUM(gdrp.ItemRate) AS ItemRate,
						SUM(gdrp.ItemRate * stk.AvailableQuantity ) AS TotalValue,itm.ItemType,
						gdrp.CreatedOn,
						unit.UOMName
					FROM INV_TXN_Stock stk
				INNER JOIN INV_MST_Item itm ON itm.ItemId = stk.ItemId 
				INNER JOIN INV_TXN_GoodsReceiptItems gdrp ON gdrp.GoodsReceiptItemId = stk.GoodsReceiptItemId
				JOIN INV_TXN_GoodsReceipt as grd on grd.GoodsReceiptID = gdrp.GoodsReceiptId and grd.IsCancel = 0
				JOIN INV_MST_Vendor as ven on ven.VendorId = grd.VendorId
				LEFT JOIN INV_MST_Company AS com on com.CompanyId = itm.CompanyId
				JOIN INV_MST_ItemSubCategory as itmsub on itm.SubCategoryId = itmsub.SubCategoryId
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
				GROUP BY com.CompanyName, unit.UOMName, ven.VendorName,itm.ItemName,itm.Code,stk.BatchNO,gdrp.CreatedOn,itmsub.SubCategoryName,gdrp.ExpiryDate,itm.ItemType
			END 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_DailyItemsDispatchReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-------

CREATE PROCEDURE [dbo].[SP_Report_Inventory_DailyItemsDispatchReport]  
  @FromDate DateTime=null,
  @ToDate DateTime=null,
  @StoreId int=null
AS
/*
FileName: [SP_Report_Inventory_DailyItemsDispatchReport] 
CreatedBy/date: Umed/2017-06-21
Description: to get Details such as itemNames , total dispatch qty of particular item with total amount generated between given dates along with StoreName.
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Umed/2017-06-21                     created the script
2       Rusha/2019-06-06                    updated the script
3       Ramesh/2020-04-14                   updated the script
-----------------------------------------------------
*/
BEGIN
    If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>=0 OR LEN(@ToDate)>=0)
        BEGIN
            SELECT CONVERT(date,D.CreatedOn) AS [Date],I.ItemName,D.DispatchedQuantity,D.ReceivedBy,
            CONCAT_WS(' ',E.FirstName,E.MiddleName,E.LastName) AS DispatchedBy,
            D.RequisitionItemId,
            (D.DispatchedQuantity * I.StandardRate) as 'Amount',
            I.Code,
            U.UOMName ,S.Name StoreName
            FROM INV_TXN_DispatchItems AS D
            JOIN INV_TXN_RequisitionItems AS RI ON RI.RequisitionItemId = D.RequisitionItemId
            JOIN INV_TXN_Requisition AS R ON R.RequisitionId = RI.RequisitionId
            JOIN PHRM_MST_Store AS S ON R.StoreId = S.StoreId
            JOIN INV_MST_Item AS I ON I.ItemId= RI.ItemId
            JOIN EMP_Employee AS E ON E.EmployeeId = D.CreatedBy            
            LEFT JOIN INV_MST_UnitOfMeasurement U on I.UnitOfMeasurementId = U.UOMId
           WHERE CONVERT(date,D.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())+1 
              AND
               (CASE
                 WHEN @StoreId is not null and R.StoreId = @StoreId THEN 1
                 WHEN @StoreId is null THEN 1
                END) = 1

     END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_DetailedStockLedger]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Inventory_DetailedStockLedger] 
    @FromDate DATETIME = NULL,
    @ToDate DATETIME = NULL,
    @ItemId INT = NULL,
    @StoreId INT = NULL

AS
/*
FileName: SP_Report_Inventory_DetailedStockLedger '2021-05-13', '2021-09-13', null, null
CreatedBy/date: Rajib/20-07-2021
Description: SP to get the Stock Detail Ledger for Inventory.
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1        Ramesh/29-08-2021                    corrected for Txn type and StoreId for Dispatch
----------------------------------------------------------------------------------------------------------------------------------
*/
     body of the stored procedure
     Drop the table if it already exists
    IF OBJECT_ID('tempDB..#TempTxnsTable', 'U') IS NOT NULL
    DROP TABLE #TempTxnsTable

    SELECT TXNS.* , CONVERT(FLOAT, 0) 'BalanceQty', CONVERT(DECIMAL(16,4),0) 'BalanceRate' , CONVERT(DECIMAL(16,4),0) 'BalanceAmount'
    INTO #TempTxnsTable
    FROM 
        (
            SELECT   STKT.TransactionDate, ISNULL(STKT.InQty,0) 'ReceiptQty', ISNULL(STKT.CostPrice,0) 'ReceiptRate', ISNULL(STKT.InQty,0) * ISNULL(STKT.CostPrice,0) 'ReceiptAmount',
                    NULL 'IssueQty', NULL 'IssueRate', NULL 'IssueAmount', 
                    GR.GoodsReceiptID 'ReferenceNo', GRI.GRItemSpecification 'Remarks',S.Name as Store, E.FullName 'Username'
            FROM    INV_TXN_StockTransaction STKT JOIN
                    EMP_Employee E ON STKT.CreatedBy = E.EmployeeId LEFT JOIN 
                    INV_TXN_GoodsReceiptItems GRI ON STKT.ReferenceNo = GRI.GoodsReceiptItemId LEFT JOIN
                    INV_TXN_GoodsReceipt GR ON GRI.GoodsReceiptId = GR.GoodsReceiptID JOIN
					PHRM_MST_Store S ON GR.StoreId = S.StoreId
            WHERE  STKT.TransactionType IN ('opening-item', 'goodreceipt-items') AND
                    (STKT.ItemId = @ItemId OR @ItemId IS NULL) AND
                    Convert(date,STKT.TransactionDate) BETWEEN @FromDate AND  @ToDate
					AND (STKT.StoreId = @StoreId OR @StoreId IS NULL)

            UNION ALL

            SELECT  STKT.TransactionDate, NULL 'ReceiptQty',NULL 'ReceiptRate',NULL 'ReceiptAmount',
                    ISNULL(STKT.OutQty,0)  'IssueQty',ISNULL(STKT.CostPrice,0) 'IssueRate',ISNULL(STKT.OutQty,0) * ISNULL(STKT.CostPrice,0) 'IssueAmount', 
                    D.DispatchId 'ReferenceNo', D.Remarks 'Remarks',S.Name as Store, ISNULL(E.FullName, 'Not Received') 'Username'
            FROM    INV_TXN_StockTransaction STKT LEFT JOIN 
                    INV_TXN_DispatchItems D ON STKT.ReferenceNo = D.DispatchItemsId LEFT JOIN
                    PHRM_MST_Store S ON D.TargetStoreId = S.StoreId LEFT JOIN
                    EMP_Employee E ON D.ReceivedById = E.EmployeeId
            WHERE  STKT.TransactionType IN ('dispatched-item-from', 'dispatched-item-to') AND
                    (STKT.ItemId = null OR @ItemId IS NULL) AND
                    Convert(date,STKT.TransactionDate)  BETWEEN @FromDate AND @ToDate
					AND (STKT.StoreId = @StoreId OR @StoreId IS NULL)
        ) TXNS
  ORDER BY TXNS.TransactionDate


    DECLARE @BalanceQty FLOAT = 0;
    DECLARE @BalanceAmount DECIMAL(20,4) = 0;
    WITH TEMPTXNS
    AS
    (
        SELECT  TXNS.TransactionDate, TXNS.ReceiptQty, TXNS.ReceiptRate, TXNS.ReceiptAmount,
                TXNS.IssueQty, TXNS.IssueRate,TXNS.IssueAmount,
                TXNS.BalanceQty, TXNS.BalanceRate, TXNS.BalanceAmount,
                TXNS.ReferenceNo, TXNS.Store, TXNS.Username, TXNS.Remarks
        FROM #TempTxnsTable TXNS
    )
    UPDATE TEMPTXNS
    SET @BalanceQty = BalanceQty = @BalanceQty + ISNULL(ReceiptQty,-IssueQty),
    BalanceRate = ISNULL(ReceiptRate, IssueRate),
    @BalanceAmount = BalanceAmount = @BalanceAmount + (ISNULL(ReceiptQty, -IssueQty) * ISNULL(ReceiptRate, IssueRate))
    OUTPUT INSERTED.*


GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_ExpiryItemReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE  [dbo].[SP_Report_Inventory_ExpiryItemReport]
	@ItemId int = NULL,
	@StoreId int = NULL,
	@FromDate Date = NULL,
	@ToDate Date = NULL
AS

/*
FileName: [SP_Report_Inventory_ExpiryItemReport] 
Created: 08Oct'21/Swapnil
Description: To get report data with ItemId,StoreId,FromDate,ToDate.
-----------------------------------------------------------------------
Change History
-----------------------------------------------------------------------
S.No.    Date/User              Change          Remarks
-----------------------------------------------------------------------
1.	     06Oct'21/Swapnil		                  inital draft
-----------------------------------------------------------------------
*/

BEGIN
	SELECT (Cast(ROW_NUMBER() OVER (ORDER BY  x.ItemName)  AS int)) AS SN, x.*
	FROM
		(
			SELECT t1.ItemId, t1.BatchNo, t1.ExpiryDate, t1.MRP, t1.CostPrice, item.ItemName, SUM(t2.AvailableQuantity) AS AvailableQuantity, store.Name, ISNULL(Vendor.VendorName, '') AS VendorName
			FROM INV_MST_Stock AS t1 INNER JOIN
			INV_TXN_StoreStock AS t2 ON t1.StockId = t2.StockId LEFT JOIN
			INV_TXN_GoodsReceiptItems AS GRI ON t2.StoreStockId = GRI.StockId LEFT JOIN
			INV_TXN_GoodsReceipt AS GR ON GRI.GoodsReceiptId = GR.GoodsReceiptID LEFT JOIN
			INV_MST_Vendor Vendor ON GR.VendorId = Vendor.VendorId INNER JOIN
			INV_MST_Item AS item ON item.ItemId = t1.ItemId INNER JOIN
			PHRM_MST_Store AS store ON store.StoreId = t2.StoreId
			WHERE  (t1.ItemId = @ItemId OR @ItemId IS NULL) AND (t2.StoreId = @StoreId OR @StoreId IS NULL)
			AND CONVERT(Date,t1.ExpiryDate) BETWEEN @FromDate AND @ToDate AND (t2.AvailableQuantity > 0)
		GROUP BY t1.ItemId, t1.BatchNo, t1.ExpiryDate, t1.MRP,t1.CostPrice, item.ItemName, store.Name, Vendor.VendorName
		)
	AS x
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_FixedAssets]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-

CREATE PROCEDURE [dbo].[SP_Report_Inventory_FixedAssets]  		
	@FromDate datetime=null,
	@ToDate datetime=null		
AS
/*
FileName: [SP_Report_Inventory_FixedAssets]
CreatedBy/date: Rusha/07-05-2019
Description: To get the Details of Fixed assets goods of inventory
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------

--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) AND (@ToDate IS NOT NULL))
		BEGIN
			DECLARE @inv_name VARCHAR(MAX);
			SET @inv_name='Inventory Store';

			SELECT x.[Date],x.[Name],x.ItemName,x.Qty,x.MRP,SUM(x.Qty * x.MRP) AS TotalAmt ,X.UOMName,X.Code
			FROM (
					SELECT 
						CONVERT(date,gritm.CreatedOn) AS [Date],
						dep.DepartmentName AS [Name],
						itm.ItemName,
						dis.DispatchedQuantity AS Qty,
						gritm.ItemRate AS MRP,
						unit.UOMName,Itm.Code
					FROM INV_TXN_Stock AS stk
						JOIN INV_TXN_GoodsReceiptItems AS gritm ON gritm.GoodsReceiptItemId = stk.GoodsReceiptItemId
						JOIN INV_TXN_DispatchItems AS dis ON stk.ItemId = dis.ItemId
						JOIN INV_MST_Item AS itm ON itm.ItemId = stk.ItemId
						JOIN MST_Department AS dep ON dep.DepartmentId = dis.DepartmentId
						left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
					WHERE 
						itm.ItemType = 'Capital Goods' AND 
						CONVERT(date, gritm.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND 
						ISNULL(@ToDate,GETDATE())+1
					GROUP BY CONVERT(date,gritm.CreatedOn),
						itm.ItemName,dep.DepartmentName,gritm.ItemRate,dis.DispatchedQuantity,unit.UOMName,Itm.Code

					UNION ALL

					SELECT  
						CONVERT(date,gritm.CreatedOn) AS [Date],
						@inv_name AS [Name],
						itm.ItemName,
						SUM(stk.AvailableQuantity) AS Qty,
						gritm.ItemRate AS MRP ,
						unit.UOMName,Itm.Code
					FROM INV_TXN_Stock AS stk
						JOIN INV_MST_Item AS itm on itm.ItemId = stk.ItemId
						JOIN INV_TXN_GoodsReceiptItems as gritm on gritm.GoodsReceiptItemId = stk.GoodsReceiptItemId					
						left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
					WHERE itm.ItemType = 'Capital Goods' AND CONVERT(date, gritm.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
					GROUP BY CONVERT(date,gritm.CreatedOn),itm.ItemName,gritm.ItemRate,unit.UOMName,Itm.Code) x
			GROUP BY x.[Date],x.[Name],x.ItemName,x.Qty,x.MRP,X.UOMName,X.Code

		END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_FixedAssetsMovement]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_Report_Inventory_FixedAssetsMovement] 
CreatedBy/date: Aniket/29-09-2021
Description: To get the Details of report Quotion rates
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.    Aniket/29-09-2021                    created the script
--------------------------------------------------------------------------
*/
Create PROCEDURE [dbo].[SP_Report_Inventory_FixedAssetsMovement] 
    @FromDate datetime = null,
    @ToDate datetime =null,
	@EmployeeId int Null= null,
	@DepartmentId int Null = null,
	@ItemId int Null = null,
	@ReferenceNumber nvarchar Null = null
AS
BEGIN
IF ((@FromDate IS NOT NULL) AND (@ToDate IS NOT NULL))
BEGIN 
select FS.BarCodeNumber,
	   ALH.StartDate as MovementDate,
	   I.ItemName,
	   UOT.UOMName as UOMName,
	   COUNT(*) as Quantity, 
	   (FS.ItemRate * COUNT(*)) as Amount, 
       S.Name as StoreName,
	   ISNULL(E.FullName,'N/A') as AssetHolder
from INV_AssetLocationHistory ALH
JOIN INV_TXN_FixedAssetStock FS ON ALH.FixedAssetStockId = FS.FixedAssetStockId
JOIN INV_MST_Item I ON FS.ItemId = I.ItemId
LEFT JOIN EMP_Employee E ON ALH.OldAssetHolderId = E.EmployeeId
JOIN PHRM_MST_Store S ON ALH.OldStoreId = S.StoreId
JOIN INV_MST_UnitOfMeasurement AS  UOT ON I.UnitOfMeasurementId = UOT.UOMId
where ((CONVERT(date,ALH.StartDate) between ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())) 
OR (CONVERT(date,ALH.EndDate) between ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE()))) 
AND ((FS.AssetHolderId = @EmployeeId Or @EmployeeId is null) AND (FS.SubStoreId = @DepartmentId Or @DepartmentId is null) AND (FS.ItemId = @ItemId Or @ItemId is null) AND (FS.BarCodeNumber = @ReferenceNumber Or @ReferenceNumber is null))
GROUP BY FS.ItemId, ALH.OldAssetHolderId, ALH.OldStoreId, ALH.StartDate, FS.ItemRate, I.ItemName, S.Name, UOT.UOMName, I.Code, E.FullName,FS.BarCodeNumber
END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_GoodReceiptEvaluation]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----

CREATE PROCEDURE [dbo].[SP_Report_Inventory_GoodReceiptEvaluation]
  @GoodReceiptNo int = null,
  @FromDate DateTime=null,
  @ToDate DateTime=null,
  @TransactionType varchar(70)=null
  AS
/*
 FileName: SP_Report_Inventory_GoodReceiptEvaluation 
 Created: 12Dec'19 <Sanjit>
 Description: To Get All The Details of GoodRecipt of the inventory
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      12Dec'19/sanjit         created          
 2.		 17Jun'20/sanjit		 changed goodsreceiptid to goodsreceiptno
 -----------------------------------------------------------------------
*/
BEGIN
  If(@GoodReceiptNo IS NOT NULL)
  BEGIN
    select gr.GoodsReceiptID,gr.GoodsReceiptNo,itm.ItemName,itm.Code,itm.ItemType,gritm.BatchNO,gritm.ItemRate,stktxn.TransactionType,stktxn.Quantity,stktxn.InOut,stktxn.CreatedOn as 'TransactionDate',stktxn.ReferenceNo,emp.FirstName as 'TransactionBy',
	unit.UOMName
	from INV_TXN_StockTransaction as stktxn
    
    join INV_TXN_Stock as stk on stktxn.StockId = stk.StockId
    join INV_TXN_GoodsReceiptItems as gritm on stk.GoodsReceiptItemId = gritm.GoodsReceiptItemId
    join INV_TXN_GoodsReceipt as gr on gritm.GoodsReceiptId = gr.GoodsReceiptID
    join INV_MST_Item as itm on stk.ItemId = itm.ItemId
    join EMP_Employee as emp on stktxn.CreatedBy = emp.EmployeeId
    left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
    where gr.GoodsReceiptNo = @GoodReceiptNo and stkTxn.TransactionType like ISNULL(@TransactionType,'%') and CONVERT(date,stktxn.CreatedOn) between ISNULL(@FromDate,'2010-01-01') and ISNULL(@ToDate,GETDATE())
    order by stktxn.CreatedOn desc
  END
  ELSE
  BEGIN
    select gr.GoodsReceiptID,gr.GoodsReceiptNo,itm.ItemName,itm.Code,itm.ItemType,gritm.BatchNO,gritm.ItemRate,stktxn.TransactionType,stktxn.Quantity,stktxn.InOut,stktxn.CreatedOn as 'TransactionDate',stktxn.ReferenceNo,emp.FirstName as 'TransactionBy',
	unit.UOMName
	from INV_TXN_StockTransaction as stktxn    
	join INV_TXN_Stock as stk on stktxn.StockId = stk.StockId
    join INV_TXN_GoodsReceiptItems as gritm on stk.GoodsReceiptItemId = gritm.GoodsReceiptItemId
    join INV_TXN_GoodsReceipt as gr on gritm.GoodsReceiptId = gr.GoodsReceiptID
    join INV_MST_Item as itm on stk.ItemId = itm.ItemId
    join EMP_Employee as emp on stktxn.CreatedBy = emp.EmployeeId
    left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
    where stkTxn.TransactionType like ISNULL(@TransactionType,'%') and CONVERT(date,stktxn.CreatedOn) between ISNULL(@FromDate,'2010-01-01') and ISNULL(@ToDate,GETDATE())
    order by stktxn.CreatedOn desc
  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_InventorySummaryReport]    Script Date: 4/12/2025 9:35:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---
CREATE PROCEDURE [dbo].[SP_Report_Inventory_InventorySummaryReport]  
@FromDate Date=null,
@ToDate Date=null, 
@ItemName NVARCHAR(max)=null
as

/*
 FileName: [SP_Report_Inventory_InventorySummaryReport] 
 Created: Unknown
 Description: To Get the summary of inventory
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      17Jun'20/sanjit         updated for transaction types          
 2.
 -----------------------------------------------------------------------
*/
BEGIN

	SELECT  itmDate.Dates 
	        ,itmDate.ItemId
			,itmDate.ItemName
			,itmDate.UOMName
			,itmDate.ItemRates
			,itmDate.Code
			,ISNULL(stIn.PurchaseQty,0) as PurchaseQty
			,ISNULL(stIn.Pvalue,0) As PurchaseValue
			,ISNULL(stOut.dispatchQty,0) as DispatchQty
			,ISNULL(stOut.dvalue,0) as DispatchValue
			,ISNULL(stOut.writeoffQty,0) as WriteoffQty
			,ISNULL(stOut.writeoffvalue,0) as WriteoffValue
			,ISNULL(stOut.ReturnToVendorQty,0) as ReturnToVendorQty
			,ISNULL(stOut.ReturnToVendorvalue,0) as ReturnToVendorValue

 FROM 

 (
	   SELECT DISTINCT d.Dates,itm.ItemId,itm.ItemName,itm.UnitOfMeasurementId,uom.UOMName, gr.ItemRate as ItemRates,itm.Code
	   FROM  
			  FN_COMMON_GetAllDatesBetweenRange(@FromDate,@ToDate) d  
			  --calling Table value Function Through SP
			, INV_MST_Item itm, INV_MST_UnitOfMeasurement uom , INV_TXN_GoodsReceiptItems gr
			WHERE itm.UnitOfMeasurementId = uom.UOMId
 ) itmDate

Left Join
(
		  -this table is for to get Purchase quantity and Purchase value of Each items 
		   SELECT DISTINCT 
				   gr.ItemId
				   ,convert(date,s.CreatedOn) AS Dates
				   ,gr.ItemRate AS itemrate 
				   ,SUM(s.ReceivedQuantity) AS PurchaseQty 
				   ,(gr.ItemRate*SUM(s.ReceivedQuantity)) AS Pvalue
		   FROM INV_TXN_Stock  s 
						 INNER JOIN INV_TXN_GoodsReceiptItems gr 
						 ON s.goodsreceiptitemid=gr.goodsreceiptitemid
		  GROUP BY  convert(date,s.CreatedOn),gr.ItemId,itemrate
) stIn

ON  stIn.Dates = itmDate.Dates AND itmDate.ItemId=stIn.ItemId

left join
  
  (   
		 -this table is for to get Dispatch quantity , Dispatch value , Writeoff quantity ,Writeoff value and  of Each items 
		SELECT DISTINCT 
				   gr.ItemId
				  ,gr.ItemRate 
				  ,convert(date,sttxn.CreatedOn) AS Dates
				  ,SUM(case WHEN TransactionType='dispatched-items' THEN sttxn.Quantity ELSE 0 END) AS dispatchQty
				  , (gr.ItemRate*(SUM(CASE WHEN TransactionType='dispatched-items' THEN sttxn.Quantity ELSE 0 END))) AS dvalue
				  ,SUM(CASE WHEN TransactionType='writeoff-items' THEN sttxn.Quantity ELSE 0 END) AS writeoffQty 
				  , (gr.ItemRate*(SUM(CASE WHEN TransactionType='writeoff-items' THEN sttxn.Quantity ELSE 0 END))) AS writeoffvalue
				  ,SUM(CASE WHEN TransactionType='returntovendor-items' THEN sttxn.Quantity ELSE 0 END) AS ReturnToVendorQty 
				  , (gr.ItemRate*(SUM(CASE WHEN TransactionType='returntovendor-items' THEN sttxn.Quantity ELSE 0 END))) AS ReturnToVendorvalue
		 FROM INV_TXN_Stock s 
					 INNER JOIN INV_TXN_GoodsReceiptItems gr 
					   ON s.goodsreceiptitemid=gr.goodsreceiptitemid
					 INNER JOIN INV_TXN_StockTransaction sttxn 
					   ON sttxn.StockId = s.StockId
		 GROUP BY convert(date,sttxn.CreatedOn) ,gr.ItemId, gr.ItemRate 
)  stOut   

ON itmDate.Dates=stOut.Dates AND itmDate.ItemId=stOut.ItemId	 

-we'll take the row if something is present in it.
WHERE ( stIn.PurchaseQty IS NOT NULL  OR 
         stOut.dispatchQty IS NOT NULL OR stOut.writeoffQty IS NOT NULL ) 
		 AND itmDate.ItemName like '%'+ISNULL(@ItemName,'')+'%' 
      AND (itmDate.ItemRates = stIn.itemrate OR itmDate.ItemRates = stOut.ItemRate)

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_InventoryValuation]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----------

CREATE PROCEDURE [dbo].[SP_Report_Inventory_InventoryValuation]

AS
BEGIN
/* 
here we take item rate from INV_TXN_GoodsReceiptItems and its  available quantity from INV_TXN_Stock 
and then calculate amount for the item.
*/
SELECT A.ItemName,A.UOMName,A.Code, ROUND((SUM(A.Amt)/SUM(A.Qty)),2) Rate,SUM(A.Qty) Quantity,SUM(A.Amt) Amount FROM 
(
	SELECT Itm.ItemName,grItm.ItemRate,stk.AvailableQuantity Qty,
	grItm.ItemRate * stk.AvailableQuantity Amt, unit.UOMName,Itm.Code FROM INV_TXN_Stock stk
	JOIN INV_TXN_GoodsReceiptItems grItm ON stk.GoodsReceiptItemId = grItm.GoodsReceiptItemId
	JOIN INV_MST_Item Itm ON stk.ItemId = Itm.ItemId
	left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
	WHERE stk.AvailableQuantity > 0
) A
GROUP BY A.ItemName,A.UOMName,A.Code

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_ItemMgmtDetail]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Sanjesh>
 Create date: <14/02/20>
 Description:	<To get the item management detail report>
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_Inventory_ItemMgmtDetail] 
	
AS
BEGIN
    BEGIN
	
	select 	
	 itm.ItemName,
	 usr.UserName AS CreatedBy,
	 itm.CreatedOn,
	 usr1.UserName As ModifiedBy,
	 itm.ModifiedOn  
	 from INV_MST_Item itm
	left join  RBAC_User usr on itm.CreatedBy= usr.UserId
	left join  RBAC_User usr1 on itm.ModifiedBy = usr1.UserId
   END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_Purchase]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
------


 =============================================
 Author:    <Author,,Name>
 Create date: <Create Date,,>
 Description:  <Description,,>
 Shankar/2019-09-16  Edited script for IsCancel
 Sanjit/2020-01-22   Date Format change
 =============================================
CREATE PROCEDURE [dbo].[SP_Report_Inventory_Purchase]

AS
BEGIN

      BEGIN
            select itm.ItemName, vendor.VendorName,vendor.ContactNo,  FORMAT (pitms.CreatedOn, 'dd MMM yyyy, hh:mm tt ') as CreatedOn,(gitms.ReceivedQuantity + gitms.FreeQuantity) TotalQuantity,pitms.StandardRate, PO.TotalAmount,gr.Discount
  	,unit.UOMName,Itm.Code
 from INV_TXN_GoodsReceipt gr   
 join INV_TXN_GoodsReceiptItems gitms on gitms.GoodsReceiptId = gr.GoodsReceiptId
 join INV_TXN_PurchaseOrderItems pitms on pitms.PurchaseOrderId = gr.PurchaseOrderId 
 join INV_MST_Item itm on gitms.ItemId = itm.ItemId
 join INV_TXN_PurchaseOrder PO on PO.PurchaseOrderId = pitms.PurchaseOrderId
 join INV_MST_Vendor vendor on vendor.VendorId = gr.VendorId
left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
 where gitms.ItemId = pitms.ItemId AND gr.IsCancel = 0
 order by gr.PurchaseOrderId desc

        END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_PurchaseItemsReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Inventory_PurchaseItemsReport]  
@FromDate Date = null,
@ToDate Date = null,
@FiscalYearId INT = null,
@ItemIds VARCHAR(MAX) = null
as

/*
 FileName: [SP_Report_Inventory_PurchaseItemsReport] 
 Created: 9th Sep 2020/VIKAS
 Description: To Get the summary of inventory
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.		VIKAS:10th Sep2020		Sp for purchase items summary
 2.		NageshBB: 17 sep 2020	updated column list and remove unwanted code, excluing cancel gr
 -----------------------------------------------------------------------
*/

BEGIN
If(LEN(ISNULL (@ItemIds,'')) > 0) 
BEGIN
	select 
		CONVERT(date,gr.GoodsReceiptDate) as 'Dates',
		gr.GoodsReceiptNo,
		v.VendorName,
		v.ContactNo as 'VendorContact',
		sb.SubCategoryName, 
		itm.ItemName, 
		(gritm.ReceivedQuantity+gritm.FreeQuantity) as 'TotalQty',
		gritm.ItemRate, 
		gritm.SubTotal, 
		gritm.DiscountAmount,
		gritm.VATAmount,
		gritm.TotalAmount,
		gritm.BatchNO,
		gritm.MRP,
		gritm.ItemId,
		itm.ItemType
	FROM INV_TXN_GoodsReceipt gr 
		join INV_TXN_GoodsReceiptItems gritm   on gr.GoodsReceiptID= gritm.GoodsReceiptId
		join INV_MST_Item itm on gritm.ItemId = itm.ItemId
		join INV_MST_Vendor v on v.VendorId = gr.VendorId
		join INV_MST_ItemSubCategory sb on itm.SubCategoryId = sb.SubCategoryId
	WHERE (CONVERT(date,gr.GoodsReceiptDate) Between CONVERT(date,@FromDate) and CONVERT(date,@ToDate))
	and gr.IsCancel!=1 and itm.ItemId IN (SELECT value FROM STRING_SPLIT(@ItemIds, ',') WHERE RTRIM(value) <> '')
END
ELSE
  BEGIN
     select 
		CONVERT(date,gr.GoodsReceiptDate) as 'Dates',
		gr.GoodsReceiptNo,
		v.VendorName,
		v.ContactNo as 'VendorContact',
		sb.SubCategoryName, 
		itm.ItemName, 
		(gritm.ReceivedQuantity+gritm.FreeQuantity) as 'TotalQty',
		gritm.ItemRate, 
		gritm.SubTotal, 
		gritm.DiscountAmount,
		gritm.VATAmount,
		gritm.TotalAmount,
		gritm.BatchNO,
		gritm.MRP,
		gritm.ItemId,
		itm.ItemType
	FROM INV_TXN_GoodsReceipt gr 
		join INV_TXN_GoodsReceiptItems gritm   on gr.GoodsReceiptID= gritm.GoodsReceiptId
		join INV_MST_Item itm on gritm.ItemId = itm.ItemId
		join INV_MST_Vendor v on v.VendorId = gr.VendorId
		join INV_MST_ItemSubCategory sb on itm.SubCategoryId = sb.SubCategoryId
	WHERE (CONVERT(date,gr.GoodsReceiptDate) Between CONVERT(date,'2021-10-07') and CONVERT(date,'2021-10-07'))
	and gr.IsCancel!=1 
  END
 END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_PurchaseOrderSummeryReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----------

CREATE PROCEDURE [dbo].[SP_Report_Inventory_PurchaseOrderSummeryReport] 
@FromDate DateTime=NULL,
@ToDate DateTime=NULL,
@StoreId INT = NULL

AS
/*
FileName: [SP_Report_Inventory_PurchaseOrderSummeryReport]
CreatedBy/date: Umed/2017-06-23
Description: to get Details such as Item Name,Total Qty,Received qty,pending qty, with expected Due Date of delivery Between Given Date input
Remarks:    
Change History
-----------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
------------------------------------------------------------------------------
1       Umed/2017-06-23	                   created the script
2       Shankar/2019-09-16                 Edited script to add IsCancel
3.      Dhanashri/2021-10-28               Updated as per new requirement
-------------------------------------------------------------------------------
*/
BEGIN

	If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
		BEGIN
			SELECT 
				CONVERT(date,po.PoDate) as [Date] ,
				po.PONumber as PONumber,
				ven.VendorName,
				msitm.Code as ItemCode,
				msitm.ItemName as ItemName,
				ic.ItemCategoryName as ItemType,
				isc.SubCategoryName as SubCategory,
				poitm.Quantity as Quantity, 
				poitm.StandardRate as StandardRate,
				poitm.VATAmount as VAT, 
				poitm.TotalAmount as TotalAmount,
				CASE
					WHEN LEN(LTRIM(RTRIM(ISNULL(poitm.Remark,'')))) > 0 THEN poitm.Remark
					ELSE po.PORemark
				END as Remarks
			FROM 
				INV_TXN_PurchaseOrderItems poitm
				INNER JOIN INV_TXN_PurchaseOrder po ON poitm.PurchaseOrderId =po.PurchaseOrderId
				INNER JOIN INV_MST_Vendor AS ven ON ven.VendorId = po.VendorId
				INNER JOIN INV_MST_Item msitm ON msitm.ItemId = poitm.ItemId
				LEFT JOIN INV_MST_ItemSubCategory isc ON isc.SubCategoryId = msitm.SubCategoryId
				LEFT JOIN INV_MST_ItemCategory ic ON ic.ItemCategoryId = msitm.ItemCategoryId
			WHERE 
				CONVERT(date,po.PoDate) between @FromDate and @ToDate
				AND (po.StoreId = @StoreId Or @StoreId is null)
				 check for po active status 
				AND ISNULL(po.IsCancel, 0) = 0 AND ISNULL(poitm.IsActive, 1) != 0 AND poitm.POItemStatus != 'cancelled'
			ORDER BY po.PoDate DESC
		END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_PurchaseSummary]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
report sp alter script here 

CREATE PROCEDURE [dbo].[SP_Report_Inventory_PurchaseSummary]
@FromDate DateTime=null,
@ToDate DateTime=null,
@VendorId int=null
AS
/*
FileName: [SP_Report_Inventory_PurchaseSummary] '2021-09-07','2021-09-14'
Example to Execute:
	EXECUTE SP_Report_Inventory_PurchaseSummary '2021-09-07','2021-09-14'
CreatedBy/date: NageshBB/16 Sep 2020
Description: get records for inventory purchase summary report
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.		NageshBB/16 Sep 2020		created sp for get records for inventory purchase summary report
2.		Sanjit/14Sep21				added OtherCharges in the Report
3.		NageshBB/19 Sep 2021		changes for filter data with vendor id and add vendor bill date in result
-----------------------------------------------------
*/
BEGIN
	If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN
		if( ISNULL(@VendorId,0) > 0) --if vendor id is not provided then 
		BEGIN
				SELECT 			
				    gr.GoodsReceiptID,	gr.GoodsReceiptNo,	CONVERT(CHAR(16), gr.GoodsReceiptDate, 21) as GoodsReceiptDate,
					gr.PurchaseOrderId,	gr.GRCategory,	v.VendorName,	v.ContactNo,gr.BillNo,gr.SubTotal,gr.DiscountAmount,gr.VATTotal,
					gr.OtherCharges + (Select Sum(OtherCharge) from INV_TXN_GoodsReceiptItems WHERE GoodsReceiptID = gr.GoodsReceiptID) as OtherCharges,
					gr.TotalAmount,	gr.PaymentMode,	gr.Remarks,CONVERT(CHAR(16), gr.CreatedOn, 21) as CreatedOn,
					CONVERT(CHAR(16), gr.VendorBillDate, 21) as VendorBillDate
				FROM INV_TXN_GoodsReceipt gr
					INNER JOIN INV_MST_Vendor v ON v.VendorId=gr.VendorId
				WHERE
					CONVERT( date,gr.GoodsReceiptDate ) BETWEEN convert( date, @FromDate) and convert( date, @ToDate)
					AND gr.IsCancel !=1 and gr.VendorId =@VendorId	
						
		END
		ELSE
		BEGIN
				SELECT 			
				    gr.GoodsReceiptID,	gr.GoodsReceiptNo,	CONVERT(CHAR(16), gr.GoodsReceiptDate, 21) as GoodsReceiptDate,
					gr.PurchaseOrderId,	gr.GRCategory,	v.VendorName,	v.ContactNo,gr.BillNo,gr.SubTotal,gr.DiscountAmount,gr.VATTotal,
					gr.OtherCharges + (Select Sum(OtherCharge) from INV_TXN_GoodsReceiptItems WHERE GoodsReceiptID = gr.GoodsReceiptID) as OtherCharges,
					gr.TotalAmount,	gr.PaymentMode,	gr.Remarks,CONVERT(CHAR(16), gr.CreatedOn, 21) as CreatedOn,
					CONVERT(CHAR(16), gr.VendorBillDate, 21) as VendorBillDate
				FROM INV_TXN_GoodsReceipt gr
					INNER JOIN INV_MST_Vendor v ON v.VendorId=gr.VendorId
				WHERE
				     CONVERT( date,gr.GoodsReceiptDate ) BETWEEN convert( date, @FromDate) and convert( date, @ToDate)
					 AND gr.IsCancel !=1
		END
	END	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_ReturnToSupplierReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Change History
-------------------------------------------------------------------------------
S.No.	UpdatedBy/Date			          Remarks
--------------------------------------------------------------------------------
1.		Dhanashri/ 8-10-2021		 Created Script for Return to Supplier Report
--------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Inventory_ReturnToSupplierReport] 
	@FromDate datetime = null,
    @ToDate datetime = null,
	@VendorId int Null = null,
	@ItemId int Null = null,
	@batchNumber nvarchar(200) Null = null,
	@goodReceiptNumber int Null = null,
	@creditNoteNumber int Null = null
AS
BEGIN
		SELECT ven.VendorName,rtv.ReturnDate,itm.ItemName,rtn.BatchNo,gr.GoodsReceiptNo,rtn.Quantity,rtn.ItemRate,
		rtn.CreditNoteNo,rtv.DiscountAmount,rtn.VAT,rtn.TotalAmount,rtn.Remark
		FROM INV_TXN_ReturnToVendorItems AS rtn
		JOIN INV_MST_Vendor AS ven ON ven.VendorId = rtn.VendorId
		JOIN INV_MST_Item AS itm ON itm.ItemId = rtn.ItemId
		JOIN INV_TXN_GoodsReceipt as gr ON gr.GoodsReceiptID = rtn.GoodsReceiptId
		left join INV_TXN_ReturnToVendor rtv on rtn.ReturnToVendorId = rtv.ReturnToVendorId
		WHERE ((CONVERT(date,rtn.CreatedOn) between ISNULL(@FromDate,GETDATE()) and ISNULL(@ToDate,GETDATE())))
		AND ((rtn.VendorId = @VendorId Or @VendorId is null)
		AND (rtn.ItemId = @ItemId Or @ItemId is null)
		AND (rtn.BatchNo = @batchNumber Or @batchNumber is null)
		AND (gr.GoodsReceiptNo = @goodReceiptNumber Or @goodReceiptNumber is null)
		AND (rtn.CreditNoteNo  = @creditNoteNumber Or @creditNoteNumber is null))
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_ReturnToVendorReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----

CREATE PROCEDURE [dbo].[SP_Report_Inventory_ReturnToVendorReport] 
		@VendorId int = 0 
AS

/*
Change History
--------------------------------------------------------
S.No.	UpdatedBy/Date			Remarks
--------------------------------------------------------
1.		Rusha/ 05-29-2019					Created Script for Return to Vendor Report
--------------------------------------------------------
*/

BEGIN
		If(@VendorId > 0)
			BEGIN
				SELECT rtn.CreatedOn,ven.VendorName,rtn.CreditNoteNo,itm.ItemName, rtn.Quantity,rtn.ItemRate,rtn.TotalAmount,
				rtn.Remark,CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS ReturnedBy,
				unit.UOMName,itm.Code
				FROM INV_TXN_ReturnToVendorItems AS rtn
				JOIN INV_MST_Vendor AS ven ON ven.VendorId = rtn.VendorId
				JOIN EMP_Employee AS emp ON emp.EmployeeId = rtn.CreatedBy
				JOIN INV_MST_Item AS itm ON itm.ItemId = rtn.ItemId
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
				WHERE rtn.VendorId = @VendorId
			END
        ELSE 
		    BEGIN
				SELECT rtn.CreatedOn,ven.VendorName,rtn.CreditNoteNo,itm.ItemName, rtn.Quantity,rtn.ItemRate,rtn.TotalAmount,
				rtn.Remark,CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS ReturnedBy,
				unit.UOMName,itm.Code
				FROM INV_TXN_ReturnToVendorItems AS rtn
				JOIN INV_MST_Vendor AS ven ON ven.VendorId = rtn.VendorId
				JOIN EMP_Employee AS emp ON emp.EmployeeId = rtn.CreatedBy
				JOIN INV_MST_Item AS itm ON itm.ItemId = rtn.ItemId
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
			END 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_SubstoreGetAll]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----

CREATE PROCEDURE [dbo].[SP_Report_Inventory_SubstoreGetAll]
  @StoreId int = null,
  @ItemId int = null
  AS
/*
 FileName: SP_Report_Inventory_SubstoreGetAll
 Created: 12Dec'19 <Sanjit>
 Description: To Get All The Details of GoodRecipt of the inventory
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      3Mar'20/sanjit         created          
 2.		10Aug'20/sanjit			updated stock value to be taken from price of stock table
 -----------------------------------------------------------------------
*/
BEGIN
  BEGIN
    select SUM(Z.TotalQuantity)'TotalQuantity',
	SUM(Z.TotalValue)'TotalValue',
	SUM(Z.ExpiryQuantity)'ExpiryQuantity',
	SUM(Z.ExpiryValue)'ExpiryValue' 
	from
		((select stk.ItemId, 
				sum(stk.AvailableQuantity) 'TotalQuantity',
				sum(ISNULL(stk.Price,0)*stk.AvailableQuantity) 'TotalValue',
				0 'ExpiryQuantity',
				0'ExpiryValue'
			from INV_TXN_Stock stk
			WHERE	CASE
						WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
						WHEN @StoreId>0 and @StoreId = 1 THEN 1
						WHEN @StoreId=0 and @ItemId = 0 Then 1
					END = 1
			group by stk.ItemId)
		union all
			(select stk.ItemId, 
				0'TotalQuantity',
				0'TotalValue',
				sum(stk.AvailableQuantity) 'ExpiredQuantity',
				sum(ISNULL(stk.Price,0)*stk.AvailableQuantity) 'ExpiredValue'
			from INV_TXN_Stock stk
			where stk.ExpiryDate < GetDATE() AND	
			CASE
				WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
				WHEN @StoreId>0 and @StoreId = 1 THEN 1
				WHEN @StoreId=0 and @ItemId = 0 Then 1
					END = 1
			group by stk.ItemId)
		union all
			(select ItemId,
				sum(AvailableQuantity) 'TotalQuantity',
				sum(ISNULL(stk.Price,0)*AvailableQuantity) 'TotalValue',
				0 'ExpiryQuantity',
				0'ExpiryValue'  
			from WARD_INV_Stock stk
			WHERE	CASE
						WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
						WHEN @StoreId>0 and @StoreId = stk.StoreId THEN 1
						WHEN @StoreId=0 and @ItemId = 0 Then 1
					END = 1
			group by ItemId)
		union all
			(select ItemId,
				0'TotalQuantity',
				0'TotalValue',
				sum(stk.AvailableQuantity) 'ExpiryQuantity',
				sum(ISNULL(stk.Price,0)*stk.AvailableQuantity) 'ExpiryValue'  
			from WARD_INV_Stock stk
			where stk.ExpiryDate<GetDate()
			AND CASE
						WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
						WHEN @StoreId>0 and @StoreId = stk.StoreId THEN 1
						WHEN @StoreId=0 and @ItemId = 0 Then 1
					END = 1
			group by ItemId)) 
	as Z

  END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_SubstoreGetAllBasedOnItemId]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----

CREATE PROCEDURE [dbo].[SP_Report_Inventory_SubstoreGetAllBasedOnItemId]
  @StoreId int = null,
  @ItemId int = null
  AS
/*
 FileName: [SP_Report_Inventory_SubstoreGetAllBasedOnItemId]
 Created: 3Mar'20 <Sanjit>
 Description: To Get All The Details of GoodRecipt of the inventory
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      3Mar'20/sanjit         created          
 2.		10Aug'20/sanjit			updated stock value to be taken from price of stock table
 -----------------------------------------------------------------------
*/
BEGIN
    Select Z.ItemId,itm.ItemName,Sum(Z.TotalQuantity)'TotalQuantity',Sum(Z.TotalValue)'TotalValue',SUM(Z.TotalConsumed)'TotalConsumed'	from
	(select stk.ItemId, 
			sum(stk.AvailableQuantity) 'TotalQuantity',
			sum(ISNULL(stk.Price,0) * stk.AvailableQuantity) 'TotalValue',
			0 'TotalConsumed'
		from INV_TXN_Stock stk
		WHERE	CASE
				WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
				WHEN @StoreId>0 and @StoreId = 1 THEN 1
				WHEN @StoreId=0 and @ItemId = 0 Then 1
			END = 1
		group by stk.ItemId
	union all
	select stk.ItemId,
			sum(AvailableQuantity) 'TotalQuantity',
			sum(ISNULL(stk.Price,0)*AvailableQuantity) 'TotalValue',
			sum(ISNULL(consump.Quantity,0)) 'TotalConsumed' 
		from WARD_INV_Stock stk
		left join WARD_INV_Consumption consump on consump.StoreId = stk.StoreId and consump.ItemId = stk.ItemId
		WHERE	CASE
					WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
					WHEN @StoreId>0 and @StoreId = stk.StoreId THEN 1
					WHEN @StoreId=0 and @ItemId = 0 Then 1
				END = 1
		group by stk.ItemId) AS Z
join INV_MST_Item itm on itm.ItemId = Z.ItemId
group by Z.ItemId,itm.ItemName
order by SUM(Z.TotalQuantity) desc

  
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_SubstoreGetAllBasedOnStoreId]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Inventory_SubstoreGetAllBasedOnStoreId]
  @StoreId int = null,
  @ItemId int = null
  AS
/*
 FileName: [SP_Report_Inventory_SubstoreGetAllBasedOnStoreId]
 Created: 3Mar'20 <Sanjit>
 Description: To Get All The Details of GoodRecipt of the inventory
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User              Change          Remarks
 -----------------------------------------------------------------------
 1.      3Mar'20/sanjit         created          
 2.      20Jul'20/Sanjesh       ItemRate Mismatch fix
 3.		10Aug'20/sanjit			updated stock value to be taken from price of stock table
 -----------------------------------------------------------------------
*/
BEGIN
    SELECT str.StoreId, str.Name, 
		sum(stk.AvailableQuantity) 'TotalQuantity',
		sum(stk.AvailableQuantity*(Isnull(stk.Price,0))) 'TotalValue',
		ISNULL((select SUM(DispatchedQuantity)  from INV_TXN_DispatchItems),0) 'TotalConsumed'
	from INV_TXN_Stock stk
	join INV_TXN_GoodsReceiptItems gritm on gritm.GoodsReceiptItemId = stk.GoodsReceiptItemId
	join PHRM_MST_Store str on str.StoreId = 1
	WHERE	CASE
				WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
				WHEN @StoreId>0 and @StoreId = 1 THEN 1
				WHEN @StoreId=0 and @ItemId = 0 Then 1
			END = 1
	group by str.StoreId,str.Name
UNION ALL
SELECT str.StoreId, str.Name, 
		sum(stk.AvailableQuantity) 'TotalQuantity',
		SUM(ISNULL(stk.Price,0)*stk.AvailableQuantity) 'TotalValue',
		SUM(ISNULL(consump.Quantity,0))'TotalConsumed'
	from WARD_INV_Stock stk
	join PHRM_MST_Store str on str.StoreId = stk.StoreId
	left join WARD_INV_Consumption consump on consump.StoreId = str.StoreId and consump.ItemId = stk.ItemId
	WHERE	CASE
				WHEN @ItemId>0 and @ItemId = stk.ItemId THEN 1
				WHEN @StoreId>0 and @StoreId = stk.StoreId THEN 1
				WHEN @StoreId=0 and @ItemId = 0 Then 1
			END = 1
	group by str.StoreId,str.Name

  
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_SupplierWiseStock]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_Report_Inventory_SupplierWiseStock] 
CreatedBy/date: Aniket/02-10-2021
Description: To get the Details of Supplier Wise Stock Report
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.    Aniket/02-10-2021                    created the script
2.	  Aniket/20-10-2021                    updated Opening and Closing stock
3.	  Sanjit/28-10-2021					   revised the changes (correction of opening and closing quantity logic)
4.    Rohit/15-11-2021					   Changed the parameter sequence (Item wise and Store wise filter was not working.)
--------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Inventory_SupplierWiseStock] 
	@FromDate DATETIME,
	@ToDate DATETIME,
	@VendorId INT = NULL,
	@StoreId INT = NULL,
	@ItemId INT = NULL
AS
BEGIN
	 to check if the hospital uses dispatch or consumption method to finish the stock
	DECLARE @ConsumptionOrDispatch VARCHAR(1000) = (SELECT ParameterValue FROM CORE_CFG_Parameters WHERE ParameterName = 'ConsumptionOrDispatchForReports' and ParameterGroupName = 'Inventory') 

	SELECT 
		ISNULL(gr.OpeningQty,0) as OpeningStock, 
		V.VendorName as VendorName,
		C.ItemCategoryName as Category,
		SC.SubCategoryName as SubCategory,
		I.Code as ItemCode,
		I.ItemName as ItemName,
		str.Name as StoreName,
		ISNULL(gr.PurchaseQty,0) as PurchaseQty,
		gr.BatchNO as BatchNo,
		gr.ExpiryDate as ExpiryDate,
		ISNULL(gr.ConsumedQty,0) as ConsumedQty,
		CASE WHEN gr.WriteOffQty > 0 THEN CONVERT(varchar(800), -gr.WriteOffQty) + ' (write-off) ' Else '' END +
		CASE WHEN gr.PurchaseReturnQty > 0 THEN CONVERT(varchar(800), -gr.PurchaseReturnQty) + ' (purchase-return) ' Else '' END +
		CASE WHEN gr.StkManageQty > 0 THEN CONVERT(varchar(800), gr.StkManageQty) + ' (stock-manage)' Else '' END
		as OtherQtyTxn,
		ISNULL(gr.OpeningQty,0) + ISNULL(gr.PurchaseQty,0) - ISNULL(gr.ConsumedQty,0) - ISNULL(gr.WriteOffQty,0) - ISNULL(gr.PurchaseReturnQty,0) + ISNULL(gr.StkManageQty,0) ClosingStock
	FROM 
		INV_MST_Item I
		CROSS JOIN INV_MST_Vendor V
		CROSS JOIN PHRM_MST_Store str
		INNER JOIN INV_MST_ItemCategory C ON I.ItemCategoryId = C.ItemCategoryId
		INNER JOIN INV_MST_ItemSubCategory SC ON I.SubCategoryId = SC.SubCategoryId
		INNER JOIN 
		(
			SELECT 
				X.StoreId, X.ItemId, X.BatchNo, X.ExpiryDate, X.VendorId, SUM(X.OpeningQty) as OpeningQty, SUM(X.PurchaseQty) as PurchaseQty, SUM(X.ConsumedQty) as ConsumedQty, SUM(X.WriteOffQty) as WriteOffQty, SUM(X.PurchaseReturnQty) as PurchaseReturnQty, SUM(StkManageQty) as StkManageQty
			FROM
			(
				to calculate the opening quantity, we take the goods receipts upto the from date provided
				SELECT GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.VendorId, SUM(ISNULL(ST.InQty,0)) - SUM(ISNULL(ST.OutQty,0)) as OpeningQty, 0 as PurchaseQty, 0 as ConsumedQty, 0 as WriteOffQty, 0 as PurchaseReturnQty, 0 as StkManageQty
				FROM
					INV_TXN_GoodsReceiptItems GRI 
					INNER JOIN INV_TXN_GoodsReceipt GR ON GRI.GoodsReceiptId = GR.GoodsReceiptId
					INNER JOIN INV_MST_Stock S ON GRI.StockId = S.StockId
					INNER JOIN INV_TXN_StockTransaction ST ON S.StockId = ST.StockId
				WHERE CONVERT(date, ST.TransactionDate) <= @FromDate AND
				used StockTxn Date instead of GRDate since calculation of Opening depends on StkTxn Date. Taking GR Date may bring unwanted data in the output				
					(GR.VendorId = @VendorId OR @VendorId IS NULL) AND
					(GRI.ItemId = @ItemId OR @ItemId IS NULL) AND
					(GR.StoreId = @StoreId OR @StoreId IS NULL)
				GROUP BY GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.VendorId

				UNION ALL

				to calculate the purchased, consumed and closing quantity, we take the goods receipts from the provided date range
				SELECT	
					GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.VendorId, 
					0 as OpeningQty, 
					SUM( 
						CASE 
							WHEN ST.TransactionType IN ('gr-item','goodreceipt-items') THEN ST.InQty 
							WHEN ST.TransactionType = 'cancel-gr-items' THEN -ST.OutQty 
							ELSE 0 
						END
					   ) as PurchaseQty, 
					SUM( 
							CASE
								WHEN @ConsumptionOrDispatch = 'consumption' AND ST.TransactionType = 'consumption-items' THEN ST.OutQty
								WHEN @ConsumptionOrDispatch != 'consumption' AND ST.TransactionType IN ('dispatched-item-from','dispatched-item') THEN ST.OutQty
								ELSE 0
							END
						) as ConsumedQty,			   
					SUM(
							CASE
								WHEN ST.TransactionType = 'writeoff-items' THEN ST.OutQty
								ELSE 0
							END
					   ) as WriteOffQty,
					SUM(
							CASE
								WHEN ST.TransactionType = 'returntovendor-items' THEN ST.OutQty
								ELSE 0
							END
					   ) as PurchaseReturnQty,
					SUM(
							CASE
								WHEN ST.TransactionType IN ('stock-managed-item','fy-managed-item') AND ST.InQty > 0 THEN ST.InQty
								WHEN ST.TransactionType IN ('stock-managed-item','fy-managed-item') AND ST.OutQty > 0 THEN -ST.OutQty
								ELSE 0
							END
					   ) as StkManageQty

				FROM
					INV_TXN_GoodsReceiptItems GRI 
					INNER JOIN INV_TXN_GoodsReceipt GR ON GRI.GoodsReceiptId = GR.GoodsReceiptId
					INNER JOIN INV_MST_Stock S ON GRI.StockId = S.StockId
					INNER JOIN INV_TXN_StockTransaction ST ON S.StockId = ST.StockId
				WHERE CONVERT(date, ST.TransactionDate) BETWEEN @FromDate AND @ToDate AND
				used StockTxn Date instead of GRDate since calculation of Opening depends on StkTxn Date. Taking GR Date may bring unwanted data in the output			
					(GR.VendorId = @VendorId OR @VendorId IS NULL) AND
					(GRI.ItemId = @ItemId OR @ItemId IS NULL) AND
					(GR.StoreId = @StoreId OR @StoreId IS NULL)
				GROUP BY GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.VendorId
			) X
			 If a same item with same batch and expiry date was supplied from same vendor, then report will show them as a single row, hence the group by is used as below
			GROUP BY X.StoreId, X.ItemId, X.BatchNo, X.ExpiryDate, X.VendorId
		)
		gr ON I.ItemId = gr.ItemId AND V.VendorId = gr.VendorId AND str.StoreId = gr.StoreId
	WHERE (ISNULL(gr.OpeningQty,0) != 0 OR ISNULL(gr.PurchaseQty,0) != 0 OR ISNULL(gr.ConsumedQty,0) != 0)
	ORDER BY ISNULL(gr.PurchaseQty,0) DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_VendorTransactionDetails]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Inventory_VendorTransactionDetails]
CreatedBy/date: 
Description: 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1      	Vikas:28th Jan 2020					Details transaction script for vendor transaction more than 100000	

------------------------------------------------------
*/
Create PROCEDURE [dbo].[SP_Report_Inventory_VendorTransactionDetails]
@fiscalYearId int = null,
@VendorId int = null
AS
BEGIN

	Select 
		VendorId,		
		ItemId,
		ItemName,
		SUM(A.SubTotal) as 'Sales_SubTotal',
		SUM(A.VATTotal) as 'Sales_VatAmount',
		SUM(A.DiscountAmount) as 'Sales_DiscountAmount',
		SUM(A.TotalAmount) as 'Sales_TotalAmount',

		SUM(A.Ret_SubTotal) as 'Ret_SubTotal',
		SUM(A.Ret_VATTotal) as 'Ret_VATTotal',
		SUM(A.Ret_DiscountAmount) as 'Ret_DiscountAmount',
		SUM(A.Ret_TotalAmount) as 'Ret_TotalAmount',
		(SUM(A.TotalAmount)-SUM(A.Ret_TotalAmount)) as 'Total'

	 from (
				select
						ved.VendorId,
						item.ItemName,
						item.ItemId,
						(gd.SubTotal) as 'SubTotal',
						(gd.VATTotal) as 'VATTotal',
						(gd.DiscountAmount) as 'DiscountAmount',
						(gd.TotalAmount) as 'TotalAmount',

						0 as 'Ret_SubTotal',
						0 as 'Ret_VATTotal',
						0 as 'Ret_DiscountAmount',
						0 as 'Ret_TotalAmount'

					from INV_TXN_GoodsReceipt gd 
						left join BIL_CFG_FiscalYears fs on fs.FiscalYearId = @fiscalYearId
						left join INV_MST_Vendor ved on gd.VendorId = ved.VendorId 
						left join INV_TXN_GoodsReceiptItems gritem on gd.GoodsReceiptID= gritem.GoodsReceiptId
						left join INV_MST_Item item on gritem.ItemId = item.ItemId	
					where  
						gd.CreatedOn>Convert(date,fs.StartYear) and gd.CreatedOn<Convert(date,fs.EndYear)
						and gd.IsCancel = 0 
						and (gritem.GoodsReceiptItemId not in (select GoodsReceiptItemId from INV_TXN_ReturnToVendorItems))

				  UNION ALL
						select 
								ret.VendorId,
								item.ItemName,
								item.ItemId,
								0 as 'SubTotal',
								0 as 'VATTotal',
								0 as 'DiscountAmount',
								0 as 'TotalAmount',
								((ret.TotalAmount + (gritm.DiscountAmount/gritm.ReceivedQuantity * ret.Quantity ))) as 'Ret_SubTotal',								 
								((gritm.VATAmount/gritm.ReceivedQuantity * ret.Quantity)) as 'Ret_VATTotal',
								((gritm.DiscountAmount/gritm.ReceivedQuantity * ret.Quantity )) as 'Ret_DiscountAmount',								 
								(ret.TotalAmount) as 'Ret_TotalAmount'
						from INV_TXN_ReturnToVendorItems ret
						join INV_TXN_GoodsReceiptItems gritm on  ret.GoodsReceiptItemId = gritm.GoodsReceiptItemId 
						left join BIL_CFG_FiscalYears fs on fs.FiscalYearId = @fiscalYearId
						left join INV_MST_Item item on gritm.ItemId = item.ItemId
					where
						ret.CreatedOn>Convert(date,fs.StartYear) and ret.CreatedOn<Convert(date,fs.EndYear)	
	) A
	where VendorId = @VendorId OR ISNULL(@VendorId, '') = ''
	group by VendorId , ItemName,ItemId
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_VendorTransactionReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[SP_Report_Inventory_VendorTransactionReport]
@fiscalYearId int = null,
@VendorId int = null
AS
BEGIN
	Select 
		FiscalYearId,
		VendorId,
		SUM(A.SubTotal) as 'SubTotal',
		SUM(A.VATTotal) as 'VATTotal',
		SUM(A.DiscountAmount) as 'DiscountAmount',
		SUM(A.TotalAmount) as 'TotalAmount'
	 from (
				select
						fs.FiscalYearName,
						fs.FiscalYearId,
						ved.VendorId,
						(gd.SubTotal) as 'SubTotal',
						(gd.VATTotal) as 'VATTotal',
						(gd.DiscountAmount) as 'DiscountAmount',
						(gd.TotalAmount) as 'TotalAmount',
						'gr_sale' as 'TxnType'
					from INV_TXN_GoodsReceipt gd 
						left join BIL_CFG_FiscalYears fs on fs.FiscalYearId = @fiscalYearId
						left join INV_MST_Vendor ved on gd.VendorId = ved.VendorId 
					where  
						gd.CreatedOn>Convert(date,fs.StartYear) and gd.CreatedOn<Convert(date,fs.EndYear)
						and gd.IsCancel = 0 
				  UNION ALL

						select 
								fs.FiscalYearName,
								fs.FiscalYearId,
								ret.VendorId,
								-(ret.TotalAmount + (gritm.DiscountAmount/gritm.ReceivedQuantity * ret.Quantity )) as 'SubTotal',								 
								-(gritm.VATAmount/gritm.ReceivedQuantity * ret.Quantity) as 'VatAmount',
								-(gritm.DiscountAmount/gritm.ReceivedQuantity * ret.Quantity ) as 'DiscountAmount',								 
								-ret.TotalAmount as 'TotalAmount',
								'gr_return' as 'TxnType'
						from INV_TXN_ReturnToVendorItems ret
						join INV_TXN_GoodsReceiptItems gritm on  ret.GoodsReceiptItemId = gritm.GoodsReceiptItemId 
						left join BIL_CFG_FiscalYears fs on fs.FiscalYearId =@fiscalYearId
					where
						ret.CreatedOn>Convert(date,fs.StartYear) and ret.CreatedOn<Convert(date,fs.EndYear)	
				

	) A
	where  (A.TotalAmount>= 100000) and (VendorId = @VendorId OR ISNULL(@VendorId, '') = '')	
	group by FiscalYearId,VendorId 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Inventory_WriteOffReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--------

CREATE PROCEDURE [dbo].[SP_Report_Inventory_WriteOffReport] 
		@ItemId int = 0 
AS
/*
Change History
--------------------------------------------------------
S.No.	UpdatedBy/Date			Remarks
--------------------------------------------------------
1.		Rusha/ 05-29-2019					Created Script for writeoff report
--------------------------------------------------------
*/
BEGIN
		If(@ItemId > 0)
			BEGIN
				SELECT witm.WriteOffDate,itm.ItemName, witm.BatchNO, witm.WriteOffQuantity,witm.ItemRate,witm.TotalAmount, 			
				unit.UOMName,Itm.Code,
				CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS RequestedBy,witm.Remark 
				FROM INV_TXN_WriteOffItems AS witm
				JOIN INV_MST_Item AS itm ON itm.ItemId = witm.ItemId
				JOIN EMP_Employee AS emp ON emp.EmployeeId = witm.CreatedBy
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
				WHERE witm.ItemId = @ItemId
			END
        ELSE 
		    BEGIN
				SELECT witm.WriteOffDate,itm.ItemName, witm.BatchNO, witm.WriteOffQuantity,witm.ItemRate,witm.TotalAmount, 
				unit.UOMName,Itm.Code,
				CONCAT_WS(' ',emp.FirstName,emp.MiddleName,emp.LastName) AS RequestedBy,witm.Remark 
				FROM INV_TXN_WriteOffItems AS witm
				JOIN INV_MST_Item AS itm ON itm.ItemId = witm.ItemId
				JOIN EMP_Employee AS emp ON emp.EmployeeId = witm.CreatedBy
				left join INV_MST_UnitOfMeasurement unit on itm.UnitOfMeasurementId = unit.UOMId
			END 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ItemLevelDepartmentWiseDiscountSchemeReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-End: Aniket:  08 Oct,2021  ---- Updated SP for Scheme Wise Discount Report  ----- 

-Start: Aniket:  08 Oct,2021  ---- Created SP for Item Level Scheme Wise Discount Report  ----- 
Create PROCEDURE [dbo].[SP_Report_ItemLevelDepartmentWiseDiscountSchemeReport] -- [SP_Report_ItemLevelDepartmentWiseDiscountSchemeReport] '2021-06-23','2021-09-23'
		@BillingTransactionId int = null,
		@MembershipTypeId int = null,
        @ServiceDepartmentId int = null
AS
/*
FileName: [SP_Report_ItemLevelDepartmentWiseDiscountSchemeReport]
CreatedBy/date: Aniket/2021-10-06
Description: to get the Item Level Scheme Wise Discount Report for the hospital
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       Aniket/2021-10-06					Created the Script
---------------------------------------------------------------------------------------
*/
BEGIN
			  		Select * from 
(
Select   	
memb.MembershipTypeId as MembershipTypeId, 
memb.MembershipTypeName, 
memb.CommunityName,
PaymentMode,
ItemName,
BillingTransactionId,
serv.ServiceDepartmentName as ServiceDepartmentName,
serv.ServiceDepartmentId as ServiceDepartmentId,
CashTotalAmount 'CashAmount',
CreditTotalAmount 'CreditAmount',
ISNULL(sales.TotalAmount,0) AS 'TotalAmount',
ISNULL(sales.Subtotal,0) AS SalesSubtotal, 
ISNULL(sales.DiscountAmount,0) AS 'TotalDiscount', 
ISNULL(sales.TotalAmount,0) - ISNULL(NetRefundAmount,0) 'NetAmount',
sales.TotalQuantity,
DiscountRefund,
NetRefundAmount
from 
PAT_CFG_MembershipType  memb
Left Join 
(
Select itm.DiscountSchemeId,
itm.ServiceDepartmentId,
itm.ItemName,
SUM(itm.SubTotal) 'Subtotal',
SUM(ISNULL(itm.DiscountAmount,0)) 'DiscountAmount',
SUM(itm.TotalAmount) 'TotalAmount',
SUM(itm.Quantity) 'TotalQuantity',
txn.PaymentMode as 'PaymentMode',
txn.BillingTransactionId as 'BillingTransactionId',
ISNULL(retItm.RetTotalAmount,0) AS 'NetRefundAmount',
ISNULL(retItm.RetDiscountAmount,0) AS 'DiscountRefund',
SUM( (Case WHen txn.PaymentMode ='cash' then itm.TotalAmount
ELSE 0 END )) AS CashTotalAmount,
SUM( (Case WHen txn.PaymentMode ='credit' then itm.TotalAmount
ELSE 0 END )) AS CreditTotalAmount

from BIL_TXN_BillingTransaction txn
    Left join BIL_TXN_BillingTransactionItems itm on txn.BillingTransactionId = itm.BillingTransactionId
	Left join BIL_TXN_InvoiceReturnItems retItm 
on itm.BillingTransactionItemId = retItm.BillingTransactionItemId
Group by itm.DiscountSchemeId,itm.ServiceDepartmentId,itm.ItemName,PaymentMode, txn.BillingTransactionId,retItm.RetTotalAmount,retItm.RetDiscountAmount
) sales
ON memb.MembershipTypeId= sales.DiscountSchemeId 
  
join BIL_MST_ServiceDepartment serv on sales.ServiceDepartmentId= serv.ServiceDepartmentId

)tbl

Where ( 
        ISNULL(SalesSubtotal,0) !=0
        ISNULL(CashAmount,0) !=0
    OR  ISNULL(CreditAmount,0) !=0
    OR  ISNULL(TotalAmount,0) !=0
    OR  ISNULL(TotalDiscount,0) !=0
    OR  ISNULL(NetRefundAmount,0) !=0  
    OR  ISNULL(DiscountRefund,0) !=0
    )
	AND ((MembershipTypeId = @MembershipTypeId Or @MembershipTypeId is null) AND (ServiceDepartmentId = @ServiceDepartmentId Or @ServiceDepartmentId is null) AND (BillingTransactionId = @BillingTransactionId Or @BillingTransactionId is null))
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ItemSummaryReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
File: SP_Report_ItemSummaryReport
Author:     20April'20/Pratik 
Description:  To get Items item summary report

-----------------------------------------
Change History
----------------------------------------
S.No.   Date/Author           Remarks
-------------------------------------
1.     20April'20/Pratik   Initial Draft
2. Sud:23Apr'20            Correction in TotalQty and ReturnStatus
---------------------------------------------------------------------
*/

CREATE PROCEDURE [dbo].[SP_Report_ItemSummaryReport]  --EXEC SP_Report_ItemSummaryReport '2020-03-01','2020-03-17'
  @FromDate date = NULL,
  @ToDate date = NULL
AS
BEGIN
  
	SELECT ServiceDepartmentName, ItemName, Sum(ISNULL(bilTxnItm.Quantity,0)) 'TotalQty', SUM(Isnull(bilTxnItm.SubTotal,0)) 'SubTotal',
	SUm(bilTxnItm.DiscountAmount) 'DiscountAmount', SUM(bilTxnItm.TotalAmount) 'TotalAmount'

	FROM BIL_TXN_BillingTransactionItems bilTxnItm, BIL_TXN_BillingTransaction txn

	WHERE  
	    bilTxnItm.BillingTransactionId = txn.BillingTransactionId
	and ISNULL(bilTxnItm.ReturnStatus,0) = 0 
	AND ( bilTxnItm.BillStatus='paid' or bilTxnItm.BillStatus='unpaid')
	AND Convert(Date,txn.CreatedOn) Between @FromDate AND @ToDate

	Group by ServiceDepartmentName, ItemName
	order by ServiceDepartmentName, ItemName
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_ItemwiseFromLab]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_ItemwiseFromLab] 
  @FromDate Date=null,
  @ToDate Date=null  
AS
/*
FileName: [SP_Report_ItemwiseFromLab] '2019-10-09','2019-10-09'
CreatedBy/date: Dinesh/2019-09-22
Description: to get the total count and amount of individual Tests along with service Department Name
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Dinesh 2019-09-22          To get the count of Tests from Lab daywise
------------------------------------------------------
*/

BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
  BEGIN 
      select x.ServiceDepartmentName, x.ItemName,Sum(Quantity) 'Unit',Sum(TotalAmount) 'TotalAmount' from (
SELECT
case when bt.ItemName like '%ECHO%' then 'ECHO'
 ELSE bt.ItemName END as ItemName ,
ELSE ISNULL (' ',0) END 'SD',
sd.ServiceDepartmentName 'ServiceDepartmentName',
    SUM(ISNULL(bt.Quantity, 0))  'Quantity',
    SUM(ISNULL(bt.TotalAmount, 0)) 'TotalAmount'
  FROM BIL_MST_ServiceDepartment sd 
  join BIL_TXN_BillingTransactionItems bt on sd.ServiceDepartmentId= bt.ServiceDepartmentId
  left join BIL_TXN_InvoiceReturnItems ret on bt.BillingTransactionItemId=ret.BillingTransactionItemId
  WHERE  ret.BillingTransactionItemId IS NULL and bt.BillStatus!='cancel' and
  convert(date,bt.CreatedOn) between CONVERT(DATE,@FromDate) and CONVERT(DATE,@ToDate) and sd.IntegrationName like 'LAB'
  group by bt.ItemName,sd.IntegrationName,sd.ServiceDepartmentName
  )as x
  where x.ItemName !='Unknown'
  group by x.ItemName,x.ServiceDepartmentName
  order by Unit desc
  END  
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Bacteriology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Bacteriology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
4		Ramavtar/2018-05-12					removed urine counts (only urine C/S is kept)
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Bacteriology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS

BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else not)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable0(TestName,ViewName,seq) values 
		(null,'Gm Stain',1),
		('Blood c/s','Blood',2),
		('Urine C/S','Urine C/S',3),
		('Urine RE/ME','Urine RE/ME',4),
		('Urine Ketone bodies/acetone','Urine Acetone',5),
		('Body fluid Examination','Body Fluid',8),
		('SWab Culture & Sensitivity (Anaerobic)','Swab',9),
		('Swab Culture & Sensitivity (Aerobic)','Swab',9),
		('Stool C/S','Stool',10),
		(null,'Water',11),
		('Pus Culture','Pus',12),
		('Sputum C/S','Sputum',13),
		(null,'ENT',14),
		(null,'CSF',15),
		('Body fluid Examination','Body Fluid AFB',16),
		('Sputum AFB Stain(single slide)','Sputum AFB',17),
		(null,'Leprosy Smear',18),
		('Widal Test','Widal',19),
		(null,'Fungus',20),
		('Leptospira','Leptospira',21),
		('H.Pylori','H. Pylori',24)
		
insert into  @tempTable0(ViewName,counts,seq) values 
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Urine for Acetone' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),6),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Urine for Acetone' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),7),
		('Positive',(select count(distinct RequisitionId) from LAB_TXN_TestComponentResult where ComponentName like 'Leptospira%' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),22),
		('Negative',(select count(distinct RequisitionId) from LAB_TXN_TestComponentResult where ComponentName like 'Leptospira%' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),23),
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Helicobacter Pylori   Antigen' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),25),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Helicobacter Pylori   Antigen' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),26)

select seq,ViewName,isnull(tbl.counts,count(LabTestName)) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Biochemistry]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Biochemistry]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
4		Ramavtar/2018-02-22					changed: added one more test to 'Alk Phos' count

------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Biochemistry]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))
/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else not)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),seq int)

insert into  @tempTable0 values 
		('FBS','Sugar-F',1),
		('FBS+PPBS','Sugar-F',1),
		('PPBS','Sugar-PP',2),
		('FBS+PPBS','Sugar-PP',2),
		('RBS','Sugar-R',3),
		('Urea','Blood Urea',4),
		('Blood Urea Nitrogen(BUN)','Blood Urea',4),
		('RFT (Urea, Creatinine, Na+, K+, Uric acid)','Blood Urea',4),
		('Creatinine','Creatinine',5),
		('RFT (Urea, Creatinine, Na+, K+, Uric acid)','Creatinine',5),
		('Uric Acid','Uric Acid',6),
		('RFT (Urea, Creatinine, Na+, K+, Uric acid)','Uric Acid',6),
		('Total Protein','Protein',7),
		('Albumin','Albumin',8),
		('Microalbumin','Microalbumin',9),
		('Lipid Profile (Cholesterol, Triglyceride, HDL, LDL, VLDL)','Total Choles',10),
		('Cholesterol','Total Choles',10),
		('Lipid Profile (Cholesterol, Triglyceride, HDL, LDL, VLDL)','HDL',11),
		('HDL','HDL',11),
		('Lipid Profile (Cholesterol, Triglyceride, HDL, LDL, VLDL)','TG',12),
		('Lipid Profile (Cholesterol, Triglyceride, HDL, LDL, VLDL)','LDL',13),
		('LDL','LDL',13),
		('Lipid Profile (Cholesterol, Triglyceride, HDL, LDL, VLDL)','VLDL',14),
		('VLDL','VLDL',14),
		('Calcium','Calcium',15),
		('Phosphorous','Phos-phorous',16),
		('Amylase','Amylase',17),
		('Gamma GT (YGT)','Gamma GT',18),
		('Liver Function Test(LFT)(Billirubin T/D, SGPT, SGOT,ALP)','SGOT',19),
		('SGOT(AST)','SGOT',19)

select seq,ViewName,count(LabTestName) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName
order by seq
--------table 2 for 2nd row of result----------
declare @tempTable1 table (TestName varchar(100),ViewName varchar(100),seq int)

insert into  @tempTable1 values 
		('Liver Function Test(LFT)(Billirubin T/D, SGPT, SGOT,ALP)','SGPT',1),
		('SGPT(ALT)','SGPT',1),
		('Alkaline Phosphatase (ALP)','Alk Phos',2),
		('Liver Function Test(LFT)(Billirubin T/D, SGPT, SGOT,ALP)','Alk Phos',2),
		('Liver Function Test(LFT)(Billirubin T/D, SGPT, SGOT,ALP)','Bili-T',3),
		('S. Billirubin (Total & Direct)','Bili-T',3),
		('billirubin','Bili-T',3),
		('Liver Function Test(LFT)(Billirubin T/D, SGPT, SGOT,ALP)','Bili-D',4),
		('S. Billirubin (Total & Direct)','Bili-D',4),
		('billirubin','Bili-D',4),
		('Na + (Sodium)','Na+',5),
		('Na+/K+ (Sodium & Potassium)','Na+',5),
		('RFT (Urea, Creatinine, Na+, K+, Uric acid)','Na+',5),
		('K+ (Potassium)','K+',6),
		('Na+/K+ (Sodium & Potassium)','K+',6),
		('RFT (Urea, Creatinine, Na+, K+, Uric acid)','K+',6),
		('ADA','ADA',7),
		('Magnesium','Magnesium',8),
		('-24 hours urine protein','24hr Protein',9),
		('-24 hours urine protein','24hr Urine U/A',10),
		(null,'Creatinine Clearance',11),
		('Lipid Profile (Cholesterol, Triglyceride, HDL, LDL, VLDL)','Lipid Profile',12)

select seq,ViewName,count(LabTestName) as Quantity from @tempTable1 tbl1
left join 
LAB_TestRequisition testreq on tbl1.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName
order by seq

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_CardiacEnzymes]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_CardiacEnzymes]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_CardiacEnzymes]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable0(TestName,ViewName,seq) values 
		('CK-MB','CPK-MB',1),
		('CK-NAC','CPK-NAC',2),
		('LDH','LDH',3),
		('Troponin I','Trop-I',4)

insert into  @tempTable0(ViewName,counts,seq) values 
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Troponin I' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),5),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Troponin I' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),6)

select seq,ViewName,isnull(tbl.counts,count(LabTestName)) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_CategoryWiseLabReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Lab_CategoryWiseLabReport] 
@FromDate datetime = NULL,
@ToDate datetime = NULL,
@OrderStatus varchar (200) = null
AS


/*
FileName: [SP_Report_Lab_CategoryWiseLabReport]  '2019-12-02','2019-12-02'
CreatedBy/date: Dinesh 31st Dec 2019
Description: to get the total count of test conducted 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Dinesh											Hams Requirement(For Categorywise Test Count)
------------------------------------------------------
2       Dev Narayan                               Add the lab order status filter
*/
BEGIN
  IF (@FromDate IS NOT NULL OR @ToDate IS NOT NULL OR LEN(@FromDate) > 0 OR LEN(@ToDate) > 0)
  BEGIN
	Declare @OrderStatusList Table(OrderStatus varchar(20))
	Insert into @OrderStatusList
	Select value from string_split(@OrderStatus,',') where RTRIM(value) <>''
select (Cast(ROW_NUMBER() OVER (ORDER BY  TestCategoryName desc)  AS int)) AS SN,cat.TestCategoryName as Category,count(lt.LabTestCategoryId) 'Count' from LAB_TestRequisition req
join @OrderStatusList os on req.OrderStatus = os.OrderStatus
join LAB_LabTests lt on req.LabTestId=lt.LabTestId
join LAB_TestCategory  cat on cat.TestCategoryId= lt.LabTestCategoryId


where convert(date,req.CreatedOn) between @FromDate and @ToDate
group by cat.TestCategoryName order by [Count] desc
  END
END


GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_CovidTestsSummary]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_Lab_CovidTestsSummary] 
	( @FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@TestName varchar(200) = NULL,
	@CountrySubDivisionId int = null)
AS

/************************************************************************
FileName: [SP_Report_Lab_CovidTestsSummary]
CreatedBy/date: Anjana/22June,2021
Description: Get covid tests summary details
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1        Anjana/22June,2021					Initial Draft
2        pratik/5thSep,2021                 Positive and negative followup cases from LAB_TestRequisition
3		Anish/12Sept 2021					replace empty provider id by 'new'
*************************************************************************/

BEGIN
	declare @isVerificationEnabled bit;
    declare @verificationParam varchar(500) = (Select ParameterValue from CORE_CFG_Parameters where ParameterName='LabReportVerificationNeededB4Print')
    set @isVerificationEnabled = (SELECT JSON_VALUE(@verificationParam, '$.EnableVerificationStep'));

	If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN

	IF(@CountrySubDivisionId = 0)
		BEGIN
			SET @CountrySubDivisionId = null
		END
	
	Select
	subDiv.CountrySubDivisionName as District,
	Count(*) TotalCases,
	Sum( Case when lower([Value]) = 'negative' and ISNULL(req.ProviderName,'new') like '%new%' then 1 else 0 end) as NewNegativeCases,
	Sum( Case when lower([Value]) = 'positive' and ISNULL(req.ProviderName,'new') like '%new%' then 1 else 0 end) as NewPositiveCases,
	Sum( Case when lower([Value]) = 'negative' and replace(req.ProviderName,'-','') like '%followup%' then 1 else 0 end) as FollowupNegativeCases,
	Sum( Case when lower([Value]) = 'positive' and replace(ProviderName,'-','') like '%followup%' then 1 else 0 end) as FollowupPositiveCases

	from LAB_TestRequisition req
	join LAB_TXN_TestComponentResult result on req.RequisitionId = result.RequisitionId
	join PAT_Patient pat on req.PatientId = pat.PatientId
	left join MST_CountrySubDivision subDiv on pat.CountrySubDivisionId = subDiv.CountrySubDivisionId
	join LAB_LabTests test on req.LabTestId = test.LabTestId
    where test.LabTestName = @TestName and req.IsActive = 1 and result.IsActive=1 and Convert(date,req.OrderDateTime) BETWEEN CONVERT(date, @FromDate) AND CONVERT(date, @ToDate)
	AND ISNULL(@CountrySubDivisionId,subDiv.CountrySubDivisionId)=subDiv.CountrySubDivisionId and result.[Value] IN ('negative','positive')
	AND (req.IsVerified=1 OR ISNULL(req.IsVerified,0)=@isVerificationEnabled) 
 	group by subDiv.CountrySubDivisionName
	END
END	

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Cytology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Cytology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Cytology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),seq int)

insert into  @tempTable0 values 
		('PAP Smear','PAP',1),
		(null,'Sputum',2),
		(null,'Body Fluid',3),
		(null,'FNAC',4)

select seq,ViewName,count(LabTestName) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName
order by seq
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_DoctorWisePatientCountLabReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Lab_DoctorWisePatientCountLabReport] 
@FromDate datetime = NULL,
@ToDate datetime = NULL
AS


/*
FileName: [SP_Report_Lab_DoctorWisePatientCountLabReport]  '2019-12-02','2019-12-02'
CreatedBy/date: Dinesh 1st Jan 2020
Description: to get the total count of test conducted 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Dinesh											Hams Requirement(to identify the no of patient entered from op/ip/er)
------------------------------------------------------
*/
BEGIN
  IF (@FromDate IS NOT NULL OR @ToDate IS NOT NULL OR LEN(@FromDate) > 0 OR LEN(@ToDate) > 0)
  BEGIN
  
-Dinesh Changes : Doctor patient Ipcount OPcount


select (Cast(ROW_NUMBER() OVER (ORDER BY  FullName asc)  AS int)) AS SN,FullName 'Doctor',Sum(OP) OP ,Sum(IP) IP,SUm(Emergency) Emergency from (
select

COALESCE(case 
when (visit.VisitType in ('outpatient')) then count(distinct(bt.PatientId))
END ,0) as OP,
COALESCE(case 
when (visit.VisitType in ('inpatient')) then count(distinct(bt.PatientId))
END ,0) as IP,
COALESCE(case 
when (visit.VisitType in ('emergency')) then count(distinct(bt.PatientId))
END ,0) as 'Emergency'

,bt.RequestedBy,em.FullName from BIL_TXN_BillingTransactionItems bt
join BIL_MST_ServiceDepartment sd 
on bt.ServiceDepartmentId=sd.ServiceDepartmentId
join PAT_PatientVisits visit on visit.PatientVisitId=bt.PatientVisitId
join EMP_Employee em on em.EmployeeId=bt.RequestedBy
where convert(date,bt.CreatedOn) = @fromdate and bt.RequestedBy is not null and sd.IntegrationName='LAB'
group by bt.RequestedBy,em.FullName,visit.VisitType
) vt group by vt.RequestedBy,vt.FullName

  END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_LAB_GetCultureReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_LAB_GetCultureReport] --SP_Report_LAB_GetCultureReport '2020-02-06','2021-07-15'
    ( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL)
AS
/*
 File: SP_Report_LAB_GetCultureReport
 Description: To get details of Culture test of patients between selected dates
 Conditions/Checks: 
        
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By              Remarks
 ------------------------------------------------
 1.      26Jul'21/Anjana          Initial Draft 
 2.     30 Sept'21/Anish        Verification Filter and other filters added 
 -------------------------------------------------
*/
BEGIN
    declare @isVerificationEnabled bit;
    declare @verificationParam varchar(500) = (Select ParameterValue from CORE_CFG_Parameters where ParameterName='LabReportVerificationNeededB4Print')
    set @isVerificationEnabled = (SELECT JSON_VALUE(@verificationParam, '$.EnableVerificationStep'));

    for positive culture test report
    select 
    max(tblPositiveData.ShortName) as ShortName,
    max(tblPositiveData.PatientCode) as PatientCode,
    max(tblPositiveData.Age) as Age,
    max(tblPositiveData.Gender) as Gender,
    max(tblPositiveData.SampleCodeFormatted) as SampleCodeFormatted,
    max(tblPositiveData.Finding) as Finding,
    max(tblPositiveData.[Sensitivity]) as [Sensitivity],
    max(tblPositiveData.Resistant) as Resistant,
    max(tblPositiveData.[Intermediate]) as [Intermediate],
    max(tblPositiveData.ResultDate) as ResultDate,
    max(tblPositiveData.LabTestSpecimen) as LabTestSpecimen
    from (select * from (Select 
    max(pat.ShortName) as ShortName,
    pat.PatientId,
    pat.PatientCode,
    max(pat.Age) as Age,
    max(pat.Gender) as Gender,
    req.SampleCodeFormatted,
    max(case when res.ComponentName IN ('Result','Result C/S') then res.[Value] end) Finding,
    (case when max(res.[Value]) = 'Sensitive' then String_Agg(res.ComponentName , ', ') end) as [Sensitivity],
    (case when max(res.[Value]) = 'Resistant' then String_Agg(res.ComponentName , ', ') end) as Resistant,
    (case when max(res.[Value]) = 'Intermediate' then String_Agg(res.ComponentName , ', ') end) as [Intermediate],
    max(res.CreatedOn) as ResultDate,
    req.RequisitionId as RequisitionId,
    max(req.LabTestSpecimen) as LabTestSpecimen
    from PAT_Patient pat
    join LAB_TestRequisition req on pat.PatientId = req.PatientId
    join LAB_TXN_TestComponentResult res on req.RequisitionId = res.RequisitionId
    join Lab_ReportTemplate template on req.ReportTemplateID = template.ReportTemplateID
    where Convert(Date,req.OrderDateTime) BETWEEN (CONVERT(Date, @FromDate)) 
    and CONVERT(Date, @ToDate) and res.IsActive = 1 and req.IsActive = 1 and res.IsNegativeResult = 0 
    and template.TemplateType='culture' 
    and (req.IsVerified=1 OR ISNULL(req.IsVerified,0)=@isVerificationEnabled)
    group by pat.PatientId, pat.PatientCode,req.SampleCodeFormatted, req.RequisitionId, res.[Value]
    ) as tblinnerPositiveData) as tblPositiveData
    group by tblPositiveData.RequisitionId

    union all
    for negative culture test report
    select 
    max(tblNegativeData.ShortName) as ShortName,
    max(tblNegativeData.PatientCode) as PatientCode,
    max(tblNegativeData.Age) as Age,
    max(tblNegativeData.Gender) as Gender,
    max(tblNegativeData.SampleCodeFormatted) as SampleCodeFormatted,
    max(tblNegativeData.Finding) as Finding,
    max(tblNegativeData.[Sensitivity]) as [Sensitivity],
    max(tblNegativeData.Resistant) as Resistant,
    max(tblNegativeData.[Intermediate]) as [Intermediate],
    max(tblNegativeData.ResultDate) as ResultDate,
    max(tblNegativeData.LabTestSpecimen) as LabTestSpecimen
    from (select * from (Select 
    max(pat.ShortName) as ShortName,
    pat.PatientId,
    pat.PatientCode,
    max(pat.Age) as Age,
    max(pat.Gender) as Gender,
    req.SampleCodeFormatted,
    max(case when res.ComponentName = 'Negative Result' then res.NegativeResultText end) Finding,
    max(case when res.ComponentName ='Negative Result' then res.[Value] end) as [Sensitivity],
    max(case when res.ComponentName ='Negative Result' then res.[Value] end) as Resistant,
    max(case when res.ComponentName ='Negative Result' then res.[Value] end) as [Intermediate],
    max(res.CreatedOn) as ResultDate,
    req.RequisitionId as RequisitionId,
    max(req.LabTestSpecimen) as LabTestSpecimen
    from PAT_Patient pat
    join LAB_TestRequisition req on pat.PatientId = req.PatientId
    join LAB_TXN_TestComponentResult res on req.RequisitionId = res.RequisitionId
    join Lab_ReportTemplate template on req.ReportTemplateID = template.ReportTemplateID
    where Convert(Date,req.OrderDateTime) BETWEEN (CONVERT(Date, @FromDate)) and CONVERT(Date, @ToDate) 
    and res.IsActive = 1 and req.IsActive = 1 and res.IsNegativeResult = 1 and template.TemplateType='culture' 
    and (req.IsVerified=1 OR ISNULL(req.IsVerified,0)=@isVerificationEnabled)
    group by pat.PatientId, pat.PatientCode, req.SampleCodeFormatted, req.RequisitionId, res.[Value]
    ) as tblinnerNegativeData) as tblNegativeData
    group by tblNegativeData.RequisitionId

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_LAB_GetHIVTestDetails]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_LAB_GetHIVTestDetails] --SP_Report_LAB_GetHIVTestDetails '2020-02-06','2020-03-06'
    ( @FromDate DATETIME = NULL,
      @ToDate DATETIME = NULL)
AS
/*
 File: SP_Report_LAB_GetHIVTestDetails
 Description: To get details of HIV test of patients between selected dates
 Conditions/Checks: 
        
 Change History:
 ------------------------------------------------
 S.No.    ChangeDate/By              Remarks
 ------------------------------------------------
 1.      25Jul'21/Anjana          Initial Draft 
 2.      3 Sept/Anish             Filters Added with verification Parameter
 3.      16 Nov/Dev Narayan       Change procedure for getting labtypename
 -------------------------------------------------
*/
BEGIN
    declare @isVerificationEnabled bit;
    declare @verificationParam varchar(500) = (Select ParameterValue from CORE_CFG_Parameters where ParameterName='LabReportVerificationNeededB4Print')
    set @isVerificationEnabled = (SELECT JSON_VALUE(@verificationParam, '$.EnableVerificationStep'));

    Select allData.RequisitionId,allData.ShortName,allData.PatientCode,
  max(allData.Age) 'Age',
  max(allData.Gender) 'Gender',
  allData.Method, 
  allData.[Value], 
    allData.[Address], 
  allData.SampleCodeFormatted 'SampleCode', 
  allData.ComponentName, 
  Convert(Date,allData.ResultDate) 'ResultDate',
  allData.LabTypeName
    from (Select 
    pat.ShortName,
    pat.PatientCode,
    pat.Age,
    pat.Gender,
    pat.[Address],
    req.SampleCodeFormatted,
    res.ComponentName,
    res.[Value],
    res.Method,
    req.RequisitionId,
    res.CreatedOn as ResultDate,
	req.LabTypeName
    from PAT_Patient pat
    join LAB_TestRequisition req on pat.PatientId = req.PatientId
    join LAB_TXN_TestComponentResult res on req.RequisitionId = res.RequisitionId
    where res.ComponentName = 'HIV' and res.IsActive=1 and req.IsActive=1 
    and (req.IsVerified=1 OR ISNULL(req.IsVerified,0)=@isVerificationEnabled)
    and Convert(date,req.OrderDateTime) BETWEEN (CONVERT(date, @FromDate)) and CONVERT(date, @ToDate)
    ) allData group by allData.RequisitionId, allData.Method, allData.[Value], allData.[Address],
    allData.ShortName,allData.PatientCode, allData.SampleCodeFormatted, allData.ComponentName,Convert(Date,allData.ResultDate),allData.LabTypeName
	order by Convert(Date,allData.ResultDate) desc
END
------END:Dev Narayan: 2021/11/16, Alter procedure for to get labtypename---------------------------------------

-Start: pratik:  22Nov,2021 ---- EHS Billing Report SP And Permission , Route for EHS Bill Report ----- 

------ Permission and Route for EHS Bill Report  ----- 

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Haematology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Haematology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
4       Hari/2018-03-22           added extra components (eg:PCV,MCV,MCH,MCHC) in the reports.
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Haematology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable0(TestName,ViewName,seq) values 
		('Hb%','Hb%',1),
		('CBC(TC, DC, HB%, Platelets)','Hb%',1),
		('RBC count','RBC',2),
		('PBS (Peripheral Blood Smear) without CBC','RBC',2),
		('CBC(TC, DC, HB%, Platelets)','WBC',3),
		('PBS (Peripheral Blood Smear) without CBC','WBC',3),
		('CBC(TC, DC, HB%, Platelets)','Platelets',4),
		('Platelets Count','Platelets',4),
		('PBS (Peripheral Blood Smear) without CBC','Platelets',4),
		(null,'Bands',10),
		(null,'Others',11),
		('Reticulocyte Count','Retic',12),
		('ESR','ESR',13),
		(null,'Parasites',14),
		('BT','BT',19),
		('CT','CT',20)
insert into @tempTable0(ViewName,counts,seq) values
		('Neutro',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='neutrophil' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),5),
		('lympho',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Lymphocyte' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),6),
		('Mono',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Monocyte' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),7),
		('Eosino',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Eosinophil' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),8),
		('Baso',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Basophil' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),9),
		('PCV',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='PCV' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),15),
		('MCV',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='MCV' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),16),
		('MCH',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='MCH' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),17),
		('MCHC',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='MCHC' and value !='00' and value !='0' and (convert(date,CreatedOn) between @FromDate and @ToDate)),18)


select seq,ViewName,isnull(tbl.counts,count(LabTestName)) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq
--------table 2 for 2nd row of result----------
declare @tempTable1 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable1(TestName,ViewName,seq) values 
		(null,'PT',1),
		('APTT','APTT',2),
		('PT/INR','PT-INR',3),
		('Blood Group','Blood Group',4),
		(null,'Rh Type',5),
		(null,'BM CSF Spleen Aspiratee',6),
		(null,'Aldehyde',7),
		('MP Serology','MP Total',8),
		(null,'MF',11),
		('HBA1c','HbA1c',12),
		(null,'Hb Electrophoresis',13),
		(null,'LE',14),
		('D-Dimer','FDP/ D-dimer',15),
		(null,'AEC',16)
insert into @tempTable1(ViewName,counts,seq) values
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Malarial Parasite Test' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),9),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Malarial Parasite Test' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),10)

select seq,ViewName,isnull(tbl1.counts,count(LabTestName)) as Quantity from @tempTable1 tbl1
left join 
LAB_TestRequisition testreq on tbl1.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Histology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Histology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Histology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable1 table (TestName varchar(100),ViewName varchar(100),seq int)

insert into  @tempTable1 values 
		(null,'Biopsy',1)

select seq,ViewName,count(LabTestName) as Quantity from @tempTable1 tbl1
left join 
LAB_TestRequisition testreq on tbl1.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName
order by seq

END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Hormones_Endocrinology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Hormones_Endocrinology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Hormones_Endocrinology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),seq int)

insert into  @tempTable0 values 
		('T3/FT3','T3',1),
		('TFT(T3,T4,TSH)','T3',1),
		('T4/FT4','T4',2),
		('TFT(T3,T4,TSH)','T4',2),
		('TSH','TSH',3),
		('TFT(T3,T4,TSH)','TSH',3),
		(null,'Cortisol',4),
		('Alpha Feto Protein','a feto protein',5),
		('LH','LH',6),
		('FSH','FSH',7),
		(null,'Pro-lactine',8),
		(null,'Oestrogen',9),
		(null,'Progesterone',10),
		(null,'Testosterone',11),
		('Anti TPO(Anti Thyroperioxidase)','Anti TPO',12),
		('Vitamin D','Vitamin D',13),
		('Iron Profile','Iron Profile',14),
		('PSA (Total)','PSA',15)
		
select seq,ViewName,count(LabTestName) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName
order by seq
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_ImmunoHistoChemistry]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_ImmunoHistoChemistry]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_ImmunoHistoChemistry]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),seq int)

insert into  @tempTable0 values 
		(null,'ER',1),
		(null,'PR',2),
		(null,'G-FAP',3),
		(null,'s-100',4),
		(null,'Vimentin',5),
		(null,'Cytokeratin',6)

select seq,ViewName,count(LabTestName) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName
order by seq
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Immunology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Immunology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Immunology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable0(TestName,ViewName,seq) values 
		('UPT(Urinary Beta HCG)','Pregnancy Test',1),
		('ASO Titre','ASO',4),
		('CRP','CRP',5),
		('CRP-Quantatitive','CRP Quantatitive',8),
		('RA Factor','RA Factor',9),
		('RA Factor Quantitative','RA Factor Quantitative',12),
		('Anti CCP Quantitative','Anti CCP',13),
		('TPHA','TPHA',14),
		('ANA','ANA',15),
		('DS DNA','DNA-ELISA',16),
		('VDRL','RPR-VDRL',17),
		('CEA','CEA',20),
		('CA 125','CA-125',21),
		('CA-19.9','Ca 19-9',22),
		(null,'Ca 15.3',23),
		('TORGH (IGGl1gm)','TORCH IG-G/M',24),
		(null,'MEASLES-IG-G',25),
		(null,'RUBELLA-IGG',26),
		(null,'Echino-coccus',27)

insert into @tempTable0(ViewName,counts,seq) values 
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='UPT (Urinary Beta HCG)' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),2),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='UPT (Urinary Beta HCG)' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),3),
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='CRP' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),6),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='CRP' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),7),
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='RA Factor' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),10),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='RA Factor' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),11),
		('Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='VDRL' and value ='Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),18),
		('Non-Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='VDRL' and value ='Non-Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),19)

select seq,ViewName,isnull(tbl.counts,count(LabTestName)) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq
--------table 2 for 2nd row of result----------
declare @tempTable1 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable1(TestName,ViewName,seq) values 
		(null,'Amoebiasis',1),
		(null,'F-Protein',2),
		('PSA (Total)','PSA',3),
		(null,'Ferritine',4),
		(null,'Cysticercosis',5),
		('Brucella Antibody','Brucella',6),
		(null,'Thyroglobulin',7),
		(null,'Electrophoresis',8),
		('B-HCG','Beta-HCG',9),
		(null,'RK-39',10),
		(null,'JE',11),
		('Dengue serology','Dengue',12),
		(null,'Rapid MP Test',15),
		('Mantoux test','Mantoux',16),
		('Scrub Typhus (Elisa Method)','Scrub Typhus',17),
		('Scrub Typhus (Rapid Method)','Scrub Typhus',17)

insert into @tempTable1(ViewName,counts,seq) values 
		('Positive',(select count(distinct RequisitionId) from LAB_TXN_TestComponentResult where ComponentName like 'Dengue%' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),13),
		('Negative',(select count(distinct RequisitionId) from LAB_TXN_TestComponentResult where ComponentName like 'Dengue%' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),14),
		('Positive',(select count(distinct RequisitionId) from LAB_TXN_TestComponentResult where ComponentName like 'Scrub Typhus%' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),18),
		('Negative',(select count(distinct RequisitionId) from LAB_TXN_TestComponentResult where ComponentName like 'Scrub Typhus%' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),19)

select seq,ViewName,isnull(tbl1.counts,count(LabTestName)) as Quantity from @tempTable1 tbl1
left join 
LAB_TestRequisition testreq on tbl1.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_LabTypeWise_Test_Count]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--------------------------------------------------------------
CREATE PROCEDURE [dbo].[SP_Report_Lab_LabTypeWise_Test_Count]
    @FromDate Date=null ,
    @ToDate Date=null,
    @TestId int= null,
    @CategoryId int= null,
	@OrderStatus varchar(200) =null
AS
/*
FileName: [SP_Report_Lab_LabTypeWise_Test_Count]
CreatedBy/date: Anjana/2020-08-12
Description: to get list of outpatient 

 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1.      Anjana/2020-08-12          Initial Draft
---------------------------------------------------------------------------------------
2.      Dev Narayan/2021-9-07        Changed the filter from categoryName to categoryId and testname to testId
-----------------------------------------------------------------------------------------------------------------
3.      Dev Narayan/2021-09-12       Changed the sp for dynamically accepting lab order status from client

*/
BEGIN



DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)
DECLARE @ColumnName AS NVARCHAR(MAX)

 

SELECT @ColumnName= ISNULL(@ColumnName + ',','') + QUOTENAME(LabTypeName)
FROM (SELECT DISTINCT LabTypeName FROM MST_LabTypes) AS LabTypeName

 
SET @CategoryId = ISNULL(@CategoryId,0);
SET @TestId = ISNULL(@TestId,0);


SET @DynamicPivotQuery = N'
Declare @OrderStatusList Table(OrderStatus varchar(20))
Insert into @OrderStatusList
Select value from ' + 'string_split(' + '''' + @OrderStatus + '''' + ',' + ''',''' + ')' + ' where RTRIM(value) <>' + '''' + '''' + '; '  +
'SELECT * FROM (SELECT arrangedData.LabTestId,arrangedData.LabTestName,arrangedData.LabTestCategoryId,arrangedData.TestCategoryName,arrangedData.LabTypeName,
COUNT(arrangedData.RequisitionId) as Total FROM
(
SELECT req.LabTestId,req.LabTestName, req.LabTestCategoryId, req.TestCategoryName,req.CreatedOn, labTypes.LabTypeName,
CASE WHEN req.LabTypeName=labTypes.LabTypeName THEN req.RequisitionId ELSE null END AS RequisitionId
FROM
(
SELECT r.RequisitionId,CONVERT(DATE,r.CreatedOn) as CreatedOn,t.LabTestId,t.LabTestCategoryId,t.LabTestName, r.LabTypeName, t.TestCategoryName
FROM
(
SELECT tst.LabTestId,tst.LabTestName,tst.LabTestCategoryId,cat.TestCategoryName FROM LAB_LabTests tst
JOIN LAB_TestCategory cat on tst.LabTestCategoryId=cat.TestCategoryId
) t
LEFT JOIN (
SELECT rq.* FROM LAB_TestRequisition rq
inner join @OrderStatusList os on rq.OrderStatus = os.OrderStatus  WHERE  rq.BillingStatus IN(' + '''paid''' + ',' + '''unpaid'''
+ ')
)as r ON t.LabTestId=r.LabTestId
) req
CROSS JOIN MST_LabTypes labTypes
) AS arrangedData
where Convert(Date, arrangedData.CreatedOn) between ' +
+ '''' +Convert(Varchar(20), ISNULL(@FromDate,Convert(Date, GETDATE())) ) + '''' + ' AND ' + '''' + Convert(varchar(20), ISNULL(@ToDate,Convert(Date, GETDATE()))) + '''' +
+ ' and (arrangedData.LabTestCategoryId= ' + Convert(VARCHAR(200),@CategoryId) + ' OR ' + Convert(VARCHAR(200),@CategoryId) + '=0)' + ' and (arrangedData.LabTestId=' + Convert(VARCHAR(200),@TestId) + ' OR '
+ Convert(VARCHAR(200),@TestId) + '=0)' + ' GROUP BY arrangedData.LabTestId,arrangedData.LabTestName,arrangedData.LabTestCategoryId,arrangedData.TestCategoryName,
arrangedData.LabTypeName) allData
PIVOT
(
SUM(Total) FOR [LabTypeName] IN (' + @ColumnName + ')
) AS pivotedData';


EXEC sp_executesql @DynamicPivotQuery
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Parasitology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Parasitology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
4		Ramavtar/2018-05-12					remove positive/negative count from urine R/E
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Parasitology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))
/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable0(TestName,ViewName,seq) values 
		('Stool RE/ME','Stool R/E',1),
		('Stool occult blood','Occult blood',2),
		('Reducing Sugar','Reducing Sugar',5),
		('Urine RE/ME','Urine R/E',6),
		('Bile Salt','Bile Salts',9),
		('Bile Pigment','Bile Pigments',10),
		(null,'Urobilinogen',11),
		(null,'Porphobilinogen',12),
		('Urine Ketone bodies/acetone','Acetone',13),
		('Chyle','Chyle',16),
		('Semen Analysis','Semen Analysis',17),
		('Bence Jones Protein','Bence Jones Prot',18),
		(null,'Sp. Gravity',19)

insert into  @tempTable0(ViewName,counts,seq) values 
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Stool Occult Blood' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),3),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Stool Occult Blood' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),4),
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Ketone Bodies' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),7),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Ketone Bodies' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),8),
		('Positive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Urine for Acetone' and value ='Positive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),14),
		('Negative',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='Urine for Acetone' and value ='Negative' and (convert(date,CreatedOn) between @FromDate and @ToDate)),15)

select seq,ViewName,isnull(tbl.counts,count(LabTestName)) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq
END

GO
/****** Object:  StoredProcedure [dbo].[SP_REPORT_LAB_TotalDailyCovidTestDetails]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE PROCEDURE [dbo].[SP_REPORT_LAB_TotalDailyCovidTestDetails] @FromDate Date = null, 
  @ToDate Date = null, 
  @TestName varchar(200) = NULL, 
  @ResultType varchar(50) = null, 
  @CountrySubDivisionId int = null, 
  @CaseType varchar(50) = null, 
  @Gender varchar(50) = null AS 
  /*
   File: SP_REPORT_LAB_TotalDailyCovidTestDetails 
   Description: Get All details of COVID tests as per ResultDate.
   Created: Anish
   Modified: Sud: 9-Oct'21-- Filter condition changed to ResultDate (earler it was Billing Date).. 
   Modified: Dev:29-Nov'21--Alter procedure to show Ngene, Egene value when positive is selected....
   */
  BEGIN declare @isVerificationEnabled bit;
declare @verificationParam varchar(500) = (
  Select 
    ParameterValue 
  from 
    CORE_CFG_Parameters 
  where 
    ParameterName = 'LabReportVerificationNeededB4Print'
) 
set 
  @isVerificationEnabled = (
    SELECT 
      JSON_VALUE(
        @verificationParam, '$.EnableVerificationStep'
      )
  );
IF(@CountrySubDivisionId = 0) BEGIN 
SET 
  @CountrySubDivisionId = null END 
SET 
  @ResultType = LOWER(
    ISNULL(@ResultType, 'all')
  );
SET 
  @CaseType = REPLACE(
    LOWER(
      ISNULL(@CaseType, 'all')
    ), 
    '-', 
    ''
  );
SET @Gender = LOWER(ISNULL(@Gender,'all'));
Declare @LabTestId INT 
SET 
  @LabTestId =(
    Select 
      TOp(1) LabTestId 
    from 
      LAB_LabTests 
    where 
      LabTestName = @TestName
  ) 
Select 
  * 
from 
  (
    SELECT 
      req.SampleCodeFormatted as SampleId, 
      req.SampleCollectedOnDateTime as CollectionDate, 
      ISNULL(emp.FullName, 'NEW') as PatientType, 
      req.ResultAddedOn as TestDate, 
      pat.ShortName 'PatientName', 
      pat.Gender as 'Gender', 
      req.VerifiedOn, 
      max(
        case when val.ComponentName = 'E gene Ct level' then val.[Value] end
      ) EGene, 
      max(
        case when val.ComponentName = 'ORF1ab gene Ct level' then val.[Value] end
      ) ORFGene, 
      max(
        case when val.ComponentName = 'N gene Ct Level' then val.[Value] end
      ) NGene, 
      max(
        case when val.ComponentName = 'Test of COVID-19' then val.[Value] end
      ) Report, 
      pat.Age, 
      max(pat.Gender),
      pat.PhoneNumber, 
      pat.[Address], 
      mun.MunicipalityName, 
      subDiv.CountrySubDivisionName 
    from 
      LAB_TestRequisition req 
      join PAT_Patient pat on req.PatientId = pat.PatientId --join LAB_LabTests test on req.LabTestId = test.LabTestId
      left join (
        Select 
          RequisitionId, 
          [Value], 
          ComponentName 
        from 
          LAB_TXN_TestComponentResult result 
        where 
          LabTestId = @LabTestId 
          and result.IsActive = 1
      ) val on req.RequisitionId = val.RequisitionId 
      left join MST_CountrySubDivision subDiv on pat.CountrySubDivisionId = subDiv.CountrySubDivisionId 
      left join MST_Municipality mun on pat.MunicipalityId = mun.MunicipalityId 
      left join EMP_Employee emp on req.ProviderId = emp.EmployeeId 
    WHERE 
      req.LabTestId = @LabTestId 
      and req.IsActive = 1 
      AND (
        req.IsVerified = 1 
        OR ISNULL(req.IsVerified, 0)= @isVerificationEnabled
      ) 
      AND ISNULL(
        @CountrySubDivisionId, pat.CountrySubDivisionId
      )= pat.CountrySubDivisionId --AND Convert(date,req.CreatedOn) BETWEEN (CONVERT(date, @FromDate)) AND CONVERT(date, @ToDate)
      sud: Taking from ResultAddedOn date 
      AND Convert(date, req.ResultAddedOn) BETWEEN (
        CONVERT(date, @FromDate)
      ) 
      AND CONVERT(date, @ToDate)      
      AND (
        ISNULL(
          REPLACE(emp.[FullName], '-', ''), 
          'New'
        ) = @CaseType 
        OR @CaseType = 'all'
      ) 
    GROUP BY 
      req.SampleCodeFormatted, 
      req.SampleCollectedOnDateTime, 
      req.VerifiedOn, 
      req.ResultAddedOn, 
      pat.Gender, 
      pat.ShortName, 
      pat.Age, 
      pat.PhoneNumber, 
      pat.[Address], 
      mun.MunicipalityName, 
      subDiv.CountrySubDivisionName, 
      emp.FullName
  ) allData 
  where allData.Report = @ResultType OR @ResultType = 'all'
  END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Lab_Virology]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
FileName: [SP_Report_Lab_Virology]
CreatedBy/date: Ramavtar/2017-10-11
Description: to get number of times the given labtest performed
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2017-10-11					created the script
2		Ramavtar/2017-11-24					alter the script
3		Hari/2017-12-07						alter the script
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Lab_Virology]
	 Add the parameters for the stored procedure here
	@FromDate DATETIME=NULL,
	@ToDate DATETIME= NULL
AS
BEGIN
changed: sud:4Jan'18: default fromdate and todate are today's date.
  set @FromDate = Convert(date,ISNULL(@FromDate,getdate()))
  set @ToDate = Convert(date,ISNULL(@ToDate,getdate()))

/*
creating temporary table and inserting values which we need on screen
columns: TestName, ViewName, counts, seq	-- add counts column only when needed (when we required count for another table then add counts column else dont)
taking count for test whose billing status are 'paid' and 'unpaid' (ignoring return and cancel)
for some row, we are getting count from LAB_TXN_TestComponentResult so we write expression there itself in insert statement
*/
declare @tempTable0 table (TestName varchar(100),ViewName varchar(100),counts int,seq int)

insert into  @tempTable0(TestName,ViewName,seq) values 
		('HIV','HIV',1),
		('HAV (HEPATITIS A) Total Ab','HAV',4),
		('HBsAg','HBsAg',5),
		('HCV','HCV',8),
		('HEV(Hepatistis E) Total Ab','HEV',11),
		(null,'Western blot',12),
		(null,'CD4 Count',13),
		(null,'Viral load',14)
insert into  @tempTable0(ViewName,counts,seq) values 
		('Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='HIV (I & II)' and value ='Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),2),
		('Non-Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='HIV (I & II)' and value ='Non-Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),3),
		('Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='HBsAg' and value ='Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),6),
		('Non-Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='HBsAg' and value ='Non-Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),7),
		('Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='HCV' and value ='Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),9),
		('Non-Reactive',(select count(componentname) from LAB_TXN_TestComponentResult where ComponentName='HCV' and value ='Non-Reactive' and (convert(date,CreatedOn) between @FromDate and @ToDate)),10)

select seq,ViewName,isnull(tbl.counts,count(LabTestName)) as Quantity from @tempTable0 tbl
left join 
LAB_TestRequisition testreq on tbl.TestName = testreq.LabTestName and 
	(testreq.BillingStatus = 'unpaid' or testreq.BillingStatus = 'paid') and
	changed: sud:4Jan'18:DateConversion
	(convert(date,testreq.OrderDateTime) between @FromDate and @ToDate)
group by seq,ViewName,counts
order by seq
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_PAT_EditedPatientDetailReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
 Author:		<Dev Narayan Chaudhary>
 Create date: <2021 Nov 24>
 Description:	Get Edit history of patients whose Name was edited 
     -> Change history is inserted by trigger: TRG_PAT_History_PatientName into different table. 
 Remarks: Currently we're tracking only Name change, we can extend this to track other changes of patient as well.
     

 =============================================
Change History:
----------------------------------------------------------------
SN      User/Date                   Remarks
----------------------------------------------------------------
1.      DevNarayan/27Dec'2021       Initial Draft
-----------------------------------------------------------------

*/
CREATE PROCEDURE [dbo].[SP_Report_PAT_EditedPatientDetailReport]
    @FromDate Date=null,
    @ToDate Date=null,
    @UserId int = null
AS
BEGIN
select
	   data.[Hospital Number],
	   data.[Patient Old Name],
	   data.[Patient New Name],
	   data.[Registered By],
	   data.[Edited By],
	   data.[Registered Date],
	   data.[Edited Date]
from (select ROW_NUMBER() OVER (PARTITION BY history.PatientId  ORDER BY 
          history.PatientHistoryId DESC)as [S.N.],
		  patient.PatientCode as [Hospital Number],
		  history.PatientOldName as [Patient Old Name],
		  history.PatientNewName as [Patient New Name],
		  users.UserName as [Registered By],
		  modfier.UserName as [Edited By],
		  patient.CreatedOn as [Registered Date],
		  history.CreatedOn as [Edited Date],
		  history.CreatedBy as updater,
		  patient.CreatedBy as creater
		  from PAT_History_PatientName history
          join PAT_Patient patient on history.PatientId = patient.PatientId
		   left join RBAC_User users on patient.CreatedBy= users.UserId
		   left join RBAC_User modfier on  history.CreatedBy = modfier.UserId
		  ) as data
		  where (data.updater=@UserId or data.creater = @UserId or @UserId =0)
		  and (CONVERT(date, data.[Registered Date]) between @FromDate 
		  and @ToDate 
		  or CONVERT(date, data.[Edited Date]) between @FromDate 
		  and @ToDate  or @FromDate is null or @ToDate is null)
		  and data.[S.N.] = 1
order by data.[Edited Date] desc
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Patient_RegistrationReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
		CREATE PROCEDURE [dbo].[SP_Report_Patient_RegistrationReport] 
			@FromDate Date=null,
			@ToDate Date=null,
			@Gender varchar(max) = null,
			@Country varchar(max) = null
		AS
		BEGIN
			If((@FromDate IS NOT NULL)  AND(@ToDate IS NOT NULL))        
					BEGIN
						SELECT
							CONVERT(date, patPait.CreatedOn) as 'RegisteredDate',
							patPait.FirstName + ' ' + patPait.LastName AS Patient_Name,patPait.Age,patPait.DateOfBirth ,patPait.Gender,patPait.PhoneNumber,mst.CountryName,patPait.Address,
							patPait.BloodGroup,mem.MembershipTypeName,ins.InsuranceNumber
						FROM PAT_Patient patPait
							INNER JOIN MST_Country AS mst ON mst.CountryId= patPait.CountryId 
							INNER JOIN PAT_CFG_MembershipType As mem  ON patPait.MembershipTypeId= mem.MembershipTypeId
							left JOIN PAT_PatientInsuranceInfo As ins ON patPait.PatientId = ins.PatientId
						Where (patPait.Gender = @Gender or patPait.Gender in ((SELECT * FROM STRING_SPLIT(@Gender,',')))) 
							AND (CONVERT(date, patPait.CreatedOn) between @FromDate and @ToDate) 
							AND (CountryName=@Country or @Country is null)
						ORDER by (CONVERT(date, patPait.CreatedOn))  DESC
					END
		END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Pharmacy_SupplierWiseStock]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [SP_Report_Pharmacy_SupplierWiseStock] '2021-10-25','2021-10-28',null,null,null
CreatedBy/date: Ramesh/28th Oct'21
Description: To get the Details of Supplier Wise Stock Report
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.       Ramesh/Sanjit 28th Oct'21                    created the script
--------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[SP_Report_Pharmacy_SupplierWiseStock] 
    @FromDate DATETIME,
    @ToDate DATETIME,
    @ItemId INT = NULL,
    @StoreId INT = NULL,
    @SupplierId INT = NULL
AS
BEGIN
    SELECT
        ISNULL(gr.OpeningQty,0) as OpeningStock, 
        S.SupplierName as SupplierName,
        I.ItemCode as ItemCode,
        I.ItemName as ItemName,
        str.Name as StoreName,
        ISNULL(gr.PurchaseQty,0) as PurchaseQty,
        gr.BatchNO as BatchNo,
        gr.ExpiryDate as ExpiryDate,
        ISNULL(gr.ConsumedQty,0) as ConsumedQty,
        CASE WHEN gr.WriteOffQty > 0 THEN CONVERT(varchar(800), -gr.WriteOffQty) + ' (write-off) ' Else '' END +
        CASE WHEN gr.PurchaseReturnQty > 0 THEN CONVERT(varchar(800), -gr.PurchaseReturnQty) + ' (purchase-return) ' Else '' END +
        CASE WHEN gr.StkManageQty > 0 THEN CONVERT(varchar(800), gr.StkManageQty) + ' (stock-manage)' Else '' END
        as OtherQtyTxn,
        ISNULL(gr.OpeningQty,0) + ISNULL(gr.PurchaseQty,0) - ISNULL(gr.ConsumedQty,0) - ISNULL(gr.WriteOffQty,0) - ISNULL(gr.PurchaseReturnQty,0) + ISNULL(gr.StkManageQty,0) ClosingStock
    FROM
        PHRM_MST_Item I
        CROSS JOIN PHRM_MST_Supplier S
        CROSS JOIN PHRM_MST_Store str
        INNER JOIN
        (
            SELECT
                X.StoreId, X.ItemId, X.BatchNo, X.ExpiryDate, X.SupplierId, SUM(X.OpeningQty) as OpeningQty, SUM(X.PurchaseQty) as PurchaseQty, SUM(X.ConsumedQty) as ConsumedQty, SUM(X.WriteOffQty) as WriteOffQty, SUM(X.PurchaseReturnQty) as PurchaseReturnQty, SUM(StkManageQty) as StkManageQty
            FROM
            (
                to calculate the opening quantity, we take the goods receipts upto the from date provided
                SELECT GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.SupplierId, SUM(ISNULL(ST.InQty,0)) - SUM(ISNULL(ST.OutQty,0)) as OpeningQty, 0 as PurchaseQty, 0 as ConsumedQty, 0 as WriteOffQty, 0 as PurchaseReturnQty, 0 as StkManageQty
                FROM
                    PHRM_GoodsReceiptItems GRI 
                    INNER JOIN PHRM_GoodsReceipt GR ON GRI.GoodReceiptId = GR.GoodReceiptId
                    INNER JOIN PHRM_MST_Stock S ON GRI.StockId = S.StockId
                    INNER JOIN PHRM_TXN_StockTransaction ST ON S.StockId = ST.StockId
                WHERE CONVERT(date, ST.TransactionDate) >= @FromDate AND
                used StockTxn Date instead of GRDate since calculation of Opening depends on StkTxn Date. Taking GR Date may bring unwanted data in the output                
                    (GR.SupplierId = @SupplierId OR @SupplierId IS NULL) AND
                    (GRI.ItemId = @ItemId OR @ItemId IS NULL) AND
                    (GR.StoreId = @StoreId OR @StoreId IS NULL)
                GROUP BY GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.SupplierId

                UNION ALL

                to calculate the purchased, consumed and closing quantity, we take the goods receipts from the provided date range
                SELECT
                    GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.SupplierId, 
                    0 as OpeningQty, 
                    SUM( 
                        CASE 
                            WHEN ST.TransactionType IN ('gr-item','goodreceipt-items') THEN ST.InQty 
                            WHEN ST.TransactionType = 'cancel-gr-item' THEN -ST.OutQty 
                            ELSE 0
                        END
                       ) as PurchaseQty, 
                    SUM( 
                            CASE
                                WHEN ST.TransactionType IN ('dispatched-item-from','dispatched-item') THEN ST.OutQty
                                ELSE 0
                            END
                        ) as ConsumedQty,              
                    SUM(
                            CASE
                                WHEN ST.TransactionType = 'writeoff-item' THEN ST.OutQty
                                ELSE 0
                            END
                       ) as WriteOffQty,
                    SUM(
                            CASE
                                WHEN ST.TransactionType = 'rts-item' THEN ST.OutQty
                                ELSE 0
                            END
                       ) as PurchaseReturnQty,
                    SUM(
                            CASE
                                WHEN ST.TransactionType IN ('stock-managed-item','fy-managed-item') AND ST.InQty > 0 THEN ST.InQty
                                WHEN ST.TransactionType IN ('stock-managed-item','fy-managed-item') AND ST.OutQty > 0 THEN -ST.OutQty
                                ELSE 0
                            END
                       ) as StkManageQty
                FROM
                    PHRM_GoodsReceiptItems GRI 
                    INNER JOIN PHRM_GoodsReceipt GR ON GRI.GoodReceiptId = GR.GoodReceiptId
                    INNER JOIN PHRM_MST_Stock S ON GRI.StockId = S.StockId
                    INNER JOIN PHRM_TXN_StockTransaction ST ON S.StockId = ST.StockId
                WHERE CONVERT(date, ST.TransactionDate) BETWEEN @FromDate AND @ToDate AND
                used StockTxn Date instead of GRDate since calculation of Opening depends on StkTxn Date. Taking GR Date may bring unwanted data in the output            
                    (GR.SupplierId = @SupplierId OR @SupplierId IS NULL) AND
                    (GRI.ItemId = @ItemId OR @ItemId IS NULL) AND
                    (GR.StoreId = @StoreId OR @StoreId IS NULL)
                GROUP BY GR.StoreId, GRI.ItemId, S.BatchNo, S.ExpiryDate, GR.SupplierId
            ) X
             If a same item with same batch and expiry date was supplied from same vendor, then report will show them as a single row, hence the group by is used as below
            GROUP BY X.StoreId, X.ItemId, X.BatchNo, X.ExpiryDate, X.SupplierId
        )
        gr ON I.ItemId = gr.ItemId AND S.SupplierId = gr.SupplierId AND str.StoreId = gr.StoreId
    WHERE (ISNULL(gr.OpeningQty,0) != 0 OR ISNULL(gr.PurchaseQty,0) != 0 OR ISNULL(gr.ConsumedQty,0) != 0)
    ORDER BY ISNULL(gr.PurchaseQty,0) DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_PHRM_Daily_StockValue]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_PHRM_Daily_StockValue]
AS
/*
*/
BEGIN
  Declare @Today date= Convert(date,getdate()) ,@StartDate datetime = Convert(date,getdate()-6)

  select d.Dates as 'Date',ISNULL(inv.Quantity,0) 'Quantity'
  from [FN_COMMON_GetAllDatesBetweenRange] (@StartDate,@Today) d
  LEFT JOIN   
	   (   select convert(date,createdOn) BillDate, Sum(isnull(Quantity,0)) Quantity
			from PHRM_StockTxnItems
			where InOut='out'
			group by convert(date,createdOn)
			
	  ) inv
ON d.Dates = inv.BillDate
  order by d.Dates DESC
End--end of SP
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_PoliceCasePatient]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_PoliceCasePatient] 
	@FromDate Date=null ,
	@ToDate Date=null	
AS
/*
FileName: [SP_Report_PoliceCasePatient]
CreatedBy/date: Anjana (2020-09-30) 
Description: to get the count of total police case patient between Given Date

Change History
------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------------
1.     Anjana (2020-09-30)					Initial Draft
-------------------------------------------------------------------------------
2.     Dev Narayan (2021-09-29)             Change police case codition check in sp form database column 'isPoliceCase' to 'AdmissionCase'
------------------------------------------------------------------------------------------------------------------------
*/

BEGIN
If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL)
	BEGIN 
			select 
			  (Cast(ROW_NUMBER() OVER (ORDER BY  DischargeDate desc)  as int)) as SN,
			  	P.ShortName,
		      (P.Firstname+''+P.LastName) 'PatientName',
              convert(varchar(20),CONVERT(date,DischargeDate)) 'DischargedDate', 
              convert(varchar(20),CONVERT(date,AdmissionDate)) 'AdmissionDate',
			  V.VisitCode 'IpNumber',
			  P.PatientCode 'HospitalNumber',
			  A.PatientId,
			  A.AdmissionStatus
		    from ADT_PatientAdmission A join PAT_PatientVisits V
                on A.PatientVisitId = V.PatientVisitId
               Join PAT_Patient P on P.PatientId=V.PatientId
		    where A.AdmissionCase LIKE '%Police_Case%' and CONVERT(date,AdmissionDate) between @FromDate and @ToDate
			Order By convert(varchar(20),CONVERT(date,AdmissionDate)) desc
	
	END	
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Quotation_Rates]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
END: 19th Jan, 2021 Ramesh: Added columns in Purchase Request for PRCategory and Purchase Order for POCategory


START: 22th Jan, 2021 Rajib:SP_Report_Quotation_Rates 

CREATE PROCEDURE [dbo].[SP_Report_Quotation_Rates] 
		@PurchaseOrderId int
AS

/*
FileName: [SP_Report_Quotation_Rates] 
CreatedBy/date: Rajib/22-01-2021
Description: To get the Details of report Quotion rates
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rajib/22-01-2021						created the script
--------------------------------------------------------------------------
*/

DECLARE 
    @columns NVARCHAR(MAX) = '', @sql     NVARCHAR(MAX) = '';
BEGIN
	SELECT @columns += QUOTENAME(V.VendorName) + ',' 
	FROM
	  (SELECT 
		DISTINCT Q.VendorName
		from INV_TXN_PurchaseOrderItems POI 
		left join INV_QuotationItems QI on QI.ItemId = POI.ItemId
		join INV_Quotation Q on QI.QuotationId = Q.QuotationId
		where POI.PurchaseOrderId = @PurchaseOrderId
    )  V

	 remove the last comma
	SET @columns = LEFT(@columns, LEN(@columns) - 1);

	SET @sql = 'select * from (
	select QI.ItemName, Q.VendorName, QI.Price
	from INV_TXN_PurchaseOrder PO
	join INV_TXN_PurchaseOrderItems POI on PO.PurchaseOrderId = POI.PurchaseOrderId
	left join INV_QuotationItems QI on QI.ItemId = POI.ItemId
	join INV_Quotation Q on QI.QuotationId = Q.QuotationId
	where POI.PurchaseOrderId = '+ CONVERT(NVARCHAR,@PurchaseOrderId) +'
	) t
	PIVOT( SUM(t.Price) 
	FOR t.VendorName IN ('+ @columns + ')
	) AS pivot_table';

	 execute the dynamic SQL
	EXECUTE sp_executesql @sql;
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Radiology_CategoryWiseImagingReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SP_Report_Radiology_CategoryWiseImagingReport] --'2017-01-01','2019-01-01'
	@FromDate Datetime= null,
	@ToDate Datetime= null
AS
/*
FileName: [SP_Report_Radiology_CategoryWiseImagingReport]
CreatedBy/date: Sagar/2017-05-30
Description: to get count of all service department in Radiology
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       nagesh/2017-05-30	                   created the script
2       umed / 2017-06-06                      Modify the script i.e format and alias of table 
                                               and remove unnecessary Third Table from Script
------------------------------------------------------
*/
BEGIN
		IF(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>0 OR LEN(@ToDate)>0)
				BEGIN 
					DECLARE @DynamicPivotQuery AS NVARCHAR(MAX),
							@PivotColumnNames AS NVARCHAR(MAX),
							@PivotSelectColumnNames AS NVARCHAR(MAX)

					-Get distinct values of the PIVOT Column
					SELECT @PivotColumnNames= ISNULL(@PivotColumnNames + ',','')
					+ QUOTENAME(ServiceDepartmentName)
					FROM ( 
							 SELECT  DISTINCT  b.ServiceDepartmentName     
							 FROM   BIL_MST_ServiceDepartment a 
							 INNER JOIN BIL_TXN_BillingTransactionItems b 
							 ON a.ServiceDepartmentName=b.ServiceDepartmentName
							 WHERE DepartmentId=(SELECT TOP 1 DepartmentId FROM MST_Department WHERE DepartmentName='Radiology') 
							 AND CONVERT(DATE,b.PaidDate) BETWEEN @FromDate and @ToDate
							 GROUP BY CONVERT(DATE,b.PaidDate),b.ServiceDepartmentName
						 )   AS dep

					-select @PivotColumnNames as Departmentnames
					-add an extra Date column in the column list--
					 SELECT 'Date' AS 'ColumnName'
						 UNION ALL
					SELECT  DISTINCT  b.ServiceDepartmentName     
							 FROM   BIL_MST_ServiceDepartment a 
							 INNER JOIN BIL_TXN_BillingTransactionItems b 
							 ON a.ServiceDepartmentName=b.ServiceDepartmentName
							 WHERE DepartmentId=(SELECT TOP 1 DepartmentId FROM MST_Department WHERE DepartmentName='Radiology') 
							 AND CONVERT(DATE,b.PaidDate) BETWEEN @FromDate and @ToDate
							 GROUP BY CONVERT(DATE,b.PaidDate),b.ServiceDepartmentName;

					---Prepare the PIVOT query using the dynamic 
					SET @DynamicPivotQuery = N'SELECT Date, ' + @PivotColumnNames + '
							FROM (
								 SELECT  DISTINCT  b.ServiceDepartmentName, 
										 CONVERT(VARCHAR,b.PaidDate,111)AS Date,
										 COUNT(b.BillingTransactionId) AS TotalCount        
								 FROM   BIL_MST_ServiceDepartment a 
										INNER JOIN BIL_TXN_BillingTransactionItems b 
										ON a.ServiceDepartmentName=b.ServiceDepartmentName
								 WHERE DepartmentId=(SELECT TOP 1 DepartmentId FROM MST_Department WHERE DepartmentName=''Radiology'')  
									   AND b.PaidDate BETWEEN CONVERT(Datetime,'''+ Convert(varchar(20),@FromDate)  + ''') AND  CONVERT(DATETIME,'''+Convert(varchar(20),@ToDate)+''')+1
			  
								  GROUP BY CONVERT(VARCHAR,b.PaidDate,111),b.ServiceDepartmentName) A
								  PIVOT(sum(TotalCount) for ServiceDepartmentName in (' + @PivotColumnNames + ')) as pvt';

					SELECT @DynamicPivotQuery

					---Execute the Dynamic Pivot Query
					EXEC SP_executesql @DynamicPivotQuery
				END	
END












GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Radiology_RevenueGenerated]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_Report_Radiology_RevenueGenerated] 

@FromDate Date=null ,
@ToDate Date= null
AS

/*
FileName: [SP_Report_Radiology_RevenueGenerated]
CreatedBy/date: Sagar/2017-05-25
Description: to get the total of Price , Totalpaid amount, and total Tax between given dates
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Sagar/2017-05-25	                   created the script
2       umed / 2017-06-09                      Modify the script i.e format and alias of table 
                                             and also remove the hard coded DepartmentID with dynamically of Radiology department
------------------------------------------------------
*/
BEGIN
		If(@FromDate IS NOT NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>0 OR LEN(@ToDate)>0)
			BEGIN
					SELECT  CONVERT(date,D.PaidDate) AS [Date],
					        SUM(D.Price) AS TotalPrice,
							SUM(D.TotalAmount) AS TotalPaidAmount,
							SUM(D.Tax) AS TotalTax
					FROM    BIL_MST_ServiceDepartment T
					INNER JOIN
					       BIL_TXN_BillingTransactionItems D ON 
					       D.ServiceDepartmentName=T.ServiceDepartmentName
					WHERE convert(date,D.PaidDate) BETWEEN @FromDate AND @ToDate AND DepartmentId=(SELECT TOP 1 DepartmentId FROM MST_Department WHERE DepartmentName='Radiology')
					GROUP BY CONVERT(date,D.PaidDate) 
			END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_Scheduling_DoctorWisePatientReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_Scheduling_DoctorWisePatientReport] 
	@FromDate DateTime=null,
	@ToDate DateTime=null,
	@ProviderName NVARCHAR(max)=null
AS
/*
FileName: SP_Report_Scheduling_DoctorWisePatientReport
CreatedBy/date: umed/2017-06-02
Description: to get count of appointments per doctor between given dates.
Remarks:    default getdate() for both fromdate and todate.
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1.       umed/2017-06-02	                      created
2.       Umed/2017-06-08                     Modify the script 
                                           Rename the Script, Formatting and some minor changes
3.		Rusha/2021-06-30				   Show middlename of doctor
------------------------------------------------------
*/
BEGIN
	IF (@FromDate IS NOT NULL) OR (@ToDate IS NOT NULL) OR (@ProviderName IS NOT NULL) OR (LEN(@ProviderName) > 0)
	BEGIN
		DECLARE @DynamicPivotQuery AS NVARCHAR(MAX),
	          @PivotColumnNames AS NVARCHAR(MAX),
	          @PivotSelectColumnNames AS NVARCHAR(MAX)
			 
			-Get distinct values of the PIVOT Column
			SELECT @PivotColumnNames= ISNULL(@PivotColumnNames + ',','')
			+ QUOTENAME(ProviderName)
			FROM ( 
						SELECT DISTINCT E.Salutation+' '+E.FirstName+' '+ ISNULL(E.MiddleName,'')+' '+E.LastName AS ProviderName 
						FROM            EMP_Employee E 
						INNER JOIN     PAT_PatientVisits p 
						ON            p.ProviderId=E.EmployeeId
						WHERE  p.VisitDate 
						BETWEEN ISNULL(@FromDate,GETDATE()) AND ISNULL(@ToDate,GETDATE())+1
						AND p.ProviderName like '%'+ ISNULL(@ProviderName,'') + '%'
				 )   AS dep
				 
		   -append the extra column required and return to the server--
			 SELECT 'AppointmentDate'+ISNULL(','+@PivotColumnNames,'') as ColumnName

			 -to remove the start and end bracket from column names in return table.
			 SELECT 'Appointment Date'+ISNULL(','+REPLACE(REPLACE(@PivotColumnNames,'[',''),']',''),'') as ColumnName

			---Prepare the PIVOT query using the dynamic 
			SET @DynamicPivotQuery = N'SELECT [Appointment Date], ' + @PivotColumnNames + '
					FROM (
						  SELECT CONVERT(date, a.VisitDate) AS [Appointment Date], E.Salutation+'' ''+E.FirstName+'' ''+ISNULL(E.MiddleName,'''')
						  +'' ''+E.LastName AS ProviderName, 
						   COUNT(a.ProviderId) AS TotalAppointment
						  FROM PAT_PatientVisits  a INNER JOIN EMP_Employee E 
						  ON  a.ProviderId=E.EmployeeId 
						  WHERE a.VisitDate
						  BETWEEN CONVERT(Datetime,'''+ Convert(varchar(20),ISNULL(@FromDate,GETDATE()))  + ''') 
						  and CONVERT(DATETIME,'''+Convert(varchar(20),ISNULL(@ToDate,GETDATE()))+''')+1   
						  And ProviderName like ''%'+ ISNULL(@ProviderName,'') + '%'' 
						  GROUP BY E.Salutation+'' ''+E.FirstName+'' ''+ISNULL(E.MiddleName,'''')+'' ''+E.LastName, convert(date, a.VisitDate)
						) A
					PIVOT(sum(TotalAppointment) for ProviderName in (' + @PivotColumnNames + ')) as pvt';

			-SELECT @DynamicPivotQuery

			---Execute the Dynamic Pivot Query
			EXEC SP_executesql @DynamicPivotQuery

	END
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_SchemeWiseDiscountReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  

Create PROCEDURE [dbo].[SP_Report_SchemeWiseDiscountReport] -- [SP_Report_SchemeWiseDiscountReport] '2021-06-23','2021-09-23'
	@FromDate Date=null ,
	@ToDate Date=null,
	@MembershipTypeId int=null
AS
/*
FileName: [SP_Report_SchemeWiseDiscountReport]
CreatedBy/date: Pratik/2021-09-21
Description: to get the Scheme Wise Discount Report for the hospital
Remarks:    
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------
1       Pratik/2021-09-21					Created the Script
---------------------------------------------------------------------------------------
*/
BEGIN

Select * from 
(
Select memb.MembershipTypeId, memb.MembershipTypeName, memb.CommunityName,
CashTotalAmount 'CashAmount',
CreditTotalAmount 'CreditAmount',
ISNULL(sales.TotalAmount,0) AS 'Total',
ISNULL(sales.Subtotal,0) AS SalesSubtotal, 
ISNULL(sales.DiscountAmount,0) AS 'Free_Cons_Amount', 
ISNULL(ret.RetTotalAmount,0) AS 'NetRefundAmount',
    ISNULL(ret.RetDiscountAmount,0) AS 'DiscountRefund',
ISNULL(sales.TotalAmount,0) - ISNULL(ret.RetTotalAmount,0) 'NetAmount'
    
from 
PAT_CFG_MembershipType  memb

Left Join 
(
Select itm.DiscountSchemeId,
SUM(itm.SubTotal) 'Subtotal',
SUM(ISNULL(itm.DiscountAmount,0)) 'DiscountAmount',
SUM(itm.TotalAmount) 'TotalAmount',
   
SUM( (Case WHen txn.PaymentMode ='cash' then itm.TotalAmount
ELSE 0 END )) AS CashTotalAmount,
SUM( (Case WHen txn.PaymentMode ='credit' then itm.TotalAmount
ELSE 0 END )) AS CreditTotalAmount

from BIL_TXN_BillingTransaction txn
    INNER join BIL_TXN_BillingTransactionItems itm on txn.BillingTransactionId = itm.BillingTransactionId
Where Convert(Date, txn.CreatedOn) Between @FromDate and @ToDate
Group by itm.DiscountSchemeId
) sales
ON memb.MembershipTypeId= sales.DiscountSchemeId 


Left Join 
(
    Select retItm.DiscountSchemeId, 
    SUM(retItm.RetSubTotal) 'RetSubtotal',
    SUM(ISNULL(retItm.RetDiscountAmount,0)) 'RetDiscountAmount',
    SUM(retItm.RetTotalAmount) 'RetTotalAmount'
    from  BIL_TXN_InvoiceReturnItems retItm
    Where Convert(Date, retItm.CreatedOn) Between @FromDate and @ToDate
    Group by retItm.DiscountSchemeId
) ret
ON memb.MembershipTypeId= ret.DiscountSchemeId 

)tbl

Where ( 
        ISNULL(SalesSubtotal,0) !=0
        ISNULL(CashAmount,0) !=0
    OR  ISNULL(CreditAmount,0) !=0
    OR  ISNULL(Total,0) !=0
    OR  ISNULL(Free_Cons_Amount,0) !=0
    OR  ISNULL(NetRefundAmount,0) !=0  
    OR  ISNULL(DiscountRefund,0) !=0
    )

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Report_TotalRevenueFromLab]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Report_TotalRevenueFromLab]
	@FromDate DATE=NULL ,
	@ToDate DATE= NULL
AS
/*
FileName: [SP_Report_TotalRevenueFromLab] 
Description: to get the total revenue from lab 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Rusha 2019-09-23					To get daily total revenue
------------------------------------------------------
*/
BEGIN
	    IF(@FromDate IS NOT NULL OR @ToDate IS NOT NULL OR LEN(@FromDate)>0 OR LEN(@ToDate)>0)
		BEGIN
			SELECT   CONVERT(DATE,PaidDate) AS [Date],SUM(TotalAmount) AS TotalRevenue,
					 SUM(DiscountAmount) AS TotalDiscount, SUM(isnull(TaxableAmount,0)) as TotalTax 
					 FROM BIL_TXN_BillingTransactionItems bt
					 join BIL_MST_ServiceDepartment sd on  sd.ServiceDepartmentId = bt.ServiceDepartmentId
					 WHERE sd.IntegrationName = 'LAB' and bt.ReturnStatus is null
					 AND CONVERT(DATE,PaidDate) BETWEEN @FromDate AND @ToDate 
			GROUP BY CONVERT(DATE,PaidDate) 
		END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_Report_TransferredPatient]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
FileName: [sp_Report_TransferredPatient]
CreatedBy/date: Ramavtar/2018-06-06
Description: to get no of transferred patient's bed and its details
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       Ramavtar/2018-06-06					changed the whole script .. for getting no of bedTransfer and its details(ward-wise count, total patient transfer and total transfer for single day)					
------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[sp_Report_TransferredPatient]
@FromDate Date=null ,
@ToDate Date= null
AS
BEGIN
	IF(@FromDate IS NOt NULL OR @ToDate IS NOT NULL or LEN(@FromDate)>0 OR LEN(@ToDate)>0)
	BEGIN
		SELECT
			CONVERT(date, StartedOn) 'Date',
			COUNT(DISTINCT (PatientId)) 'TotalPatientTransfer',
			SUM(1) 'TotalNumberTransferred',
			SUM(CASE WHEN WardId = 1 THEN 1 ELSE 0 END) 'OrthoSurgeryWardTransfer',
			SUM(CASE WHEN WardId = 2 THEN 1 ELSE 0 END) 'MedicineGynoWardTransfer',
			SUM(CASE WHEN WardId = 3 THEN 1 ELSE 0 END) 'Pre-OperationWardTransfer',
			SUM(CASE WHEN WardId = 4 THEN 1 ELSE 0 END) 'ICU&POST-OPWardTransfer',
			SUM(CASE WHEN WardId = 5 THEN 1 ELSE 0 END) 'EmergencyWardTransfer'
		FROM ADT_TXN_PatientBedInfo
		WHERE Action = 'transfer'
		AND CONVERT(DATE, StartedOn) BETWEEN @FromDate AND @ToDate
		GROUP BY CONVERT(DATE, StartedOn)
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_Report_VACC_DailyAppointmentReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_Report_VACC_DailyAppointmentReport] 
	@FromDate Date=null,
	@ToDate Date=null,
	@AppointmentType varchar(100) = null
AS
/*
FileName: [SP_Report_VACC_DailyAppointmentReport]
CreatedBy/date: Sud/2021-10-02
Description: to get Appointemnt details of Vaccination patients. 
Remarks: We're considering only patients who has VaccinationRegNumber (i.e: Patients registered from Vaccination module)  
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
5		Sud/2021-10-02					      Initial Draft
------------------------------------------------------
*/
BEGIN

DepartmentName for Immunization should be taken from Parameter table (since it could be different for diff hospitals).
  Declare @VaccDepartmentName varchar(200) = (Select top 1 ParameterValue from CORE_CFG_Parameters where ParameterName='immunizationdeptname' 
                                             and ParameterGroupName='Common')
  Declare @DeptId INT=(Select Top(1) DepartmentId from MST_Department where DepartmentName=@VaccDepartmentName)

  Declare @apptType Varchar(20)
  SET @apptType = @AppointmentType
  if(ISNULL(@AppointmentType,'all')='all')
  BEGIN
    SET @apptType= ''  --change to empty input is 'NULL' or 'all' --- for string comparison..
  END

  SELECT
	   CAST(Convert(Date, vis.VisitDate) as DATETIME) + CAST(vis.VisitTime AS DATETIME) AS VisitDateTime,
	    pat.VaccinationRegNo,
		pat.ShortName AS PatientName,
		pat.PatientCode,
        pat.PhoneNumber, 
		pat.Age, 
		pat.Gender,
		pat.DateOfBirth,
		pat.MotherName,
		pat.EthnicGroup,
		dist.CountrySubDivisionName 'DistrictName',
		pat.Address,
		vis.AppointmentType,
		emp.FullName AS UserName

    FROM PAT_Patient pat  INNER JOIN PAT_PatientVisits AS vis ON vis.PatientId = pat.PatientId
   
	INNER JOIN MST_CountrySubDivision dist on pat.CountrySubDivisionId=dist.CountrySubDivisionId
	INNER join MST_Department dept on vis.DepartmentId=dept.DepartmentId
	INNER join EMP_Employee emp on emp.EmployeeId = vis.CreatedBy
	WHERE 
		vis.DepartmentId = @DeptId --taking only appointments of Immunzation Department
		and pat.IsVaccinationPatient = 1 -- take only vaccination patients
		and CONVERT(date, vis.VisitDate) BETWEEN @FromDate  AND  @ToDate 
		and vis.VisitType !='inpatient' --excluding inpatient visits (those can be seen from admission reports)
		AND  vis.AppointmentType LIKE '%' + ISNULL(@apptType, '') + '%'
		AND vis.BillingStatus NOT  IN('cancel','returned')--exclude cancelled and returned visits.
	ORDER BY CAST(Convert(Date, vis.VisitDate) as DATETIME) + CAST(vis.VisitTime AS DATETIME) DESC
  
END

GO
/****** Object:  StoredProcedure [dbo].[SP_RPT_Bil_EHSBillingReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_RPT_Bil_EHSBillingReport] 	-- SP_RPT_Bil_EHSBillingReport '2021-12-09', '2021-12-09', null,null,null,null
        @FromDate DATE = NULL,
		@ToDate DATE = NULL,
		@ServiceDepartmentName VARCHAR(200) = null,
		@ItemName VARCHAR(200) = null,
        @UserId Int = null,
		@ProviderId Int = null,
		@RequestedBy Int = null
AS
/*
FileName: SP_RPT_Bil_EHSBillingReport
CreatedBy/date: Pratik:21Nov'2021
Description: 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date               Remarks
-----------------------------------------------------
1.       Pratik:21Nov'2021            initial draft
2.       Pratik:9Dec'2021             Added ProviderId and RequestedBy filter 
------------------------------------------------------
*/
BEGIN
 

Select * from 

(
 -start: Section:1--- Sales Information at Item Level (CashSales, Credit Sales)-----
	Select 
		Convert(Date,txn.CreatedOn) 'TransactionDate',
   		txn.InvoiceCode+'-'+Convert(varchar(20),txn.InvoiceNo) 'ReceiptNo',
		Case WHEN txn.PaymentMode ='credit' THEN 'CreditSales'
			ELSE 'CashSales' END AS BillingType,
        txnItm.VisitType 'VisitType',
		p.PatientCode 'HospitalNumber',
		p.ShortName 'PatientName', 
		srv.ServiceDepartmentName,
		txnItm.ItemName,
		txnItm.Price,
		txnItm.Quantity,
		txnItm.SubTotal 'SubTotal',
		txnItm.DiscountAmount 'DiscountAmount',
		txnItm.TotalAmount 'TotalAmount',
		CASE WHEN  ISNULL(txnItm.ProviderId,0)=0 THEN 'NoDoctor' 
			ELSE empAssign.FullName END AS AssignedToDoctor,
		CASE WHEN  ISNULL(txnItm.RequestedBy,0)=0 THEN 'SELF' 
			ELSE empRef.FullName END AS ReferredByDoctor,
		txnItm.Remarks 'Remarks',
		'NA' AS 'ReferenceReceiptNo',
		empUsr.FullName AS 'UserName',
		ISNULL(memb.MembershipTypeName,'General') 'DiscountScheme',  --if not found then it's General
		-we're taking insurance flag from invoice table---
		Case WHEN ISNULL(txn.IsInsuranceBilling,0)=1 THEN 'YES'
		     ELSE 'NO' END AS IsInsurance

	From  BIL_TXN_BillingTransaction txn 
		 INNER JOin BIL_TXN_BillingTransactionItems txnItm on txn.BillingTransactionId = txnItm.BillingTransactionId
		 INNER JOIN BIL_MST_ServiceDepartment srv ON txnItm.ServiceDepartmentId=srv.ServiceDepartmentId
		 INNER JOIN  PAT_Patient P  on txn.PatientId =p.PatientId
		 INNER JOIN EMP_Employee empUsr ON empUsr.EmployeeId = txn.CreatedBy 
		 LEFT JOIN EMP_Employee empRef on empRef.EmployeeId = txnItm.RequestedBy
		 LEFT JOIN EMP_Employee empAssign on empAssign.EmployeeId = txnItm.ProviderId
		 LEFT JOIN PAT_CFG_MembershipType memb on txnItm.DiscountSchemeId=memb.MembershipTypeId
		 
	where  Convert(Date, txn.CreatedOn) between @FromDate and @Todate and txnItm.PriceCategory='EHS'
		AND (srv.ServiceDepartmentName LIKE '%' + ISNULL(@ServiceDepartmentName, srv.ServiceDepartmentName) + '%')
        AND (txnItm.ItemName LIKE '%' + ISNULL(@ItemName, txnItm.ItemName) + '%')
		AND (ISNULL(@UserId, ISNULL(txn.CreatedBy, 0)) = ISNULL(txn.CreatedBy, 0))
		AND (ISNULL(@ProviderId, ISNULL(txnItm.ProviderId, 0)) = ISNULL(txnItm.ProviderId, 0))
		AND (ISNULL(@RequestedBy, ISNULL(txnItm.RequestedBy, 0)) = ISNULL(txnItm.RequestedBy, 0))
   -end: Section:1--- Sales Information at Item Level (CashSales, Credit Sales)-----

	UNION ALL

 -start: Section:2--- Return Sales Information at Item Level (Return CashSales, Return CreditSales)-----
	Select 
		Convert(Date,ret.CreatedOn) 'TransactionDate',
   		'CRN-'+Convert(varchar(20),ret.CreditNoteNumber) 'CreditNoteNumber',
		Case WHEN ret.PaymentMode ='credit' THEN 'ReturnCreditSales'
			ELSE 'ReturnCashSales' END AS BillingType,
        retItm.VisitType 'VisitType',
		p.PatientCode 'HospitalNumber',
		p.ShortName 'PatientName', 
		srv.ServiceDepartmentName,
		retItm.ItemName,
		retItm.Price,
		retItm.RetQuantity,
		retItm.RetSubTotal 'SubTotal',
		retItm.RetDiscountAmount 'DiscountAmount',
		retItm.RetTotalAmount 'TotalAmount',
		CASE WHEN  ISNULL(retItm.ProviderId,0)=0 THEN 'NoDoctor' 
			ELSE empAssign.FullName END AS AssignedToDoctor,
		CASE WHEN  ISNULL(retItm.RequestedBy,0)=0 THEN 'SELF' 
			ELSE empRef.FullName END AS ReferredByDoctor,
		retItm.RetRemarks 'Remarks',
		ret.InvoiceCode+'-'+Convert(varchar(20),ret.RefInvoiceNum) AS 'ReferenceReceiptNo',
		empUsr.FullName AS 'UserName',
		ISNULL(memb.MembershipTypeName,'General') 'DiscountScheme',  --if not found then it's General
		-we're taking insurance flag from credit note level---
		Case WHEN ISNULL(ret.IsInsuranceBilling,0)=1 THEN 'YES'
		     ELSE 'NO' END AS IsInsurance

	From  BIL_TXN_InvoiceReturn ret 
		 INNER JOin BIL_TXN_InvoiceReturnItems retItm on ret.BillReturnId = retItm.BillReturnId
		 INNER JOIN BIL_MST_ServiceDepartment srv ON retItm.ServiceDepartmentId=srv.ServiceDepartmentId
		 INNER JOIN  PAT_Patient P  on ret.PatientId =p.PatientId
		 INNER JOIN EMP_Employee empUsr ON empUsr.EmployeeId = ret.CreatedBy 
		 LEFT JOIN EMP_Employee empRef on empRef.EmployeeId = retItm.RequestedBy
		 LEFT JOIN EMP_Employee empAssign on empAssign.EmployeeId = retItm.ProviderId
		 LEFT JOIN PAT_CFG_MembershipType memb on retItm.DiscountSchemeId=memb.MembershipTypeId

	WHERE  Convert(Date, ret.CreatedOn) between @FromDate and @Todate and retItm.PriceCategory='EHS'
	AND (srv.ServiceDepartmentName LIKE '%' + ISNULL(@ServiceDepartmentName, srv.ServiceDepartmentName) + '%')
    AND (retItm.ItemName LIKE '%' + ISNULL(@ItemName, retItm.ItemName) + '%')  
	AND (ISNULL(@UserId, ISNULL(ret.CreatedBy, 0)) = ISNULL(ret.CreatedBy, 0))
	AND (ISNULL(@ProviderId, ISNULL(retItm.ProviderId, 0)) = ISNULL(retItm.ProviderId, 0))
		AND (ISNULL(@RequestedBy, ISNULL(retItm.RequestedBy, 0)) = ISNULL(retItm.RequestedBy, 0))
	-end: Section:2--- Return Sales Information at Item Level (Return CashSales, Return CreditSales)-----

) itmDetails


Order by TransactionDate, HospitalNumber

END

GO
/****** Object:  StoredProcedure [dbo].[SP_TXNS_BILL_SettlementSummary]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_TXNS_BILL_SettlementSummary] 
AS
/*
FileName: SP_TXNS_BILL_SettlementSummary
CreatedBy/date: Deepak,Sud: 24March'20
Description: to get Deposit, Provisional, Credit Total for Settlement Details.
Remarks: 

Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------	
1.        Deepak,Sud/24Apr'20                Provisional issue, EMR-1989
2.		  Krishna 28thNOV'21				 Returned bill populating issue resolved (EMR:4365)
		
*/

BEGIN
	SELECT 
		pat.PatientId, pat.PatientCode, 
		pat.FirstName+' '+ISNULL(pat.MiddleName+' ','')+ pat.LastName 'PatientName', 
		pat.DateOfBirth,
		pat.Gender,		
		(ISNULL( credit.CreditTotal,0)-ISNULL(invoicereturn.ReturnedAmount,0)) 'CreditTotal', 
		CAST(ROUND(ISNULL(prov.ProvisionalTotal,0),2) as numeric(16,2))  'ProvisionalTotal', 
		CAST(ROUND((ISNULL(dep.TotalDeposit,0)- ISNULL(dep.DepositDeduction,0) - ISNULL(dep.DepositReturn,0)),2) as numeric(16,2)) 'DepositBalance', 
- comparing between DepositCreatedDate, provisionalCreatedDate and CreditInvoiceCreatedDate--

- 2010-01-01 is taken instead as default instead of null -- since our application doesn't have data before that.---
	CASE WHEN ISNULL(Dep_CreatedOn,'2010-01-01') > ISNULL(Prov_CreatedOn,'2010-01-01') 
			AND  ISNULL(Dep_CreatedOn,'2010-01-01') > ISNULL(Inv_CreatedOn,'2010-01-01') THEN Dep_CreatedOn
		WHEN ISNULL(Prov_CreatedOn,'2010-01-01') > ISNULL(Dep_CreatedOn,'2010-01-01')  
			AND ISNULL(Prov_CreatedOn,'2010-01-01') >ISNULL(Inv_CreatedOn,'2010-01-01')  THEN Prov_CreatedOn
	ELSE Inv_CreatedOn END  
	AS   LastTxnDate

credit.CreatedOnDate
	FROM PAT_Patient pat

	LEFT JOIN
	(
		SELECT 
			txn.PatientId,
			MAX(txn.CreatedOn) 'CreatedOnDate' ,
			SUM(txn.TotalAmount) 'CreditTotal',  
			MAX(txn.CreatedOn) 'Inv_CreatedOn'  -- sud  
		FROM BIL_TXN_BillingTransaction txn
		WHERE txn.BillStatus ='unpaid' 
			AND ISNULL(txn.ReturnStatus,0) != 1 AND ISNULL(txn.IsInsuranceBilling,0) != 1
		GROUP BY txn.PatientId
	) credit ON pat.PatientId = credit.PatientId 

	LEFT JOIN
	(
		SELECT 
			SUM(ret.TotalAmount) 'ReturnedAmount',txn.PatientId 
		FROM BIL_TXN_InvoiceReturn ret
		JOIN BIL_TXN_BillingTransaction txn ON ret.BillingTransactionId=txn.BillingTransactionId
		WHERE txn.BillStatus ='unpaid' 
			AND ISNULL(txn.ReturnStatus,0) != 1 AND ISNULL(txn.IsInsuranceBilling,0) != 1
		GROUP BY txn.PatientId 
	) invoicereturn ON pat.PatientId = invoicereturn.PatientId

	LEFT JOIN
	(
		SELECT 
			txnItm.PatientId, 
			SUM(txnItm.TotalAmount) 'ProvisionalTotal', 
			MAX(CreatedOn) 'Prov_CreatedOn'   -- sud
		FROM BIL_TXN_BillingTransactionItems txnItm
		WHERE 
			txnItm.BillStatus ='provisional'  -- this takes only provisional
			AND txnItm.BillingType !='inpatient'
			and txnItm.BillingTransactionId is not null  -- this takes invoice created
			AND ISNULL(txnItm.ReturnStatus,0) != 1 AND ISNULL(txnItm.IsInsurance,0) != 1 

		GROUP BY txnItm.PatientId
	) prov ON pat.PatientId = prov.PatientId

	LEFT JOIN
	( 
		SELECT 
			dep.PatientId,
			SUM(Case WHEN dep.DepositType='Deposit' THEN ISNULL(dep.Amount,0) ELSE 0  END ) AS 'TotalDeposit',
			SUM(Case WHEN dep.DepositType='depositdeduct' THEN ISNULL(dep.Amount,0) ELSE 0  END ) AS 'DepositDeduction',
			SUM(Case WHEN dep.DepositType='ReturnDeposit' THEN ISNULL(dep.Amount,0) ELSE 0  END ) AS 'DepositReturn',
			MAX(dep.CreatedOn) 'Dep_CreatedOn'   -- sud
		FROM BIL_TXN_Deposit dep
		GROUP BY dep.PatientId
	) dep ON dep.PatientId = pat.PatientId

-show only those patients which has either amount > 0
	WHERE (ISNULL(credit.CreditTotal,0) - ISNULL(invoicereturn.ReturnedAmount,0)) > 1 
		OR ISNULL(prov.ProvisionalTotal,0) > 1  
		OR ( dep.TotalDeposit-dep.DepositDeduction - dep.DepositReturn) > 1
	ORDER BY LastTxnDate DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_TXNS_PHRM_SettlementDuplicatePrint]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_TXNS_PHRM_SettlementDuplicatePrint] 
AS
/*
FileName: [SP_TXNS_PHRM_SettlementDuplicatePrint]
CreatedBy/date: Vikas: 4th March 2020
Description: script for pharmacy duplicate settlement records
Remarks: 
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
---------------------------------------------------------------------------------------			
*/
BEGIN
 
Select pat.PatientId, pat.PatientCode, 
       pat.FirstName+' '+ISNULL(pat.MiddleName+' ','')+ pat.LastName 'PatientName', 
	   pat.DateOfBirth,
	   pat.Gender,pat.PhoneNumber, credit.SettlementId,
     ISNULL( credit.CreditTotal,0) 'CreditTotal',
	 cast(
	      round( 
	           (ISNULL(dep.TotalDeposit,0)- ISNULL(dep.DepositDeduction,0) - ISNULL(dep.DepositReturn,0))
	         ,2) as numeric(16,2)) 'DepositBalance',
			 credit.CreatedOn 'CreditDate' ,dep.CreatedOn 'DepositDate'
from PAT_Patient pat
LEFT JOIN
(
   Select txn.PatientId, max(txn.CreateOn) CreatedOn, txn.SettlementId,
  SUM(txn.TotalAmount) 'CreditTotal'  from PHRM_TXN_Invoice txn
  where txn.BilStatus ='paid' AND txn.SettlementId is not null AND ISNULL(txn.IsReturn,0) != 1
  Group by txn.PatientId,txn.SettlementId 
) credit on pat.PatientId = credit.PatientId
LEFT JOIN
( 
  Select dep.PatientId,max(dep.CreatedOn) CreatedOn,
    SUM(Case WHEN dep.DepositType='deposit' THEN ISNULL(dep.DepositAmount,0) ELSE 0  END ) AS 'TotalDeposit',
    SUM(Case WHEN dep.DepositType='depositdeduct' THEN ISNULL(dep.DepositAmount,0) ELSE 0  END ) AS 'DepositDeduction',
	SUM(Case WHEN dep.DepositType='depositreturn' THEN ISNULL(dep.DepositAmount,0) ELSE 0  END ) AS 'DepositReturn'
   FROM PHRM_Deposit dep
   Group by dep.PatientId
) dep
ON dep.PatientId = pat.PatientId

-show only those patients which has either amount > 0
where ISNULL(credit.CreditTotal,0) > 1 
	  OR ( dep.TotalDeposit-dep.DepositDeduction - dep.DepositReturn) > 1
to get the latest first
	  order by credit.SettlementId DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_TXNS_PHRM_SettlementSummary]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_TXNS_PHRM_SettlementSummary] 
     @StoreId INT = NULL
AS
/*
FileName: [SP_TXNS_PHRM_SettlementSummary] 40
CreatedBy/date: sanjit:24Nov2019
Description: to get CreditTotal, DepositBalance of patients
Remarks:   We're selecting only those patients, who has balance amount in any of above types.
       : I've kept amount > 1 in filter list, otherwise it'll show a lot of un-necessary data.. 
Change History
---------------------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
1.      Shankar/28thFeb2020             Added provisional amount as well
2.      VIKAS/1st Sep 2020              Added BilStatus, and SettlementId and get paid and unpaid credit bills data
3.      Shankar/7th Dec 2020            Subtracted Credit invoice return from CreditTotal
4.      Ramesh/7th Sep'21               Added Store Id Filter 
5.      Rohit/5th Dec'21                Added BillStatus condition to get all pending/unpaid settlement 
6:      Ramesh/Rohit/6th Jan'22         Settlement not showing after Invoice Return.
---------------------------------------------------------------------------------------           
*/
BEGIN
Select pat.PatientId, pat.PatientCode, 
       pat.FirstName+' '+ISNULL(pat.MiddleName+' ','')+ pat.LastName 'PatientName', 
       pat.DateOfBirth,
       pat.Gender,pat.PhoneNumber,     
       CAST(ISNULL(credit.CreditTotal,0) - ISNULL(invretn.PaidAmount,0) as numeric(16,2)) 'CreditTotal',
       CAST(ROUND(ISNULL(provisional.ProvisionalTotal,0),2) as numeric(16,2)) 'ProvisionalTotal',
       CAST(
          ROUND( 
               (ISNULL(dep.TotalDeposit,0)- ISNULL(dep.DepositDeduction,0) - ISNULL(dep.DepositReturn,0))
             ,2) as numeric(16,2)) 'DepositBalance',
             credit.CreatedOn 'CreditDate' ,dep.CreatedOn 'DepositDate',
    credit.BilStatus, credit.SettlementId -- VIKAS:1st Sep 2020: added BilStatus , and  SettlementId
from PAT_Patient pat
LEFT JOIN
( 
  Select txn.PatientId, max(txn.CreateOn) CreatedOn, txn.BilStatus,txn.SettlementId,
  SUM(txn.PaidAmount) 'CreditTotal'  from PHRM_TXN_Invoice txn
  where txn.BilStatus ='unpaid' and
   txn.PaymentMode = 'credit'
  AND ISNULL(txn.IsReturn,0) != 1
  AND txn.StoreId = @StoreId
  Group by txn.PatientId,txn.BilStatus, txn.SettlementId
) credit on pat.PatientId = credit.PatientId
LEFT JOIN
(
select invret.PatientId,SUM(invret.PaidAmount) 'PaidAmount' from PHRM_TXN_Invoice inv
join PHRM_TXN_InvoiceReturn invret on inv.InvoiceId = invret.InvoiceId --and invret.PaymentMode = 'credit'
where invret.PaymentMode = 'credit' AND inv.StoreId = 40 AND invret.SettlementId IS NULL
group by invret.PatientId
) invretn on pat.PatientId = invretn.PatientId
LEFT JOIN
(--select * from PHRM_TXN_Invoice where BilStatus = 'provisional'
  Select invitms.PatientId, max(invitms.CreatedOn) CreatedOn,
  SUM(invitms.TotalAmount) 'ProvisionalTotal' from PHRM_TXN_InvoiceItems invitms
  where invitms.BilItemStatus='provisional' or invitms.BilItemStatus='wardconsumption' AND invitms.StoreId = @StoreId
  Group by invitms.PatientId
) provisional on pat.PatientId = provisional.PatientId
LEFT JOIN
( 
  Select dep.PatientId,max(dep.CreatedOn) CreatedOn,
    SUM(Case WHEN dep.DepositType='deposit' THEN ISNULL(dep.DepositAmount,0) ELSE 0  END ) AS 'TotalDeposit',
    SUM(Case WHEN dep.DepositType='depositdeduct' THEN ISNULL(dep.DepositAmount,0) ELSE 0  END ) AS 'DepositDeduction',
    SUM(Case WHEN dep.DepositType='depositreturn' THEN ISNULL(dep.DepositAmount,0) ELSE 0  END ) AS 'DepositReturn'
   FROM PHRM_Deposit dep
   where dep.StoreId = @StoreId
   Group by dep.PatientId
) dep
ON dep.PatientId = pat.PatientId
-show only those patients which has either amount > 0
where CAST(ISNULL(credit.CreditTotal,0) - ISNULL(invretn.PaidAmount,0) as numeric(16,2)) > 1
      OR ( dep.TotalDeposit-dep.DepositDeduction - dep.DepositReturn) > 1
to get the latest first
      order by
  CASE
      WHEN ISNULL(dep.CreatedOn,0) >= ISNULL(credit.CreatedOn,0)
          THEN  dep.CreatedOn
      ELSE  credit.CreatedOn 
  END
 DESC
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Update_RadiologyProvider_In_BillTransactionItem]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish>
 Create date: <18 Sept>
 Description:	<Update Provider detail for Radiology Item in BillTransactionItem Table>
 =============================================
CREATE PROCEDURE [dbo].[SP_Update_RadiologyProvider_In_BillTransactionItem] (
	@RequisitionId INT,
	@ProviderId INT NULL,
	@ProviderName varchar(100)
)  
AS
BEGIN
	
	Update BIL_TXN_BillingTransactionItems set ProviderId=@ProviderId, ProviderName=@ProviderName where BillingTransactionItemId =(
	Select item.BillingTransactionItemId from BIL_TXN_BillingTransactionItems item
	Join BIL_MST_ServiceDepartment srvDept on srvDept.ServiceDepartmentId=item.ServiceDepartmentId
	where LOWER(srvDept.IntegrationName)='radiology' and item.RequisitionId=@RequisitionId
	)

END

GO
/****** Object:  StoredProcedure [dbo].[SP_UpdateIsTransferToACC]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/************************************************************************
FileName: [SP_UpdateIsTransferToACC]
Author  : Salakha/NageshBB
Created date: 25 Feb 2019
Description: Created Script to Update column IsTransferToACC
			This work in two scenario 1-when transferred records into accounting, 2-Undo transaction (datewise) from accounting		
-------------------------------------------------------------------------
Change History
-----------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------------------------
1       Salakha/NageshBB /25Feb 2020		  Created Script to Update column IsTransferToACC
2		NageshBB/12Aug 2020		              Changes for Inventory module transaction where
											  Transaction type INVDeptConsumedGoods get records from WARD_INV_Consumption table 
											  and INVDispatchToDept get records from INV_TXN_StockTransaction				
											  Now both transaction type get records from single table i.e.WARD_INV_Transaction
											  done changes for this update column value IsTransferToAcc
3		NageshBB/20Aug 2020					 Inventory Transaction Type INVStockManageOut need to handle for reverse txn and Update after transfer records
											 This transaction from 2 table 
4       NageshBB/Sanjit sir /12July2021      updated invoice return for pharmacy module 
5       NageshBB/Sanjit sir /13July2021      updated invoice return for inventory module
*************************************************************************************/

CREATE PROCEDURE [dbo].[SP_UpdateIsTransferToACC] 
	@ReferenceIds varchar(max),
	@TransactionType nvarchar(50),
	@IsReverseTransaction bit=0,
	@TransactionDate varchar(30)=null,
	@ReferenceIdsOne varchar(max)
	AS
	BEGIN
	IF (@IsReverseTransaction = 0) -- when transferred record to accounting
	BEGIN

	----------------update pharmacy transaction transferred records--------------------------------------
	
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE PHRM_GoodsReceipt SET IsTransferredToACC = 1 WHERE GoodReceiptId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE PHRM_GoodsReceipt SET IsTransferredToACC = 1 WHERE GoodReceiptId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoice1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = 1 WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoice2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = 1 WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoice1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = 1 WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoice2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = 1 WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoiceReturn1')
	
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = 1 WHERE InvoiceReturnId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoiceReturn2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = 1 WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoiceReturn1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = 1 WHERE InvoiceReturnId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoiceReturn2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = 1 WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashReturnToSupplier')
	BEGIN
	EXECUTE ('UPDATE PHRM_ReturnToSupplier SET IsTransferredToACC = 1 WHERE ReturnToSupplierId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditReturnToSupplier')
	BEGIN
	EXECUTE ('UPDATE PHRM_ReturnToSupplier SET IsTransferredToACC = 1 WHERE ReturnToSupplierId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMWriteOff')
	BEGIN
	EXECUTE ('UPDATE PHRM_WriteOff SET IsTransferredToACC = 1 WHERE WriteOffId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMDispatchToDept')
	BEGIN
	EXECUTE ('UPDATE PHRM_StockTxnItems SET IsTransferredToACC = 1 WHERE StockTxnItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMDispatchToDeptReturn')
	BEGIN
	EXECUTE ('UPDATE PHRM_StockTxnItems SET IsTransferredToACC = 1 WHERE StockTxnItemId IN (' + @ReferenceIds + ')')
	END
	

	----------------------updates inventory txn transaferred records--------------------------------

	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceipt1')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceipt2')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCreditGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCreditPaidGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCreditGoodReceiptFixedAsset')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceiptFixedAsset1')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceiptFixedAsset2')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = 1 WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVWriteOff')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_WriteOffItems SET IsTransferredToACC = 1 WHERE WriteOffId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVReturnToVendorCashGR')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_ReturnToVendorItems SET IsTransferredToACC = 1 WHERE ReturnToVendorItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVReturnToVendorCreditGR')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_ReturnToVendorItems SET IsTransferredToACC = 1 WHERE ReturnToVendorItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVDispatchToDept')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = 1 WHERE StockTransactionId IN (' + @ReferenceIds + ')')
	END
	we are not handling this dispatch dept return
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVDispatchToDeptReturn')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = 1 WHERE StockTxnId IN (' + @ReferenceIds + ')')
	END

	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVDeptConsumedGoods')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = 1 WHERE StockTransactionId IN (' + @ReferenceIds + ')')
	END
	IF ((@ReferenceIds IS NOT NULL or @ReferenceIdsOne is not null)
	AND @TransactionType = 'INVStockManageOut')
	here we have 2 tables for INVStockManageOut
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = 1 WHERE StockTransactionId IN (' + @ReferenceIdsOne + ')')
	EXECUTE ('UPDATE WARD_INV_Transaction SET IsTransferToAcc = 1 WHERE TransactionId IN (' + @ReferenceIds + ')')
	END
	------------------------updates billing txn transferred records---------------

	IF (@ReferenceIds IS NOT NULL
	  AND @TransactionType = 'BillingRecords')
	BEGIN
	  EXECUTE ('UPDATE BIL_SYNC_BillingAccounting SET IsTransferedToAcc = 1 WHERE BillingAccountingSyncId IN (' + @ReferenceIds + ')')
	END

	 1
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CashBill')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_BillingTransactionItems SET IsCashBillSync = 1 WHERE BillingTransactionItemId IN (' + @ReferenceIds + ')')
	END

	 2
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CreditBill')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_BillingTransactionItems SET IsCreditBillSync = 1 WHERE BillingTransactionItemId IN (' + @ReferenceIds + ')')
	END	

	 3
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CreditBillPaid')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_BillingTransaction SET IsCreditBillPaidSync = 1 WHERE BillingTransactionId IN (' + @ReferenceIds + ')')
	END	

	 4
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CashBillReturn')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_InvoiceReturnItems SET IsCashBillSyncToAcc = 1 WHERE BillReturnItemId IN (' + @ReferenceIds + ')')
	END	

	 5
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CreditBillReturn')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_InvoiceReturnItems SET IsCreditBillSyncToAcc = 1 WHERE BillReturnItemId IN (' + @ReferenceIds + ')')
	END	

	 6
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'DepositAdd')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_Deposit SET IsDepositSync = 1 WHERE DepositId IN (' + @ReferenceIds + ')')
	END	

	 7
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'DepositReturn')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_Deposit SET IsDepositSync = 1 WHERE DepositId IN (' + @ReferenceIds + ')')
	END	

	 8
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CashDiscount')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_Settlements SET IsCashDiscountSync = 1 WHERE SettlementId IN (' + @ReferenceIds + ')')
	END

	------------------------updates incetive txn transferred records---------------
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'ConsultantIncentive')
	BEGIN
	EXECUTE ('UPDATE INCTV_TXN_IncentiveFractionItem SET IsTransferToAcc = 1 WHERE InctvTxnItemId IN (' + @ReferenceIds + ')')
	END

	END
	ELSE  -- IF ReverseTransaction is true, update IsTransferredToACC is null, undo transaction done by super admin
	BEGIN
	---------Reverse transaction entry Started--------------------
	----------------update pharmacy transaction transferred records--------------------------------------

	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE PHRM_GoodsReceipt SET IsTransferredToACC = NULL	 WHERE GoodReceiptId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE PHRM_GoodsReceipt SET IsTransferredToACC = NULL WHERE GoodReceiptId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoice1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = NULL WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoice2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = NULL WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoice1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = NULL WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoice2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_Invoice SET IsTransferredToACC = NULL WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoiceReturn1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = NULL WHERE InvoiceReturnId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashInvoiceReturn2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = NULL WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoiceReturn1')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = NULL WHERE InvoiceReturnId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditInvoiceReturn2')
	BEGIN
	EXECUTE ('UPDATE PHRM_TXN_InvoiceReturnItems SET IsTransferredToACC = NULL WHERE InvoiceId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCashReturnToSupplier')
	BEGIN
	EXECUTE ('UPDATE PHRM_ReturnToSupplier SET IsTransferredToACC = NULL WHERE ReturnToSupplierId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMCreditReturnToSupplier')
	BEGIN
	EXECUTE ('UPDATE PHRM_ReturnToSupplier SET IsTransferredToACC = NULL WHERE ReturnToSupplierId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMWriteOff')
	BEGIN
	EXECUTE ('UPDATE PHRM_WriteOff SET IsTransferredToACC = NULL WHERE WriteOffId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMDispatchToDept')
	BEGIN
	EXECUTE ('UPDATE PHRM_StockTxnItems SET IsTransferredToACC = NULL WHERE StockTxnItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'PHRMDispatchToDeptReturn')
	BEGIN
	EXECUTE ('UPDATE PHRM_StockTxnItems SET IsTransferredToACC = NULL WHERE StockTxnItemId IN (' + @ReferenceIds + ')')
	END

	----------------------updates inventory txn transaferred records--------------------------------

	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceipt1')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceipt2')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCreditGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCreditPaidGoodReceipt')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCreditGoodReceiptFixedAsset')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceiptFixedAsset1')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVCashGoodReceiptFixedAsset2')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_GoodsReceiptItems SET IsTransferredToACC = NULL WHERE GoodsReceiptItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVWriteOff')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_WriteOffItems SET IsTransferredToACC = NULL WHERE WriteOffId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVReturnToVendorCashGR')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_ReturnToVendorItems SET IsTransferredToACC = NULL WHERE ReturnToVendorItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVReturnToVendorCreditGR')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_ReturnToVendorItems SET IsTransferredToACC = NULL WHERE ReturnToVendorItemId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVDispatchToDept')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = NULL WHERE StockTransactionId IN (' + @ReferenceIds + ')')
	END
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVDispatchToDeptReturn')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = NULL WHERE StockTransactionId IN (' + @ReferenceIds + ')')
	END

	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'INVDeptConsumedGoods')
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = NULL WHERE StockTransactionId IN (' + @ReferenceIds + ')')
	END
	IF ((@ReferenceIds IS NOT NULL or @ReferenceIdsOne is not null)
	AND @TransactionType = 'INVStockManageOut')
	here we have 2 tables for INVStockManageOut
	BEGIN
	EXECUTE ('UPDATE INV_TXN_StockTransaction SET IsTransferredToACC = null WHERE StockTransactionId IN (' + @ReferenceIdsOne + ')')
	EXECUTE ('UPDATE WARD_INV_Transaction SET IsTransferToAcc = null WHERE TransactionId IN (' + @ReferenceIds + ')')
	END
	------------------------updates billing txn transferred records---------------

	IF (@ReferenceIds IS NOT NULL
	  AND @TransactionType = 'BillingRecords' AND @TransactionDate is not null)
	BEGIN
	  EXECUTE ('UPDATE BIL_SYNC_BillingAccounting SET IsTransferedToAcc = NULL WHERE ReferenceId IN (' + @ReferenceIds + ') and  convert(date,TransactionDate) = convert(date,'+''''+ @TransactionDate +''''+')') 
	END

	 1
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CashBill')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_BillingTransactionItems SET IsCashBillSync = NULL WHERE BillingTransactionItemId IN (' + @ReferenceIds + ')')
	END

	 2
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CreditBill')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_BillingTransactionItems SET IsCreditBillSync = NULL WHERE BillingTransactionItemId IN (' + @ReferenceIds + ')')
	END	

	 3
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CreditBillPaid')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_BillingTransaction SET IsCreditBillPaidSync = NULL WHERE BillingTransactionId IN (' + @ReferenceIds + ')')
	END	

	 4
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CashBillReturn')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_InvoiceReturnItems SET IsCashBillSyncToAcc = NULL WHERE BillReturnItemId IN (' + @ReferenceIds + ')')
	END	

	 5
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CreditBillReturn')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_InvoiceReturnItems SET IsCreditBillSyncToAcc = NULL WHERE BillReturnItemId IN (' + @ReferenceIds + ')')
	END	

	 6
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'DepositAdd')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_Deposit SET IsDepositSync = NULL WHERE DepositId IN (' + @ReferenceIds + ')')
	END	

	 7
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'DepositReturn')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_Deposit SET IsDepositSync = NULL WHERE DepositId IN (' + @ReferenceIds + ')')
	END	

	 8
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'CashDiscount')
	BEGIN
	EXECUTE ('UPDATE BIL_TXN_Settlements SET IsCashDiscountSync = NULL WHERE SettlementId IN (' + @ReferenceIds + ')')
	END

	------------------------updates incetive txn transferred records---------------
	IF (@ReferenceIds IS NOT NULL
	AND @TransactionType = 'ConsultantIncentive')
	BEGIN
	EXECUTE ('UPDATE INCTV_TXN_IncentiveFractionItem SET IsTransferToAcc = NULL WHERE InctvTxnItemId IN (' + @ReferenceIds + ')')
	END

	END
	END


GO
/****** Object:  StoredProcedure [dbo].[SP_VACC_GetAllVaccinationPatInfo]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[SP_VACC_GetAllVaccinationPatInfo]
AS
/*
 FileName: [SP_VACC_GetAllVaccinationPatInfo] 
 Created: 2-Oct'21/Sud 
 Description: To Get Only the vaccination patients with VisitInformation
 Remarks: 
 -----------------------------------------------------------------------
 Change History
 -----------------------------------------------------------------------
 S.No.    Date/User                       Remarks
 -----------------------------------------------------------------------
 1.       2-Oct'21/Sud                    inital draft
           
 -----------------------------------------------------------------------
*/
BEGIN

Declare @VaccDepartmentName varchar(200) = (Select top 1 ParameterValue from CORE_CFG_Parameters where ParameterName='immunizationdeptname' 
                                             and ParameterGroupName='Common')

Declare @DeptId INT=(Select Top(1) DepartmentId from MST_Department where DepartmentName=@VaccDepartmentName)

select pat.PatientId, 
      pat.ShortName AS PatientName,
	  pat.PatientCode,
	  pat.DateOfBirth,
	  pat.Gender,
	  pat.Address,
	  pat.MotherName,
	  pat.VaccinationRegNo,
	  '' as DepartmentName,
	  vaccVisits.PatientVisitId,
	  vaccVisits.VisitDate,
	  vaccVisits.VisitTime,
	  -Taking Date value from VisitDate and Time value from VisitTime and clubbing them together--
	  CAST(Convert(Date, vaccVisits.VisitDate) as DATETIME) + CAST(vaccVisits.VisitTime AS DATETIME) AS VisitDateTime,
	  pat.EthnicGroup,
	  pat.FatherName,
	  vaccVisits.UserName,
	  pat.VaccinationFiscalYearId,
	  pat.CountrySubDivisionId,
	  pat.CountryId

from PAT_Patient pat
  LEFT JOIN 
  (
     gets only visit of Immunization Department for each Patient---
    Select PatientId, PatientVisitId, VisitCode, VisitDate, VisitTime, row_num, UserName
      from 
      (
      SELECT 
         ROW_NUMBER() OVER (
			PARTITION BY patientid
			ORDER BY patientvisitid desc
         ) row_num,
         PatientId, PatientVisitId,VisitCode, VisitDate, VisitTime, emp.FullName AS UserName

      FROM 
         PAT_PatientVisits vis INNER JOIN EMP_Employee emp
		      on vis.CreatedBy = emp.EmployeeId
		 Where vis.DepartmentId=@DeptId --this value comes from parameter+department table .
      ) A
	where row_num=1 --gets only the latest visit of each patient

  ) vaccVisits
  ON pat.PatientId = vaccVisits.PatientId



  where IsVaccinationPatient=1 and vaccVisits.PatientVisitId is not null
  order by VisitDateTime desc

END

GO
/****** Object:  StoredProcedure [dbo].[SP_Vaccination_Baby_PatientList]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 =============================================
 Author:		<Anish Bhattarai>
 Create date: <24 March>
 Description:	<Get the existing patient list in Vaccination Module Patient Search>
 =============================================
CREATE PROCEDURE [dbo].[SP_Vaccination_Baby_PatientList]  
@SearchTxt varchar(200) = ''
AS

BEGIN

declare @twoYearsBack date;
set @twoYearsBack = Convert(date,DATEADD(year, -2, GETDATE())); 
	Select 
	pat.PatientId,
	pat.PatientCode,
	pat.Age,
	pat.ShortName,
	pat.DateOfBirth,
	pat.Gender,
	pat.PhoneNumber,
	pat.Address,
	pat.VaccinationRegNo,
	pat.EthnicGroup,
	pat.FatherName,
	pat.MotherName,
	pat.CountryId,
	pat.CountrySubDivisionId
from PAT_Patient pat 
where (COALESCE(pat.IsVaccinationActive, 0) = 0)  and pat.DateOfBirth IS NOT NULL and (COALESCE(pat.IsVaccinationPatient, 0) = 0) 
and (Convert(date,pat.DateOfBirth) > @twoYearsBack) and (pat.ShortName like '%' + ISNULL(@SearchTxt,'') + '%' or pat.PatientCode like '%' + ISNULL(@SearchTxt,'') + '%')
END

GO
/****** Object:  StoredProcedure [dbo].[SP_VISIT_SetNGetQueueNo]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_VISIT_SetNGetQueueNo]
  @VisitId int
AS
/*
 File: SP_VISIT_SetNGetQueueNo -- EXEC SP_VISIT_SetNGetQueueNo 4
 Description: 
    * To set the QueueNumber for current visit based on Queuelevel parameter 
	* there are 3 available options: department, doctor, hospital (default)

Change History:
-------------------------------------------------------------------------------------------------
S.No  Author/Date                Remarks
-------------------------------------------------------------------------------------------------
1.    Sud/Pratik/5Mar'20         Initial Draft
2.	  Anish/Anjana/26Feb'21		Handle case of registration of ER patient before outpatient
3.    Prem						Queue For the emergency 
-------------------------------------------------------------------------------------------------
*/
BEGIN
 
Read and set QueueLevel value from parameter
Declare @QueueLevel varchar(20)=(Select TOP 1 ParameterValue from CORE_CFG_Parameters where ParameterGroupName='Appointment' and ParameterName='QueueLevel')

Declare @DoctorId INT, @DepartmentID INT, @VisitDate DATE
Declare @LatestQuNum INT=0

Assign Values of DoctorId, DepartemntId, VisitDate for current visit.
SELECT @DoctorId=ProviderId, @DepartmentID=DepartmentId , @VisitDate= COnvert(Date,VisitDate)
from PAT_PatientVisits WHERE PatientVisitId=@VisitId

case1: if departmentlevel then take max that department for that day of visit
IF(@QueueLevel='department')
BEGIN
   SELECT @LatestQuNum = ISNULL(MAX(ISNULL(QueueNo,0)),0)
   FROM PAT_PatientVisits
   WHERE (VisitType='outpatient' OR VisitType='emergency') AND DepartmentId=@DepartmentID 
     AND COnvert(Date,VisitDate)= @VisitDate 
END
case2: if doctorlevel then take max that doctor for that day of visit
ELSE IF (@QueueLevel='doctor')
BEGIN
   SELECT @LatestQuNum = ISNULL(MAX(ISNULL(QueueNo,0)),0)
   FROM PAT_PatientVisits
   WHERE (VisitType='outpatient' OR VisitType='emergency') AND ProviderId=@DoctorId 
     AND COnvert(Date,VisitDate)= @VisitDate 
END
ELSE--case3: by default it'll be hospital level, in this case take max of that day's visit
BEGIN
   SELECT @LatestQuNum = ISNULL(MAX(ISNULL(QueueNo,0)),0)
   FROM PAT_PatientVisits
   WHERE (VisitType='outpatient' OR VisitType='emergency') AND COnvert(Date,VisitDate)= @VisitDate 
END

Update the queue numebr of given visit and return the same to the caller---
SET @LatestQuNum=@LatestQuNum+1
UPDATE PAT_PatientVisits
SET QueueNo=@LatestQuNum
WHERE PatientVisitId=@VisitId
SELECT @LatestQuNum AS 'QueueNo'

END

GO
/****** Object:  StoredProcedure [dbo].[sp_WardInformation]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_WardInformation]
	
AS
/*
FileName: [sp_WardInformation]
CreatedBy/date: Sagar/2017-05-25
Description: to get name of ward with total bed available, occupied 
Remarks:    
Change History
-----------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-----------------------------------------------------
1       sagar/2017-05-25	                     created the script
2       umed / 2017-06-14                        Modify the script i.e because table is change so i have to alter the sp  

------------------------------------------------------
*/
BEGIN
SELECT ward.WardName, 
case when  ward.IsActive='true' and bd.IsActive='true' and bf.IsActive='true' then Count(bd.BedID) 
						else 0  end AS TotalBeds,
      
       Available=sum(case when bd.BedId is null then 0
	                      when bd.IsOccupied = 1 and bd.IsActive='true' and ward.IsActive='true' and bf.IsActive='true' then 0
	                      when IsOccupied=0 and bd.IsActive='true' and ward.IsActive='true' and bf.IsActive='true' then 1 else 0  end),
	   Occupied=sum(case when bd.BedId is null then 0
	                      when bd.IsOccupied = 1 and bd.IsActive='true' and ward.IsActive='true' and bf.IsActive='true' then 1
	                      when IsOccupied=0 and bd.IsActive='true' and ward.IsActive='true' and bf.IsActive='true' then 0 else 0  end),
      bf.IsActive

   FROM ADT_Bed bd
   	 right join ADT_MST_Ward ward on ward.WardID = bd.WardId 
     inner join	ADT_MAP_BedFeaturesMap Map ON Map.BedId = bd.BedID 
	 inner join ADT_MST_BedFeature bf on map.BedFeatureId=bf.BedFeatureId 
GROUP BY ward.WardName,ward.IsActive,bd.IsActive,bf.IsActive
END

GO
/****** Object:  StoredProcedure [dbo].[SP_WardInv_Report_ConsumptionReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardInv_Report_ConsumptionReport]  
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardInv_Report_ConsumptionReport]
CreatedBy/date: Rusha/06-25-2019
Description: To get the Consumption Details of Inventory Items Consume by Ward
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/07-12-2019						only show consumable items 
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			SELECT CONVERT(date,con.CreatedOn) AS [Date], con.DepartmentName, con.ItemName,con.Quantity,con.UsedBy AS [User], con.Remark 
			FROM WARD_INV_Consumption as con
			JOIN INV_MST_Item as itm on itm.ItemId = con.ItemId
			WHERE con.StoreId = @StoreId and CONVERT(date, con.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			AND itm.ItemType = 'Consumables' 
		END		
END

GO
/****** Object:  StoredProcedure [dbo].[SP_WardInv_Report_RequisitionDispatchReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardInv_Report_RequisitionDispatchReport]  
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardInv_Report_RequisitionDispatchReport]
CreatedBy/date: Rusha/06-04-2019
Description: To get stock details of requisition and dispatch from ward to inventory
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------

--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			select convert(date,reqitm.CreatedOn) as RequisitionDate, convert(date,disitm.CreatedOn) as DispatchDate,
			itm.ItemName,reqitm.Quantity as RequestQty,
			reqitm.ReceivedQuantity, reqitm.PendingQuantity, disitm.DispatchedQuantity,reqitm.Remark
			from INV_TXN_RequisitionItems as reqitm
			join INV_TXN_Requisition as req on req.RequisitionId = reqitm.RequisitionId
			left join INV_TXN_DispatchItems as disitm on disitm.DispatchItemsId = reqitm.RequisitionItemId
			join INV_MST_Item as itm on itm.ItemId = reqitm.ItemId
			where req.StoreId = @StoreId and CONVERT(date, reqitm.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
		END		
End
GO
/****** Object:  StoredProcedure [dbo].[SP_WardInv_Report_TransferReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardInv_Report_TransferReport]  		
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardInv_Report_TransferReport]
CreatedBy/date: Rusha/06-05-2019
Description: To get the details of stock transfer from ward to inventory 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------

--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			SELECT CONVERT(date,trans.CreatedOn) AS [Date],dep.DepartmentName,itm.ItemName,trans.Quantity,trans.Remarks, trans.CreatedBy 
			FROM WARD_INV_Transaction AS trans
			JOIN WARD_INV_Stock AS stk ON stk.StockId = trans.StockId
			JOIN MST_Department AS dep ON dep.DepartmentId = stk.DepartmentId
			JOIN INV_MST_Item AS itm ON itm.ItemId = stk.ItemId		
			WHERE stk.StoreId = @StoreId and CONVERT(date, trans.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
		END	
END
-END: 28 Feb 2020 -- refactoring of existing table to support substore implementation


-Start: 2 Mar 2020 -- refactoring of existing table to support substore implementation
GO
/****** Object:  StoredProcedure [dbo].[SP_WardReport_BreakageReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardReport_BreakageReport]  		
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardReport_BreakageReport]
CreatedBy/date: Rusha/03-26-2019
Description: To get the Details of Breakage Items From different Ward 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/03-29-2019					   get details of breakage items
2.		Sanjit/02-03-2020						substore integration
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL) and (@StoreId IS NOT NULL))
		BEGIN
			select convert(date,transc.CreatedOn) as [Date], ItemName, transc.Quantity,stk.MRP,
			Round(stk.MRP*transc.Quantity,2,0) as TotalAmt,transc.Remarks 
			FROM WARD_Transaction as transc
			join PHRM_MST_Item as itm on transc.ItemId=itm.ItemId
			join WARD_Stock as stk on transc.StockId=stk.StockId and transc.ItemId = stk.ItemId 
			where transc.StoreId = @StoreId and TransactionType = 'BreakageItem' and CONVERT(date, transc.CreatedOn) 
			BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by convert(date,transc.CreatedOn), itm.ItemName, transc.Quantity,transc.Remarks,stk.MRP,transc.Quantity
		END	
End

GO
/****** Object:  StoredProcedure [dbo].[SP_WardReport_ConsumptionReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardReport_ConsumptionReport]  
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardReport_ConsumptionReport]
CreatedBy/date: Rusha/03-26-2019
Description: To get the Consumption Details of Items From different Ward 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/03-29-2019					   add stock details of consumed item from different ward
2.		Sanjit/02-03-2020						substore integration
3.      Rajib/02-26-2020						Update InvoiceItemId
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL) and (@StoreId IS NOT NULL))
		BEGIN
			select CONVERT(date,consum.CreatedOn) as [Date], consum.ItemName, gene.GenericName, consum.Quantity as Quantity 
			FROM WARD_Consumption as consum 
			join PHRM_MST_Item as itm on consum.ItemId=itm.ItemId
			join PHRM_MST_Generic as gene on  itm.GenericId=gene.GenericId
			where consum.StoreId = @StoreId and CONVERT(date, consum.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by CONVERT(date,consum.CreatedOn),consum.ItemName,consum.Quantity, gene.GenericName,consum.InvoiceItemId
		END		
END
GO
/****** Object:  StoredProcedure [dbo].[SP_WardReport_InternalConsumptionReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardReport_InternalConsumptionReport]  
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardReport_InternalConsumptionReport] '2018-01-01', '2020-02-18',2
CreatedBy/date: Rajib/02-10-2020
Description: To get the Internal Consumption Details of Items From different Ward 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rajib/2/18/2020							Update StoreId
2.		Rajib/2/26/2020							Update ConsumptionItemId
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)and (@StoreId IS NOT NULL) )
		BEGIN
			select CONVERT(date,consum.CreatedOn) as [ConsumedDate], depitm.DepartmentName,consumitem.ItemName, consum.ConsumedBy, consumitem.Quantity as Quantity 
			from WARD_InternalConsumption as consum 
			join WARD_InternalConsumptionItems as consumitem on consum.ConsumptionId=consumitem.ConsumptionId
			join MST_Department as depitm on consum.DepartmentId=depitm.DepartmentId
			where consum.SubStoreId = @StoreId and CONVERT(date, consum.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by CONVERT(date,consum.CreatedOn),depitm.DepartmentName,consumitem.ItemName,consum.ConsumedBy,consumitem.Quantity,consumitem.ConsumptionItemId
		END		
End
GO
/****** Object:  StoredProcedure [dbo].[SP_WardReport_RequisitionReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_WardReport_RequisitionReport]  
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
AS
/*
FileName: [SP_WardReport_RequisitionReport] '1/7/2020','1/7/2020'
CreatedBy/date: Rusha/03-26-2019
Description: To get the Requsition and Dispatch Details of Stock such as WardName, ItemName, BatchNo, RequestedQty, MRP of Each Item Selected By User 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/03-26-2019					   get stock details of requisition and dispatch of item from different ward
2.		Sanjit/01-09-2020					   added requested by user and dispatched by user and receivedby user.
3.		Sanjit/03-20-2020					   substore integration
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL))
		BEGIN
			select req.RequisitionId,disp.DispatchId,convert(date,req.CreatedOn) as RequestedDate,
			convert(date,dispitm.CreatedOn) as DispatchDate, itm.ItemName,sum(reqitm.Quantity) as RequestedQty,
			sum(dispitm.Quantity) as DispatchQty,dispitm.MRP, ROUND(sum(dispitm.Quantity)*dispitm.MRP, 2, 0) as TotalAmt,
			(select FullName from EMP_Employee as emp1 where emp1.EmployeeId = req.CreatedBy) as 'RequestedByUser',
			(select FullName from EMP_Employee as emp2 where emp2.EmployeeId = dispitm.CreatedBy) as 'DispatchedByUser',
			disp.ReceivedBy as 'ReceivedBy'
			from WARD_Requisition as req
			join WARD_RequisitionItems as reqitm on req.RequisitionId= reqitm.RequisitionId
			join PHRM_MST_Item as itm on reqitm.ItemId= itm.ItemId
			left join WARD_Dispatch as disp on req.RequisitionId = disp.RequisitionId and req.StoreId = disp.StoreId
			left join WARD_DispatchItems as dispitm on reqitm.RequisitionItemId=dispitm.RequisitionItemId and disp.DispatchId = dispitm.DispatchId
			where req.StoreId = @StoreId and CONVERT(date, req.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by convert(date,req.CreatedOn),convert(date,dispitm.CreatedOn),reqitm.Quantity,itm.ItemName, dispitm.MRP, 
			dispitm.Quantity,req.CreatedBy,dispitm.CreatedBy,req.RequisitionId,disp.DispatchId,disp.ReceivedBy,dispitm.DispatchItemId
		END		
End

GO
/****** Object:  StoredProcedure [dbo].[SP_WardReport_StockReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardReport_StockReport]  
	    @ItemId int = null	, @StoreId int = null	
AS
/*
FileName: [SP_WardReport_StockReport]
CreatedBy/date: Rusha/03-24-2019
Description: To get the Stock Details Such As ItemName, BatchNo, AvailableQty of Each Item Selected By User 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/03-24-2019					   shows stock details by item wise
2.		Sanjit/02-03-2020					   substore integration
--------------------------------------------------------------------------
*/

BEGIN
  IF (@ItemId !=0)
		BEGIN
			select gen.GenericName,itm.ItemName,ward.BatchNo,sum(AvailableQuantity) as Quantity,ward.ExpiryDate, MRP from WARD_Stock as ward 
			join PHRM_MST_Item as itm on ward.ItemId= itm.ItemId 
			join PHRM_MST_Generic as gen on itm.GenericId = gen.GenericId  
			where itm.ItemId =@ItemId and ward.StoreId = @StoreId
			group by ItemName, MRP ,GenericName, ward.BatchNo, ward.ExpiryDate
		END	
		else if (@ItemId =0)	
		begin 
		select gen.GenericName,itm.ItemName,ward.BatchNo,sum(AvailableQuantity) as Quantity,ward.ExpiryDate, MRP from WARD_Stock as ward 
			join PHRM_MST_Item as itm on ward.ItemId= itm.ItemId 
			join PHRM_MST_Generic as gen on itm.GenericId = gen.GenericId
			where ward.StoreId = @StoreId
			where itm.ItemId  like '%'+isnull (@ItemId,'')+'%'
			group by ItemName, MRP,GenericName, ward.BatchNo, ward.ExpiryDate
		end
End

GO
/****** Object:  StoredProcedure [dbo].[SP_WardReport_TransferReport]    Script Date: 4/12/2025 9:35:48 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_WardReport_TransferReport]  		
	@FromDate datetime=null,
	@ToDate datetime=null,
	@StoreId int = null
	@Status int = null					--Ward to Ward report is shown in case of 1 and Ward to Pharmacy report in case of 0	
AS
/*
FileName: [SP_WardReport_TransferReport] '1/7/2020','1/8/2020',13
CreatedBy/date: Rusha/03-26-2019
Description: To get the Details of report of Ward to Ward Tranfer and Ward to Pharmacy Trannsfer of stock 
Remarks:    
Change History
--------------------------------------------------------------------------
S.No.    UpdatedBy/Date                        Remarks
-------------------------------------------------------------------------
1.		Rusha/03-29-2019						shows report of Ward to ward transfer and ward to pharmacy transfer
2.		Sanjit/01-09-2020						added Received by field in both transfer cases.
3.		Sanjit/05-22-2020						corrected Date format
--------------------------------------------------------------------------
*/

BEGIN
  IF ((@FromDate IS NOT NULL) and (@ToDate IS NOT NULL)) 
		BEGIN
		if (@Status = 1)
			select convert(date,transc.CreatedOn) as [Date],ItemName, transc.Quantity as TransferQty, Remarks,transc.CreatedBy as 'TransferedBy',transc.ReceivedBy as 'ReceivedBy' from WARD_Transaction as transc
			join PHRM_MST_Item as itm on transc.ItemId=itm.ItemId
			where TransactionType = 'WardtoWard' and CONVERT(date, transc.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by itm.ItemName, transc.Quantity,transc.Remarks, convert(date,transc.CreatedOn),transc.CreatedBy,transc.ReceivedBy
		
		else if (@Status =0)
			(select convert(varchar,transc.CreatedOn) as [Date],ItemName, transc.Quantity as TransferQty,transc.Remarks,transc.CreatedBy as 'TransferedBy',transc.ReceivedBy as 'ReceivedBy' 
			from WARD_Transaction as transc
			join PHRM_MST_Item as itm on transc.ItemId=itm.ItemId
			where transc.StoreId = @StoreId and TransactionType = 'WardToPharmacy' and CONVERT(date, transc.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by itm.ItemName, transc.Quantity,transc.Remarks,transc.CreatedOn,transc.CreatedBy,transc.ReceivedBy
			)

		else
			select convert(date,transc.CreatedOn) as [Date],ItemName, transc.Quantity as TransferQty, Remarks,transc.CreatedBy as 'TransferedBy',transc.ReceivedBy as 'ReceivedBy' from WARD_Transaction as transc
			join PHRM_MST_Item as itm on transc.ItemId=itm.ItemId
			where TransactionType in ('WardToPharmacy','WardtoWard') and CONVERT(date, transc.CreatedOn) BETWEEN ISNULL(@FromDate,GETDATE())  AND ISNULL(@ToDate,GETDATE())+1
			group by itm.ItemName, transc.Quantity,transc.Remarks, convert(date,transc.CreatedOn),transc.CreatedBy,transc.ReceivedBy
		END	
END
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'It like hospital code with transaction id i.e. HAMS_TransactionId , 
It will be null when comes from inventory' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ACC_Transactions', @level2type=N'COLUMN',@level2name=N'VoucherNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'OldNewMedicineType represents 1.New Medicines, 2. Old medicines to be continued, 3.Old medicines to be stopped' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ADT_DischargeSummaryMedication', @level2type=N'COLUMN',@level2name=N'OldNewMedicineType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Comman seperated id of table PHRM_SaleItems' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PHRM_Requisition', @level2type=N'COLUMN',@level2name=N'ReferenceId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Shows leave status of the employee like pending, cancel, approved, approvedCancel' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PROLL_EmpLeave', @level2type=N'COLUMN',@level2name=N'LeaveStatus'
GO
